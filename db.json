{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/img/thumbnail.svg","path":"img/thumbnail.svg","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1596174618448},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1596174634269},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1596174634216},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1596174634270},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1596174634270},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1596174634271},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1596174634305},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1596174634272},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1596174634272},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1596174634273},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1596174634273},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1596174634274},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1596174634280},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1596174634281},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1596174634281},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1596174634282},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1596174634283},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1596174634283},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1596174634284},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1596174634300},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1596174634301},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1596174634301},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1596174634302},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596174634303},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1596174634304},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1596174634304},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1596174634306},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1596174634285},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1596174634286},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1596174634287},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1596174634287},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1596174634288},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1596174634289},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1596174634290},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1596174634290},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1596174634291},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1596174634291},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1596174634296},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1596174634297},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1596174634298},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1596174634298},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1596174634299},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1596174634300},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1596174634307},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1596174634317},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1596174634328},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596174634330},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596174634331},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596174634332},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596174634333},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596174634334},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596174634335},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1596174634339},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1596174634340},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1596174634341},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1596174634342},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1596174634292},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1596174634293},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1596174634294},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1596174634294},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1596174634295},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1596174634296},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1596174634309},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1596174634310},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1596174634310},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1596174634311},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1596174634312},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1596174634313},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1596174634314},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1596174634313},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1596174634314},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1596174634315},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1596174634316},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1596174634316},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1596174634319},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1596174634319},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1596174634324},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596174634336},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1596174634336},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1596174634337},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1596174634337},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1596174634338},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1596174634339},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1596174634323},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1596174634321},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1596174634327},{"_id":"public/2020/07/31/hello-world/index.html","hash":"145f4794085263ad36d0a48b759c63607bd54328","modified":1596343343623},{"_id":"public/archives/index.html","hash":"f3463481c4b162ae99f9eb3d938a8ac534dea1bc","modified":1597123892801},{"_id":"public/archives/2020/index.html","hash":"549283db18850b7e2491b677d6d385d5fd328c50","modified":1597123892801},{"_id":"public/archives/2020/07/index.html","hash":"ae63f5aa0930ddac324122f2ec59feaa61d5ff70","modified":1596364848072},{"_id":"public/index.html","hash":"fc5873d7025bec81c35d4640b716c5b82a2c52d8","modified":1596794492960},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1596176563304},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1596176563304},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1596176563304},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1596176563304},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1596176563304},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1596176563304},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1596176563304},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1596176563304},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1596176563304},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1596176563304},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1596176563304},{"_id":"public/css/style.css","hash":"c4018cbab3b1fbe7fffa232abc5c0e770fe0d28f","modified":1596430024838},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1596176563304},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1596176563304},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1596176563304},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1596176563304},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1596176563304},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1596176563304},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1596176563304},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1596176563304},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1596176563304},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1596176563304},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1596176563304},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"5340c994462c7345373e075529f40e60c1952f00","modified":1596177591208},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1596177591209},{"_id":"themes/hexo-theme-matery/README.md","hash":"1cc9e51fc2cd62e482197b8a3764fe338778a0fd","modified":1596177591210},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"436bbde98e84d7fa17d3df73115aa1efad059fdf","modified":1596368022207},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"9baf9370d0d7494e8575934e4bd0fa6d24484052","modified":1596177591213},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"13ce732a54ce08b0ca01f14fd09cbe8fc418de21","modified":1596177591213},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"162136ceca6c95928c90a1adef8fabc2161d5c0e","modified":1596177591214},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"3229fd9dd7bbcde003fd3b984da076f7092d7aaa","modified":1596177591211},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1596177591250},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"88e23163aae5dff7a2e7050f55c3754f0e76ae68","modified":1596177591248},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"57733d52d17361e735fcc95f875e0b1b9ebdcbd8","modified":1596177591249},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"4ac716d15d84e7c37f07308a5ec008a2ac090c9b","modified":1596177591251},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1596177591252},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"e9716a948172e6ad46c18cc7e78770cdc46f1857","modified":1596177591252},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"3cabb8e3680858c1412277def37bdef73981be0f","modified":1596177591253},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1596177591256},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"e179c72cb4eef88e5168cadafa2e1c3b46fd1486","modified":1596177591254},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3783bb4d7807e3a3701d67499a878c69a0a872d6","modified":1596177591255},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1596177591261},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"058eb27ff10f5314d8b9e334c54419b9a6572315","modified":1596177591255},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"d6692f8c81013191fce59f47df1b6171649181ca","modified":1596177591241},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"131e2eabf6b216210efd0746300889adfee357be","modified":1596177591240},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"3ef458166041a8a12e493cc5963a5af5d98c1dfc","modified":1596177591240},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"8fc0e6172abbed7084b06e3ed637ad37e2752c48","modified":1596177591241},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"f5259f18a906f2862fe72b90c28125b5f6b7d0b1","modified":1596177591242},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"fb5ee7674070956d134ddca6890a9bd3f398cc0f","modified":1596177591244},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"141f19a8aa41b7a21436f23ce114bd5fda932512","modified":1596177591243},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"9edbeb1ec6212762d597ae7a05b5a219f72c8f98","modified":1596177591244},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"416f2f47f34df031fe4eef050fc21a2de06fdb83","modified":1596177591246},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"be527741c39c9dc4a13ad712b49fe8db0147fe1e","modified":1596177591216},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"6eaab5fccff9ad69d1d877a0f0585e2fcb89ba52","modified":1596177591248},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"4b01030b7136192bdbd704e29a0fe12f92767551","modified":1596177591216},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2841870e0c625787de348221e5ddb7bbe99ec5a2","modified":1596177591217},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"20f0b6155eee348276dd91790f6a52b1005a0518","modified":1596177591245},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1596177591219},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"d32898104477acef56c33d00a68b48db15dcf2e6","modified":1596177591246},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"58a7a07f8ab81ecc19a78d897955ca1ad73defb3","modified":1596177591218},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"03dcd0a7a9fdbcc2bc38a99a8fad96ae17a340fa","modified":1596177591247},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"1b392f2160f962f62f3ddf5e1155c7f2f4888e1d","modified":1596177591219},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"78228c5e91fc2e6fed6949d971bf78a1f5081812","modified":1596177591220},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"27764936791ce36b527bea63689435346bbfb425","modified":1596177591221},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1596177591223},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1596177591221},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"adaeca6ae9064c41047c3fb4f8bd046b736ae457","modified":1596177591223},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90888c945384aa1ee4650bd43bd7ea670f25828c","modified":1596177591222},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"6dc2522bc03b65d0b421a643b21a78a59c8213c1","modified":1596177591225},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"4bcdbd27273dd1b7098d4cfa6479b5d6b138cd12","modified":1596177591224},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1596177591225},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"e1264587db510ae1885405aed433592291ae74c4","modified":1596177591226},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"8ce2974b19765e1f05d935a4f18abf7c84a980da","modified":1596177591227},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"d8773abab5d0b672b70a9df20a8f9f7f6b0a2dae","modified":1596177591228},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"5a2179a9a3de6f56b0aaa154a11919b8f34fcbf9","modified":1596177591228},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"7f583c935253e2bf6421791715ee9de4989add6e","modified":1596177591229},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ea50a5669847740894d5737a6330bf1013ae2e65","modified":1596177591230},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"e50fae64b6cfdbed18861eb49eca5018a920c7a4","modified":1596177591237},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"de0d5763ddd64463f43135678b64c044884b8406","modified":1596177591232},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"8ad8a7ec3f6438af496c51fd6bef1684e158a9ef","modified":1596177591230},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"908ddab5b5d5662c50b46ada0e03e06fe0a6c310","modified":1596177591234},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"f640583d45179abc1ef57951e7f61fb9e10f44c9","modified":1596177591238},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"f67bc52bc5a2464ebe30f42c65c0ee38eeec2fda","modified":1596177591235},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1596177591258},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"ef335be75e3f26580583af8699b8497f350ae200","modified":1596177591238},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"90c2ab31492f8226454537d6b987e9399119047d","modified":1596177591235},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1596177591260},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"b3c32b573a4a9ef3dfeffbd544a9c3f451e67a54","modified":1596177591260},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"cfc146a8fcc3efef02cdaf7d59b4a5781235392d","modified":1596177591259},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"c5f1a2de30363f370c8c37994140d6ef4fd0c4b7","modified":1596177591236},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"ddfef10e80a09b8efb48c52ede773e71d5890c78","modified":1596177591262},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1596177591263},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1596177591382},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1596177591369},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1596177591414},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1596177591265},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1596177591415},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1596177591266},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1596177591269},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1596177591268},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1596177591267},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"d2569ef80127ed2f4af7ef4d9f82b037794eec69","modified":1596177591306},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"8f53dbd5f9a40c377664bf8ca0d5d5ed75b91757","modified":1596177591307},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1596177591308},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1596177591310},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1596177591308},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6ab7871d36cab438bbd4d781bc1fe7618b46b6e7","modified":1596177591310},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1596177591315},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"9c0bacfbd4519d3859e3bbb06128ba241804d8b1","modified":1596177591325},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"3edbe498f7bb9e7daa77f9db30e1b5eeab40e067","modified":1596177591312},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"043eba3c85c2e2009a9fabf3c4fc55537852fd86","modified":1596177591330},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"066d2c89ad429e44f6467b9267da782ccaad57de","modified":1596177591311},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1596177591331},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1596177591327},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1596177591348},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1596177591332},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1596177591313},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1596177591353},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9783581bec83e6bd6cd279f0af23a2862f46a587","modified":1596177591363},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1596177591354},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1596177591355},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1596177591364},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1596177591388},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1596177591392},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1596177591395},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1596177591396},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1596177591401},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1596177591404},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1596177591405},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1596177591406},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1596177591407},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1596177591411},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1596177591412},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"3a06ed2389a7caf2a7775d82f2e5418694309f68","modified":1596363859501},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"73674b82e04f2b165121c76a12d611ae8a2337a4","modified":1596363704901},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1596177591409},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1596177591286},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1596177591288},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1596177591289},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1596177591290},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1596177591335},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1596177591337},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1596177591347},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1596177591340},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1596177591357},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1596177591343},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1596177591343},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1596177591344},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1596177591358},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1596177591346},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1596177591359},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1596177591359},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1596177591360},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"de34668d902ec082d17ddb6dd7ad24255fb547c5","modified":1596177591362},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1596177591340},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1596177591341},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"ba635a17a9d9d132369f9fe4b1fbcaf001ea6ac9","modified":1596177591362},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1596177591316},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1596177591329},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"a8927ac2830b2fdd4a729eb0eb7f80923539ceb9","modified":1596177591334},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1596177591371},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d6c03e8c3e547b5f48878081d10559b80f626948","modified":1596177591365},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1596177591374},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1596177591376},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1596177591387},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1596177591386},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1596177591391},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1596177591393},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1596177591389},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1596177591397},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1596177591398},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1596177591400},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1596177591403},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1596177591408},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1596177591413},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"6390d0a6e6211ebbd68b49759b4dec8b2a9f04c9","modified":1596177591270},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1596177591410},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1596177591273},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1596177591283},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1596177591282},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1596177591284},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1596177591304},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1596177591305},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1596177591383},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"7a3534269fd922d722a76c3affefc68e21246898","modified":1596177591326},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1596177591350},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1596177591352},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1596177591372},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"9cb4babc20eb8fb5a86c4b0cc894fdb0f3cd9534","modified":1596177591368},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1596177591379},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1596177591381},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1596177591287},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1596177591293},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1596177591303},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1596177591378},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1596177591323},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1596177591279},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1596177591300},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1596193921918},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1596193921918},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1596193921918},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1596193921918},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1596193921918},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1596193921918},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1596193921918},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1596193921918},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1596193921918},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1596193921918},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1596193921918},{"_id":"public/medias/reward/alipay.jpg","hash":"3a06ed2389a7caf2a7775d82f2e5418694309f68","modified":1596364228577},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1596193921918},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1596193921918},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"67d261ac428761389c895e1da73664e633e14a72","modified":1596193921918},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1596193921918},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1596193921918},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1596193921918},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1596193921918},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1596193921918},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1596193921918},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1596193921918},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1596193921918},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1596193921918},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1596193921918},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1596193921918},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1596193921918},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1596193921918},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1596193921918},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1596193921918},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1596193921918},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1596193921918},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1596193921918},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1596193921918},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1596193921918},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1596193921918},{"_id":"public/medias/reward/wechat.png","hash":"73674b82e04f2b165121c76a12d611ae8a2337a4","modified":1596364228577},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1596193921918},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1596193921918},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1596193921918},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1596193921918},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1596193921918},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1596193921918},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1596193921918},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1596193921918},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1596193921918},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1596193921918},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1596193921918},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1596193921918},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1596193921918},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1596193921918},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1596193921918},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1596193921918},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1596193921918},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1596193921918},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1596193921918},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1596193921918},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1596193921918},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1596193921918},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1596193921918},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1596193921918},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1596193921918},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1596193921918},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1596193921918},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1596193921918},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1596193921918},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1596193921918},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1596193921918},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1596193921918},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1596193921918},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1596193921918},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1596193921918},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1596193921918},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1596193921918},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1596193921918},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1596193921918},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1596193921918},{"_id":"public/css/matery.css","hash":"87bd1dacf48c9daab7ea43466368247f1e4107d1","modified":1596193921918},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1596193921918},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1596193921918},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1596193921918},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1596193921918},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1596193921918},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1596193921918},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1596193921918},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1596193921918},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1596193921918},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1596193921918},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1596193921918},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1596193921918},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1596193921918},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1596193921918},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1596193921918},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1596193921918},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1596193921918},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1596193921918},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1596193921918},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1596193921918},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1596193921918},{"_id":"source/about/index.md","hash":"b6f1760f2fd422e412854d92808071606a3db26b","modified":1596361550265},{"_id":"source/categories/index.md","hash":"09e7018e58f49bb6440d597e8588d7561a36ace8","modified":1596361550277},{"_id":"source/tags/index.md","hash":"dbb754e32814e3d9b7e1bed0e18b9858d3c12d24","modified":1596361550292},{"_id":"public/tags/index.html","hash":"20dfa0b4b752318d6e34158825871dfd2f1cf24d","modified":1596794492960},{"_id":"public/categories/index.html","hash":"9cb5c444add8d7680b3b0104120283a710392198","modified":1596794492960},{"_id":"public/about/index.html","hash":"2b507113dc4f2d3b59c5792055c2f63da3e88ada","modified":1596794492960},{"_id":"source/404.md","hash":"738a7b0b389227041c7168117ba5c0cf14682602","modified":1596278135883},{"_id":"source/_data/friends.json","hash":"8b454e8017b9fe5f257c8c75c5a39666198bf99d","modified":1596361550253},{"_id":"source/contact/index.md","hash":"551ddadece9093655bea12bab26148c02dd47299","modified":1596361550282},{"_id":"source/friends/index.md","hash":"af0d9b9f61c9d617e9f83699f80e35bfc7e5b22d","modified":1596361550286},{"_id":"public/search.xml","hash":"ae5d4b8e83132c198f7fb7a4877368a709760f3e","modified":1596411785599},{"_id":"public/404.html","hash":"e6fcbec3762302ba68e44e9e085ccc85241d406f","modified":1596794492960},{"_id":"public/contact/index.html","hash":"02ec932a9bc2b68e663c5ddcc0b1b1cebb87b6ec","modified":1596794492960},{"_id":"public/friends/index.html","hash":"6f5ba692e45672d2be6cc03e5eb14579ad0cf2b9","modified":1596794492960},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1596279496616},{"_id":"source/_posts/IDEA/idea工具的使用.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573560100085},{"_id":"source/_posts/IDEA/利用IDEA明明导入了包却显示缺少保留相关类.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1590197503613},{"_id":"source/_posts/Kotlin学习/数据类型.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568602172612},{"_id":"source/_posts/Linux入门/Untitled.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596164933196},{"_id":"source/_posts/企业级电商项目/mysql数据库的安装与配置.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1568795342509},{"_id":"source/_posts/项目实战/微人事项目管理/01 Spring Boot入门.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1595051163589},{"_id":"source/_posts/项目实战/微人事项目管理/需求文档.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594189891034},{"_id":"source/_posts/项目实战/编写开源库/PermissionX权限管理库.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1594721607246},{"_id":"source/_posts/Android学习/3-1网络访问.md","hash":"8c5ebda5ee4818425a46799fb02a21a9efd91ee8","modified":1596017590560},{"_id":"source/_posts/Android学习/3-2-1安装Apache服务器.md","hash":"e04cdc3d3d550736dba11467fcc7e954e80d9ce9","modified":1596032020063},{"_id":"source/_posts/Android学习/3-2网络访问-数据格式.md","hash":"d04497740d3f5a1d3526011e4feb44766a9f2163","modified":1596074049435},{"_id":"source/_posts/Android学习/3-3 封装网络请求.md","hash":"ebcc25c9a7bd2cf4d5b8a0e9076b2c000aa1f6b8","modified":1596076356490},{"_id":"source/_posts/Android学习/3-4 开源网络封装库Retofit .md","hash":"9dee81e816a06f2d0c2bdf01b812df6275174fa3","modified":1596077889062},{"_id":"source/_posts/Android学习/Android Studio使用技巧.md","hash":"ba988965904834971b77137a8ca6d8e1f16d4ad5","modified":1595307929182},{"_id":"source/_posts/Android学习/BottomNavigationView控件学习md.md","hash":"334b5b25ea6cf71fa3899ae764f7aecc585b5df6","modified":1568794000629},{"_id":"source/_posts/Android学习/Jetpack.md","hash":"1512c9328378b72af90247e04e32dccb5c404f77","modified":1595999949064},{"_id":"source/_posts/Android学习/使用 ViewModel 处理配置更改.md","hash":"53defe6cedfc2cb9de915dccff4ce26dd105e172","modified":1595313241753},{"_id":"source/_posts/Android学习/代码框架.xmind","hash":"86173c4afdde0456395ae718d8550be4d43e5cce","modified":1569151163548},{"_id":"source/_posts/Android学习/基础学习.md","hash":"9f3bc231cbbd09a32a23706f37b95e4527c2cb97","modified":1595311535937},{"_id":"source/_posts/Android学习/视图导航.md","hash":"64445cd5273c5f26b67a91e899dd60427a76937f","modified":1595291531063},{"_id":"source/_posts/Bitnami虚拟机/1-1 安装bitnami虚拟机.md","hash":"45e5b5458f5b99b27231869ad810d25ca9c1fe3c","modified":1596082178556},{"_id":"source/_posts/Bitnami虚拟机/1-2 连接SSH.md","hash":"02783ebf010068d7bb3b51e6ed26fb1e650f96c4","modified":1596167066740},{"_id":"source/_posts/Bitnami虚拟机/1-3 安装桌面.md","hash":"3b8b491acead3d71f492024fb7d8f25faf66211d","modified":1596168000619},{"_id":"source/_posts/Bitnami虚拟机/2-1文档学习.md","hash":"3b50e5eec23db607a7d8ee0304bb8d074b1d4440","modified":1596080152746},{"_id":"source/_posts/Bitnami虚拟机/简介.md","hash":"d120f200fb73371bd106e6ec7d1705682699306d","modified":1596167585880},{"_id":"source/_posts/Docker学习/1-1-安装.md","hash":"b948ca7317d2d57c013c5399ec861d3538425c78","modified":1594130769833},{"_id":"source/_posts/Docker学习/1-2-常用操作.md","hash":"2451581ea5a1cbc42653c630484993c1c8b74da4","modified":1594176738309},{"_id":"source/_posts/Git学习/1-1 Git 设置和配置 .md","hash":"127ecea04e31a91b053117320600598ceae03a69","modified":1596205431295},{"_id":"source/_posts/Git学习/2-1 Git忽略文件.md","hash":"72232446bf62974a33895358cb8507d15e394630","modified":1596012730565},{"_id":"source/_posts/Git学习/2-2 Git获取和创建项目.md","hash":"4b2058791c029ffd12f6f5effad031e52dd29b28","modified":1596206419710},{"_id":"source/_posts/Git学习/3-1 关键命令.md","hash":"a388060b8ec196b2d583387ad1ec3d63e9e318b4","modified":1596362181066},{"_id":"source/_posts/Git学习/3-2 添加.md","hash":"88352126b7cf71f081ba7ff6f247401c34f79cf7","modified":1596206550168},{"_id":"source/_posts/IDEA/IDEA中Tomcat日志乱码.md","hash":"dbcf48c0170dba28019927660bf6a30c7fc0c444","modified":1586952460734},{"_id":"source/_posts/IDEA/idea报java版本错误解决方法.md","hash":"01666c892897799b8bebed007f0df8745a97bc22","modified":1588140716103},{"_id":"source/_posts/IDEA/创建代码块模板.md","hash":"4a0c6043229171d76027e9ec75136d63046daa49","modified":1569050043889},{"_id":"source/_posts/IDEA/利用IDEA学习编程语言.md","hash":"3edaa1a4cd0c31f0fcd0b452d536b76cfecbbdb2","modified":1594290214633},{"_id":"source/_posts/IDEA/快捷键.md","hash":"6e7a37495ddd6805afe73fb5bbd4af647e922c06","modified":1595486419350},{"_id":"source/_posts/IDEA/插件使用.md","hash":"625d298b0b4c11beac847cf4feb9950e9f467a26","modified":1594719445510},{"_id":"source/_posts/Junit/junit简介.md","hash":"af4970f71e483a4974572ad1e5fe4d39d0e602f7","modified":1595570402003},{"_id":"source/_posts/Kotlin学习/1.学习网址.md","hash":"b317a3c8341de9c3c1b34603b6e42503d71ddd4a","modified":1596015217526},{"_id":"source/_posts/Kotlin学习/入门基础学习.md","hash":"42203b153def8b62652ac7fa1145db56a556c873","modified":1594697926626},{"_id":"source/_posts/Kotlin学习/入门简介.md","hash":"ecba884fe00a95a1e7fe13c53704716611b06577","modified":1594299687591},{"_id":"source/_posts/Linux入门/1-2 CentOS镜像使用帮助.md","hash":"79ab830972d05c54a897162f601d6b07add6bb36","modified":1568381182219},{"_id":"source/_posts/Linux入门/2-1阿里云服务器远程登录密码.md","hash":"8d2bb3f15700d862f5a38a51b238602a8600fa0c","modified":1568117376538},{"_id":"source/_posts/Linux入门/Centos虚拟机网络连接问题.md","hash":"9c578946acf651f9f535346927c04b47366bdd96","modified":1568120986107},{"_id":"source/_posts/Linux入门/LINUX设置防火墙.md","hash":"2d2b8079e0464ef6b164935ca5ffb0abeb1b5108","modified":1596165089497},{"_id":"source/_posts/Linux入门/Linux准备工作.md","hash":"3ad37c65098cfb331a131d0db7faf1d85fd495d2","modified":1568120962263},{"_id":"source/_posts/Linux入门/Nat连接网络.md","hash":"02217a89926c09d7ba04beaf840058993dd47573","modified":1572747412809},{"_id":"source/_posts/Linux入门/Nginx简介.md","hash":"7b7864837b83257306e2c7cfb7f5b27177f4b040","modified":1569513447402},{"_id":"source/_posts/Linux入门/Readis安装及配置.md","hash":"bd100fc532934133ee3d5a281289248312dfffeb","modified":1569418375338},{"_id":"source/_posts/Linux入门/iptables的学习.md","hash":"527e861afd0b4cc72db687595ea12767858e8c35","modified":1568375694247},{"_id":"source/_posts/Linux入门/mysql安装.md","hash":"965795b3bfc697eea1e0fbe71edcb70510a3ad96","modified":1569751696715},{"_id":"source/_posts/Linux入门/nat.PNG","hash":"78c0c9d8f4e941a7a3a65a82e88904f4211cb3b3","modified":1572747326491},{"_id":"source/_posts/Linux入门/用户操作.md","hash":"17d7a584cf2de27bd44861a2788168efb86384e0","modified":1568380366931},{"_id":"source/_posts/Linux入门/文件命令操作md.md","hash":"bcf850858e3d40318ffad9ffe2724f75e8664860","modified":1568292982138},{"_id":"source/_posts/Linux入门/防火墙的设置.md","hash":"a5c34d0f6ad2714061d6bd9ea23ecf9596d85fe4","modified":1596165060051},{"_id":"source/_posts/Redis学习/1-1-安装.md","hash":"e883568b63a684c6a73f027618505e3b26ddeda2","modified":1595589873365},{"_id":"source/_posts/Maven和Gradle/index.md","hash":"b2ff6f590f10f2054d0104667dbca4d45309ecec","modified":1595568273700},{"_id":"source/_posts/Redis学习/1-2-Redis启动.md","hash":"8b7e3404deba860860bec2795ba5f29516ddfb02","modified":1595548759619},{"_id":"source/_posts/Redis学习/2-1-数据结构.md","hash":"3abc66ba69659552f8166e165511aa4c293951bd","modified":1595941083657},{"_id":"source/_posts/Redis学习/2-2 数据结构的常用命令.md","hash":"127e74b388b6d68fa6ded9a65a42ee770e926f6a","modified":1595943958420},{"_id":"source/_posts/Redis学习/3-1分布式锁.md","hash":"148d1ada980a7938be04c827699923064ffd7679","modified":1595840595529},{"_id":"source/_posts/Redis学习/3-2 Lua脚本.md","hash":"b95d5fa6da342c1504b06efd6bbef9fe4dd8438e","modified":1595845195521},{"_id":"source/_posts/Redis学习/3-3 消息队列.md","hash":"ea15829e211ec91e6ea341280473d11187eb5c9e","modified":1595938245938},{"_id":"source/_posts/Redis学习/Java客户端.md","hash":"803baf6f46a87400f217eb42af583a4834ceb189","modified":1595498351907},{"_id":"source/_posts/Redis学习/简介.md","hash":"aefa2cfdcd40c82ddcf666ab8f597b419a5e41d2","modified":1595474478199},{"_id":"source/_posts/Redis学习/错误问题.md","hash":"a4196a901b42228d72a04661d7a35a9cf083b50a","modified":1595548655149},{"_id":"source/_posts/MySQL8.0/从安装到卸载.md","hash":"8569bc478b347a6f622e8a23fd7a467dbc0235e6","modified":1570628142468},{"_id":"source/_posts/MySQL8.0/初始化密码.md","hash":"8135766fa0d8b7cc21bd441fb4522af88638c150","modified":1570622387483},{"_id":"source/_posts/Spring/spring注解.md","hash":"5a63134ccbeb00ff153e02acf6b7d4d91c447e6f","modified":1572353302704},{"_id":"source/_posts/images/ip.PNG","hash":"78b2b58739f3aaa89a01c84fe76fb090131248cb","modified":1568120320484},{"_id":"source/_posts/java_web/Filter.md","hash":"317a8c68aeeb43b73602dc6144ddb7ac03c50bf7","modified":1568367343542},{"_id":"source/_posts/java_web/Linux.md","hash":"66e40e43426935beb0ea97783e1e3df03a5a1874","modified":1590896764823},{"_id":"source/_posts/java_web/IO流编程.xmind","hash":"82e64e6dd05127133d1bfee7c9c940ca232cf306","modified":1573901791386},{"_id":"source/_posts/java_web/Linux学习.xmind","hash":"0c6973bbb17cd06b0bb9eb4a34e1a32926ef6503","modified":1572960689945},{"_id":"source/_posts/java_web/MyBatis框架.md","hash":"5c50f43f96089c3fdd13d6ea4657794d19187132","modified":1590896758736},{"_id":"source/_posts/java_web/Nginx学习.xmind","hash":"48dab121ec19d7fc6aea1241d8f96ef2d62283c8","modified":1573049942841},{"_id":"source/_posts/java_web/Spring入门.md","hash":"10bf7c03a564b50b8dec73aadc81ec24ca603c4c","modified":1590896609899},{"_id":"source/_posts/java_web/java网络编程.xmind","hash":"a88a2809082c0e53f38dd84da76899e54b29ec7e","modified":1573555330585},{"_id":"source/_posts/java_web/linux常用命令.md","hash":"84d5960c506a06b5c6f66479dabaf3a687808035","modified":1590896737605},{"_id":"source/_posts/java_web/多线程编程.md","hash":"8b26c9199965f41564c125dd214ef5caf9e7fc95","modified":1590896779080},{"_id":"source/_posts/java_web/多线程编程.xmind","hash":"9632ca9d555c76120aab12b0cdda5743c9b9a794","modified":1572687220875},{"_id":"source/_posts/java_web/字节流与字符流.md","hash":"0e6012fdee07a587a295f87b867a852186fd987d","modified":1590896689370},{"_id":"source/_posts/java_web/字节流与字符流.xmind","hash":"054a745e7984987633ccabdd5de2dbe77fca0998","modified":1573983919217},{"_id":"source/_posts/java_web/线性代数学习.xmind","hash":"c39182c96e58e0b045722f77a9d52286fbfca761","modified":1573274193997},{"_id":"source/_posts/企业级权限管理/框架搭建.md","hash":"3ff355c28f8e8c2a06a0d3ab9d1087d23a62f69a","modified":1569393731553},{"_id":"source/_posts/企业级电商项目/LINUX设置防火墙.md","hash":"2d2b8079e0464ef6b164935ca5ffb0abeb1b5108","modified":1568378167373},{"_id":"source/_posts/企业级电商项目/iptables的学习.md","hash":"527e861afd0b4cc72db687595ea12767858e8c35","modified":1594296424988},{"_id":"source/_posts/企业级电商项目/vsftpd.md","hash":"536e314bda088a3f8f88f08b1b285603596af2dd","modified":1568279222437},{"_id":"source/_posts/Android学习/imgs/1.PNG","hash":"5bca4f166eebfc3068727977f44d071d4682da42","modified":1568793044428},{"_id":"source/_posts/Android学习/imgs/2.PNG","hash":"dd79176764c2ed1b8f6c1aea7ab7da7e42560a5e","modified":1568793422092},{"_id":"source/_posts/Android学习/imgs/2_1.PNG","hash":"a4c07eed5798210e8bf72e013dcf87c2490d20d9","modified":1568793575492},{"_id":"source/_posts/Android学习/imgs/3.PNG","hash":"460eb84b336bdbb9423a2f256b1820414d5e0373","modified":1568793494145},{"_id":"source/_posts/Android学习/imgs/4.PNG","hash":"844c8319daf1de3ae60161996a0b2d6d1c15f35e","modified":1568793526446},{"_id":"source/_posts/GitHub学习/创建个人博客/1-1简介.md","hash":"28f3c9a98ad6e6c6bc961f1ef40d27ba392c3d9d","modified":1596197209503},{"_id":"source/_posts/Docker学习/image/image-20200707220336806.png","hash":"21de78136f38718a4d7fb214ef1e0fa2cc592cb9","modified":1594130639786},{"_id":"source/_posts/Docker学习/image/image-20200708113748295.png","hash":"a4071056fd0223c7881b22b95a508389af3b55b3","modified":1594179476812},{"_id":"source/_posts/Docker学习/image/image-20200708114704238.png","hash":"43316a7c7bf70a57667bd85096efa51450fd7493","modified":1594180031313},{"_id":"source/_posts/Docker学习/image/image-20200708121651755.png","hash":"91cd0ed79c4187d6668ee19ff9b19619095f1489","modified":1594181816114},{"_id":"source/_posts/Docker学习/image/image-20200708122451427.png","hash":"f3d33cae1df0c662130c1ec4eb8db0070a24e4b1","modified":1594182295202},{"_id":"source/_posts/Docker学习/image/image-20200708123652649.png","hash":"2e1749f416f3adf565f710b29045ff4bcdb33ea8","modified":1594183016916},{"_id":"source/_posts/Docker学习/image/image-20200708152004367.png","hash":"a3c64ca84aa3579b603b657ebd37df158e495cfc","modified":1594192809149},{"_id":"source/_posts/IDEA/images/1.PNG","hash":"b41ec4886ff8ffe54b668d93547b739ee1be2e30","modified":1568034871246},{"_id":"source/_posts/IDEA/images/image-20200709163822684.png","hash":"de5ec75d9796a07077933bc4f76d8e9eea8092a2","modified":1594284237940},{"_id":"source/_posts/IDEA/images/pv.PNG","hash":"b542cc7156ca5c9a7e7385e9d90a5656ce13c577","modified":1569049959083},{"_id":"source/_posts/Redis学习/images/image-20200708152004367.png","hash":"a3c64ca84aa3579b603b657ebd37df158e495cfc","modified":1594192900323},{"_id":"source/_posts/Redis学习/images/image-20200708152723373.png","hash":"4636e573a218182cef9ee5253eb349c615067c5f","modified":1594193249985},{"_id":"source/_posts/Spring/SPring源码学习/Spring Framework简介.md","hash":"214a1391b6e8e8b36908b1a1c975d9a8686fd47f","modified":1594271722651},{"_id":"source/_posts/Spring/SPring源码学习/问题总结.md","hash":"beb5b0a113605c889193bc5ee7a46f26e82b053e","modified":1594274792978},{"_id":"source/_posts/Spring/Spring-Mybatis项目/1-1 入门学习.md","hash":"55cc296ed94a70a8d50e6a74497d9b8d8b8231c1","modified":1595663285353},{"_id":"source/_posts/Spring/SpringTest/学习记录（一）.md","hash":"0b34681d4a84aa0e28b506e73e212ac7b860ab9e","modified":1595560998419},{"_id":"source/_posts/Spring/images/image-20200709140540967.png","hash":"fb9818ed329169e19026c2f73e3f6077c3e3af30","modified":1594274774179},{"_id":"source/_posts/images/github图片测试/image-20200709175912678.png","hash":"93038e2fd448657b740e0f53cc8056c08e50ce14","modified":1594288752713},{"_id":"source/_posts/images/github图片测试/image-20200709180942230.png","hash":"708f6f309f57a331eed4e3b5d863e3f3b98c128e","modified":1594289382238},{"_id":"source/_posts/images/github图片测试/image-20200709181849872.png","hash":"2d417249fcbe42e0dc7a778f90c0ebcaf64fa680","modified":1594289929908},{"_id":"source/_posts/项目实战/Kotlin开发电商app/2-1android moudle与libery切换.md","hash":"e1c9035de041edf14337081e0607a77694750aa0","modified":1595914522527},{"_id":"source/_posts/项目实战/天气预报App/前期准备.md","hash":"6f36a44400069a105128114bbdea0e803f353293","modified":1594721770545},{"_id":"source/_posts/项目实战/天气预报App/功能需求与技术可行性分析.md","hash":"8e39442b83f5847fefc927e36c4b47bfb0930906","modified":1594718086184},{"_id":"source/_posts/项目实战/微人事项目管理/项目知识点.md","hash":"79712ec8b46cb1015f78e640535dc3194712baab","modified":1594192454333},{"_id":"source/_posts/项目实战/淘淘商城项目实战/1-1-安装环境.md","hash":"873cf9adf9c1b26d0fcedd52f56a4e6a906b13af","modified":1594177307954},{"_id":"source/_posts/项目实战/淘淘商城项目实战/项目前期构建.md","hash":"9f51d3d6945fd0863fe9c2e9d582511487afe829","modified":1594176476054},{"_id":"source/_posts/Android学习/images/3-2网络访问-数据格式/image-20200729183205497.png","hash":"d52e7708db884bf5ca8836ae641b52d5bddbb8ad","modified":1596018725516},{"_id":"source/_posts/Android学习/images/3-2网络访问-数据格式/image-20200729183731141.png","hash":"7e167793b37a288af41dd97c8e5b9dc72ee03e6f","modified":1596019051156},{"_id":"source/_posts/Android学习/images/3-2网络访问-数据格式/image-20200729183918461.png","hash":"7e167793b37a288af41dd97c8e5b9dc72ee03e6f","modified":1596019158545},{"_id":"source/_posts/Android学习/images/3-2网络访问-数据格式/image-20200729223542261.png","hash":"4aa937e82530530d9ad2eff95ac830798e59f030","modified":1596033342333},{"_id":"source/_posts/Android学习/images/Android Studio使用技巧/image-20200718112818773.png","hash":"5de7190fdd986d66fbf2907266cda595b04eee8f","modified":1595307901934},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200718112818773.png","hash":"5de7190fdd986d66fbf2907266cda595b04eee8f","modified":1595042898784},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200721154242410.png","hash":"ac6dfe1d96a3442ed841bdc9f0ed5cb893bc6fb5","modified":1595317362439},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200722073351427.png","hash":"bc259633a24338f5b074aa3f56167cd91f620089","modified":1595374431436},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200722131636968.png","hash":"cc46384b699aeda03e2db828e5223d2612492b2f","modified":1595394997083},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200722134519104.png","hash":"d2e4dbdff95a6078993fc6b4ca91633d65b72372","modified":1595396719148},{"_id":"source/_posts/Android学习/images/Untitled/image-20200717175604505.png","hash":"32ed326214a5e241fb276c7b95b8de1851981eff","modified":1594979764551},{"_id":"source/_posts/Android学习/images/基础学习/image-20200721130945421.png","hash":"b43fc644df0b89229e1f4f95847bcdbb129b3ccc","modified":1595308185465},{"_id":"source/_posts/Android学习/images/基础学习/image-20200721131037492.png","hash":"bc18cdfcc25383908faf5552d0b4cfa02baa7ee8","modified":1595308237508},{"_id":"source/_posts/Android学习/images/视图导航/image-20200721082851327.png","hash":"29c10ecff99016b7a4e8156737763a577be21b30","modified":1595291331330},{"_id":"source/_posts/Android学习/images/视图导航/image-20200721082952691.png","hash":"a2a39c0c19eeaea6fcbecc739805dc6e1a6720ef","modified":1595291392753},{"_id":"source/_posts/Android学习/images/视图导航/image-20200721083022645.png","hash":"7b05df2e47c16ba4edb3c5ecdfb080d52362ee66","modified":1595291422684},{"_id":"source/_posts/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114146505.png","hash":"e188ea68f6e184d6096e5ffbf8381f3b52369530","modified":1596080506532},{"_id":"source/_posts/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114825464.png","hash":"a0da3b2404540e3846aae2c82b3b4e5d673cbe51","modified":1596080905480},{"_id":"source/_posts/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730120745221.png","hash":"f0472c9bd6ff97785c9e066814d500faf1f48368","modified":1596082065241},{"_id":"source/_posts/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730120842595.png","hash":"50597bc67151e4e6080d24b1c30009bfc7b9a3a3","modified":1596082122639},{"_id":"source/_posts/Bitnami虚拟机/images/1-2 连接SSH/image-20200731114408221.png","hash":"4c3aadc56de19c73b0687f6f123c28f1bcd67cda","modified":1596167048224},{"_id":"source/_posts/GitHub学习/创建个人博客/Hexo/1-1 简介.md","hash":"dc9fabbb50d348b40c920f6850f2c94ded1cdf15","modified":1596202738585},{"_id":"source/_posts/GitHub学习/创建个人博客/Hexo/2-1 配置主题.md","hash":"a20c795bb7239d4158e450fc8e03bb39788730e0","modified":1596279192917},{"_id":"source/_posts/GitHub学习/创建个人博客/github pages/1-1 简介.md","hash":"bb72ab6a6eb23d344d65ea2db31364a9dddad858","modified":1596172294101},{"_id":"source/_posts/IDEA/images/插件使用/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png","hash":"122c7d3f4ec4545eb4e6a983ccb0da34a685139a","modified":1594712521757},{"_id":"source/_posts/IDEA/images/插件使用/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png","hash":"b1440dc1034cb4b22b266fea2cd7c642d98ab04d","modified":1594712500972},{"_id":"source/_posts/IDEA/images/插件使用/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png","hash":"5a5501c317e27b00933e938385b5878de76a1729","modified":1594712557287},{"_id":"source/_posts/IDEA/images/插件使用/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png","hash":"c2700b30fa9e7e38fb90ff5bc388d2b4d18bc605","modified":1594712502156},{"_id":"source/_posts/IDEA/images/插件使用/search_01.744aa29f671017172e3c9d39263911a6.png","hash":"1ea2df966acd48483fc31efe9cff10bbe65c4f9f","modified":1594712558413},{"_id":"source/_posts/IDEA/images/插件使用/search_05.efa49d39678c3f178d2f2f81b514a90d.png","hash":"c74be69dafd09d1b6b30a9260c1df780e85d3d70","modified":1594712558907},{"_id":"source/_posts/IDEA/images/插件使用/search_07.1617b0baceaa44778ff1d527ded0fd0d.png","hash":"478352ebbaa85ce8171ff81ec6be9f7a8ea77a3b","modified":1594712558644},{"_id":"source/_posts/IDEA/images/插件使用/search_10.80466706a44b4b8ae23706269ad9d3c5.png","hash":"4f1b28bb26348ba6d45a344c9e181179797427f3","modified":1594712558450},{"_id":"source/_posts/Redis学习/images/1-2-Redis启动/image-20200723140632512.png","hash":"92acccff5f413d82896fb9591ad46b17c351656a","modified":1595548737977},{"_id":"source/_posts/Redis学习/images/1-2-Redis启动/image-20200723141553131.png","hash":"8b1007e2376320b2ddfc415d68083d129d73deb0","modified":1595548737975},{"_id":"source/_posts/Redis学习/images/1-2-Redis启动/image-20200723141850375.png","hash":"fd5b623b97305bb6d2cee2642b977ced988965db","modified":1595548737976},{"_id":"source/_posts/Redis学习/images/3-2 Lua脚本/image-20200725105545715.png","hash":"eebf12ec65735dc35389c3921d19d0d4c8388077","modified":1595645745771},{"_id":"source/_posts/Redis学习/images/3-2 Lua脚本/image-20200725110256564.png","hash":"c01d9749ff06c485a5fcff9c404bce73c4971bd1","modified":1595646176568},{"_id":"source/_posts/Redis学习/images/3-2 Lua脚本/image-20200725113303421.png","hash":"99e90bd16f53b812c27ab95495ac9fb083d260d3","modified":1595647983426},{"_id":"source/_posts/Redis学习/images/3-2 Lua脚本/image-20200727174113640.png","hash":"2a7c1556e10580f281b4bacef43198273ea36d27","modified":1595842873683},{"_id":"source/_posts/Redis学习/images/3-2 Lua脚本/image-20200727181837205.png","hash":"e6bfa168da122b71a588f2b43dc43cd83c8b82ea","modified":1595845117226},{"_id":"source/_posts/Redis学习/images/3-3 消息队列/image-20200727184633610.png","hash":"095d6b74515d0b52a5dec4d2252b2bca9bcb6e40","modified":1595846793632},{"_id":"source/_posts/Redis学习/images/Java客户端/image-20200723140632512.png","hash":"92acccff5f413d82896fb9591ad46b17c351656a","modified":1595484392513},{"_id":"source/_posts/Redis学习/images/Java客户端/image-20200723141553131.png","hash":"8b1007e2376320b2ddfc415d68083d129d73deb0","modified":1595484953144},{"_id":"source/_posts/Redis学习/images/Java客户端/image-20200723141850375.png","hash":"fd5b623b97305bb6d2cee2642b977ced988965db","modified":1595485130382},{"_id":"source/_posts/Redis学习/images/Java客户端/image-20200723143421382.png","hash":"eee0fc0ac4f89cec9a99de35700abfe95a0314b7","modified":1595486061385},{"_id":"source/_posts/项目实战/天气预报App/images/前期准备/image-20200714172407951.png","hash":"1d0da3b0c32e41be874f893371a6d78292d61c22","modified":1594718647974},{"_id":"source/_posts/java_web/MyBatis框架.xmind","hash":"92b6a80a8e9e32e08406c027d98b93310b3b7fe1","modified":1573045910095},{"_id":"source/_posts/java_web/Redis应用.xmind","hash":"257a2be18c7abb15780a2285b60d0570ea10ea47","modified":1595474503190},{"_id":"source/_posts/java_web/Spring入门.xmind","hash":"e014d894bf501eb44420a1b373882ffc5f1ab586","modified":1569050234213},{"_id":"source/_posts/java_web/linux常用命令.xmind","hash":"d4f72f82307a993d0810e6bb6cc8912a1edebe42","modified":1590896741331},{"_id":"source/_posts/Android学习/images/3-1网络访问/image-20200729175044618.png","hash":"6e067f5309c7622a041658b9b75740b89d02545f","modified":1596016244701},{"_id":"source/_posts/Android学习/images/Android Studio使用技巧/image-20200718112705738.png","hash":"51e3f7c606bc4939e8ab352d42c58a6c8a7a4761","modified":1595307901933},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200718112705738.png","hash":"51e3f7c606bc4939e8ab352d42c58a6c8a7a4761","modified":1595042825776},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200722181709403.png","hash":"99dad076b767d95d4b5cedbc0a7a2f4559b5a25e","modified":1595413029444},{"_id":"source/_posts/Android学习/images/基础学习/image-20200721131000138.png","hash":"c162511a4d7daee42429638793b68763d942b0f0","modified":1595308200155},{"_id":"source/_posts/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114615539.png","hash":"a6858a8170c495bb493457a16ead492dc8ad1ee3","modified":1596080775638},{"_id":"source/_posts/IDEA/images/插件使用/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png","hash":"7014ba8af7db2548be8be98437a578e1a17e4dd9","modified":1594712558943},{"_id":"source/_posts/IDEA/images/插件使用/search_06.7c4f84689dc6759e6ec19403b18a73d6.png","hash":"666a554fc4c18d023265297be156b478c0a3003a","modified":1594712559430},{"_id":"source/_posts/IDEA/images/插件使用/search_08.cc3816166c730ecb6f6e8a27ccc94365.png","hash":"64899d83eef1f17f5664007cd7d6f0af0c22b076","modified":1594712559576},{"_id":"source/_posts/IDEA/images/插件使用/search_09.93af76e45e1601443df91ae031ae19fb.png","hash":"74f4106de16d059f085bd9b7dac13db74763cb59","modified":1594712558977},{"_id":"source/_posts/Kotlin学习/images/1.学习网址/image-20200729173322076.png","hash":"fceb3569994e607027a1ace17169e66e92052f09","modified":1596015202227},{"_id":"source/_posts/Redis学习/images/3-3 消息队列/image-20200728194536819.png","hash":"9ab227fed582b9fd7eab32292bce37d2b74b9673","modified":1595936736934},{"_id":"source/_posts/Redis学习/images/简介/image-20200723112107089.png","hash":"4f1fef764327e21f976d0f2c9f7282e2cbb2540b","modified":1595474467160},{"_id":"source/_posts/Android学习/images/Jetpack/image-20200721153616389.png","hash":"76bfe5dbb92ae324d81e4e4d3ab5b3187c06fbf8","modified":1595316976457},{"_id":"source/_posts/IDEA/images/插件使用/search_04.ae928872ebf259913520f3ba8e543e62.png","hash":"3a50750ec00e4f0ce66d163143c3a0c97e981cc2","modified":1594712582668},{"_id":"source/_posts/GitHub学习/创建个人博客/Hexo/images/2-1 配置主题/image-20200801181325409.png","hash":"e6ced74ff6d6b4e0d3988168cf92cbb5879982ad","modified":1596276805969},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/bian-xie-kai-yuan-ku/permissionx-quan-xian-guan-li-ku/index.html","hash":"319c011457705f60702ce9a3c250619df840c294","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/xiang-mu-qian-qi-gou-jian/index.html","hash":"6a8d82345e28c53233b42c61e54a6a580c76bf33","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/1-1-an-zhuang-huan-jing/index.html","hash":"832095301586a000adf9e011682f0cc4d83ccf64","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xiang-mu-zhi-shi-dian/index.html","hash":"6820f15a50fedb8a891b96fe004a8de55f61d8eb","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xu-qiu-wen-dang/index.html","hash":"c63b540d4682d4e54691e2ca99f07b9138e8410c","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/01-spring-boot-ru-men/index.html","hash":"43b87311e789c5ab50039e9a79a4641a993b8955","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/tian-qi-yu-bao-app/gong-neng-xu-qiu-yu-ji-zhu-ke-xing-xing-fen-xi/index.html","hash":"9003629ddc1dd9050cd97d6365ce5324f0227633","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/tian-qi-yu-bao-app/qian-qi-zhun-bei/index.html","hash":"36f118d027d3e7d4fbd17e5ac85a57b158380772","modified":1596282461381},{"_id":"public/2020/08/01/xiang-mu-shi-zhan/kotlin-kai-fa-dian-shang-app/2-1android-moudle-yu-libery-qie-huan/index.html","hash":"14358c0e6725a74bf34a8ead2f112e9cae1c7087","modified":1596282461381},{"_id":"public/2020/08/01/qi-ye-ji-quan-xian-guan-li/kuang-jia-da-jian/index.html","hash":"85356d555cd2acb84d72faecddce0c1686715499","modified":1596282461381},{"_id":"public/2020/08/01/qi-ye-ji-dian-shang-xiang-mu/vsftpd/index.html","hash":"376bc279d8162d3ab0d1a918e655f8689a8ca8f8","modified":1596282461381},{"_id":"public/2020/08/01/qi-ye-ji-dian-shang-xiang-mu/mysql-shu-ju-ku-de-an-zhuang-yu-pei-zhi/index.html","hash":"2372ebacda92758b32edac2d345d41519bd3f941","modified":1596282461381},{"_id":"public/2020/08/01/qi-ye-ji-dian-shang-xiang-mu/linux-she-zhi-fang-huo-qiang/index.html","hash":"33745f2e25ad580891c9b31eb4ed421491196dac","modified":1596282461381},{"_id":"public/2020/08/01/qi-ye-ji-dian-shang-xiang-mu/iptables-de-xue-xi/index.html","hash":"6b638dddd7a24cdeeafb1a5e6857df5496477d64","modified":1596282461381},{"_id":"public/2020/08/01/spring/spring-yuan-ma-xue-xi/wen-ti-zong-jie/index.html","hash":"593513b60536239f66981d9201f64d1f13f360fa","modified":1596282461381},{"_id":"public/2020/08/01/spring/spring-yuan-ma-xue-xi/spring-framework-jian-jie/index.html","hash":"002febee346b3b3cbad3fbdf38218b45759d14e9","modified":1596282461381},{"_id":"public/2020/08/01/spring/spring-zhu-jie/index.html","hash":"a2f19c867b7522de3cd43e03c174cecafc136eeb","modified":1596282461381},{"_id":"public/2020/08/01/spring/springtest/xue-xi-ji-lu-yi/index.html","hash":"efd7148b551a0ed9d26bc4ebbe0e02e09fe5b961","modified":1596282461381},{"_id":"public/2020/08/01/spring/spring-mybatis-xiang-mu/1-1-ru-men-xue-xi/index.html","hash":"78e430abbfcb51fc0898d45a15d8102c228b1725","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/cuo-wu-wen-ti/index.html","hash":"bfa5e2c6e0091310b04777e92d24c6da57e1b861","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/jian-jie/index.html","hash":"a8dfc96c5830fc133b12ae60bb5d68b73aee5d8f","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/java-ke-hu-duan/index.html","hash":"a15c09a4f40d98dc356f3d32c76d29081c974879","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/3-3-xiao-xi-dui-lie/index.html","hash":"0ff18345183a5272209c3380e9676cfc68ba7102","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/3-2-lua-jiao-ben/index.html","hash":"9f9c2e64651eb1b6f4df7695e5e05032da2e2b32","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/3-1-fen-bu-shi-suo/index.html","hash":"ce4c80014b811999248ab8f2b44c71e1fa97315a","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/2-2-shu-ju-jie-gou-de-chang-yong-ming-ling/index.html","hash":"7baa70a1f123c44532b3a5f5037a8ff12dd81ba4","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/2-1-shu-ju-jie-gou/index.html","hash":"2bc5a6d75129b7bc3153fcc9329645f231c7e755","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/1-2-redis-qi-dong/index.html","hash":"125ceb1ff4f907941be5af110a574d7e9a8ac8d8","modified":1596282461381},{"_id":"public/2020/08/01/redis-xue-xi/1-1-an-zhuang/index.html","hash":"8bcc2afd99ed20e22a4022aa86060f08a69f1be3","modified":1596282461381},{"_id":"public/2020/08/01/mysql8.0/chu-shi-hua-mi-ma/index.html","hash":"51473133b71807cc99a14e0b23560c8b63f63b17","modified":1596282461381},{"_id":"public/2020/08/01/mysql8.0/cong-an-zhuang-dao-xie-zai/index.html","hash":"95fd27f1a1c1bcf1baedebb8dfb558240c395a19","modified":1596282461381},{"_id":"public/2020/08/01/maven-he-gradle/index/index.html","hash":"1a1f1598ff9773ee3eabbab9826106a6c7f38c24","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/fang-huo-qiang-de-she-zhi/index.html","hash":"ffc7afb136986ace836167726155cfe68ae02352","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/yong-hu-cao-zuo/index.html","hash":"a723c8de0324a50aa2aaa1770e416f40f3181ae7","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/wen-jian-ming-ling-cao-zuo-md/index.html","hash":"dca86662b985cdd1e9c20458675579d00027c234","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/untitled/index.html","hash":"72be36b5b921b4acc7269981d45df6664add5636","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/readis-an-zhuang-ji-pei-zhi/index.html","hash":"e0c15a0fd702365ca38bc3711371ea29d581863e","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/nginx-jian-jie/index.html","hash":"74280dc7efac8f38b994f1937c9929d6b9540626","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/nat-lian-jie-wang-luo/index.html","hash":"3800df08b8c7e90de6d39fbdcac1be4ebb16c379","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/mysql-an-zhuang/index.html","hash":"070cec73e2e648fd00ab74455edaaac87b59ea78","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/linux-she-zhi-fang-huo-qiang/index.html","hash":"6b3e309753aa9416daa973ab832c07c3b326edad","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/linux-zhun-bei-gong-zuo/index.html","hash":"81f12bbdda20bcb14d1de6ade3138f61e3295f47","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/iptables-de-xue-xi/index.html","hash":"1930011d593df5a51e8f497e99b8052d63140186","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/centos-xu-ni-ji-wang-luo-lian-jie-wen-ti/index.html","hash":"342e170c7b2d0d1d20514ea77a3f9d2ee5124908","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/2-1-a-li-yun-fu-wu-qi-yuan-cheng-deng-lu-mi-ma/index.html","hash":"d04209b8216eecb38c584a283234a98e74bb51a5","modified":1596282461381},{"_id":"public/2020/08/01/linux-ru-men/1-2-centos-jing-xiang-shi-yong-bang-zhu/index.html","hash":"845b4ccbdf80091350fdb601ceea120b40aafe45","modified":1596282461381},{"_id":"public/2020/08/01/kotlin-xue-xi/shu-ju-lei-xing/index.html","hash":"f30aba496eaa757e18c4b46bd286fa5105fed00a","modified":1596282461381},{"_id":"public/2020/08/01/kotlin-xue-xi/ru-men-jian-jie/index.html","hash":"1d212c7b171ddd6f79d976b8760ea553c9a52f60","modified":1596282461381},{"_id":"public/2020/08/01/kotlin-xue-xi/ru-men-ji-chu-xue-xi/index.html","hash":"3736fb2c7105633414e533bace5fe43d8147fa33","modified":1596282461381},{"_id":"public/2020/08/01/kotlin-xue-xi/1.xue-xi-wang-zhi/index.html","hash":"4fa842b40cb5e876ab73e544d3563f2789dea55c","modified":1596282461381},{"_id":"public/2020/08/01/junit/junit-jian-jie/index.html","hash":"88cd530465a469fac51bf2eb5d4ad081686dcac2","modified":1596282461381},{"_id":"public/2020/08/01/java-web/zi-jie-liu-yu-zi-fu-liu/index.html","hash":"35175451a36b6f69470e4ea1fbce634ba74e4c49","modified":1596282461381},{"_id":"public/2020/08/01/java-web/duo-xian-cheng-bian-cheng/index.html","hash":"667a60032d306d2293959f6af74858284d9b278b","modified":1596282461381},{"_id":"public/2020/08/01/java-web/spring-ru-men/index.html","hash":"30f82b182756bc7255311a1a2600e3870c3d5268","modified":1596282461381},{"_id":"public/2020/08/01/java-web/mybatis-kuang-jia/index.html","hash":"0c12109cc49d58d2253b13f2619ed9013671a5e5","modified":1596282461381},{"_id":"public/2020/08/01/java-web/linux-chang-yong-ming-ling/index.html","hash":"64f2da3c6b61e30756311c2630c1b065a202e27d","modified":1596282461381},{"_id":"public/2020/08/01/java-web/linux/index.html","hash":"da39f634bff3dc859ea78f7e3481e9bc121a6d5b","modified":1596282461381},{"_id":"public/2020/08/01/java-web/filter/index.html","hash":"17bf6825874e14ec47c1008e9ad6eed9e620bcc9","modified":1596282461381},{"_id":"public/2020/08/01/idea/cha-jian-shi-yong/index.html","hash":"e3ee656ce8c8d0bfd5ddaa45b041df3a5a9b9f43","modified":1596282461381},{"_id":"public/2020/08/01/idea/kuai-jie-jian/index.html","hash":"e5398448171856679e2c6ec735a66bbeabf82366","modified":1596282461381},{"_id":"public/2020/08/01/idea/li-yong-idea-ming-ming-dao-ru-liao-bao-que-xian-shi-que-shao-bao-liu-xiang-guan-lei/index.html","hash":"fdb38cd438b0a085a1e8c0e30f26a973408561d2","modified":1596282461381},{"_id":"public/2020/08/01/idea/li-yong-idea-xue-xi-bian-cheng-yu-yan/index.html","hash":"017e19c589ab35c6988c6a8fce0aa9f93728d552","modified":1596282461381},{"_id":"public/2020/08/01/idea/chuang-jian-dai-ma-kuai-mo-ban/index.html","hash":"d422870765b8057d7514abb85878d91bfb3777da","modified":1596282461381},{"_id":"public/2020/08/01/idea/idea-bao-java-ban-ben-cuo-wu-jie-jue-fang-fa/index.html","hash":"f34edd5e020f0e5f8b74fcbcb1f675343c252729","modified":1596282461381},{"_id":"public/2020/08/01/idea/idea-gong-ju-de-shi-yong/index.html","hash":"33391c4f514d601dab0b43c837241062c950d680","modified":1596282461381},{"_id":"public/2020/08/01/idea/idea-zhong-tomcat-ri-zhi-luan-ma/index.html","hash":"ec8f9bc89b3b9bf368e38fd16fc1c92b92bbb2b3","modified":1596282461381},{"_id":"public/2020/08/01/git-xue-xi/3-2-tian-jia/index.html","hash":"3819b09e3673bf73db7ae95f923f851db5e49fb7","modified":1596282461381},{"_id":"public/2020/08/01/git-xue-xi/3-1-guan-jian-ming-ling/index.html","hash":"45517d8b84458c7029ca2e1c96fb5005d5bbd3a7","modified":1596282461381},{"_id":"public/2020/08/01/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/index.html","hash":"035534fd6b578a9ed6b3da66e57e321df11bc0b7","modified":1596282461381},{"_id":"public/2020/08/01/git-xue-xi/2-1-git-hu-lue-wen-jian/index.html","hash":"d0de05f70e6f7b1035cdf649067bfdb2a32f0b18","modified":1596282461381},{"_id":"public/2020/08/01/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/index.html","hash":"3daab90243c8a10c0f1274bd8988a9ca068449b1","modified":1596282461381},{"_id":"public/2020/08/01/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/1-1-jian-jie/index.html","hash":"549ba56677853d2c09956280e5e29cae5a246e4a","modified":1596283185685},{"_id":"public/2020/08/01/github-xue-xi/chuang-jian-ge-ren-bo-ke/github-pages/1-1-jian-jie/index.html","hash":"8b3bf65e6576963a3f8fda4a64c9d5e034e2027b","modified":1596283185685},{"_id":"public/2020/08/01/github-xue-xi/chuang-jian-ge-ren-bo-ke/1-1-jian-jie/index.html","hash":"45d0d47ad7e1cb999cf3a350e13fada4ea7f51df","modified":1596283185685},{"_id":"public/2020/08/01/docker-xue-xi/1-2-chang-yong-cao-zuo/index.html","hash":"7a8304e9cad8fc4d6d07af19f6890957b16c42b4","modified":1596282461381},{"_id":"public/2020/08/01/docker-xue-xi/1-1-an-zhuang/index.html","hash":"1520ccf1fe7ca7fec62768dcf18a452e1144ecdb","modified":1596282461381},{"_id":"public/2020/08/01/bitnami-xu-ni-ji/jian-jie/index.html","hash":"dd808afdcd132046d485d282fb68208789a2e85b","modified":1596282461381},{"_id":"public/2020/08/01/bitnami-xu-ni-ji/2-1-wen-dang-xue-xi/index.html","hash":"e167799a894190087dbe759b69b8bdfb7f5cb20b","modified":1596282461381},{"_id":"public/2020/08/01/bitnami-xu-ni-ji/1-3-an-zhuang-zhuo-mian/index.html","hash":"3fc15b9a3baec46ed8eb1431974ea28a584a8e23","modified":1596282461381},{"_id":"public/2020/08/01/bitnami-xu-ni-ji/1-2-lian-jie-ssh/index.html","hash":"254bd501f4ef0e24239cc1cfd60d646a27087340","modified":1596282461381},{"_id":"public/2020/08/01/bitnami-xu-ni-ji/1-1-an-zhuang-bitnami-xu-ni-ji/index.html","hash":"c16e7e1b35a1b47ea5b852b610a7b956cf03c112","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/shi-tu-dao-hang/index.html","hash":"9bb5e1ce56c166156b8aec09395332479f5f3df2","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/ji-chu-xue-xi/index.html","hash":"c37c5a165de3a4f828bafacdb756b7bff7cdcce3","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/shi-yong-viewmodel-chu-li-pei-zhi-geng-gai/index.html","hash":"ffa1c1cd0564dd8704e46af5b7ef6f7e81c8da6d","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/jetpack/index.html","hash":"34377f52effe1b411e450ca81058d3ec684aa4f9","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/bottomnavigationview-kong-jian-xue-xi-md/index.html","hash":"7be252c47c620c4ca8282243651c7205ef0ce9b1","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/android-studio-shi-yong-ji-qiao/index.html","hash":"cc6e85d46419dea4de80329dcf2f7e2cc24e0d88","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/3-4-kai-yuan-wang-luo-feng-zhuang-ku-retofit/index.html","hash":"cabb80052f9c1e137bf18ad58993d662ee9271c5","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/3-3-feng-zhuang-wang-luo-qing-qiu/index.html","hash":"2d8a8d86272709a3ec9ec0d544e406686af70a78","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/3-2-wang-luo-fang-wen-shu-ju-ge-shi/index.html","hash":"be842abb128b743d91e2c086be60a40964c65ef4","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/3-2-1-an-zhuang-apache-fu-wu-qi/index.html","hash":"4f79f70517103d902e342dbb7694f4813c9cd8d3","modified":1596282461381},{"_id":"public/2020/08/01/android-xue-xi/3-1-wang-luo-fang-wen/index.html","hash":"bcd447587fd85b06006a4b0fc647cdd8423e5235","modified":1596282461381},{"_id":"public/archives/page/2/index.html","hash":"fb9739a7f2960db240ab7eea0a4004bbeaddfdd7","modified":1597123892801},{"_id":"public/archives/page/3/index.html","hash":"eae2d45cdeb78ce75288dab7b622e793f20932f2","modified":1597123892801},{"_id":"public/archives/page/4/index.html","hash":"5703e33aa15d473c5b708e947efb85bdd558ca3f","modified":1597123892801},{"_id":"public/archives/page/5/index.html","hash":"694e7361bcadffd860b732d654fb4d30cd2d8d89","modified":1597123892801},{"_id":"public/archives/page/6/index.html","hash":"7bd3686d6245a09182e2f906b034aac5b09993cd","modified":1597123892801},{"_id":"public/archives/2020/page/2/index.html","hash":"4092ba37e36dbadc85d984d016512a3775dd7e11","modified":1597123892801},{"_id":"public/archives/2020/page/3/index.html","hash":"da3cd6897fba5b61f8f9bc8bf7dee265a31bb0fa","modified":1597123892801},{"_id":"public/archives/2020/page/4/index.html","hash":"a8aa14f4638c74581134d1e89b84452b20d774aa","modified":1597123892801},{"_id":"public/archives/2020/page/5/index.html","hash":"5aaaa33c5ebe64a396e2e2c7dd2dba718efa269b","modified":1597123892801},{"_id":"public/archives/2020/page/6/index.html","hash":"1367eb87ff45c0629189e1fa3d6edf897aac78b1","modified":1597123892801},{"_id":"public/archives/2020/08/index.html","hash":"b69e8861fb4b39d3880ba9d41a5ec2df8e509135","modified":1597123892801},{"_id":"public/archives/2020/08/page/2/index.html","hash":"b3b32a8cfcf9ec117cb60c30521c3dfb73d0e82d","modified":1597123892801},{"_id":"public/archives/2020/08/page/3/index.html","hash":"5805cf93437db2cad4a622177472d122ab99bad7","modified":1597123892801},{"_id":"public/archives/2020/08/page/4/index.html","hash":"0df0daa1a471f4086f1d1021d33f491b280e5413","modified":1597123892801},{"_id":"public/archives/2020/08/page/5/index.html","hash":"dd6ea46e2a1a0c1f7ddde27271dd97bed3cb2858","modified":1597123892801},{"_id":"public/archives/2020/08/page/6/index.html","hash":"800858ce0d79a22729852487a3cb133f67fe751b","modified":1597123892801},{"_id":"public/page/2/index.html","hash":"0fd490ccba14152014c4e38e440fc288c0fe3001","modified":1596794492960},{"_id":"public/page/3/index.html","hash":"ee43e35f1fa66099d6da27d4ae9374dc5569c818","modified":1596794492960},{"_id":"public/page/4/index.html","hash":"83867f9abbc9bdf328bb83a6c3379e8e83371f8c","modified":1596794492960},{"_id":"public/page/5/index.html","hash":"5c24176785a364a7c2ae58f0ccfe30655e7b880e","modified":1596794492960},{"_id":"public/page/6/index.html","hash":"2fd8600242b19504153ee0284f5056fa853bd651","modified":1596794492960},{"_id":"public/page/7/index.html","hash":"a145c96ff15eb5ec094bf9fff25aa85fa87afe41","modified":1596794492960},{"_id":"public/page/8/index.html","hash":"69423c633a33c5f30cd1142c2e88aec48c64b4f6","modified":1596794492960},{"_id":"source/_posts/kujin.md","hash":"ce86c4c02353a4d4ded0d8fd51e1feb66a3d96ff","modified":1596345256310},{"_id":"public/2020/08/01/kujin/index.html","hash":"204ea36531a38e03cfdf552fc31d9cc6cb0cef1c","modified":1596345093804},{"_id":"public/2020/07/31/git-xue-xi/3-2-tian-jia/index.html","hash":"9219bc8aaa2700772af7a6327ffeb1e96c315823","modified":1596340575530},{"_id":"public/2020/07/31/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/index.html","hash":"528badc8be67521a1662ac007d0927b621f28f10","modified":1596340575530},{"_id":"public/2020/07/29/git-xue-xi/2-1-git-hu-lue-wen-jian/index.html","hash":"646396ab2a5f1305d174d9ee292350b0f5b74895","modified":1596340575530},{"_id":"public/2020/07/09/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/index.html","hash":"5675b22e5c972abb438df373f9039e671461f733","modified":1596340575530},{"_id":"public/2020/07/09/git-xue-xi/3-1-guan-jian-ming-ling/index.html","hash":"6b950209d77ef90932b4883ce16b2350acd42692","modified":1596340575530},{"_id":"source/_posts/GitBook学习/1-1 简介.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596283634996},{"_id":"source/_posts/GitBook学习/1-2 使用教程.md","hash":"d5651ec889a667f38b694f0740b009411a7bd6a0","modified":1596283727777},{"_id":"public/2020/08/02/gitbook-xue-xi/1-1-jian-jie/index.html","hash":"8a239230f9fed2a8159f4dc70c5ac27c12229183","modified":1596341701658},{"_id":"source/_posts/hexo/1-1写作 .md","hash":"b62e5d960d05d9298278306ffc77c338edb4fa87","modified":1596345555217},{"_id":"source/_posts/hexo/hello-world.md","hash":"6e2562ba704c19382bddd152703a1d7e53f6403a","modified":1596344742557},{"_id":"source/_posts/images/hello-world/image-20200802124944743.png","hash":"1fd78df68571b5b2f05e16c3aeb7fd0933366b4f","modified":1596343784785},{"_id":"public/2020/08/02/hexo/1-1-xie-zuo/index.html","hash":"7de2b0c8b25fa508d6387ab32d06779a73001fa0","modified":1596364848072},{"_id":"public/2020/07/31/hexo/hello-world/index.html","hash":"a36ebe19282e0c67015e3b8485afaf404b25520c","modified":1596364848072},{"_id":"public/tags/hexo/index.html","hash":"ca87187de198f2e206351cf11ab4687053b2f4ae","modified":1596364848072},{"_id":"source/_posts/测试.md","hash":"06d61ad166ffb4bd0713094df06a746b4af55979","modified":1596366056918},{"_id":"source/_posts/测试/image-20200802133013945.png","hash":"a4ebe520ebe9fd87d0156b789f3c3b5cbce3bdfb","modified":1596346213952},{"_id":"public/2020/08/02/ce-shi/index.html","hash":"907a3a254cf8bbf1a5c76f533128763b99470cef","modified":1596366324837},{"_id":"public/2018/09/07/kujin/index.html","hash":"3622d309fc269ffb401352bda83a02fac63c0881","modified":1596364848072},{"_id":"public/archives/2018/index.html","hash":"1566947dbb904f226c7ef6b213acec942d480bcf","modified":1596364848072},{"_id":"public/archives/2018/09/index.html","hash":"0d764e7e2873386224a08a6a69b509bbf56759b8","modified":1596364848072},{"_id":"public/categories/Markdown/index.html","hash":"758b17882d24e7bab31679ba0e7a4aded4803268","modified":1596364848072},{"_id":"public/tags/Typora/index.html","hash":"3df34297969e65b28f05fb54e1df7cc2206abe2c","modified":1596364848072},{"_id":"public/tags/Markdown/index.html","hash":"616245d60b4532d22216da5dd9f034530cfcddf7","modified":1596364848072},{"_id":"public/2020/08/02/ce-shi/image-20200802133013945.png","hash":"a4ebe520ebe9fd87d0156b789f3c3b5cbce3bdfb","modified":1596346261275},{"_id":"source/_posts/测试/image-20200802133558011.png","hash":"bbec1388600dfaae8e3bb6a3a5ad991a94bc2e78","modified":1596346558018},{"_id":"public/tags/测试/index.html","hash":"0e89f7a4c1e911474163862b450e67cec6c4bdff","modified":1596365820337},{"_id":"public/2020/08/02/ce-shi/image-20200802133558011.png","hash":"bbec1388600dfaae8e3bb6a3a5ad991a94bc2e78","modified":1596346576947},{"_id":"source/_posts/测试/image-20200802141253686.png","hash":"42bde5d2ac11a0f0d5f1b9bdceed81ab63ddf531","modified":1596348773693},{"_id":"source/_posts/测试.assets/image-20200802134119459.png","hash":"81c99fc9ae251301e62ddc7a30844aed4b7191d6","modified":1596346879466},{"_id":"public/2020/08/02/ce-shi/image-20200802141253686.png","hash":"42bde5d2ac11a0f0d5f1b9bdceed81ab63ddf531","modified":1596348803576},{"_id":"source/README.md","hash":"68125b3d9ca2efd29c4080c36b9b43e1a712cbe2","modified":1596361550149},{"_id":"public/README.md","hash":"68125b3d9ca2efd29c4080c36b9b43e1a712cbe2","modified":1596361892460},{"_id":"source/_posts/1-1 简介.md","hash":"12acec25869c93af45397453975c18b45d6d08f0","modified":1596364703385},{"_id":"public/2020/08/02/git-xue-xi/3-2-tian-jia/index.html","hash":"6158b165eedf911081629d91d75b59564f22771e","modified":1596364848072},{"_id":"public/2020/08/02/git-xue-xi/3-1-guan-jian-ming-ling/index.html","hash":"acff318b34d13a7a6b5b8b57ce7af30b06eea987","modified":1596364848072},{"_id":"public/2020/08/02/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/index.html","hash":"33173f10ba696a78cd3ada7cf771b3128c30f00f","modified":1596364848072},{"_id":"public/2020/08/02/git-xue-xi/2-1-git-hu-lue-wen-jian/index.html","hash":"26da548a90b68cce337c8cd3c79507f01f2bcd8a","modified":1596364848072},{"_id":"public/2020/08/02/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/index.html","hash":"998d31d49df564bf0ff5a9fa9a4a3611833e96cf","modified":1596364848072},{"_id":"public/2020/08/02/1-1-jian-jie/index.html","hash":"4167957c247feb7c52e778e26b2844112d391f00","modified":1596364848072},{"_id":"source/_posts/随心记/替换.md","hash":"8ee64182662fabcd58bf5e5e541c9cda73a2ada0","modified":1596367820626},{"_id":"source/_posts/随心记/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1594286787148},{"_id":"source/_posts/随心记/.git/objects/14/6439e27170d68ad2058b7cdf403003108c2b9d","hash":"71cdc82697d5ed788556f1a4ff3dd888f5bf1f11","modified":1594288553000},{"_id":"source/_posts/随心记/.git/objects/16/35758d191ea9826fcb51564487f5f6dfc76ff6","hash":"dfadd37c470761c3319178c7c91899d2f0278bc3","modified":1594289605084},{"_id":"source/_posts/随心记/.git/objects/1c/08b1aa26c7e6e854f481910a2380f9392552b8","hash":"d66d0f58670f921a6530be00ed695a39d5a17f5e","modified":1594286822550},{"_id":"source/_posts/随心记/.git/objects/23/8d98b756402ae170ff1f8c4c100a0363ef68f3","hash":"f4e62765198c0cdd7c3ec471cfbda1de6a791a8b","modified":1594286820902},{"_id":"source/_posts/随心记/.git/objects/28/6d299d7d2abbb067d60e1e391b7162ab74e84c","hash":"3e1bc8d6f73c0b4745dfdc8e0951614e4411f55b","modified":1594722967717},{"_id":"source/_posts/随心记/.git/objects/29/d1e8bef2c1dad0f52e28b3e327a6a743741b1c","hash":"e11a194f2f2f333055c4cc79849b8aedb2990fb7","modified":1594289604797},{"_id":"source/_posts/随心记/.git/objects/2a/d8c62d3d75891054ff243cc046760eb4194463","hash":"d0f248fd8315d5fe32dcab5266df352de12397be","modified":1594286822295},{"_id":"source/_posts/随心记/.git/objects/2b/a4e006669f292db01923378f989f13deb12857","hash":"f2e99ca98eb5905301b6dbfc2700556f66ee3a15","modified":1594286821153},{"_id":"source/_posts/随心记/.git/objects/2c/cb0d2665e9f79ceb29128bec98225a6cae15ed","hash":"0e03c4b0d28a5c4279fb1ed0be10717de618e6d9","modified":1594286821293},{"_id":"source/_posts/随心记/.git/objects/38/d573bd02e99cfabf8bf776c0714375e57bebfc","hash":"8ff82246abffc2105b36d31fd6849f3ab67bb341","modified":1594286820198},{"_id":"source/_posts/随心记/.git/objects/38/d97083a09d74a872f10a35b6a1cc35afe56565","hash":"606f9c51ac3f13b1a1f4f3fc52f49718045d9b3c","modified":1594288878997},{"_id":"source/_posts/随心记/.git/objects/39/18dcc519076a4a43905431a50eb487fdd31e78","hash":"b0a513a1f5b9339169eeb9dc7b53775175026693","modified":1594286821790},{"_id":"source/_posts/随心记/.git/objects/41/e4ed26ad7042fbe202fc0bc130aa037f3929ac","hash":"6d8fac354f2a7e9bcdfdf5d26f1d9cdb597f2d02","modified":1594288879196},{"_id":"source/_posts/随心记/.git/objects/42/08165430be664a4dd62890cda7f39f98d72bfc","hash":"7794f901b6e15911fcb4113877ecea3fc70a3b2d","modified":1594723120715},{"_id":"source/_posts/随心记/.git/objects/43/ec3af4974b9e6c78626faba9a08d48f10cacda","hash":"c5620b8bd170a90759c9e2b45914ab372c11a955","modified":1594286823536},{"_id":"source/_posts/随心记/.git/objects/47/7145d3b1b8ad68d8f75b231473969c0ae40bf4","hash":"eba4312263163a7cd529ef9e54ef160b36282a49","modified":1594289604975},{"_id":"source/_posts/随心记/.git/objects/52/9c04c112c5511e8655e65d36778aefd738ad87","hash":"c76a5e6f43564cdcab228337f8527600ea8d6552","modified":1594286823261},{"_id":"source/_posts/随心记/.git/objects/59/b502c7ea24ca2b25ce7fadec54482b8d12f826","hash":"096f66973fcd63c4c425a284dd89cfb390ee0567","modified":1594723120876},{"_id":"source/_posts/随心记/.git/objects/5b/d36da629b2f3aef07b38b42663cd2493f31f39","hash":"6a7c366873623c4440180a36b84ea708a99b8c08","modified":1594286821445},{"_id":"source/_posts/随心记/.git/objects/60/5e0d9ef053cb450bf86aee7d2510cf620fcb9a","hash":"b3de4204b0bbb619d0f6c14ad982793d4371bcfc","modified":1594286820968},{"_id":"source/_posts/随心记/.git/objects/6b/5081b39ca0f3d147a6ee62889923687beab6a3","hash":"8f38714278e04dc9196665cb75bf293db2f9fe63","modified":1594289605000},{"_id":"source/_posts/随心记/.git/objects/6d/3d176480fa436ab4bf6e3ff7b41a3e795defa0","hash":"21b53aaf210fd93e9cad3dfe60e2b82735279d02","modified":1594723120800},{"_id":"source/_posts/随心记/.git/objects/71/1c1da6cecba708d42084f018cd7d89130f8e13","hash":"fbdebfd933f7241e0a8000a0f815289ddb39ee88","modified":1594286822501},{"_id":"source/_posts/随心记/.git/objects/72/e151bd686938a081fee698a9fc5f2409b4986b","hash":"9b6303680c8ebff3232a2e3e5c789b49a6c834b9","modified":1594289035153},{"_id":"source/_posts/随心记/.git/objects/73/f69e0958611ac6e00bde95641f6699030ad235","hash":"a9a63418c426417e773d3f91965ae73eb8d4a917","modified":1594286820112},{"_id":"source/_posts/随心记/.git/objects/74/49cf1c87dd8b1705848e9d492235c8960c76f7","hash":"48273ccef58ea9a870b7a41652c285d6996c3df7","modified":1594286822094},{"_id":"source/_posts/随心记/.git/objects/7a/cf5cc5089714bcaf96ed66038803b21a3311c1","hash":"69f583ee2e501accfe14ddf56720a6c2361e60ca","modified":1594286822632},{"_id":"source/_posts/随心记/.git/objects/7d/838bdcfc73e180c86a859c7dd2c54c432d9ac9","hash":"fcddb27b4db5172008f991dcad896bc276842ef4","modified":1594723120969},{"_id":"source/_posts/随心记/.git/objects/84/e6e3f0adda31788f514cf4a0208a2f1915a1fb","hash":"1442474304c4434ffadf30a1e50b566447e8e2dd","modified":1594286822728},{"_id":"source/_posts/随心记/.git/objects/85/8e7b65a7c5b7945269e756a553fd69e7443999","hash":"d0bfcf730f0d08d5fe9ac1b51bcc36752635a3ce","modified":1594288612928},{"_id":"source/_posts/随心记/.git/objects/8a/a2d1d4eb1718faf65fed35fb8469fb90671245","hash":"22896d441a57c34ccd13c8111ef3d89c571076fe","modified":1594286820729},{"_id":"source/_posts/随心记/.git/objects/8b/1d34d02c0921fc166cb2da58c695732cf91cc2","hash":"69ad2c0108a1a9189f790407654e6108270b17bd","modified":1594286821700},{"_id":"source/_posts/随心记/.git/objects/91/4fdc4f6e68a1efc93279b02500b80c0b30a288","hash":"ad00c9928c3d09291c63d7260fa948fca64f7636","modified":1594289605053},{"_id":"source/_posts/随心记/.git/objects/92/286fd21e8487946be5325577746ae03469d4b5","hash":"6a6e2e03dd091a8547a23f770723d72c6f6f3e01","modified":1594286823476},{"_id":"source/_posts/随心记/.git/objects/92/5aec94530465585037b13841e94b4ff3735023","hash":"96684a3ea801f352193235ec07f61dc117452fc4","modified":1594286821259},{"_id":"source/_posts/随心记/.git/objects/93/6444f584816266c5c87605b01b681eaeb74594","hash":"c9c53f5daa709d4bc197f73e8c60b6fe19c25e1e","modified":1594286821660},{"_id":"source/_posts/随心记/.git/objects/93/635d5c72d5a0bdbddc82e47f4e40dee8b500d9","hash":"f035506d03dad5740de3749d1df726021170041f","modified":1594286821868},{"_id":"source/_posts/随心记/.git/objects/94/99e513ee8aed2d21042847250d48d32a2e5c84","hash":"15d3cbecc8feb231d929018d090ab1e140d45f2a","modified":1594722967884},{"_id":"source/_posts/随心记/.git/objects/94/a25f7f4cb416c083d265558da75d457237d671","hash":"6f9de705881aec3b6a1b49a174d055e104bc3c8f","modified":1594289605000},{"_id":"source/_posts/随心记/.git/objects/95/b6e52bc3774f48e37b8b4f216aa7cd62f75694","hash":"c5193fb39570c2fb512a80a5761414e9bce87ed5","modified":1594723121237},{"_id":"source/_posts/随心记/.git/objects/98/6f0c02dbbe641b93232b9c7b09745f861e3825","hash":"791e5561e996439948441fb30610bededc97e10b","modified":1594286821826},{"_id":"source/_posts/随心记/.git/objects/99/d5e63733167a3f5e4078f078fbd6c2527b8813","hash":"294a849d5b89cc98d2fce18037d63d0b3bebfa99","modified":1594286821762},{"_id":"source/_posts/随心记/.git/objects/9c/4a6555093df4e3ac8f8a5fb1338d06bf469213","hash":"e245d96a8dd1694e484cf71549be4fe1a2a25e61","modified":1594722968819},{"_id":"source/_posts/随心记/.git/objects/9c/a2f70679d6ffa35d6fd187bf3651784d4079cf","hash":"a8200193c14b6e4f45241faa22fa2bc68c07143c","modified":1594286823091},{"_id":"source/_posts/随心记/.git/objects/9c/c065919f54f52d7428a517df79e1c89e095664","hash":"f40527612a8ab5df2dc9d8ed2ad5b8348a4a74e8","modified":1594286820356},{"_id":"source/_posts/随心记/.git/objects/9e/0ce8291ba448f864e131ec314072f5b28a8900","hash":"b7195d6079c9c2ba7f559b36f89c56b1648afcb5","modified":1594289035126},{"_id":"source/_posts/随心记/.git/objects/9e/46d574ccf4c05268f1c210d36d98509558b774","hash":"f0482b5206959d116829e170f2758693e24411ed","modified":1594289035038},{"_id":"source/_posts/随心记/.git/objects/a0/3957c5fd4acb4479e252592a88e36c2687da18","hash":"71f2877006539fd1d2267b8c1e8dd9b9de45d895","modified":1594286822126},{"_id":"source/_posts/随心记/.git/objects/a4/5a852f77beb5e88c697aa862f54ec2f5dd86de","hash":"d219065fba67d3ad06bad0642cdf1c016bbd8e31","modified":1594286823144},{"_id":"source/_posts/随心记/.git/objects/a5/7f1d1f33ab2c2af9c0bd614bccfcd2033c8ed0","hash":"028cdf3d1adae1643bf22249e907c3941a740745","modified":1594286823194},{"_id":"source/_posts/随心记/.git/objects/a5/c5e70e67071867459c869ae281431b517b6dfd","hash":"035c299193aa2f140b00bd591812a1d569cefa41","modified":1594286823369},{"_id":"source/_posts/随心记/.git/objects/a8/4318490b5e9139025f743d2a4b95ab4ef2a100","hash":"80c6491cb7dd2d0d3a33b556831fcaf047ad594e","modified":1594722968000},{"_id":"source/_posts/随心记/.git/objects/aa/1dafa219990e9f5746296fc438231566810b83","hash":"52d87b51eb04fb4ba6d5acc79811f51b8e782ca6","modified":1594286823118},{"_id":"source/_posts/随心记/.git/objects/aa/a6682c2164ae1a999a2bcf25ddaf089aa8b874","hash":"5b21c8cc5eb20c888cb96a23c1d70f677810ae76","modified":1594286821379},{"_id":"source/_posts/随心记/.git/objects/ab/239dc594f895f0242253c6327eb063e4cdad2d","hash":"1e7220ebc449a1e64ce1b9ee572fcc69bf5891e7","modified":1594286823393},{"_id":"source/_posts/随心记/.git/objects/ac/7923ae4c4fae486c13d620b9655153dc574c79","hash":"993453977d774eb4d4003754d0714a79397c2655","modified":1594286822262},{"_id":"source/_posts/随心记/.git/objects/ac/dbb328f412c3ff0b1645427edf90a17a795659","hash":"3ae0efc73f4f0a62d8aabbc79b309aec07bf0ce5","modified":1594289032921},{"_id":"source/_posts/随心记/.git/objects/ac/7c4104fdfd8881ef4e0950b18848fe1624db24","hash":"faac4859e09cba7343093027c78a7b376a858458","modified":1594722968427},{"_id":"source/_posts/随心记/.git/objects/ad/c29429f91207daf9b61298f13f1539978d9833","hash":"b7078dbcefab819b1f68b15a252decdecf64910e","modified":1594289605000},{"_id":"source/_posts/随心记/.git/objects/ae/9a3342a2b4e13d4933bcc83a949b66ac681e23","hash":"c56f794f060b5bd4f245a5332347f0cde3420e87","modified":1594286821894},{"_id":"source/_posts/随心记/.git/objects/ae/a02e1362239427a4224dd93f97b4a567613732","hash":"6b3fe025ac942953f744233f88b875be0ce6b9a5","modified":1594286821094},{"_id":"source/_posts/随心记/.git/objects/b2/68482f27b122528ec001981e3eff95e1018870","hash":"10843688809f103ffcba34ad10d861392c1d1494","modified":1594723120910},{"_id":"source/_posts/随心记/.git/objects/b5/2003c1a3b3490589bac0adf467218fcdfb52c9","hash":"d0765fe4884cb43cd5cd5c17c41bd8bb4842bdbd","modified":1594286821126},{"_id":"source/_posts/随心记/.git/objects/bd/aeb67eb188316f484d47d0bcd4c92520322bed","hash":"47bcaeb00e2cc1440210e132becf064dd50e22aa","modified":1594286821943},{"_id":"source/_posts/随心记/.git/objects/c0/5b0d7e8c11e8d3b2569e94dca2d7d6c843e2a3","hash":"3fa356134f9a952138d973425911a148f42b476b","modified":1594286821919},{"_id":"source/_posts/随心记/.git/objects/c1/54df77611fef05712f31956eb732adec9c7656","hash":"1c00c85e8aaf00838434f2725640f42d409a63b3","modified":1594286823444},{"_id":"source/_posts/随心记/.git/objects/c7/007cac8b75fe209c566d988275df277942f8e0","hash":"4e170ee60aed3913b7401ff1f5825cf346c33b12","modified":1594722968633},{"_id":"source/_posts/随心记/.git/objects/ca/6f779eb8ffb77b2591045204638c8bd43c88a9","hash":"a1cef324e221709cf8748965d4cecfaee421fe17","modified":1594723120650},{"_id":"source/_posts/随心记/.git/objects/cc/9e3f042e1a94249e3c16798cdc02cff05a9b8d","hash":"03e312ebe7ac1b474af97b790d1656413434df56","modified":1594286820538},{"_id":"source/_posts/随心记/.git/objects/cd/12caf5336556b323fab674757d27aad5b3bef9","hash":"38bf42b6ca11eaba8d6f842f7c3f80726b889fa6","modified":1594288612843},{"_id":"source/_posts/随心记/.git/objects/ce/04f212167ff8410132c35d789169bea7b1a38e","hash":"f896dc5f47e2b9716a25254768277a0cdb4a4579","modified":1594286820601},{"_id":"source/_posts/随心记/.git/objects/ce/a7696cc661fd38d35d4e973d94181e2106c878","hash":"01f4e0445c11c500d36ef9e4904bd2996c2aef7d","modified":1594286823343},{"_id":"source/_posts/随心记/.git/objects/d3/4b9d2c1cd5d7846c03bc68859117ca6963d278","hash":"69cda6c5866fe390564cefc76fe466faf18bc9a2","modified":1594286823010},{"_id":"source/_posts/随心记/.git/objects/d6/28c208ca2ab5228dfa1d20b9079dd7549fc23d","hash":"0e86b0f903705e5f1c90572bb6db5c22e132fe6d","modified":1594722967779},{"_id":"source/_posts/随心记/.git/objects/d6/ebd4805981b8400db3e3291c74a743fef9a824","hash":"90a556fdee5faffe77517c91d22e18c5bcd79512","modified":1594289605000},{"_id":"source/_posts/随心记/.git/objects/de/c83b0330f9542f0c6ac0c787cc26846de76060","hash":"353d49dc406b0cd712d39ae76b615cf9588f0f37","modified":1594289605011},{"_id":"source/_posts/随心记/.git/objects/df/61edadad718d0b9fed8817b1ee6b117235cbf5","hash":"a68aab06f4bd8a100ac3ca01463c147db6bf86a3","modified":1594286820392},{"_id":"source/_posts/随心记/.git/objects/e0/003fc08e2e3fcc17d3198e952f574e437a284a","hash":"06caf6134300c1d0a2e5e6f7b24623fe0c596559","modified":1594288612897},{"_id":"source/_posts/随心记/.git/objects/e1/3d9f7bdd24bb9313d7e8274c0b0b8d25ff904d","hash":"fd9179caae50c601397422423184988bf5f47cf2","modified":1594286821476},{"_id":"source/_posts/随心记/.git/objects/e2/43274c6fd7a447edd0df39c557b317f7bd23f5","hash":"8e51221879820d1aeea974ae3e658cf26da3134f","modified":1594722967000},{"_id":"source/_posts/随心记/.git/objects/e5/1854ca07b11a9097b5440b1a5e1689fae3c525","hash":"e761eaace3158c574a32768fb7b5ee6e58b8a23f","modified":1594722967000},{"_id":"source/_posts/随心记/.git/objects/e6/64dad6c3eabd18ed4488928a4235aa58f7339f","hash":"276d393e4ecf2653adca8acf3279e4ad94bfc844","modified":1594723121158},{"_id":"source/_posts/随心记/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391","hash":"c2baae88d6364d878fd67e778c6a5d8306ad4ab0","modified":1594722968000},{"_id":"source/_posts/随心记/.git/objects/e7/0939b6d27b5c46c280308f84e450d2ded01d98","hash":"604d866146896ff5b9a1d95acae5ecfe51b90a1a","modified":1594722967000},{"_id":"source/_posts/随心记/.git/objects/ea/14d1bc306bdf9fce869a83f9cc52ccbbfae5da","hash":"f6aca28f672f4745a6c0b61e00d6e55a77015eb9","modified":1594286823570},{"_id":"source/_posts/随心记/.git/objects/eb/84e304e99e6a7107849063b21a43e3f73500a8","hash":"14de16a36284d23196ef20d665052500f6a3ce73","modified":1594286823317},{"_id":"source/_posts/随心记/.git/objects/eb/c20aa417697bfbb7afa60e12bab0ef08ccaecc","hash":"715354ed854f75ed868f2931d6fe311b51663a68","modified":1594722967993},{"_id":"source/_posts/随心记/.git/objects/ee/0635833ab12fcfed65e2f0bfe66cda076afe2a","hash":"8dc2c02002e02afdf8fa6451949ec39ab1448f93","modified":1594286823170},{"_id":"source/_posts/随心记/.git/objects/f1/d3c05f7cd1034009dd61b2c599b7f244db4acf","hash":"3a005cd0cc153d3778e8e0723575bf437552da85","modified":1594286822177},{"_id":"source/_posts/随心记/.git/objects/f2/9e7c6a671d89b4e82e224c81f5ac95e232e7e9","hash":"8df7d133964e2d5602df620cecf2ddf87d38927b","modified":1594722968658},{"_id":"source/_posts/随心记/.git/objects/f5/513a385b9ab29c482fd662dc9bf14a3f940280","hash":"af292fc05a7314d235f90014d8893da72824ac1f","modified":1594286822697},{"_id":"source/_posts/随心记/.git/objects/f5/c6d9eb6a991d73b50e99d55a1a22a208ef247d","hash":"294e6039cd9b59c695e3a3b86d2556280953c79b","modified":1594286820250},{"_id":"source/_posts/随心记/.git/objects/f8/97056d3919e39a91769d7d56adb640cc587df1","hash":"7f49263ea41eb7a50ab0274c30b70596a6e69b12","modified":1594723121025},{"_id":"source/_posts/随心记/.git/objects/f8/cde0c23725be6be215066f6c857784d430dcac","hash":"2cc48c767bafd7427ee1f28b23805c1d95b3fa10","modified":1594722968068},{"_id":"source/_posts/随心记/.git/objects/fc/ddc4cbdc531a933f5ec75b7c3c58cc0398a2c3","hash":"400de562cfe62c9d9557187c8e99708bfcaf0b25","modified":1594286821509},{"_id":"source/_posts/随心记/.git/objects/fe/47c3f55e514472970fd6b478751c6feed07e0e","hash":"700ae03a0db239d1d677cfc0df2eb38af05798f7","modified":1594286821727},{"_id":"source/_posts/随心记/.git/objects/ff/ce7d5390d38fdc7a2f0e6cead8a04725d5878b","hash":"52824c166b05ca59f5bb69edabf3ef1b27422447","modified":1594286823034},{"_id":"source/_posts/随心记/.git/refs/heads/master","hash":"4d1094b7f76a6448e7f892497ef61efd70015554","modified":1596794837484},{"_id":"source/_posts/随心记/.git/refs/remotes/origin/master","hash":"d150ae91071e4a03afd36c687c5147dd2ccb808c","modified":1594723183065},{"_id":"source/_posts/随心记/.idea/.gitignore","hash":"88666582fb4a3621f7234d046cec5b12c7480a59","modified":1594286650574},{"_id":"source/_posts/随心记/Android学习/images/Untitled/image-20200717175604505.png","hash":"32ed326214a5e241fb276c7b95b8de1851981eff","modified":1594979764551},{"_id":"source/_posts/随心记/Android学习/images/基础学习/image-20200721130945421.png","hash":"b43fc644df0b89229e1f4f95847bcdbb129b3ccc","modified":1595308185465},{"_id":"source/_posts/随心记/Android学习/images/基础学习/image-20200721131000138.png","hash":"c162511a4d7daee42429638793b68763d942b0f0","modified":1595308200155},{"_id":"source/_posts/随心记/Bitnami虚拟机/1-1 安装bitnami虚拟机.md","hash":"58a70847eb7e973e2e86e1785248c78f5e31453f","modified":1596411779745},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-2 连接SSH/image-20200731114408221.png","hash":"4c3aadc56de19c73b0687f6f123c28f1bcd67cda","modified":1596167048224},{"_id":"source/_posts/随心记/Docker学习/1-1-安装.md","hash":"14342ae87a7b4702916696ba6bd21943a3242894","modified":1596411779748},{"_id":"source/_posts/随心记/GitBook学习/1-1 简介.md","hash":"e2fbfcfa83bd2d53f1683c178c9857341d8d19c9","modified":1596411779750},{"_id":"source/_posts/随心记/GitHub学习/Untitled.md","hash":"8e1d1f120a03bd5a8fd1cead76b17510b1a8ead7","modified":1596411779751},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/1-1简介.md","hash":"7845907fa50695d25f586b99b9cd175b067709d7","modified":1596411779752},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/github pages/1-1 简介.md","hash":"aa0d7d24888ec8f09a1ac98bcadb92efb12f5b5a","modified":1596411779753},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/Hexo/1-1 简介.md","hash":"105584c61104a6b33899e60d9e701e32242b5e00","modified":1596411779753},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/Hexo/2-1 配置主题.md","hash":"7200000955e9946cf644d0f8c0a7adc3cdf270ef","modified":1596411779754},{"_id":"source/_posts/随心记/GitHub学习/创建图片地址创库/1-1 简单使用.md","hash":"42e6bc05aca5640f3a00e73a30b2eb338bc62d05","modified":1596411779756},{"_id":"source/_posts/随心记/Git学习/1-1 Git 设置和配置 .md","hash":"8975bcbca225265ea35e66f6764ad82b0f5cd965","modified":1596411779757},{"_id":"source/_posts/随心记/Git学习/2-1 Git忽略文件.md","hash":"bf5a02300c4781722cb6cd6cc5443da26e6877e8","modified":1596411779757},{"_id":"source/_posts/随心记/Git学习/2-2 Git获取和创建项目.md","hash":"5448d5897a3a06a27a5a28a994ae61718266e69c","modified":1596411779758},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/Hexo/images/2-1 配置主题/image-20200801181325409.png","hash":"e6ced74ff6d6b4e0d3988168cf92cbb5879982ad","modified":1596276805969},{"_id":"source/_posts/随心记/IDEA/idea工具的使用.md","hash":"21fd5009e88c400e25bfbf3186bf460a1b7dc9cd","modified":1596411779760},{"_id":"source/_posts/随心记/IDEA/利用IDEA明明导入了包却显示缺少保留相关类.md","hash":"589c742e50eb87574fe82a8347e0fe9ce3cdd620","modified":1596411779763},{"_id":"source/_posts/随心记/IDEA/IDEA中Tomcat日志乱码.md","hash":"dd78fb28f99c4e49ccf40a69a3e8e40567006108","modified":1596411779760},{"_id":"source/_posts/随心记/IDEA/idea报java版本错误解决方法.md","hash":"635aeaca99b06393e27d61cd6e052e36a4686a46","modified":1596411779761},{"_id":"source/_posts/随心记/IDEA/创建代码块模板.md","hash":"e5a1a8bc0013f0c06574e81e6d0e9af49d77cb54","modified":1596411779762},{"_id":"source/_posts/随心记/IDEA/利用IDEA学习编程语言.md","hash":"c98cb89e04052ee110f534e646c926a520598d0e","modified":1596411779762},{"_id":"source/_posts/随心记/IDEA/快捷键.md","hash":"5d7df59b84e328241daf25a9fc5c81e16f3e55a4","modified":1596411779763},{"_id":"source/_posts/随心记/java_web/Filter.md","hash":"f28919a37b5d477a7f8205787e4464c3a7537dd9","modified":1596411779765},{"_id":"source/_posts/随心记/Kotlin学习/images/1.学习网址/image-20200729173322076.png","hash":"fceb3569994e607027a1ace17169e66e92052f09","modified":1596015202227},{"_id":"source/_posts/随心记/Linux入门/1-2 CentOS镜像使用帮助.md","hash":"98f39b4a3721f6ef60a6240513ee04c97cc6804b","modified":1596411779775},{"_id":"source/_posts/随心记/Maven和Gradle/index.md","hash":"3d5556726c2f739f5ecbbcc2fc88f9f13c5dac6f","modified":1596411779783},{"_id":"source/_posts/随心记/企业级电商项目/mysql数据库的安装与配置.md","hash":"f63208edce1086a1e9543c0b840ef2b0e49a0c14","modified":1596411779800},{"_id":"source/_posts/随心记/企业级电商项目/LINUX设置防火墙.md","hash":"98e69c4d9cb62972c83d271f61106fea63173790","modified":1596411779799},{"_id":"source/_posts/随心记/企业级电商项目/iptables的学习.md","hash":"6c4f39e991372eb2b4faee12f166a4722f01e87f","modified":1596411779798},{"_id":"source/_posts/随心记/企业级电商项目/vsftpd.md","hash":"2bfdaf9b511f1945fd56443451378b33f0033f1d","modified":1596411779800},{"_id":"source/_posts/随心记/企业级权限管理/框架搭建.md","hash":"a785ceb790844f47490aca94defcc7cd21afd7cd","modified":1596411779798},{"_id":"source/_posts/随心记/Spring/spring注解.md","hash":"44f240d13d0ff93b1b024b69fc11defd625ce30c","modified":1596411779794},{"_id":"source/_posts/随心记/Spring/SPring源码学习/Spring Framework简介.md","hash":"4dee846302e222b7ee0857eb3477564da74f3af2","modified":1596411779796},{"_id":"source/_posts/随心记/Spring/SPring源码学习/问题总结.md","hash":"b3cab4b045797ae3409739c834ad3c2fd0d8f46c","modified":1596411779797},{"_id":"source/_posts/随心记/Spring/Spring-Mybatis项目/1-1 入门学习.md","hash":"16652b4a6243d15f8a2c3defca83754302e23493","modified":1596411779795},{"_id":"source/_posts/随心记/Spring/SpringTest/学习记录（一）.md","hash":"6134afac6b308b2f7a5413c0fc5611f360e52187","modified":1596411779796},{"_id":"source/_posts/随心记/Spring/images/image-20200709140540967.png","hash":"fb9818ed329169e19026c2f73e3f6077c3e3af30","modified":1594274774179},{"_id":"source/_posts/随心记/Redis学习/images/image-20200708152004367.png","hash":"a3c64ca84aa3579b603b657ebd37df158e495cfc","modified":1594192900323},{"_id":"source/_posts/随心记/Redis学习/images/image-20200708152723373.png","hash":"4636e573a218182cef9ee5253eb349c615067c5f","modified":1594193249985},{"_id":"source/_posts/随心记/Redis学习/images/1-2-Redis启动/image-20200723140632512.png","hash":"92acccff5f413d82896fb9591ad46b17c351656a","modified":1595548737977},{"_id":"source/_posts/随心记/Redis学习/images/1-2-Redis启动/image-20200723141553131.png","hash":"8b1007e2376320b2ddfc415d68083d129d73deb0","modified":1595548737975},{"_id":"source/_posts/随心记/Redis学习/images/1-2-Redis启动/image-20200723141850375.png","hash":"fd5b623b97305bb6d2cee2642b977ced988965db","modified":1595548737976},{"_id":"source/_posts/随心记/Redis学习/images/3-2 Lua脚本/image-20200725105545715.png","hash":"eebf12ec65735dc35389c3921d19d0d4c8388077","modified":1595645745771},{"_id":"source/_posts/随心记/Redis学习/images/3-2 Lua脚本/image-20200725110256564.png","hash":"c01d9749ff06c485a5fcff9c404bce73c4971bd1","modified":1595646176568},{"_id":"source/_posts/随心记/Redis学习/images/3-2 Lua脚本/image-20200725113303421.png","hash":"99e90bd16f53b812c27ab95495ac9fb083d260d3","modified":1595647983426},{"_id":"source/_posts/随心记/Redis学习/images/3-2 Lua脚本/image-20200727174113640.png","hash":"2a7c1556e10580f281b4bacef43198273ea36d27","modified":1595842873683},{"_id":"source/_posts/随心记/Redis学习/images/3-2 Lua脚本/image-20200727181837205.png","hash":"e6bfa168da122b71a588f2b43dc43cd83c8b82ea","modified":1595845117226},{"_id":"source/_posts/随心记/Redis学习/images/3-3 消息队列/image-20200727184633610.png","hash":"095d6b74515d0b52a5dec4d2252b2bca9bcb6e40","modified":1595846793632},{"_id":"source/_posts/随心记/Redis学习/images/Java客户端/image-20200723140632512.png","hash":"92acccff5f413d82896fb9591ad46b17c351656a","modified":1595484392513},{"_id":"source/_posts/随心记/Redis学习/images/Java客户端/image-20200723141553131.png","hash":"8b1007e2376320b2ddfc415d68083d129d73deb0","modified":1595484953144},{"_id":"source/_posts/随心记/Redis学习/images/Java客户端/image-20200723141850375.png","hash":"fd5b623b97305bb6d2cee2642b977ced988965db","modified":1595485130382},{"_id":"source/_posts/随心记/Redis学习/images/Java客户端/image-20200723143421382.png","hash":"eee0fc0ac4f89cec9a99de35700abfe95a0314b7","modified":1595486061385},{"_id":"source/_posts/随心记/Redis学习/images/简介/image-20200723112107089.png","hash":"4f1fef764327e21f976d0f2c9f7282e2cbb2540b","modified":1595474467160},{"_id":"source/_posts/随心记/Redis学习/images/3-3 消息队列/image-20200728194536819.png","hash":"9ab227fed582b9fd7eab32292bce37d2b74b9673","modified":1595936736934},{"_id":"source/_posts/随心记/项目实战/微人事项目管理/需求文档.md","hash":"6c55f7677952b3a3246a374159b416df4c07cd17","modified":1596411779804},{"_id":"source/_posts/随心记/项目实战/微人事项目管理/01 Spring Boot入门.md","hash":"92bd671f4209a9a64454a283bc65161c0f704abb","modified":1596411779803},{"_id":"source/_posts/随心记/项目实战/编写开源库/PermissionX权限管理库.md","hash":"397d665e039ce5aece13f6a2588a7e3a3344033d","modified":1596411779807},{"_id":"source/_posts/随心记/项目实战/天气预报App/前期准备.md","hash":"63c732c5fd0ac82281caedf1b2d87d5fb4077f06","modified":1596411779802},{"_id":"source/_posts/随心记/项目实战/天气预报App/功能需求与技术可行性分析.md","hash":"554cfae88c4cb57bf71c1b982f2ed2759d008d55","modified":1596411779802},{"_id":"source/_posts/随心记/项目实战/微人事项目管理/项目知识点.md","hash":"b504c07f0c6ff5fe5590ff9fea2bcb191a6280c5","modified":1596411779805},{"_id":"source/_posts/随心记/项目实战/淘淘商城项目实战/1-1-安装环境.md","hash":"6568d4d6f3829a440f92f1426c159aea9cfba809","modified":1596411779805},{"_id":"source/_posts/随心记/项目实战/淘淘商城项目实战/项目前期构建.md","hash":"e9b9a043c82bc0dc2c4d36e907c10b4f29eee916","modified":1596411779806},{"_id":"source/_posts/随心记/项目实战/天气预报App/images/前期准备/image-20200714172407951.png","hash":"1d0da3b0c32e41be874f893371a6d78292d61c22","modified":1594718647974},{"_id":"source/_posts/随心记/项目实战/Kotlin开发电商app/2-1android moudle与libery切换.md","hash":"20bf1a5b6c75b83e355eccac9c82e5479fe554db","modified":1596411779801},{"_id":"source/_posts/随心记/.git/COMMIT_EDITMSG","hash":"e4c980274bfd5757705634bd97146494b96df894","modified":1596794837427},{"_id":"source/_posts/随心记/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1594286787150},{"_id":"source/_posts/随心记/.git/config","hash":"e805559479fc97f502138af95e502392c5fb8db4","modified":1594286835256},{"_id":"source/_posts/随心记/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1594286787115},{"_id":"source/_posts/随心记/.git/FETCH_HEAD","hash":"a6ba0bc09675c27fa25d5623605b254f01a09aa4","modified":1594289574356},{"_id":"source/_posts/随心记/.idea/compiler.xml","hash":"a83ce12fb44e4c20247250aa2215fe89e49f6f6d","modified":1594286642135},{"_id":"source/_posts/随心记/.idea/misc.xml","hash":"a8cad77a6deaa37326b2cd3714610da4e0ce9ba6","modified":1594286831449},{"_id":"source/_posts/随心记/.idea/modules.xml","hash":"0a9cff3759bf51e4e55faa66bd972d275a633ffb","modified":1594286831524},{"_id":"source/_posts/随心记/.idea/vcs.xml","hash":"d222c1e95ba289f2814d142867f8b3c8b656bcc6","modified":1594286831490},{"_id":"source/_posts/随心记/.idea/随心记.iml","hash":"402e38def734b476c4c697c9a36892567ab6af8b","modified":1594286831432},{"_id":"source/_posts/随心记/Android学习/3-1网络访问.md","hash":"e8eca19987f00d8bac7c020de02f8e5622f691e4","modified":1596411779736},{"_id":"source/_posts/随心记/Android学习/3-2网络访问-数据格式.md","hash":"1701fc24136a4794f3061c7688be6d15881daff2","modified":1596411779738},{"_id":"source/_posts/随心记/Android学习/3-2-1安装Apache服务器.md","hash":"cf86f4ad028c21d25e8d2bf3aedad925982ddb81","modified":1596411779736},{"_id":"source/_posts/随心记/Android学习/3-3 封装网络请求.md","hash":"41687e3928c4f4feec263af021be234f35890483","modified":1596411779739},{"_id":"source/_posts/随心记/Android学习/3-4 开源网络封装库Retofit .md","hash":"cb6173bc52d66bba2d88e04aa6e3814fe8d3857e","modified":1596411779739},{"_id":"source/_posts/随心记/Android学习/Android Studio使用技巧.md","hash":"11926ed92081390f45981f696e097624fd86f024","modified":1596411779740},{"_id":"source/_posts/随心记/Android学习/BottomNavigationView控件学习md.md","hash":"7674c3c4a0c21dd84c858bfefd3d8fb5da164e31","modified":1596411779740},{"_id":"source/_posts/随心记/Android学习/Jetpack.md","hash":"cf40dce6f6bac55d7abd76504d832f8f33b8abc9","modified":1596411779741},{"_id":"source/_posts/随心记/Android学习/使用 ViewModel 处理配置更改.md","hash":"d0556e472aa79a99d1403ac31115f5638363eaab","modified":1596411779742},{"_id":"source/_posts/随心记/Android学习/基础学习.md","hash":"26c8ab33f32d32702aee83a4b3bfde27296e231d","modified":1596411779743},{"_id":"source/_posts/随心记/Android学习/视图导航.md","hash":"f138f8f57c266cdfad99bd3cf3c5503f3a60a819","modified":1596411779743},{"_id":"source/_posts/随心记/Docker学习/1-2-常用操作.md","hash":"19bba32215a73cf1a5c0dcbf6a3a8e3704c29f4a","modified":1596411779749},{"_id":"source/_posts/随心记/Bitnami虚拟机/1-2 连接SSH.md","hash":"ffc4eb5dc102f6b7cf41efe77a42231210ffbcc5","modified":1596411779746},{"_id":"source/_posts/随心记/Bitnami虚拟机/1-3 安装桌面.md","hash":"3f57dc36d4c32dbde18aaf087af203013d0ca197","modified":1596411779746},{"_id":"source/_posts/随心记/Bitnami虚拟机/2-1文档学习.md","hash":"df62baf85d4917306bbe8d2486e22da7bbb74558","modified":1596411779747},{"_id":"source/_posts/随心记/Bitnami虚拟机/简介.md","hash":"d25f08a12f1b04801abef73a3aba039c2a341b49","modified":1596411779747},{"_id":"source/_posts/随心记/GitBook学习/1-2 使用教程.md","hash":"17c77d9e16c62f4348392092a40a4637913b7b09","modified":1596411779750},{"_id":"source/_posts/随心记/Git学习/3-1 关键命令.md","hash":"367b87d71e5c6f173a7d919b53dd4b69065207e9","modified":1596411779758},{"_id":"source/_posts/随心记/Git学习/3-2 添加.md","hash":"879d8e8936051f02fe1bbd1ace4971cda5dbe3be","modified":1596411779759},{"_id":"source/_posts/随心记/IDEA/插件使用.md","hash":"8a81d1b169823a3a61ce82ee885666cd8bca7996","modified":1596411779764},{"_id":"source/_posts/随心记/Junit/junit简介.md","hash":"f871486b64d9d6e09623f384b2cae45e43edc8b2","modified":1596411779770},{"_id":"source/_posts/随心记/Kotlin学习/1.学习网址.md","hash":"dff99901e7ad3d63fcd892a9213bece164cd9eaa","modified":1596411779771},{"_id":"source/_posts/随心记/Kotlin学习/入门基础学习.md","hash":"ce947c9eae9eb879e4784011437fc2388ddbfb1c","modified":1596411779772},{"_id":"source/_posts/随心记/Kotlin学习/入门简介.md","hash":"dbb56ff44ab4b026eee50d56831d79353ded7ee9","modified":1596411779773},{"_id":"source/_posts/随心记/Kotlin学习/数据类型.md","hash":"f074afbe062b23593c740034cdc705ddbdf9461f","modified":1596411779774},{"_id":"source/_posts/随心记/Linux入门/2-1阿里云服务器远程登录密码.md","hash":"f086036efcbf7ca93bc07b16c6c322c2e3b6238a","modified":1596411779775},{"_id":"source/_posts/随心记/Linux入门/LINUX设置防火墙.md","hash":"74312973e5bc2fdc2dc2e7f5c10e048f5a79a29f","modified":1596411779778},{"_id":"source/_posts/随心记/Linux入门/Centos虚拟机网络连接问题.md","hash":"7531c570c01aaf4b3e805e5e1c147e52eb9826d7","modified":1596411779776},{"_id":"source/_posts/随心记/Linux入门/Linux准备工作.md","hash":"c24796c7581347336fd732635c18fc06a31b4f9d","modified":1596411779777},{"_id":"source/_posts/随心记/Linux入门/Nat连接网络.md","hash":"ab8123746e5e024ed74427f9f0afe0db364d6669","modified":1596411779779},{"_id":"source/_posts/随心记/Linux入门/Nginx简介.md","hash":"bc0c9bdaf15bf88375f9f6d783e88337daa2d28c","modified":1596411779780},{"_id":"source/_posts/随心记/Linux入门/Readis安装及配置.md","hash":"9734c3cd5ba6508ffa19f33d284d97daee303608","modified":1596411779780},{"_id":"source/_posts/随心记/Linux入门/Untitled.md","hash":"6e6bbc3541557598ad2cade8c04a51b000233062","modified":1596411779781},{"_id":"source/_posts/随心记/Linux入门/iptables的学习.md","hash":"b57102d96119b2f1bd5402265feb9aa390d4c823","modified":1596411779776},{"_id":"source/_posts/随心记/Linux入门/mysql安装.md","hash":"6458c811130defc7972ad0b08c36519652166256","modified":1596411779778},{"_id":"source/_posts/随心记/Linux入门/文件命令操作md.md","hash":"c405a084a7bde87fae743566825eee7f8a4822f2","modified":1596411779781},{"_id":"source/_posts/随心记/.git/index","hash":"fdc6d83617594a89aa89c38ec62a854ba2ab24ba","modified":1596794837424},{"_id":"source/_posts/随心记/Linux入门/用户操作.md","hash":"b803af47076079a552fbab383ad6a70de53724fe","modified":1596411779782},{"_id":"source/_posts/随心记/Linux入门/防火墙的设置.md","hash":"d45715aee98fe53d2e44d11d6e3bfa7615a811f6","modified":1596411779782},{"_id":"source/_posts/随心记/MySQL8.0/从安装到卸载.md","hash":"5895c1831170afb275f13a8715a6e181dca568d3","modified":1596411779784},{"_id":"source/_posts/随心记/MySQL8.0/初始化密码.md","hash":"59b0c3149fafc5b5f361f02627a02ad560c01376","modified":1596411779785},{"_id":"source/_posts/随心记/Redis学习/1-1-安装.md","hash":"7a1403470d2586c937509cc281723625a0e9196b","modified":1596411779786},{"_id":"source/_posts/随心记/Redis学习/1-2-Redis启动.md","hash":"6fd60407ee5374e68da58e2ab2a80623039d6d40","modified":1596411779787},{"_id":"source/_posts/随心记/Redis学习/2-1-数据结构.md","hash":"666f1a3a586661410ac6a80c999f6dfcd3c79cac","modified":1596411779788},{"_id":"source/_posts/随心记/Redis学习/2-2 数据结构的常用命令.md","hash":"3a5b9d0ffbe2484927c2e875cd94bc355ae32a6b","modified":1596411779788},{"_id":"source/_posts/随心记/Redis学习/3-1分布式锁.md","hash":"3b2f1bb6e160e237b74f85542f7127494b10b30f","modified":1596411779789},{"_id":"source/_posts/随心记/Redis学习/3-2 Lua脚本.md","hash":"22bf96c2aa31ed8acf123f201945cf9e26e1d686","modified":1596411779790},{"_id":"source/_posts/随心记/Redis学习/3-3 消息队列.md","hash":"800d4546f109db042b2d4f9f8a3ca5f27500610d","modified":1596411779791},{"_id":"source/_posts/随心记/Redis学习/Java客户端.md","hash":"5a394363e9444ac3a1d33cba05598a9f621243b4","modified":1596411779791},{"_id":"source/_posts/随心记/Redis学习/简介.md","hash":"b1cf81ac0cc43f1478660022c6c33ed0727cf64e","modified":1596411779792},{"_id":"source/_posts/随心记/Redis学习/错误问题.md","hash":"a106618fe771ef95caad48c089cefe3493cd1867","modified":1596411779792},{"_id":"source/_posts/随心记/.idea/workspace.xml","hash":"5a1f697a679165705e269843743b259a3debd365","modified":1594723671628},{"_id":"source/_posts/随心记/java_web/Linux.md","hash":"4884d3a8971a7381c4b797b60bf6af83298d9bf9","modified":1596411779766},{"_id":"source/_posts/随心记/images/ip.PNG","hash":"78b2b58739f3aaa89a01c84fe76fb090131248cb","modified":1568120320484},{"_id":"source/_posts/随心记/java_web/IO流编程.xmind","hash":"82e64e6dd05127133d1bfee7c9c940ca232cf306","modified":1573901791386},{"_id":"source/_posts/随心记/java_web/MyBatis框架.md","hash":"10b3faea0baa239befa6f0f27df620bdf3be75b7","modified":1596411779767},{"_id":"source/_posts/随心记/java_web/Nginx学习.xmind","hash":"48dab121ec19d7fc6aea1241d8f96ef2d62283c8","modified":1573049942841},{"_id":"source/_posts/随心记/Android学习/代码框架.xmind","hash":"86173c4afdde0456395ae718d8550be4d43e5cce","modified":1569151163548},{"_id":"source/_posts/随心记/java_web/Spring入门.md","hash":"23f9dde9f9b3f1b1d58c3e1fbc3966f83de25b1c","modified":1596411779768},{"_id":"source/_posts/随心记/Linux入门/nat.PNG","hash":"78c0c9d8f4e941a7a3a65a82e88904f4211cb3b3","modified":1572747326491},{"_id":"source/_posts/随心记/java_web/linux常用命令.md","hash":"309f7de7b1466832bee7ff2278d2ebb78c46e8bf","modified":1596411779767},{"_id":"source/_posts/随心记/java_web/多线程编程.md","hash":"6c0c9e5dd78473cee8da649da0491481e0c70a63","modified":1596411779769},{"_id":"source/_posts/随心记/java_web/字节流与字符流.md","hash":"8f5cd9afa18bd29d9a4af5a2a8e462538516a89e","modified":1596411779769},{"_id":"source/_posts/随心记/java_web/多线程编程.xmind","hash":"9632ca9d555c76120aab12b0cdda5743c9b9a794","modified":1572687220875},{"_id":"source/_posts/随心记/java_web/字节流与字符流.xmind","hash":"054a745e7984987633ccabdd5de2dbe77fca0998","modified":1573983919217},{"_id":"source/_posts/随心记/java_web/Linux学习.xmind","hash":"0c6973bbb17cd06b0bb9eb4a34e1a32926ef6503","modified":1572960689945},{"_id":"source/_posts/随心记/java_web/线性代数学习.xmind","hash":"c39182c96e58e0b045722f77a9d52286fbfca761","modified":1573274193997},{"_id":"source/_posts/随心记/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1594286787123},{"_id":"source/_posts/随心记/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1594286787130},{"_id":"source/_posts/随心记/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1594286787131},{"_id":"source/_posts/随心记/java_web/java网络编程.xmind","hash":"a88a2809082c0e53f38dd84da76899e54b29ec7e","modified":1573555330585},{"_id":"source/_posts/随心记/.git/hooks/pre-merge-commit.sample","hash":"04c64e58bc25c149482ed45dbd79e40effb89eb7","modified":1594286787132},{"_id":"source/_posts/随心记/.git/hooks/fsmonitor-watchman.sample","hash":"118ff5509f187039734d04456bf01e44c933ac19","modified":1594286787124},{"_id":"source/_posts/随心记/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1594286787133},{"_id":"source/_posts/随心记/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1594286787134},{"_id":"source/_posts/随心记/.git/hooks/pre-commit.sample","hash":"a79d057388ee2c2fe6561d7697f1f5efcff96f23","modified":1594286787131},{"_id":"source/_posts/随心记/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1594286787133},{"_id":"source/_posts/随心记/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1594286787123},{"_id":"source/_posts/随心记/.git/logs/HEAD","hash":"aaa7808b9ff9f1bdfd0cf4dfb6e5322a65398765","modified":1596794837484},{"_id":"source/_posts/随心记/.git/hooks/update.sample","hash":"92e81cca38312414b140f52b9de0655ee232f65f","modified":1594286787147},{"_id":"source/_posts/随心记/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1594286787134},{"_id":"source/_posts/随心记/Android学习/imgs/2_1.PNG","hash":"a4c07eed5798210e8bf72e013dcf87c2490d20d9","modified":1568793575492},{"_id":"source/_posts/随心记/Android学习/imgs/3.PNG","hash":"460eb84b336bdbb9423a2f256b1820414d5e0373","modified":1568793494145},{"_id":"source/_posts/随心记/Android学习/imgs/1.PNG","hash":"5bca4f166eebfc3068727977f44d071d4682da42","modified":1568793044428},{"_id":"source/_posts/随心记/Docker学习/image/image-20200707220336806.png","hash":"21de78136f38718a4d7fb214ef1e0fa2cc592cb9","modified":1594130639786},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708113748295.png","hash":"a4071056fd0223c7881b22b95a508389af3b55b3","modified":1594179476812},{"_id":"source/_posts/随心记/Android学习/imgs/4.PNG","hash":"844c8319daf1de3ae60161996a0b2d6d1c15f35e","modified":1568793526446},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708121651755.png","hash":"91cd0ed79c4187d6668ee19ff9b19619095f1489","modified":1594181816114},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708122451427.png","hash":"f3d33cae1df0c662130c1ec4eb8db0070a24e4b1","modified":1594182295202},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708152004367.png","hash":"a3c64ca84aa3579b603b657ebd37df158e495cfc","modified":1594192809149},{"_id":"source/_posts/随心记/Android学习/imgs/2.PNG","hash":"dd79176764c2ed1b8f6c1aea7ab7da7e42560a5e","modified":1568793422092},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708114704238.png","hash":"43316a7c7bf70a57667bd85096efa51450fd7493","modified":1594180031313},{"_id":"source/_posts/随心记/Docker学习/image/image-20200708123652649.png","hash":"2e1749f416f3adf565f710b29045ff4bcdb33ea8","modified":1594183016916},{"_id":"source/_posts/随心记/images/github图片测试/image-20200709175912678.png","hash":"93038e2fd448657b740e0f53cc8056c08e50ce14","modified":1594288752713},{"_id":"source/_posts/随心记/IDEA/images/image-20200709163822684.png","hash":"de5ec75d9796a07077933bc4f76d8e9eea8092a2","modified":1594284237940},{"_id":"source/_posts/随心记/images/github图片测试/image-20200709181849872.png","hash":"2d417249fcbe42e0dc7a778f90c0ebcaf64fa680","modified":1594289929908},{"_id":"source/_posts/随心记/images/github图片测试/image-20200709180942230.png","hash":"708f6f309f57a331eed4e3b5d863e3f3b98c128e","modified":1594289382238},{"_id":"source/_posts/随心记/.git/objects/00/414567aa4797ce48fc046fd62b697eada227a7","hash":"2148cb6823cc8f111b62551d87422e3540f95052","modified":1594286820764},{"_id":"source/_posts/随心记/.git/objects/00/e05ea2148b95631ab2c7ab7d11d4c9e43da75f","hash":"9f66ad25a16279861aa82f2e94ff7ce1c10331ed","modified":1594286820300},{"_id":"source/_posts/随心记/IDEA/images/1.PNG","hash":"b41ec4886ff8ffe54b668d93547b739ee1be2e30","modified":1568034871246},{"_id":"source/_posts/随心记/IDEA/images/pv.PNG","hash":"b542cc7156ca5c9a7e7385e9d90a5656ce13c577","modified":1569049959083},{"_id":"source/_posts/随心记/.git/objects/06/bc58fd95bafa8cb2f8f24858be44b0c651e46e","hash":"b5876f2c3ec8db438e9a1701b2206ab2641a32af","modified":1594289604000},{"_id":"source/_posts/随心记/.git/objects/07/11ecbbfa32944bd141b656785ab4f7631c3f45","hash":"da9094558b9eca15f4bdd8ac7eddfd79fcc8467a","modified":1594723121000},{"_id":"source/_posts/随心记/.git/objects/07/333680dd5a1d66b21469b0fe4770e5c9ad33c6","hash":"4932ee8b41e2e13fabf3949b2d58a25648fcf24c","modified":1594722968685},{"_id":"source/_posts/随心记/.git/objects/08/ef63b6fecde53bc0fe92a4e291c86e47977d91","hash":"4a29db11ec28182ad391e7a32790bf9a46180675","modified":1594286822578},{"_id":"source/_posts/随心记/.git/objects/0a/2c09e54f1bd4e844c5319a7e618cd840397155","hash":"2efe1f97e1e29f8b318f6ba0041e8ef8a9f3b578","modified":1594722968781},{"_id":"source/_posts/随心记/.git/objects/0b/1158bf6fd90e1057a12494caa6a50b10726823","hash":"c2d59d3f2947b64697510b6d0e8f0ac0543b9977","modified":1594286821184},{"_id":"source/_posts/随心记/.git/objects/0f/11c34105ad52637fc5dbbd2911e51cc4dce4fd","hash":"1e8eb656b0390690d81e60587edce060391b353a","modified":1594723120834},{"_id":"source/_posts/随心记/.git/objects/0f/68314aee47f0aab104932db3355117bc097b54","hash":"ff692bc60eab3fca8f8989e816f353c1eb2a86dd","modified":1594286822786},{"_id":"source/_posts/随心记/.git/objects/17/44af02e9344b3cc50b5e82cd22336dc0f26ec7","hash":"ecead3e1f4a1aaa026190550d3f3ad5ab7f38934","modified":1594286820677},{"_id":"source/_posts/随心记/.git/objects/17/c6f64b4d05740b10c98c48a2949463be6f9868","hash":"b7b6e7b5ec44649c531959621cb205566e86e4cc","modified":1594286822761},{"_id":"source/_posts/随心记/.git/objects/05/efdf6a3c60bf28e250ce4ebcda8f1d8981f89e","hash":"2a9197e1e5f22eadaa19f5b7997dbed7c9637ab6","modified":1594286820336},{"_id":"source/_posts/随心记/.git/objects/0b/62523b3fd2075f40138d28710962f96e6350cc","hash":"55a7da3f623dde2f614c5ca284857a4479d02997","modified":1594722968153},{"_id":"source/_posts/随心记/.git/objects/1e/9c04c0d1ef5732d7b7cc9f581a0e4d73c9fa95","hash":"284f706cb0ea42a1588c01c4f461789a065cdfbe","modified":1594286822602},{"_id":"source/_posts/随心记/.git/objects/21/2b1c899aacedb5bfda31d508c8b64844eeeefd","hash":"a3211a1e340d2ce4dd80288ff43f80cc8d6b8c15","modified":1594722967935},{"_id":"source/_posts/随心记/.git/objects/1c/422f6a499387d61061fd51d6bcfe6ee62ec53e","hash":"ba2418cbcbf299030689d0887c00aac6af15cc18","modified":1594288553321},{"_id":"source/_posts/随心记/.git/objects/21/40ac17b2b6e738175e2cecc1172ad9bd4dd5ac","hash":"a42b5947e54785b6b59d66bfb8cff454d5a7e686","modified":1594286822404},{"_id":"source/_posts/随心记/.git/objects/24/4e8c53040a76b108bb75c1cfb244fe2776ee52","hash":"97f7bdbec40e6f62d4a77147774034700a8a0c7d","modified":1594286820627},{"_id":"source/_posts/随心记/.git/objects/25/bc57764874e73483e84b018eb05326eb062bf7","hash":"926c8f1383a22c65b240105b10b4248a11cf7806","modified":1594286823219},{"_id":"source/_posts/随心记/.git/objects/23/ce511ffc710f74589f3dac0298c29ab5c147b6","hash":"ffafdabd6995c3733b54ca69ba3c015bf52577e8","modified":1594286820802},{"_id":"source/_posts/随心记/.git/objects/2f/ce4c5c957f5a9bce85909faa3bc24dba0fb375","hash":"a0680d7c8690bcfe67173239dec684045f5b6600","modified":1594286822037},{"_id":"source/_posts/随心记/.git/objects/2d/4e4b4f3d2f6fb39efbc4d25ad0515c2d69adf0","hash":"8652e98c930e9603480ea6efcc6f602bee4225be","modified":1594723121092},{"_id":"source/_posts/随心记/.git/objects/2f/46497ffa325d19e90d58efe37aa1728abd32c6","hash":"7ada97ddaf1ab40a762f35a1c85cba15d9e34c71","modified":1594722968199},{"_id":"source/_posts/随心记/.git/objects/31/3c5231bc07b5ebbcd38a88d0d48df75db23cc1","hash":"570635452afb8b0d72783e80c2b2ce635a0fbb62","modified":1594723121192},{"_id":"source/_posts/随心记/.git/objects/4a/c8132e46c2fe176ce6168ebf4c38e974f06e4d","hash":"3926a998f77e66454b7d9a2d4e08fc68ec2e7c4e","modified":1594286822380},{"_id":"source/_posts/随心记/.git/objects/4d/02ef069b98d775711153a78f913bec91c49a2e","hash":"6e5657821d9b51911430227581718b820906bd9b","modified":1594286823059},{"_id":"source/_posts/随心记/.git/objects/4d/2289ffd250a1fcc9abed037afcedd86f5107aa","hash":"b9e22f924bbbb0bfef367902f237eacbf259a5dc","modified":1594286823293},{"_id":"source/_posts/随心记/.git/objects/51/2621711d8919d1cad7181e26cca00c85b512ca","hash":"a62617cf3fbd983e77d7068ad3b0896a89743ca7","modified":1594723121059},{"_id":"source/_posts/随心记/.git/objects/51/8fbf1f85bc23b45d30361d8592364fbce56a6b","hash":"bb6c31c43bd76823cf059a6db83109c927ef27f4","modified":1594286822950},{"_id":"source/_posts/随心记/.git/objects/51/9c13bae20685e8212b99253efe68c22a009aea","hash":"28b2f8f70919709b42f79ac0ee4e331fdea86a1b","modified":1594289035098},{"_id":"source/_posts/随心记/.git/objects/54/7e5fe36345179d81d38a4e16c99274c28915a4","hash":"27753669323d271faf77b5d8691d58fb7a60a1ea","modified":1594722967664},{"_id":"source/_posts/随心记/.git/objects/50/66a7eea6100a626ac14e23817bda23c8c72fc2","hash":"e182a794dbec9541b7ddaee0cec0b0550aed20c5","modified":1594722968593},{"_id":"source/_posts/随心记/.git/objects/54/aa16b56c3d7a63c88d0bc0f9e511e4c4fec06f","hash":"103026184d4b4b10d12865e468b6c6716b619f24","modified":1594286821844},{"_id":"source/_posts/随心记/.git/objects/39/63383e05dfc77b8eaddbc74854112623c8de4f","hash":"aa71caadd045dd7cbd34aafa9e5eacb776f3bd18","modified":1594286820498},{"_id":"source/_posts/随心记/.git/objects/59/c421c0d062a19a90f39395a16b824f1b0ecd9a","hash":"818e097af9f0edbef044c6a53de6ee042f931714","modified":1594286823510},{"_id":"source/_posts/随心记/.git/objects/59/d1ce789edc53d1aba7f716bc06a577ce228af9","hash":"5c4fc54694c3351afff6636d27cbc2f239f5669a","modified":1594286822659},{"_id":"source/_posts/随心记/.git/objects/54/1591e983e706e5e0c9d7875ff1d8435a33f412","hash":"e13e027055a018d30b738c2b62afee52a17cd864","modified":1594722968472},{"_id":"source/_posts/随心记/.git/objects/55/064faceeabdf26386c03bbdc3ad29e8eeeded5","hash":"a21f60b7d1fe6866a39e99bdefe8bc8e76fe45a7","modified":1594286822534},{"_id":"source/_posts/随心记/.git/objects/57/5104614966a66958e054deacf5dad6a526bd4e","hash":"4c9e5585be2acdc59ea3239cccb69841da2f14cd","modified":1594286820995},{"_id":"source/_posts/随心记/.git/objects/66/c8f644338a3d2fa20e827935ef1c404d80321f","hash":"82b26223d03c4aacb152f6fce92760a509c7ab16","modified":1594286822000},{"_id":"source/_posts/随心记/.git/objects/6b/735de3ed1841ea4764c60dcbc53903676c94a4","hash":"341a12c9092c2a73ae7abf4b712c100c4225f31f","modified":1594723121126},{"_id":"source/_posts/随心记/.git/objects/61/bfa91f1f1f8648c0785b26cc0bce66302fa06d","hash":"c9ecef2c95b056138c85190360652d1e8464e3a7","modified":1594286822008},{"_id":"source/_posts/随心记/.git/objects/70/c0d3a0603c413e22b71dc506dcfa490cc07963","hash":"d1979c5bb480395ba48913224a6719076f8cd435","modified":1594288879227},{"_id":"source/_posts/随心记/.git/objects/70/fe2db55a6ba22681ceb0d936f4fe70d73bee0b","hash":"9467347830eedb40aabb528c2fa90cf346f01ba7","modified":1594286822000},{"_id":"source/_posts/随心记/.git/objects/6e/47db5874daf9fbd23eebe24553045ee0947a36","hash":"7c77a098ed2183106dc57aa5294c1a69c852a814","modified":1594723120775},{"_id":"source/_posts/随心记/.git/objects/01/bd745ac1f676ec17f1bcce4d6b4c1123aff8f2","hash":"398afee08a2a8d3cee18ef7033f4d87323589c6a","modified":1594286821630},{"_id":"source/_posts/随心记/.git/objects/81/d04c565f4ca548723ce10d9f5d766f1e47cf04","hash":"d3cb61bcbc6e758dcea253cf4903ab93ac438f4c","modified":1594286822151},{"_id":"source/_posts/随心记/.git/objects/87/26b744245fd712611b5b185d2ddc847f775469","hash":"544e167af0c717f911ce7af8e33a62479ed2afa1","modified":1594722968101},{"_id":"source/_posts/随心记/.git/objects/8f/4bfb8464c59205a104ac98d4d376907dcdd70b","hash":"2a917cb26f875e75bec37ae1977e70170d2ac4a3","modified":1594286821973},{"_id":"source/_posts/随心记/.git/objects/8b/d228f8f2366620a841d85a8aa6ec093e1e7946","hash":"83d85b9f7e0812ba53e77f99a7e4b4efd837bd85","modified":1594722968029},{"_id":"source/_posts/随心记/.git/objects/ba/26e81acfed34cb143dc3e504f12b466acb3779","hash":"c0836cbd739fc6bf50a2c5754d233ee68829c937","modified":1594286822975},{"_id":"source/_posts/随心记/.git/objects/8a/ef80879147d49c0cf1bdc1841d0d3a85278763","hash":"e0cae2a8b567c2c522f4821efdab5062d52ae9d6","modified":1594722967832},{"_id":"source/_posts/随心记/.git/objects/b7/848b5c4f7af7062c1ae6755df3f0673d4cc21d","hash":"9d86da62a21c382c0a0172869b3b98b17b644849","modified":1594286821598},{"_id":"source/_posts/随心记/.git/objects/be/c1aa0b3ef5b09c064b2e16d0dbfbdafdfec52d","hash":"9a0cbed8d76edbecb73df8fc472f5ead400f4b0e","modified":1594286821000},{"_id":"source/_posts/随心记/.git/objects/be/86867737a58cebb2063e699c2e59c523383a54","hash":"ff45f3e838ababaaf6efe6b280621492d72885e7","modified":1594286820423},{"_id":"source/_posts/随心记/.git/objects/b0/de160bc02716f721ff93885342a8eb91215e18","hash":"eb341732cf833920a2f9636b1173a2fc839874cf","modified":1594286820459},{"_id":"source/_posts/随心记/.git/objects/e7/417f587372c71b6bf1a55fd9fbd855a4f6335c","hash":"91ee371eaa76d1de98d9eed9b7740db1db9da2a8","modified":1594723121274},{"_id":"source/_posts/随心记/.git/objects/e5/6026f65d9b3a14f1c5181deda7dcdcb1b2ecec","hash":"c5ac0e15b4849769a448ec5d8367766e6a1d363a","modified":1594722968739},{"_id":"source/_posts/随心记/.git/objects/eb/f4363bab9c4a75ef7f5e5946976f2c757d67f8","hash":"2e01c8c6a0411fb50879ce2c8d52a4218a808564","modified":1594286820561},{"_id":"source/_posts/随心记/.git/objects/70/2802fa2ec5362f2b674bd80adcb550cf40ad23","hash":"ecdba51a4fb6ed460577bd9451a11d65f9e3e634","modified":1594722968354},{"_id":"source/_posts/随心记/.git/objects/f2/b6c2944df678f6a1d6a7171a82c661e1df7dbe","hash":"3931f672af034680a60cf30d0f5cf6778e0bea3c","modified":1594722967000},{"_id":"source/_posts/随心记/.git/objects/ef/250edde93eaf49efe72f04bce2edea74516291","hash":"da60806bf66e468fc3d874fbe0d7ed899c8581de","modified":1594289602768},{"_id":"source/_posts/随心记/Android学习/images/3-2网络访问-数据格式/image-20200729183205497.png","hash":"d52e7708db884bf5ca8836ae641b52d5bddbb8ad","modified":1596018725516},{"_id":"source/_posts/随心记/Android学习/images/3-2网络访问-数据格式/image-20200729183731141.png","hash":"7e167793b37a288af41dd97c8e5b9dc72ee03e6f","modified":1596019051156},{"_id":"source/_posts/随心记/.git/objects/e9/9049f91269498a49d09884009563f8aac85394","hash":"e977da336da4a9f2cfac6ca1bec93e99c47d1257","modified":1594286821567},{"_id":"source/_posts/随心记/Android学习/images/3-2网络访问-数据格式/image-20200729223542261.png","hash":"4aa937e82530530d9ad2eff95ac830798e59f030","modified":1596033342333},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200718112818773.png","hash":"5de7190fdd986d66fbf2907266cda595b04eee8f","modified":1595042898784},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200721154242410.png","hash":"ac6dfe1d96a3442ed841bdc9f0ed5cb893bc6fb5","modified":1595317362439},{"_id":"source/_posts/随心记/Android学习/images/3-2网络访问-数据格式/image-20200729183918461.png","hash":"7e167793b37a288af41dd97c8e5b9dc72ee03e6f","modified":1596019158545},{"_id":"source/_posts/随心记/Android学习/images/Android Studio使用技巧/image-20200718112818773.png","hash":"5de7190fdd986d66fbf2907266cda595b04eee8f","modified":1595307901934},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200722131636968.png","hash":"cc46384b699aeda03e2db828e5223d2612492b2f","modified":1595394997083},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200722134519104.png","hash":"d2e4dbdff95a6078993fc6b4ca91633d65b72372","modified":1595396719148},{"_id":"source/_posts/随心记/Android学习/images/视图导航/image-20200721082851327.png","hash":"29c10ecff99016b7a4e8156737763a577be21b30","modified":1595291331330},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200722073351427.png","hash":"bc259633a24338f5b074aa3f56167cd91f620089","modified":1595374431436},{"_id":"source/_posts/随心记/Android学习/images/视图导航/image-20200721082952691.png","hash":"a2a39c0c19eeaea6fcbecc739805dc6e1a6720ef","modified":1595291392753},{"_id":"source/_posts/随心记/Android学习/images/基础学习/image-20200721131037492.png","hash":"bc18cdfcc25383908faf5552d0b4cfa02baa7ee8","modified":1595308237508},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114146505.png","hash":"e188ea68f6e184d6096e5ffbf8381f3b52369530","modified":1596080506532},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730120842595.png","hash":"50597bc67151e4e6080d24b1c30009bfc7b9a3a3","modified":1596082122639},{"_id":"source/_posts/随心记/GitHub学习/创建个人博客/Hexo/3-1 hexo与md文件格式的冲突.md","hash":"2e00a9fc19a3bcdd16b3c94e18fefe9f4cb4f0a6","modified":1596411779755},{"_id":"source/_posts/随心记/IDEA/images/插件使用/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png","hash":"122c7d3f4ec4545eb4e6a983ccb0da34a685139a","modified":1594712521757},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730120745221.png","hash":"f0472c9bd6ff97785c9e066814d500faf1f48368","modified":1596082065241},{"_id":"source/_posts/随心记/Android学习/images/视图导航/image-20200721083022645.png","hash":"7b05df2e47c16ba4edb3c5ecdfb080d52362ee66","modified":1595291422684},{"_id":"source/_posts/随心记/IDEA/images/插件使用/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png","hash":"b1440dc1034cb4b22b266fea2cd7c642d98ab04d","modified":1594712500972},{"_id":"source/_posts/随心记/IDEA/images/插件使用/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png","hash":"c2700b30fa9e7e38fb90ff5bc388d2b4d18bc605","modified":1594712502156},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_01.744aa29f671017172e3c9d39263911a6.png","hash":"1ea2df966acd48483fc31efe9cff10bbe65c4f9f","modified":1594712558413},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114825464.png","hash":"a0da3b2404540e3846aae2c82b3b4e5d673cbe51","modified":1596080905480},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_05.efa49d39678c3f178d2f2f81b514a90d.png","hash":"c74be69dafd09d1b6b30a9260c1df780e85d3d70","modified":1594712558907},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_07.1617b0baceaa44778ff1d527ded0fd0d.png","hash":"478352ebbaa85ce8171ff81ec6be9f7a8ea77a3b","modified":1594712558644},{"_id":"source/_posts/随心记/IDEA/images/插件使用/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png","hash":"5a5501c317e27b00933e938385b5878de76a1729","modified":1594712557287},{"_id":"source/_posts/随心记/java_web/MyBatis框架.xmind","hash":"92b6a80a8e9e32e08406c027d98b93310b3b7fe1","modified":1573045910095},{"_id":"source/_posts/随心记/java_web/Redis应用.xmind","hash":"257a2be18c7abb15780a2285b60d0570ea10ea47","modified":1595474503190},{"_id":"source/_posts/随心记/java_web/Spring入门.xmind","hash":"e014d894bf501eb44420a1b373882ffc5f1ab586","modified":1569050234213},{"_id":"source/_posts/随心记/java_web/linux常用命令.xmind","hash":"d4f72f82307a993d0810e6bb6cc8912a1edebe42","modified":1590896741331},{"_id":"source/_posts/随心记/.git/logs/refs/heads/master","hash":"aaa7808b9ff9f1bdfd0cf4dfb6e5322a65398765","modified":1596794837485},{"_id":"source/_posts/随心记/.git/objects/1c/d1f8a2912acef25e12e135d726fc0a7fdb3138","hash":"e511e3534846c1bff100dfc2c5037d04c3fa1246","modified":1594286822456},{"_id":"source/_posts/随心记/.git/objects/4a/1020b0379e79a7ee65d89d1098669581322d6e","hash":"f1f6fa62a1dafcd0018073d6d5e273f27d86da58","modified":1594722968513},{"_id":"source/_posts/随心记/.git/objects/37/84892b753039773bb123c102021d3d6595fe58","hash":"35e6b0d429ded8de809e87d0ed4fa887a6bdcf5d","modified":1594286822340},{"_id":"source/_posts/随心记/.git/objects/ec/1ff1569e40786c833fd8e39d322ae649cf1807","hash":"e66f43080d04442bbef3ba1a0f1774efa92f6117","modified":1594286822224},{"_id":"source/_posts/随心记/.git/objects/dd/87f94d9d9b8ea279525250d53c7dd80ddf9de6","hash":"9c290c02439a1efd336479bc2e3cbb148c461f18","modified":1594722968556},{"_id":"source/_posts/随心记/Android学习/images/Android Studio使用技巧/image-20200718112705738.png","hash":"51e3f7c606bc4939e8ab352d42c58a6c8a7a4761","modified":1595307901933},{"_id":"source/_posts/随心记/Android学习/images/3-1网络访问/image-20200729175044618.png","hash":"6e067f5309c7622a041658b9b75740b89d02545f","modified":1596016244701},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200718112705738.png","hash":"51e3f7c606bc4939e8ab352d42c58a6c8a7a4761","modified":1595042825776},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200722181709403.png","hash":"99dad076b767d95d4b5cedbc0a7a2f4559b5a25e","modified":1595413029444},{"_id":"source/_posts/随心记/Bitnami虚拟机/images/1-1 安装bitnami虚拟机/image-20200730114615539.png","hash":"a6858a8170c495bb493457a16ead492dc8ad1ee3","modified":1596080775638},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png","hash":"7014ba8af7db2548be8be98437a578e1a17e4dd9","modified":1594712558943},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_06.7c4f84689dc6759e6ec19403b18a73d6.png","hash":"666a554fc4c18d023265297be156b478c0a3003a","modified":1594712559430},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_08.cc3816166c730ecb6f6e8a27ccc94365.png","hash":"64899d83eef1f17f5664007cd7d6f0af0c22b076","modified":1594712559576},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_09.93af76e45e1601443df91ae031ae19fb.png","hash":"74f4106de16d059f085bd9b7dac13db74763cb59","modified":1594712558977},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_10.80466706a44b4b8ae23706269ad9d3c5.png","hash":"4f1b28bb26348ba6d45a344c9e181179797427f3","modified":1594712558450},{"_id":"source/_posts/随心记/.git/logs/refs/remotes/origin/master","hash":"30b2bb8f169e6e3398479a2469a9ea7d950cb18a","modified":1594723183066},{"_id":"source/_posts/随心记/Android学习/images/Jetpack/image-20200721153616389.png","hash":"76bfe5dbb92ae324d81e4e4d3ab5b3187c06fbf8","modified":1595316976457},{"_id":"source/_posts/随心记/.git/objects/04/fce86166323229216b2e6f37a02b7ce100a430","hash":"72260a4b8b30e3cdedd272c5b67301dd7a71d9c6","modified":1594722968280},{"_id":"source/_posts/随心记/IDEA/images/插件使用/search_04.ae928872ebf259913520f3ba8e543e62.png","hash":"3a50750ec00e4f0ce66d163143c3a0c97e981cc2","modified":1594712582668},{"_id":"source/_posts/随心记/.git/objects/dc/eb9a2e983103487b499ca0349647871b7177ff","hash":"6b194ca238e49aab8bf0c1823bf933baacf0e1b1","modified":1594289035000},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/bian-xie-kai-yuan-ku/permissionx-quan-xian-guan-li-ku/index.html","hash":"799eeb8579a9ec91dc29be00e2f24137aafcbfc2","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/xiang-mu-qian-qi-gou-jian/index.html","hash":"592fa15c9543435bd240ee4e02a8739b2edc55c2","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/1-1-an-zhuang-huan-jing/index.html","hash":"5cff6ceed9123f86e23c895fbac6abb95e7b0434","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xiang-mu-zhi-shi-dian/index.html","hash":"b3e7ee9dfeafec414aa10077d7970354db2fd1ef","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xu-qiu-wen-dang/index.html","hash":"ac54d895810ba773fbb3f2ebd5a8c6282407fecb","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/01-spring-boot-ru-men/index.html","hash":"62e43ad1fb27afced0cd04a0cdbdb355a61db82b","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/gong-neng-xu-qiu-yu-ji-zhu-ke-xing-xing-fen-xi/index.html","hash":"b48ffa73d4c4142cfbfca34fcaf32e2923514dbc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/qian-qi-zhun-bei/index.html","hash":"01d6acd1e5ed4e196929c1c4fcdc8420ee4a75bf","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/xiang-mu-shi-zhan/kotlin-kai-fa-dian-shang-app/2-1android-moudle-yu-libery-qie-huan/index.html","hash":"b9c94a2514763c672afd89886092d499a03383ed","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/vsftpd/index.html","hash":"fb3605d5fc70925a21cccd0db05a092f8162c869","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/mysql-shu-ju-ku-de-an-zhuang-yu-pei-zhi/index.html","hash":"7a4ba0db8e4826c97a971b912e4395a89a3f4625","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/linux-she-zhi-fang-huo-qiang/index.html","hash":"dc15cc013e6690ea8fb15b4bde78759daf6d6548","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/iptables-de-xue-xi/index.html","hash":"c919f5aeadb67db30748c68d81f5e4247a7e9cc9","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/qi-ye-ji-quan-xian-guan-li/kuang-jia-da-jian/index.html","hash":"545f93a87b1603d3ad7e2775591dee2f4f12db80","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/spring/spring-yuan-ma-xue-xi/wen-ti-zong-jie/index.html","hash":"fde24becc98629ae46c4b3fe115172e3a9a5fd1f","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/spring/spring-yuan-ma-xue-xi/spring-framework-jian-jie/index.html","hash":"3d92726d4a2c0e2456d11428b5b1c7b4321768de","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/spring/springtest/xue-xi-ji-lu-yi/index.html","hash":"186bb7625ab3dbaa090bc43835e8d927b4cae31d","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/spring/spring-mybatis-xiang-mu/1-1-ru-men-xue-xi/index.html","hash":"04cbb28f06c46cd9191d6584d22e259f6f07f76d","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/spring/spring-zhu-jie/index.html","hash":"e060a37a810285cfc71864915bdbda188e230d05","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/cuo-wu-wen-ti/index.html","hash":"3b3e5fa3bcc54ab469f8143e6be0f3b057d7fb07","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/jian-jie/index.html","hash":"1c76b7ea1663fd3271075cbabebc8404155ea82d","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/java-ke-hu-duan/index.html","hash":"e61b2975a01a263021d2debfc3dae5ec9a88451d","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/3-3-xiao-xi-dui-lie/index.html","hash":"221edfac70a70cdad4594b1bf57aa599fc5903c9","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/3-2-lua-jiao-ben/index.html","hash":"68fc5305834bea2d836d08712c5a882ed724de1b","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/3-1-fen-bu-shi-suo/index.html","hash":"6dbbcc7f5f0be26f41edbef7f4db2e4e1aeac590","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/2-2-shu-ju-jie-gou-de-chang-yong-ming-ling/index.html","hash":"86949095bf0d8b4ebd07ece1269c864bf8d294fb","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/2-1-shu-ju-jie-gou/index.html","hash":"cfcc466384c1e05c8b8c143dbfdf370ea32fc4f8","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/1-2-redis-qi-dong/index.html","hash":"566662bbfc413164bb7ef6a0167ffbf16bcc7401","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/redis-xue-xi/1-1-an-zhuang/index.html","hash":"71c60f62c3b8cbf6ba34e643a5308efea5453d33","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/mysql8.0/chu-shi-hua-mi-ma/index.html","hash":"e0cdafdc53c59b55fe677d34553b3f71414eb3a5","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/mysql8.0/cong-an-zhuang-dao-xie-zai/index.html","hash":"aefb0b905c4a7f58a1c6ef6fd6140c5efbd9b230","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/maven-he-gradle/index/index.html","hash":"17674675dd78bf96608909aee4c306067a5211f5","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/fang-huo-qiang-de-she-zhi/index.html","hash":"8ebe3ba609b034e6b0ec74560b2ada00c34d8a41","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/yong-hu-cao-zuo/index.html","hash":"b014d73851c2abec45dbcc4f16de9647aa172026","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/wen-jian-ming-ling-cao-zuo-md/index.html","hash":"31dff3dd5ab9e7c7b892fdd0e07a2083e1821dc3","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/untitled/index.html","hash":"00dd2f9140cf9a45e752cb81b55127d1f1877f67","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/readis-an-zhuang-ji-pei-zhi/index.html","hash":"9a15f69f7f7ecddc347feae55bba881d8d0a8157","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/nginx-jian-jie/index.html","hash":"a17f13894fa7349a7b982127055801f9af759b0f","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/nat-lian-jie-wang-luo/index.html","hash":"df78d1e97967c39347a5ff86b1f8195f3f71f309","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/mysql-an-zhuang/index.html","hash":"b67ade5b4a162f08f30ffbff2fd6c6918163ece0","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/linux-she-zhi-fang-huo-qiang/index.html","hash":"8e45ccae4e48a24f6f060c990c7ef651cf38e76e","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/linux-zhun-bei-gong-zuo/index.html","hash":"8b4f4b1301c6d0457568ce6c0aacaac56ef5e01e","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/iptables-de-xue-xi/index.html","hash":"3e3446509665a91e00e1b5b51e818d048e1bd963","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/centos-xu-ni-ji-wang-luo-lian-jie-wen-ti/index.html","hash":"c606a231f6c695ed017204df0d010a4732c978c8","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/2-1-a-li-yun-fu-wu-qi-yuan-cheng-deng-lu-mi-ma/index.html","hash":"c3ff698246f34ab1ecaf3d204022b4a4d8b66d0b","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/linux-ru-men/1-2-centos-jing-xiang-shi-yong-bang-zhu/index.html","hash":"4e39e7714bb198b8d1acc629564924cdc9746945","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/kotlin-xue-xi/shu-ju-lei-xing/index.html","hash":"452298a3aaaab581f0bef9bebd9c08fd23257b60","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/kotlin-xue-xi/ru-men-jian-jie/index.html","hash":"33de05ee0021c3a8983fee89a309b34713039486","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/kotlin-xue-xi/ru-men-ji-chu-xue-xi/index.html","hash":"6f7eee9801a39214e47fbb82e52125f9be58eca2","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/kotlin-xue-xi/1.xue-xi-wang-zhi/index.html","hash":"80f121c1bb64bb0847acd21bf1652c9c23b1d461","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/junit/junit-jian-jie/index.html","hash":"a68b0f92f2dbf46cab52400f6f50eae25e2ea784","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/zi-jie-liu-yu-zi-fu-liu/index.html","hash":"c219bdf6f7841145d4bf1cc23c7fc25f614109cf","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/duo-xian-cheng-bian-cheng/index.html","hash":"1fb9abe651e9a1e901dce723a434ac51eab75768","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/spring-ru-men/index.html","hash":"6c76f659e23774367bac459836d153df63aec4d7","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/mybatis-kuang-jia/index.html","hash":"416b408c5b433ae0aedb25dce11262f18bf30e88","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/linux-chang-yong-ming-ling/index.html","hash":"d8252b204ee19abf1123bd84a8d3170c99fc85fc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/linux/index.html","hash":"42e7920011238070e7a6938d34b6273e2453b809","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/java-web/filter/index.html","hash":"0eed2eff4138085959dffdebf5c9d13cde762a3b","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/idea/cha-jian-shi-yong/index.html","hash":"f0777eadcf9b503d2486d5cf40a4b628eac9813f","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/idea/kuai-jie-jian/index.html","hash":"f11ee8e49b5aa968ccadcec83b95202981c1cbb2","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/idea/li-yong-idea-ming-ming-dao-ru-liao-bao-que-xian-shi-que-shao-bao-liu-xiang-guan-lei/index.html","hash":"76b45cc73d66a9afa1c8a6010ff96a7b06eb7e79","modified":1596410260572},{"_id":"public/2020/08/02/sui-xin-ji/idea/li-yong-idea-xue-xi-bian-cheng-yu-yan/index.html","hash":"5d73a2bfd544a6c9a55ec02db96b50895cafeda3","modified":1596410260572},{"_id":"public/2020/08/02/sui-xin-ji/idea/chuang-jian-dai-ma-kuai-mo-ban/index.html","hash":"2666f7fbcf20b9a52a25dbe36119ef8d4a5d2d33","modified":1596410260572},{"_id":"public/2020/08/02/sui-xin-ji/idea/idea-bao-java-ban-ben-cuo-wu-jie-jue-fang-fa/index.html","hash":"b5fac4bf21df8282d8388d06318423fa8cd03098","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/idea/idea-gong-ju-de-shi-yong/index.html","hash":"7b9089c1813961ba11365a8bc5d87e24facc348f","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/idea/idea-zhong-tomcat-ri-zhi-luan-ma/index.html","hash":"65cbb68e6597caa256592077974fe093e667ad74","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/git-xue-xi/3-2-tian-jia/index.html","hash":"4a4659ac2f02be4fbbed752acd33634102e216e6","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/git-xue-xi/3-1-guan-jian-ming-ling/index.html","hash":"3f04d42b90ba309ba25f97371cb53e889b0a9a63","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/index.html","hash":"72419f44f6e1cf7b2d40c5cec84c8f7d7f898173","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/git-xue-xi/2-1-git-hu-lue-wen-jian/index.html","hash":"90bac912a16b048858d3ce8e580f5a66e12de108","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/index.html","hash":"0ad4c68736c03d9b9dde57b165222b9f4f50d25c","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-tu-pian-di-zhi-chuang-ku/1-1-jian-dan-shi-yong/index.html","hash":"33445ed9f61127110cdeb495f50a0d0e5b8bb11a","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/3-1-hexo-yu-md-wen-jian-ge-shi-de-chong-tu/index.html","hash":"8fe0e411becfd4049183b9b3f85b4ad6dab751e0","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/2-1-pei-zhi-zhu-ti/index.html","hash":"716202d5b40ea64eab32677b708b9c3f2a23eafc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/1-1-jian-jie/index.html","hash":"32e668be9c3995b9e1713197f6522a3622648617","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/github-pages/1-1-jian-jie/index.html","hash":"69a9fe0ee5f58bf16b9dc7f86532690d130e44b7","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/1-1-jian-jie/index.html","hash":"f1367d233a08e4945f1c334d156a2b314f3227d9","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/github-xue-xi/untitled/index.html","hash":"2ef4bf16bd8e3bc37d1b4093d34bc54d777accf0","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/gitbook-xue-xi/1-2-shi-yong-jiao-cheng/index.html","hash":"6edde2ba370e34e5a71dbca2bc32bbb99cc4186e","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/gitbook-xue-xi/1-1-jian-jie/index.html","hash":"25e8ea11cdeb9085566be8d1ffc085e8d83e6da6","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/docker-xue-xi/1-2-chang-yong-cao-zuo/index.html","hash":"09706ea4ce3ed46cb1d9ea7e9b19964593918637","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/docker-xue-xi/1-1-an-zhuang/index.html","hash":"2857b8df79aa2a341b646819e12602f57e869af4","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/bitnami-xu-ni-ji/jian-jie/index.html","hash":"70007400c7f6a02fe7d72efd89899308d01c2941","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/bitnami-xu-ni-ji/2-1-wen-dang-xue-xi/index.html","hash":"c6f5b51f918d6b83c2c310464288cdf98bbe51b6","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/bitnami-xu-ni-ji/1-3-an-zhuang-zhuo-mian/index.html","hash":"39a16e486797023a2623761d3982df82c8316f88","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/bitnami-xu-ni-ji/1-2-lian-jie-ssh/index.html","hash":"a0c0e1b93f1b7260fc5ae06c92499b50c48551b6","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/bitnami-xu-ni-ji/1-1-an-zhuang-bitnami-xu-ni-ji/index.html","hash":"836c0da394dc517311e61a3a0ac6313078bd8c2a","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/shi-tu-dao-hang/index.html","hash":"5748cbe68c22904be44aa0c836e0c2428ef9d4bc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/ji-chu-xue-xi/index.html","hash":"a5c1087b08ef9f4b313674a6327136c5032bbc04","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/shi-yong-viewmodel-chu-li-pei-zhi-geng-gai/index.html","hash":"0ac80747d34642cd3b7459f852f9686667b580e2","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/jetpack/index.html","hash":"bb402aacd5ee6f595bf2367882155f0c671c9196","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/bottomnavigationview-kong-jian-xue-xi-md/index.html","hash":"07b58545b2ae5aa00156deafc413794b578a37f0","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/android-studio-shi-yong-ji-qiao/index.html","hash":"36a53c6a677ae89eeafea7443087d396ba518b68","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/3-3-feng-zhuang-wang-luo-qing-qiu/index.html","hash":"37de918ca9663011fccb44ce2b9f128c688fb9ae","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/3-4-kai-yuan-wang-luo-feng-zhuang-ku-retofit/index.html","hash":"cc42a5a12158bb70d07b63d47285730d8c8222dc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/3-2-wang-luo-fang-wen-shu-ju-ge-shi/index.html","hash":"751c1ac83fa698d913a72088bb5dded8eb8301dc","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/3-2-1-an-zhuang-apache-fu-wu-qi/index.html","hash":"e265ff60ca5c7fda2518bbdd4381b5784da771df","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/android-xue-xi/3-1-wang-luo-fang-wen/index.html","hash":"a9c52de47c5e7742543d8af958605d7d8be57e92","modified":1596367834292},{"_id":"public/2020/08/02/sui-xin-ji/ti-huan/index.html","hash":"293a70997ecafe095a0290bf1bd721f28f7f16df","modified":1596367834292},{"_id":"public/page/9/index.html","hash":"1679eda1fbde6bc6df3b58b52b2a4d5663210187","modified":1596794492960},{"_id":"public/categories/分类1/index.html","hash":"5b23094343dca6771d8fdc706b78e08b8f2a74a9","modified":1596366324837},{"_id":"public/categories/分类1/分类2/index.html","hash":"7a210697696b5ac8117ce30defef65f4e2257609","modified":1596366324837},{"_id":"public/categories/替换/index.html","hash":"cf6df50a9c4215d096039df2779e3d837a76fa2f","modified":1596366324837},{"_id":"public/categories/3-1网络访问/index.html","hash":"d215b56e9cf7c9769fa3bfafafb88a7579eaa2d6","modified":1596366324837},{"_id":"public/categories/3-2-1安装Apache服务器/index.html","hash":"deb60de364f62b62f5c6dd4753ad9285c17a55bb","modified":1596366324837},{"_id":"public/categories/3-2网络访问-数据格式/index.html","hash":"cadf16edef62571188684892e54237eb1941e43f","modified":1596366324837},{"_id":"public/categories/3-3-封装网络请求/index.html","hash":"927befc6ffe6dc0834a3e52ddd5f44c8c1677f0b","modified":1596366324837},{"_id":"public/categories/3-4-开源网络封装库Retofit/index.html","hash":"acd7a51a7e32fcb1adfd97efe5f59d236132cf3e","modified":1596366324837},{"_id":"public/categories/Android-Studio使用技巧/index.html","hash":"5f7cd83d0881df32abffd1991570b65fd6d9897a","modified":1596366324837},{"_id":"public/categories/BottomNavigationView控件学习md/index.html","hash":"7db54041c675045208fbf5f861548925cfe6cc2a","modified":1596366324837},{"_id":"public/categories/Jetpack/index.html","hash":"35d0fbcd82135a59c0358afa78e7676600af2723","modified":1596366324837},{"_id":"public/categories/使用-ViewModel-处理配置更改/index.html","hash":"06573cbc96fc289bff9ec1cec21cb4a30e87f939","modified":1596366324837},{"_id":"public/categories/视图导航/index.html","hash":"b91b71e3802ac7001009ecc3dafc4f141a9957df","modified":1596366324837},{"_id":"public/categories/基础学习/index.html","hash":"e86c2508965e0814095688f32c7d7d47e8180e7b","modified":1596366324837},{"_id":"public/categories/1-1-安装bitnami虚拟机/index.html","hash":"cef1798556c136fe40000c03c76abc1103dd912b","modified":1596366324837},{"_id":"public/categories/1-1-安装/index.html","hash":"6bad2aa613067b9d5c0c90d9fa003a6471ac8f4d","modified":1596366324837},{"_id":"public/categories/1-1-简介/index.html","hash":"a3db424dbc30cc7572d929eae199cfb080ba89d0","modified":1596366324837},{"_id":"public/categories/1-2-连接SSH/index.html","hash":"200f9526e4cdffa7cd07ff4e2b79fe25f27cff72","modified":1596366324837},{"_id":"public/categories/1-3-安装桌面/index.html","hash":"d5e802f0cc6858d26b0ed47083aefcd317750cda","modified":1596366324837},{"_id":"public/categories/2-1文档学习/index.html","hash":"a14c45905532fe61198cf5ffc7cbd10e6376f4dc","modified":1596366324837},{"_id":"public/categories/简介/index.html","hash":"8df2e71935e52ce98bb26dd3bfc97371b1c62a12","modified":1596366324837},{"_id":"public/categories/1-2-常用操作/index.html","hash":"b065616f29ad5377634ba4bb6912a99ff61a939b","modified":1596366324837},{"_id":"public/categories/Untitled/index.html","hash":"8ed2991830b20e14d8590b147459f6ed0c70dedd","modified":1596366324837},{"_id":"public/categories/1-2-使用教程/index.html","hash":"0f23c559ce3bc22820d676698f23bebe4b7a9a1b","modified":1596366324837},{"_id":"public/categories/1-1简介/index.html","hash":"5c479d7433a762fb56505a86355958857f442544","modified":1596366324837},{"_id":"public/categories/1-1-简单使用/index.html","hash":"52010034923ef4e25b83b6f5d37a51881d52b49e","modified":1596366324837},{"_id":"public/categories/1-1-Git-设置和配置/index.html","hash":"f06fc858c507abfa271620ee9790823e5562d764","modified":1596366324837},{"_id":"public/categories/IDEA中Tomcat日志乱码/index.html","hash":"b1cf6a4045362e39d51939a866b23a0c74f84256","modified":1596366324837},{"_id":"public/categories/2-1-配置主题/index.html","hash":"4a5146e596d2dac32f1d416a57b6535beb6c7b1b","modified":1596366324837},{"_id":"public/categories/3-1-hexo与md文件格式的冲突/index.html","hash":"32931919335f4e14bc38080125dc484d003df8bc","modified":1596366324837},{"_id":"public/categories/Filter/index.html","hash":"767f582ad97c5999a5cd2a5435fd4c8e1af71e5a","modified":1596366324837},{"_id":"public/categories/2-1-Git忽略文件/index.html","hash":"d05a045ecca6ebe5a474c5c4a0f8f383fb678313","modified":1596366324837},{"_id":"public/categories/2-2-Git获取和创建项目/index.html","hash":"dec3bcf8c866ddd0a03ba24e5211c53581da1d26","modified":1596366324837},{"_id":"public/categories/3-1-关键命令/index.html","hash":"f5a491d195d9a0d41dd5a8c1f648bf9db7c4f466","modified":1596366324837},{"_id":"public/categories/3-2-添加/index.html","hash":"ae257ca77ba07d70de8774d6c88b3ac5903ca115","modified":1596366324837},{"_id":"public/categories/junit简介/index.html","hash":"b59ae446da1d036aa3e322bd2b6654f95964a3f1","modified":1596366324837},{"_id":"public/categories/idea工具的使用/index.html","hash":"2cd4883b93c2daa83ded34b928ddef912fc7b118","modified":1596366324837},{"_id":"public/categories/idea报java版本错误解决方法/index.html","hash":"7c9fccb6aed767288b077f91246839a1bedc5fe6","modified":1596366324837},{"_id":"public/categories/创建代码块模板/index.html","hash":"bb17bce165590073c4356af17e167a9044d461cc","modified":1596366324837},{"_id":"public/categories/利用IDEA学习编程语言/index.html","hash":"196b8001814dfa4980eade7a47461381e5b83429","modified":1596366324837},{"_id":"public/categories/利用IDEA明明导入了包却显示缺少保留相关类/index.html","hash":"cbc1fd9e9d54c21452e1a487d04fa3a83b93986d","modified":1596366324837},{"_id":"public/categories/快捷键/index.html","hash":"26176974b3d587d91d8116d85e32c637d6fe4d22","modified":1596366324837},{"_id":"public/categories/插件使用/index.html","hash":"c8d07910d89b35258221bfd5f290e9085136e817","modified":1596366324837},{"_id":"public/categories/1-学习网址/index.html","hash":"bd50982846125ca74b1a1d4ec1901f43eebd2215","modified":1596366324837},{"_id":"public/categories/1-2-CentOS镜像使用帮助/index.html","hash":"df2d676baef9bc255e6a27ae876af20b15bae83b","modified":1596366324837},{"_id":"public/categories/Linux/index.html","hash":"d84834ee10ac8a14745ff982e0d8e929651ac532","modified":1596366324837},{"_id":"public/categories/linux常用命令/index.html","hash":"afc369bd003a200635d642154f05a880e69a2b8d","modified":1596366324837},{"_id":"public/categories/MyBatis框架/index.html","hash":"08cc984c5a3adc8ff4f097e9f91cb39a68914783","modified":1596366324837},{"_id":"public/categories/Spring入门/index.html","hash":"fd84ce83c53f7d94be69db33c2022ba944b44f84","modified":1596366324837},{"_id":"public/categories/多线程编程/index.html","hash":"9e630c6572d149fee54fc53428d179ef87f21b3a","modified":1596366324837},{"_id":"public/categories/字节流与字符流/index.html","hash":"e5248956c7919bc13b6a112f2937b33ab9d933bc","modified":1596366324837},{"_id":"public/categories/index/index.html","hash":"90c795f8040a65d4e00cea6d5f8fc532ddf05931","modified":1596366324837},{"_id":"public/categories/spring注解/index.html","hash":"f920255519817afa17f2b0458897edde640ced73","modified":1596366324837},{"_id":"public/categories/1-1-入门学习/index.html","hash":"14e453d647a0d33c336e5240a7df9a8ba39f2d8f","modified":1596366324837},{"_id":"public/categories/学习记录（一）/index.html","hash":"c36bd5f61a2a6552524001bbcad9331c248eaee6","modified":1596366324837},{"_id":"public/categories/Spring-Framework简介/index.html","hash":"d8f5e85c8e002f628cf24b4d1406ee15d0fd16a5","modified":1596366324837},{"_id":"public/categories/入门基础学习/index.html","hash":"3c13f327942ef45fd78fe7b7b247a32e8389ed00","modified":1596366324837},{"_id":"public/categories/入门简介/index.html","hash":"4bfa309dd39f3627549511da1bb8d534ee40bdca","modified":1596366324837},{"_id":"public/categories/数据类型/index.html","hash":"26625648a759ede9d7b0c3eafc4dda4c275ed647","modified":1596366324837},{"_id":"public/categories/框架搭建/index.html","hash":"de892a91030890b5186973aa196704b21d9fa962","modified":1596366324837},{"_id":"public/categories/iptables的学习/index.html","hash":"499c12cad67411030e58e383db88273e30fbfa56","modified":1596366324837},{"_id":"public/categories/2-1android-moudle与libery切换/index.html","hash":"b04c29f192673b5729ba0090df4ef9bd0f3313a9","modified":1596366324837},{"_id":"public/categories/2-1阿里云服务器远程登录密码/index.html","hash":"fd9cc7720b977dbaed1a5f7e659afd84612b1bdb","modified":1596366324837},{"_id":"public/categories/Centos虚拟机网络连接问题/index.html","hash":"423d3982dfee395f9d4629829045f12a89349e8c","modified":1596366324837},{"_id":"public/categories/Linux准备工作/index.html","hash":"ce067ef25e6a101029664bd349a5a7d9d9152082","modified":1596366324837},{"_id":"public/categories/LINUX设置防火墙/index.html","hash":"e99349e1bcadeb5af8a59eb6af29380041a2962c","modified":1596366324837},{"_id":"public/categories/mysql安装/index.html","hash":"bac525741d86becc156af334372f5fb0e8f8384e","modified":1596366324837},{"_id":"public/categories/Nat连接网络/index.html","hash":"d4bef6006886d2eb99a4be929fc7049bac77057c","modified":1596366324837},{"_id":"public/categories/Nginx简介/index.html","hash":"9e753c9cef569023beebe3a93165cac568d3cd50","modified":1596366324837},{"_id":"public/categories/Readis安装及配置/index.html","hash":"e36b700d96b84785b8dc317d8ee1d7bd7d73f7fb","modified":1596366324837},{"_id":"public/categories/文件命令操作md/index.html","hash":"bc6704ad3daa1c24f626a04d05431247573cc75c","modified":1596366324837},{"_id":"public/categories/用户操作/index.html","hash":"b898d51f06231ab4112d40188c045aa8c9bffbb8","modified":1596366324837},{"_id":"public/categories/防火墙的设置/index.html","hash":"1ca5a47d187aa56aac39affba6cf521bc0c60026","modified":1596366324837},{"_id":"public/categories/前期准备/index.html","hash":"ba4383d1dfe2bc30f0f11039a2a60930ab4008be","modified":1596366324837},{"_id":"public/categories/01-Spring-Boot入门/index.html","hash":"d109ebdf44c9b43976bb888945ead39a48fd29c2","modified":1596366324837},{"_id":"public/categories/1-1-安装环境/index.html","hash":"50190f5541200c8847a2b1369c5a86acd7954b52","modified":1596366324837},{"_id":"public/categories/PermissionX权限管理库/index.html","hash":"87e645dbaf0f6c3f2808839317dc0d4b59175914","modified":1596366324837},{"_id":"public/categories/从安装到卸载/index.html","hash":"be61bfa48ae51533efa0859454abd0d03f68af65","modified":1596366324837},{"_id":"public/categories/初始化密码/index.html","hash":"1c82dd8efa94691b946a3121ad2d3a6382f82377","modified":1596366324837},{"_id":"public/categories/1-2-Redis启动/index.html","hash":"7781f67b6579c9ce457444ab26d391c40b2875e4","modified":1596366324837},{"_id":"public/categories/2-1-数据结构/index.html","hash":"8bf0bfd1587e9e49e780298e8d730d735af81ee0","modified":1596366324837},{"_id":"public/categories/2-2-数据结构的常用命令/index.html","hash":"f5d0d3bfe5353a12bb42b53e83700519838f847d","modified":1596366324837},{"_id":"public/categories/3-1分布式锁/index.html","hash":"340c00ec4be693810d176fcfcfb773e1468e6fa8","modified":1596366324837},{"_id":"public/categories/3-2-Lua脚本/index.html","hash":"0ff8324e7a6be4798cb8189c89e8c3f605be7c49","modified":1596366324837},{"_id":"public/categories/3-3-消息队列/index.html","hash":"1a42f378379388ec73011d508d2df13e09b380fc","modified":1596366324837},{"_id":"public/categories/Java客户端/index.html","hash":"f16fcdd3131d17866d2896a7836093e2fefd5b06","modified":1596366324837},{"_id":"public/categories/错误问题/index.html","hash":"6c1ebc6a2f37930bcfbf4fca4c65033f869ac9e1","modified":1596366324837},{"_id":"public/categories/问题总结/index.html","hash":"5cdf4238ba65dd37216d543b594dc5e4ddc01378","modified":1596366324837},{"_id":"public/categories/mysql数据库的安装与配置/index.html","hash":"8ef154a501541d86e7e40579a1ad622b4e6d6432","modified":1596366324837},{"_id":"public/categories/vsftpd/index.html","hash":"4da43019fb4c8d11f5dbae75b0d804a77d85d7cf","modified":1596366324837},{"_id":"public/categories/功能需求与技术可行性分析/index.html","hash":"c855575df96c6279886f0b305f4ea927ab0d0c9a","modified":1596366324837},{"_id":"public/categories/需求文档/index.html","hash":"eabfa450d46811d42f099672ae3ea2a5aa53191a","modified":1596366324837},{"_id":"public/categories/项目知识点/index.html","hash":"3037d01fce3b5682aa2a143ffc403d681e9e763c","modified":1596366324837},{"_id":"public/categories/项目前期构建/index.html","hash":"34b835f4a8be0455229db57e228ba4947d72301b","modified":1596366324837},{"_id":"public/tags/测试文章/index.html","hash":"4eef8cf85cd80573a879c7b1ceb27fddf7e53fad","modified":1596366324837},{"_id":"public/tags/替换/index.html","hash":"5ffdf1533cfb96c16d63a3b11248f76b6f545b71","modified":1596367834292},{"_id":"public/tags/3-1网络访问/index.html","hash":"ddcf2fb37df8f1c2d32bfbb12c47b295fd271830","modified":1596794492960},{"_id":"public/tags/3-2-1安装Apache服务器/index.html","hash":"036fd792eec5da47a2bac08519795525bbb521e2","modified":1596794492960},{"_id":"public/tags/3-2网络访问-数据格式/index.html","hash":"f65870116c9268c0aea73ab082bcf44fa0797184","modified":1596794492960},{"_id":"public/tags/3-3-封装网络请求/index.html","hash":"d93169ee4d5b067418e8e5694609879fe1dc1da5","modified":1596794492960},{"_id":"public/tags/3-4-开源网络封装库Retofit/index.html","hash":"3f3b2ec7bc1cf94f2e15d93d59940af0cda17092","modified":1596794492960},{"_id":"public/tags/Android-Studio使用技巧/index.html","hash":"fceb60c66b4c8c58ae5e6e360d3f096b335fae5d","modified":1596794492960},{"_id":"public/tags/BottomNavigationView控件学习md/index.html","hash":"976e46868fded474445160e6d4298c4cb9356543","modified":1596794492960},{"_id":"public/tags/Jetpack/index.html","hash":"ff9ddffb387819930e8eebc78e1ec57399d82c9e","modified":1596794492960},{"_id":"public/tags/使用-ViewModel-处理配置更改/index.html","hash":"73bae02c43e03637e0abfd0be7c6ab9a075d291f","modified":1596794492960},{"_id":"public/tags/视图导航/index.html","hash":"87b7eeb29d08f4f48837945ff791e16c7efca720","modified":1596794492960},{"_id":"public/tags/基础学习/index.html","hash":"2a0073527c055621023e4402e8a88e61a55f1261","modified":1596794492960},{"_id":"public/tags/1-1-安装bitnami虚拟机/index.html","hash":"dce19638116053809dbfd279cd2fa9e468fc6c4c","modified":1596794492960},{"_id":"public/tags/1-1-安装/index.html","hash":"d995c0f5ac0bf43f949e96682bb4900b9766a532","modified":1596794492960},{"_id":"public/tags/1-1-简介/index.html","hash":"0c7e2cf8c108c5ccaac2b5910623e7fbeaab7439","modified":1596794492960},{"_id":"public/tags/1-2-连接SSH/index.html","hash":"2e9322f9ed4440fb78dd968e0e46a7d99bbc35dd","modified":1596794492960},{"_id":"public/tags/1-3-安装桌面/index.html","hash":"f49db3588b7f5cff5f9919771ce1e22a543fe8f4","modified":1596794492960},{"_id":"public/tags/2-1文档学习/index.html","hash":"38eb3efd835e57c3faa0b0a4c5dbeccc9b230ab4","modified":1596794492960},{"_id":"public/tags/简介/index.html","hash":"1604172cc95b8a39846a14b3ee92e2c1df80dd4f","modified":1596794492960},{"_id":"public/tags/1-2-常用操作/index.html","hash":"3e368d5aeb1eea4dc19a9fcd0675a2e02a4086c0","modified":1596794492960},{"_id":"public/tags/Untitled/index.html","hash":"2ff75cf476a27e9733887e65491c6b516bb63fe7","modified":1596794492960},{"_id":"public/tags/1-2-使用教程/index.html","hash":"7d016d5d384084f234f6b310d0fdc53c6c967a8e","modified":1596794492960},{"_id":"public/tags/1-1简介/index.html","hash":"8770899a37a2a890cdb00daf54bc01393dfa1b1c","modified":1596794492960},{"_id":"public/tags/1-1-简单使用/index.html","hash":"10a1ad2dd6d30a230f6df5266c009637c0424545","modified":1596794492960},{"_id":"public/tags/1-1-Git-设置和配置/index.html","hash":"1a6aaecf3615baca62c4702f2ed1cfcb984c7eb6","modified":1596794492960},{"_id":"public/tags/IDEA中Tomcat日志乱码/index.html","hash":"95819758bf84bfb6889fe4ce0beb65269ef1b83e","modified":1596794492960},{"_id":"public/tags/2-1-配置主题/index.html","hash":"82ac4f56a48d90f49c33bf5808754fa950504024","modified":1596794492960},{"_id":"public/tags/3-1-hexo与md文件格式的冲突/index.html","hash":"4fc89ff9392106e91b3db5fac51ade5124f6743b","modified":1596794492960},{"_id":"public/tags/Filter/index.html","hash":"608c8911b320fe421f1d83c8ecdaa3ac9b841017","modified":1596794492960},{"_id":"public/tags/2-1-Git忽略文件/index.html","hash":"1696108e262e3a8d1333a1fee18616769937feb6","modified":1596794492960},{"_id":"public/tags/2-2-Git获取和创建项目/index.html","hash":"7502641995768af19837bea7c4d80a2d808932ef","modified":1596794492960},{"_id":"public/tags/3-1-关键命令/index.html","hash":"f9a909204ccb135e0c72aa68e5b1a48c1c8705b5","modified":1596794492960},{"_id":"public/tags/3-2-添加/index.html","hash":"96410f8d9c19bed4112026b695e301639077defc","modified":1596794492960},{"_id":"public/tags/junit简介/index.html","hash":"03ab2b8fe14024019b7ce51f007450d6201eaab4","modified":1596794492960},{"_id":"public/tags/idea工具的使用/index.html","hash":"4b4b9feb56a1c175ee8e7822080bc5589e141b23","modified":1596794492960},{"_id":"public/tags/idea报java版本错误解决方法/index.html","hash":"faa6e4bf3a414a1507934c899a327b79fa47639e","modified":1596794492960},{"_id":"public/tags/创建代码块模板/index.html","hash":"32432181380807b18b9c92c3b2bdc82edaf377e4","modified":1596794492960},{"_id":"public/tags/利用IDEA学习编程语言/index.html","hash":"52072e248d019b5016f93a1bda83e23c5402cdad","modified":1596794492960},{"_id":"public/tags/利用IDEA明明导入了包却显示缺少保留相关类/index.html","hash":"703bdbf84feeece2d8ea581eeee3e0cbc8a48e0f","modified":1596794492960},{"_id":"public/tags/快捷键/index.html","hash":"4affadb9358dee97d2c275b0bd609980c9b2a0b9","modified":1596794492960},{"_id":"public/tags/插件使用/index.html","hash":"187bc87c39f093ed642e37d258cb9a479c15fb42","modified":1596794492960},{"_id":"public/tags/1-学习网址/index.html","hash":"1922772d8cfd7778e322ca2eda266c38c7bd114c","modified":1596794492960},{"_id":"public/tags/1-2-CentOS镜像使用帮助/index.html","hash":"bedc33625183da5fe6481885f7f7289cc92b7c8a","modified":1596794492960},{"_id":"public/tags/Linux/index.html","hash":"6dce0947c4721ac2f80776f6a667a2932149f468","modified":1596794492960},{"_id":"public/tags/linux常用命令/index.html","hash":"07e083b3ccb3fd7504b8058f752f0e3a8104fc1a","modified":1596794492960},{"_id":"public/tags/MyBatis框架/index.html","hash":"5d647a275b3f77f47237d72b58684a3b8bd15c3c","modified":1596794492960},{"_id":"public/tags/Spring入门/index.html","hash":"eab3ff5c3e22b5d9881959af98640b3b2779ffff","modified":1596794492960},{"_id":"public/tags/多线程编程/index.html","hash":"e39319acff810b6b91bd159feff64e4234e41773","modified":1596794492960},{"_id":"public/tags/字节流与字符流/index.html","hash":"d23dc5a813164bcc66d790edb35e99e4c1cfd394","modified":1596794492960},{"_id":"public/tags/index/index.html","hash":"60f039d7e911b12fe660f56abd5a8084de05b56d","modified":1596794492960},{"_id":"public/tags/spring注解/index.html","hash":"9faaa2f27914d5619790fbd4411e37754507ae5b","modified":1596794492960},{"_id":"public/tags/1-1-入门学习/index.html","hash":"786470dc55b096937dd34c2e0aab43abea3d67fb","modified":1596794492960},{"_id":"public/tags/学习记录（一）/index.html","hash":"65b053d81b1757d5140d3ddadce164e4f019d7c7","modified":1596794492960},{"_id":"public/tags/Spring-Framework简介/index.html","hash":"26920402cf4620306b67ae87608109f5f0f8f75b","modified":1596794492960},{"_id":"public/tags/入门基础学习/index.html","hash":"e4eace4b589557d368f46c97066838588e173120","modified":1596794492960},{"_id":"public/tags/入门简介/index.html","hash":"ea4942c0d5962790a799b89b4361675b6f61f676","modified":1596794492960},{"_id":"public/tags/数据类型/index.html","hash":"69509eca11d0ccd8699858ea7ee8ab67a4e6a285","modified":1596794492960},{"_id":"public/tags/框架搭建/index.html","hash":"8edb7640834d02595fc728a388064c1d0a9f8d0b","modified":1596794492960},{"_id":"public/tags/iptables的学习/index.html","hash":"673eb70955ea0574d454f35d7d384e79611fcf3e","modified":1596794492960},{"_id":"public/tags/2-1android-moudle与libery切换/index.html","hash":"08275df5e2bf7c62851f8e238f2dc61fa4e780b8","modified":1596794492960},{"_id":"public/tags/2-1阿里云服务器远程登录密码/index.html","hash":"d53785b5d6826a6e3e6ac9d0a98397c15a09af91","modified":1596794492960},{"_id":"public/tags/Centos虚拟机网络连接问题/index.html","hash":"b047c960c497d3bbdf4f515b2522fdf712125586","modified":1596794492960},{"_id":"public/tags/Linux准备工作/index.html","hash":"33fdbde86d98a0fcca433baf8c583e3a0d6c6490","modified":1596794492960},{"_id":"public/tags/LINUX设置防火墙/index.html","hash":"83bc653d0422f4f18e55417e090e9c2adb475692","modified":1596794492960},{"_id":"public/tags/mysql安装/index.html","hash":"760ed0aa1b74cb84177895550382206fef04e567","modified":1596794492960},{"_id":"public/tags/Nat连接网络/index.html","hash":"efa47e474aaedfbabc54a7bbec43e4a447edb034","modified":1596794492960},{"_id":"public/tags/Nginx简介/index.html","hash":"95151adef30f5d37ffb8f87f14f9081f132b5b39","modified":1596794492960},{"_id":"public/tags/Readis安装及配置/index.html","hash":"7273f9b857977360c031561ad1a369d11100ab3a","modified":1596794492960},{"_id":"public/tags/文件命令操作md/index.html","hash":"c2837befed8a0278376dc3cad0dafb1a03b10127","modified":1596794492960},{"_id":"public/tags/用户操作/index.html","hash":"5f12d75b970618e7080a1a563762ecc1dadd305e","modified":1596794492960},{"_id":"public/tags/防火墙的设置/index.html","hash":"77fe42b749fcee64acac8f293c872bbdb4185838","modified":1596794492960},{"_id":"public/tags/前期准备/index.html","hash":"7b3fce4c947da5ab1c77f130a5e3e188e235b0b2","modified":1596794492960},{"_id":"public/tags/01-Spring-Boot入门/index.html","hash":"2ea75037babd3b280d542c4f71efba386c5bd769","modified":1596794492960},{"_id":"public/tags/1-1-安装环境/index.html","hash":"2017f8a0f62c42781281ebb28a9584f7c84305dd","modified":1596794492960},{"_id":"public/tags/PermissionX权限管理库/index.html","hash":"b1a838d9ff007bfdf0933a270d71096851f74e8a","modified":1596794492960},{"_id":"public/tags/从安装到卸载/index.html","hash":"302c4637cabc626424f5ca2919c3d102c1d533d5","modified":1596794492960},{"_id":"public/tags/初始化密码/index.html","hash":"3eae111db6be0d768b4cb2c60b59ef4c92eff135","modified":1596794492960},{"_id":"public/tags/1-2-Redis启动/index.html","hash":"b2d01274b1f66fae9f88234598939878968e7441","modified":1596794492960},{"_id":"public/tags/2-1-数据结构/index.html","hash":"f81dd01af9b29fbccec60b61febd2d2194e9ad1d","modified":1596794492960},{"_id":"public/tags/2-2-数据结构的常用命令/index.html","hash":"1e4f175be1b37367b327d99f3bcaaa9e919284ee","modified":1596794492960},{"_id":"public/tags/3-1分布式锁/index.html","hash":"a2eddae0dd78e76f4664535b1ce4eb2209592f6d","modified":1596794492960},{"_id":"public/tags/3-2-Lua脚本/index.html","hash":"bd80be01b90dcc28a9dd739779eb73817d39f7f6","modified":1596794492960},{"_id":"public/tags/3-3-消息队列/index.html","hash":"bf3b1e14f1361d6b0a2ea1397c893697e4e4682d","modified":1596794492960},{"_id":"public/tags/Java客户端/index.html","hash":"193b87e7c56ca3eafc9a2b15f14de6d4b0fb5342","modified":1596794492960},{"_id":"public/tags/错误问题/index.html","hash":"3c9cfee31a1e959499eda5047695eaa4c9949a2b","modified":1596794492960},{"_id":"public/tags/问题总结/index.html","hash":"f3528a03060fa94eda5aac331ab57795200dbedb","modified":1596794492960},{"_id":"public/tags/mysql数据库的安装与配置/index.html","hash":"a05c2cfa890601cdf0472f467e1ece63c52a0075","modified":1596794492960},{"_id":"public/tags/vsftpd/index.html","hash":"b604b562f7a1b672e0c5b38758c9a2dfb53eada5","modified":1596794492960},{"_id":"public/tags/功能需求与技术可行性分析/index.html","hash":"dae0051a4f65718c7b15b0abcb7ac5d797667b99","modified":1596794492960},{"_id":"public/tags/需求文档/index.html","hash":"b8de1e9adf214e81b5f3b4dc5d5a759d2681ba44","modified":1596794492960},{"_id":"public/tags/项目知识点/index.html","hash":"aab059afe5716d0aeb7a0c7d40150a18212012e5","modified":1596794492960},{"_id":"public/tags/项目前期构建/index.html","hash":"718a0d921ba8a059004e965a34e74a72c704364c","modified":1596794492960},{"_id":"public/categories/随心记/index.html","hash":"c2118ff111e4689d7477334fbbf35ddc40cfb468","modified":1596367834292},{"_id":"public/categories/Android学习/index.html","hash":"ce1fb2dccdad46b6e421e77f45f5e509de0d9b23","modified":1596794492960},{"_id":"public/categories/Bitnami虚拟机/index.html","hash":"76d17b02178777ec5acfe2bc35d0e822fe4f526b","modified":1596794492960},{"_id":"public/categories/GitBook学习/index.html","hash":"e6e08dc1001e0b2f46ecf735e00381af3024608b","modified":1596794492960},{"_id":"public/categories/Docker学习/index.html","hash":"e01c8f674d2b0124310f11dd8ff6f2b162e19c71","modified":1596794492960},{"_id":"public/categories/GitHub学习/index.html","hash":"2704d48cb6aceb94abc49399096be7be9b18ae5e","modified":1596794492960},{"_id":"public/categories/Junit/index.html","hash":"43d62627f8b37ecd332997d89112306e85c23d51","modified":1596794492960},{"_id":"public/categories/Git学习/index.html","hash":"503c6c491b2fa230f4f45f41814a81f7bd1b36bc","modified":1596794492960},{"_id":"public/categories/IDEA/index.html","hash":"994b237a45aa8050e7ba81f849c9b3b10a3db314","modified":1596794492960},{"_id":"public/categories/Kotlin学习/index.html","hash":"2bcd30b518c633fa2d0bd69367a1640745d1eb20","modified":1596794492960},{"_id":"public/categories/Linux入门/index.html","hash":"885c6feb0778f37d66c9ae2a31d31f7d4d323563","modified":1596794492960},{"_id":"public/categories/Maven和Gradle/index.html","hash":"91a012c0fcbcf4953b9a2059e784838c7eb41cd0","modified":1596794492960},{"_id":"public/categories/MySQL8-0/index.html","hash":"452859e176a846c6150dd2fbe1e522ea0aea09b6","modified":1596794492960},{"_id":"public/categories/Redis学习/index.html","hash":"67523bb1a9e8083d9c3853750b9abab33ddd90bc","modified":1596794492960},{"_id":"public/categories/Spring/index.html","hash":"b253eaba90f95f9fe8bc69c715c2e9d54ab78a63","modified":1596794492960},{"_id":"public/categories/java-web/index.html","hash":"83c0cbc13a3ede3e8b5379c7f290bf947a101a90","modified":1596794492960},{"_id":"public/categories/企业级权限管理/index.html","hash":"cf4a803b0d841032c462d4e4e16f71ba94ded761","modified":1596794492960},{"_id":"public/categories/创建个人博客/index.html","hash":"14c6c0b4fb562e60a40a7a1a6c5520bf520cc4b7","modified":1596367834292},{"_id":"public/categories/企业级电商项目/index.html","hash":"077de3c7c171172b7513a8a077c153ad66e20f33","modified":1596794492960},{"_id":"public/categories/创建图片地址创库/index.html","hash":"5239f3c29a9c83bc659b6a85b0529b7d0f37a2d6","modified":1596367834292},{"_id":"public/categories/SPring源码学习/index.html","hash":"3ae50a3a0cc204c0b48d90179a824efaeb27bd00","modified":1596367834292},{"_id":"public/categories/Spring-Mybatis项目/index.html","hash":"b2b403180b4d0936655d5fd519af7276dcb81bce","modified":1596367834292},{"_id":"public/categories/SpringTest/index.html","hash":"121f30ed21d89915661e4a6bfc0477f1aec29687","modified":1596367834292},{"_id":"public/categories/Kotlin开发电商app/index.html","hash":"2dd26dc5d53d24ff72f7ea28abfa5d43c3d00e9a","modified":1596367834292},{"_id":"public/categories/天气预报App/index.html","hash":"e05e05c54db3687d9b5f240148622684d6bb095a","modified":1596367834292},{"_id":"public/categories/微人事项目管理/index.html","hash":"1502145f113b2b9f4360f295e1e3446be53ba6f9","modified":1596367834292},{"_id":"public/categories/淘淘商城项目实战/index.html","hash":"105f157dd101ead1312d073c03ed97164d275a02","modified":1596367834292},{"_id":"public/categories/编写开源库/index.html","hash":"8c396364e253bc6c0f0b2afb5a16e856d212f920","modified":1596367834292},{"_id":"public/categories/Hexo/index.html","hash":"5aef873adbb97ab0b66e1e76b115b094cf060157","modified":1596367834292},{"_id":"public/categories/github-pages/index.html","hash":"9afc60b87bf952c9c0e533e85998a504f004f366","modified":1596367834292},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/bian-xie-kai-yuan-ku/permissionx-quan-xian-guan-li-ku/index.html","hash":"dd67ce4a5d9510470fbd25702843b5b5ea457cef","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/xiang-mu-qian-qi-gou-jian/index.html","hash":"2c15c2612eb9536ae9edd7df2437f36c780cff83","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/1-1-an-zhuang-huan-jing/index.html","hash":"839a61004b8916099cd4625e7d1582b184c303ba","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xiang-mu-zhi-shi-dian/index.html","hash":"6640470c5d1327265cf7501e0ed14c8174e72cec","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xu-qiu-wen-dang/index.html","hash":"04b15cbdcab6e29c0bbd95285ac1825e1c3b81bb","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/01-spring-boot-ru-men/index.html","hash":"3adab660fcafb13e9c399a41fa9e1aaf8148c94e","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/gong-neng-xu-qiu-yu-ji-zhu-ke-xing-xing-fen-xi/index.html","hash":"e4649c5218600bd4f7b55df17a5c072274307918","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/qian-qi-zhun-bei/index.html","hash":"36b43ce58e34e2eeb5dc482a629c6a4f40278b8b","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/kotlin-kai-fa-dian-shang-app/2-1android-moudle-yu-libery-qie-huan/index.html","hash":"655c7eef074bbf16a26cb8cf454bbdb61381e057","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/vsftpd/index.html","hash":"1c879573cf21bbecb75725b3ee62ad1c4b8966e9","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/mysql-shu-ju-ku-de-an-zhuang-yu-pei-zhi/index.html","hash":"b340db060c0f1e060709915742241506f61fe86e","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/linux-she-zhi-fang-huo-qiang/index.html","hash":"a43938573044b9009a0fc7e3683954049c1d3486","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/iptables-de-xue-xi/index.html","hash":"e0ee333ea90b1b3f57e59e69690ffb0c36d777f6","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/qi-ye-ji-quan-xian-guan-li/kuang-jia-da-jian/index.html","hash":"d8b7aaacc8fe5d998823793e4cca35bfc50dca93","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/wen-ti-zong-jie/index.html","hash":"b91cc4fa17630cde38df373978081e00729ea757","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/spring-framework-jian-jie/index.html","hash":"308c37b67649028180eff8825aa1a5ba855e5c67","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/spring/springtest/xue-xi-ji-lu-yi/index.html","hash":"26e16e15102ea78ad3d5ff1df59827a2c4a722d6","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/spring/spring-mybatis-xiang-mu/1-1-ru-men-xue-xi/index.html","hash":"8122f5f3d9e3fac75535d2e8ab7f92eb83d69687","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/spring/spring-zhu-jie/index.html","hash":"0f017ea8f7cd578e012f6f58ce37ef2216c74d49","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/cuo-wu-wen-ti/index.html","hash":"9fe6999bd9f27a9ded6352211ae1e726390bceba","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/jian-jie/index.html","hash":"089bc724e1a8e98d070ab5413975ddf003d213fc","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/java-ke-hu-duan/index.html","hash":"26e0a0d7c075d2d5a5c5a8f8c75d1187b149ef76","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/3-3-xiao-xi-dui-lie/index.html","hash":"c5beeb4ca7b8412ce5e6f3ecdc2dad23ebe7a440","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/3-2-lua-jiao-ben/index.html","hash":"69c0a7ea9a7da071e7d608d2c3e67aacf352dc7a","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/3-1-fen-bu-shi-suo/index.html","hash":"394bad23dc2aecf4f598eab4692a48d0f830b934","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/2-2-shu-ju-jie-gou-de-chang-yong-ming-ling/index.html","hash":"701f02bc320ef569e36c5078f94e90e6966582ba","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/2-1-shu-ju-jie-gou/index.html","hash":"1be8e7b0a9d9422b4741e2e69a4347784cc1046e","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/1-2-redis-qi-dong/index.html","hash":"381d35e7b26e9cbc8f088628a538a6511a8c7150","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/redis-xue-xi/1-1-an-zhuang/index.html","hash":"5619fadbaf65e1f54e69cc51558307d70d3777ea","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/mysql8.0/chu-shi-hua-mi-ma/index.html","hash":"e2d99df74975304849de08d93b27c76055fe2629","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/mysql8.0/cong-an-zhuang-dao-xie-zai/index.html","hash":"e52d92f638356b29ca2f5fd7721e6f3723e8b459","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/maven-he-gradle/index/index.html","hash":"6820ef1929ac895ca7800e817b27468ae61296ba","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/fang-huo-qiang-de-she-zhi/index.html","hash":"3eb3f75e301e079d0c2798cbe41abdfdd10c468c","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/yong-hu-cao-zuo/index.html","hash":"d3109011976a38896e39d5239b27c7265b90cb34","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/wen-jian-ming-ling-cao-zuo-md/index.html","hash":"c663eb60af76a812ac7089afc3a65a38cf6a3799","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/untitled/index.html","hash":"5c3c75ebe90c0bc2daa5a4bc775da30cb1ff4ff8","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/readis-an-zhuang-ji-pei-zhi/index.html","hash":"bd8faa36b4eaebba213a8473348e879804679f17","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/nginx-jian-jie/index.html","hash":"fb7cbc937165a8beefb5c3f8a305e00085a3bbb2","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/nat-lian-jie-wang-luo/index.html","hash":"f18a864510f1b72118834b2bd5c7a42cf681a722","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/mysql-an-zhuang/index.html","hash":"ae2876a3748fe8177b56f78490921389d1ab5999","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/linux-she-zhi-fang-huo-qiang/index.html","hash":"ad65d160b6c250a6aada3773cef88a1d1982ffdc","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/linux-zhun-bei-gong-zuo/index.html","hash":"f2300297d529916dc57fecb344a8afa4f4250e8b","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/iptables-de-xue-xi/index.html","hash":"83bfe9970a7a1059bda3c3b0b6ff9d1c566c20cb","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/centos-xu-ni-ji-wang-luo-lian-jie-wen-ti/index.html","hash":"1c1ccde18195b3ea434eb15215a92882a5a4bbf7","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/2-1-a-li-yun-fu-wu-qi-yuan-cheng-deng-lu-mi-ma/index.html","hash":"2d22c25753910a6efa72ab9f5272f7880945b5f8","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/linux-ru-men/1-2-centos-jing-xiang-shi-yong-bang-zhu/index.html","hash":"c25c17b46d4a363b0f4138c27bc7e858ce280062","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/kotlin-xue-xi/shu-ju-lei-xing/index.html","hash":"9966b3505bab6e4e3a0911bf4bf0e583270ab8bd","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-jian-jie/index.html","hash":"4f24233a9a64df093f38cd36cb2e9df947a82c70","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-ji-chu-xue-xi/index.html","hash":"3f21ce2a2d305fa4b31bb35a1518af757ee7cec6","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/kotlin-xue-xi/1.xue-xi-wang-zhi/index.html","hash":"a0b7d9b8053a9e362cfb055b9bc24759ffbf4b67","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/junit/junit-jian-jie/index.html","hash":"02d6fcf2030923b620d172ede7795659c143c3ff","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/zi-jie-liu-yu-zi-fu-liu/index.html","hash":"c2c608962266e7a2035cdb07527133d7b5b44df0","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/duo-xian-cheng-bian-cheng/index.html","hash":"de49831c81041b7fd8cdadfad7a31daf69290eab","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/spring-ru-men/index.html","hash":"d66c6579ef9cb017ec0231cf15fb04c91810e9c7","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/mybatis-kuang-jia/index.html","hash":"4eced596e2fa6c1c7b13ea4a61e45a293269bc29","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/linux-chang-yong-ming-ling/index.html","hash":"bc0c837ad4bf41d27385180cbe7e56349b4959a2","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/linux/index.html","hash":"38f09c9a75220226bb4af011da559fa74962cc97","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/java-web/filter/index.html","hash":"3df825ea8e19e25af5b748c464fba8c0218dbb08","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/cha-jian-shi-yong/index.html","hash":"650521fd0175ee27ce06cd2b97fb2ad4705f477b","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/kuai-jie-jian/index.html","hash":"db78e5224005c3b166119fce773e31a896f6746a","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/li-yong-idea-ming-ming-dao-ru-liao-bao-que-xian-shi-que-shao-bao-liu-xiang-guan-lei/index.html","hash":"7406882680c9b1c6ce3b66fbecc718629a13b98e","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/li-yong-idea-xue-xi-bian-cheng-yu-yan/index.html","hash":"ecdce5ac48a6c2550e2db63b383a6fc9b435c1a7","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/chuang-jian-dai-ma-kuai-mo-ban/index.html","hash":"eff0ad67380e871f3d94b67e9cd409167afd9a61","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/idea-bao-java-ban-ben-cuo-wu-jie-jue-fang-fa/index.html","hash":"efcfdc6cb7085e64754b805c2476029dae5b8bbf","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/idea-gong-ju-de-shi-yong/index.html","hash":"2579a2b1dce6b2fffa771d00157f29d9af13fcde","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/idea/idea-zhong-tomcat-ri-zhi-luan-ma/index.html","hash":"efc0e02b6e000bd872fe3d874ec5d84f8025a494","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/git-xue-xi/3-2-tian-jia/index.html","hash":"94639e6d5a65dc9e43db0795eaf3af03838dc224","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/git-xue-xi/3-1-guan-jian-ming-ling/index.html","hash":"3b9f5c748970ccbe585244a65b8b5f84fd6f712d","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/index.html","hash":"c0db8533003618c5028292f904d50ca1a8268462","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/git-xue-xi/2-1-git-hu-lue-wen-jian/index.html","hash":"428af36b735ff085dc7523e0da509b8a24ad4662","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/index.html","hash":"0162aec1f4181b391668114d30b62b6b0d0d034b","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-tu-pian-di-zhi-chuang-ku/1-1-jian-dan-shi-yong/index.html","hash":"ee46fc420c8417d57d3004abeadfa32ec537ab7d","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/3-1-hexo-yu-md-wen-jian-ge-shi-de-chong-tu/index.html","hash":"29f2e6433e76b1183ff1348ec53597d3062c5eb9","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/2-1-pei-zhi-zhu-ti/index.html","hash":"f9e0ce9457129682c360961eeb90a02c0cd160f6","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/1-1-jian-jie/index.html","hash":"7d7bf5584a317771cefe78b1002f0e809446b44c","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/github-pages/1-1-jian-jie/index.html","hash":"d709f4df47fde84a03b85aa900cf9f658506b01e","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/1-1-jian-jie/index.html","hash":"4a588708858c2bc09bbec588f7288041f3827981","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/github-xue-xi/untitled/index.html","hash":"1cfd555dd7641f76e333619931a48a2427b4a3c0","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-2-shi-yong-jiao-cheng/index.html","hash":"83c525420dbaa1bf8ef8648c2d06c381381d8b3f","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-1-jian-jie/index.html","hash":"2e7563abbb705ea7dc296a2accbed698987f88a2","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/docker-xue-xi/1-2-chang-yong-cao-zuo/index.html","hash":"2f0e3ba2753b4d65f470b9c27a7477227d5c3271","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/docker-xue-xi/1-1-an-zhuang/index.html","hash":"5ff41805b882fa7204477b2cda67481868ad848c","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/jian-jie/index.html","hash":"8dc6da40a8ec13fb151116b2d715bc1c1c57fb63","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/2-1-wen-dang-xue-xi/index.html","hash":"17dd15296c4e939e6369c1fc82805975a6890c27","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-3-an-zhuang-zhuo-mian/index.html","hash":"c4c7afa00b9a5a7ce78676ab85d47d2b6b79382c","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-2-lian-jie-ssh/index.html","hash":"fabea73e5362d1b1b37a458b0fe02e68b9f23fd2","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-1-an-zhuang-bitnami-xu-ni-ji/index.html","hash":"96f1d99efbeff15857f185ebce006bf5e9cc2dea","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/shi-tu-dao-hang/index.html","hash":"6cb41f454ac17f6e79ef36d0065661106d19b077","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/ji-chu-xue-xi/index.html","hash":"604fb41efb9daee2d2692e1b01ddbd6546ede624","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/shi-yong-viewmodel-chu-li-pei-zhi-geng-gai/index.html","hash":"5245cdc67a345c5aaa9b0313302fa311408a7601","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/jetpack/index.html","hash":"b1442e1e5c304b6c6edfa8457f87e227f3a62836","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/bottomnavigationview-kong-jian-xue-xi-md/index.html","hash":"69b3c228fb7e370632a6f0058bc6b220489e029c","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/android-studio-shi-yong-ji-qiao/index.html","hash":"57e438bc67c8f6f38df0dfe1e032d98f843f8bc5","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/3-4-kai-yuan-wang-luo-feng-zhuang-ku-retofit/index.html","hash":"bdbfa2bf7cd0a6e26aefb763683c022486f2a89b","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/3-3-feng-zhuang-wang-luo-qing-qiu/index.html","hash":"1ff0b9fb581864862e72021648ed22bab7579472","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/3-2-wang-luo-fang-wen-shu-ju-ge-shi/index.html","hash":"f2dceb7d600a4b7cb65b9f6faeff06db6e2f83c9","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/3-2-1-an-zhuang-apache-fu-wu-qi/index.html","hash":"bb6a306da6a8f8f5ffa34efcd11263f3c3a3fe58","modified":1596794492960},{"_id":"public/2020/08/03/sui-xin-ji/android-xue-xi/3-1-wang-luo-fang-wen/index.html","hash":"8e399ce029a4a67488fb94295d8e65e4bb0b8c93","modified":1596794492960},{"_id":"public/categories/OneDrive/index.html","hash":"5b6aecacffddbd4a471d856627eeb4cde807050b","modified":1596411607468},{"_id":"public/categories/OneDrive/page/2/index.html","hash":"dd293581b2e0521100007eb307fd72701a87216f","modified":1596411607468},{"_id":"public/categories/OneDrive/page/3/index.html","hash":"990bc4e0bd44ea0f169a0211935bb6acc604731d","modified":1596411607468},{"_id":"public/categories/OneDrive/page/4/index.html","hash":"ca93c6b3fd339ddb59ad3aad012491a48ad51017","modified":1596411607468},{"_id":"public/categories/OneDrive/page/5/index.html","hash":"bc706be2e397f22650694177ef8e3e7ae90e1b5e","modified":1596411607468},{"_id":"public/categories/OneDrive/page/6/index.html","hash":"5d764ff861d7e093f9dfb8d5f36e757547aae42a","modified":1596411607468},{"_id":"public/categories/项目实战/index.html","hash":"8bc9acde89a81fb9e36ac822f1a848a6a3d65a55","modified":1596794492960},{"_id":"themes/icarus/.eslintignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1596429937234},{"_id":"themes/icarus/.eslintrc.json","hash":"b6de6612836a7814bae9a51a5089609853cc44a2","modified":1596429937235},{"_id":"themes/icarus/.gitignore","hash":"8ecd21ae1f2cdc3cf59b71a526564252c93b84df","modified":1596429937240},{"_id":"themes/icarus/.travis.yml","hash":"d7c64bd876f0af1288d855a6d61d691d27770560","modified":1596429937240},{"_id":"themes/icarus/CONTRIBUTING.md","hash":"c5086f94020aa58e2a7d131806e0cf15e7b54854","modified":1596429937241},{"_id":"themes/icarus/LICENSE","hash":"bb9d587dd8b9073462ae10daf252ea3092a81b1b","modified":1596429937241},{"_id":"themes/icarus/README.md","hash":"6ae64e63c2f6f9657a8932001a07f89fc7e87ea7","modified":1596429937242},{"_id":"themes/icarus/_config.yml","hash":"d179c3c34c9bae437567fdae9c4eff56d1defd21","modified":1596430030449},{"_id":"themes/icarus/package.json","hash":"0c080db164fc941a0b707c369f30d699cc42c496","modified":1596429937392},{"_id":"themes/icarus/.github/stale.yml","hash":"9226510d97f26705ec215446610a9980a4760abc","modified":1596429937239},{"_id":"themes/icarus/include/config.js","hash":"bd4b10b7ad360ac09912646c04efc021ff3d45ad","modified":1596429937242},{"_id":"themes/icarus/include/dependency.js","hash":"121cb3c4946c1d0eab632b8e104bb8757539b33b","modified":1596429937243},{"_id":"themes/icarus/include/register.js","hash":"34f5a2a774ccbf50e18cb93cc7e2b8ea9c0b3a83","modified":1596429937245},{"_id":"themes/icarus/languages/de.yml","hash":"ef43979c403b3a221585d5dd0b7205627437818e","modified":1596429937369},{"_id":"themes/icarus/languages/en.yml","hash":"9d14e90a3f3dde00b982fa56becd8e63925ff6cd","modified":1596429937369},{"_id":"themes/icarus/languages/es.yml","hash":"f0ea2c482a8bc5ed43452ecc7ebe601504e0cc54","modified":1596429937370},{"_id":"themes/icarus/languages/fr.yml","hash":"b85a2d4fcc790a8b84326235850eb54532f6b75e","modified":1596429937370},{"_id":"themes/icarus/languages/id.yml","hash":"ee655e6a045eb28ea480a348bbefd10ef115494b","modified":1596429937371},{"_id":"themes/icarus/languages/ja.yml","hash":"3c921f24b19a797b2ae23cf621a35bb9b043ddf9","modified":1596429937371},{"_id":"themes/icarus/languages/pl.yml","hash":"a6dbd568cb18104685b20ab7b5767f455628f61c","modified":1596429937372},{"_id":"themes/icarus/languages/ko.yml","hash":"2d12f3975b576afb025df773e30521b58abd015e","modified":1596429937372},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"28ae713d8d26ab875104684e604592f4c495b638","modified":1596429937373},{"_id":"themes/icarus/languages/ru.yml","hash":"62451109780acfe2db8630248005697c10a68a61","modified":1596429937373},{"_id":"themes/icarus/languages/tr.yml","hash":"2e334f0f98756256754f48d8dff3baa045700283","modified":1596429937374},{"_id":"themes/icarus/languages/vn.yml","hash":"cd2d57a3fe6389bdd76f193c6c662d242960ed02","modified":1596429937374},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"915b3868a8fa5af2d4a81bebaec1fce9c160c530","modified":1596429937374},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"eaede43f04878974f43eff4d41cb28bf4c2908fe","modified":1596429937375},{"_id":"themes/icarus/layout/archive.jsx","hash":"eef212d92edd1f10d3f0756cd153771ea925dbbc","modified":1596429937375},{"_id":"themes/icarus/layout/categories.jsx","hash":"50d81072a5b5508a906b2c96289982d081a59edd","modified":1596429937376},{"_id":"themes/icarus/layout/category.jsx","hash":"16c8cf03fd976d839242dcf9240ccaf59b843daa","modified":1596429937376},{"_id":"themes/icarus/layout/layout.jsx","hash":"4103d29daf78d4d36aef428ad57ed82f5f108d1a","modified":1596429937385},{"_id":"themes/icarus/layout/index.jsx","hash":"c2e7008020c4358f491c8e2ad871aa2274a427d0","modified":1596429937384},{"_id":"themes/icarus/layout/page.jsx","hash":"8a3cce132f7a4d52450cdcada54afeb5465fdc8d","modified":1596429937386},{"_id":"themes/icarus/layout/post.jsx","hash":"8a3cce132f7a4d52450cdcada54afeb5465fdc8d","modified":1596429937388},{"_id":"themes/icarus/layout/tag.jsx","hash":"49c04b040ba0ff138ad36d6478bd76e18edc8085","modified":1596429937390},{"_id":"themes/icarus/layout/tags.jsx","hash":"5bd27a87fc6e456beb3e56e1dcdbd1f7ac010ce1","modified":1596429937390},{"_id":"themes/icarus/scripts/index.js","hash":"6156ee1e29064e851aeef66305302103a379cae3","modified":1596429937393},{"_id":"themes/icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937377},{"_id":"themes/icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937383},{"_id":"themes/icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937385},{"_id":"themes/icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937388},{"_id":"themes/icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937389},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/Bug反馈.md","hash":"53a4b20cf1f30c6d334918b646db6842c77e95ef","modified":1596429937236},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/bug_report.md","hash":"63d02fa86bdd6ff0c6d6a3717fc33187d6555dc5","modified":1596429937236},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/config.yml","hash":"3c91c27d3bde6d15e9c78c454c91ae414fe69d30","modified":1596429937237},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/feature_request.md","hash":"4c5fea047359feddc80f62d24b3cab284a8440fc","modified":1596429937237},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE/功能建议.md","hash":"144eb57d0e0d9121eb872195af5a42c8a6bbe9eb","modified":1596429937238},{"_id":"themes/icarus/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md","hash":"490a3717d4d18ddccb90f1fd14acf8b2fbb300dc","modified":1596429937239},{"_id":"themes/icarus/include/migration/head.js","hash":"c32df32ae70cd5e522de5481cde4e7c416b4dbec","modified":1596429937244},{"_id":"themes/icarus/include/migration/v2_v3.js","hash":"9426e6bc533d7c7ce6469f0e9af3116d16f8ebe5","modified":1596429937244},{"_id":"themes/icarus/include/schema/config.json","hash":"0b4810adae5ad713c535a5abe126bfb044c861e7","modified":1596429937349},{"_id":"themes/icarus/include/style/article.styl","hash":"5990348fe849fb8bb6801731be46fe0ad0c93c58","modified":1596429937360},{"_id":"themes/icarus/include/style/base.styl","hash":"49258450efd3f703c7a8855f70e2890386e7ae5b","modified":1596429937361},{"_id":"themes/icarus/include/style/button.styl","hash":"f9e52370ee7801b35682d76071f98f7ce6126231","modified":1596429937361},{"_id":"themes/icarus/include/style/card.styl","hash":"6feb59420aa2fd67e52dd5b917623dc2fcb75bda","modified":1596429937362},{"_id":"themes/icarus/include/style/codeblock.styl","hash":"62e452b7d7aa5ac6233798a690026b526cb245a7","modified":1596429937362},{"_id":"themes/icarus/include/style/donate.styl","hash":"41495808091511b475d35e3b3491e2d345584601","modified":1596429937363},{"_id":"themes/icarus/include/style/footer.styl","hash":"d90d5137f29841ca4dc48c62e344bebe0cd7aa76","modified":1596429937363},{"_id":"themes/icarus/include/style/helper.styl","hash":"113719489effa9529756c7763725dfe4f8591b8d","modified":1596429937364},{"_id":"themes/icarus/include/style/navbar.styl","hash":"ae0e3a559e4aed6bb33ccb81765677ac30d535da","modified":1596429937364},{"_id":"themes/icarus/include/style/pagination.styl","hash":"7e1aba7d4442b5ba39b82569341c4e939a8005cc","modified":1596429937365},{"_id":"themes/icarus/include/style/plugin.styl","hash":"f23c80665bcef81640eeb635f265418fa0f66ace","modified":1596429937365},{"_id":"themes/icarus/include/style/responsive.styl","hash":"9a481311478b788851d437b82a934fcfce758f9f","modified":1596429937366},{"_id":"themes/icarus/include/style/search.styl","hash":"ff947d107b57b5d8865680be1301f6c49abcc3e1","modified":1596429937366},{"_id":"themes/icarus/include/style/timeline.styl","hash":"0f15f648821abe412e2105e157c9810bb4834aa4","modified":1596429937367},{"_id":"themes/icarus/include/util/console.js","hash":"9bd6d4691b56012ea17146db577e27ae20e0c335","modified":1596429937368},{"_id":"themes/icarus/layout/common/article.jsx","hash":"139d104572ad54b9e737cf3f76d9c9a7b31e22d8","modified":1596429937378},{"_id":"themes/icarus/layout/common/comment.jsx","hash":"0ab94bbc55bda6f3f284cbd208efa4ed8205481c","modified":1596429937378},{"_id":"themes/icarus/layout/common/donates.jsx","hash":"c026449e4bc757fbd9edb5b870d56f7b7a349497","modified":1596429937379},{"_id":"themes/icarus/layout/common/footer.jsx","hash":"583a29899f56f278caf3afbe019a17e1ec7fc027","modified":1596429937379},{"_id":"themes/icarus/layout/common/head.jsx","hash":"02a8772175167f67f5ef779e84dd57335ca9a965","modified":1596429937380},{"_id":"themes/icarus/layout/common/navbar.jsx","hash":"59786a8510709ff43f2af0e01ff9715cdebc26fd","modified":1596429937380},{"_id":"themes/icarus/layout/common/plugins.jsx","hash":"fedab3e147ae1ed2d730a559c29e72b2315db5c1","modified":1596429937381},{"_id":"themes/icarus/layout/common/scripts.jsx","hash":"a40608473a1674de2ed05c5dc5627ab1d7a12744","modified":1596429937381},{"_id":"themes/icarus/layout/common/search.jsx","hash":"82a0cf309dbe5257f30c95621dd4e6521b912cbc","modified":1596429937382},{"_id":"themes/icarus/layout/common/share.jsx","hash":"ed9aba6def6515df79b77e231f8620b0e209e30c","modified":1596429937382},{"_id":"themes/icarus/layout/common/widgets.jsx","hash":"ec282a8d470b29cce2415c0a9bddcfb41cedafcf","modified":1596429937383},{"_id":"themes/icarus/layout/plugin/animejs.jsx","hash":"bd2b9209051a03e5cb3bdf2c97e6c16d0d75cb8a","modified":1596429937387},{"_id":"themes/icarus/layout/plugin/back_to_top.jsx","hash":"efff826b01ac0f8fc2619b6c43660ef8d6de6c3f","modified":1596429937387},{"_id":"themes/icarus/layout/widget/profile.jsx","hash":"56c9c87f5b660f54d1b602b95281effe8878c4cb","modified":1596429937391},{"_id":"themes/icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1596429937395},{"_id":"themes/icarus/source/img/favicon.svg","hash":"50322629b1947588ff7a6e59fb07cb1b5bfb9f8c","modified":1596429937396},{"_id":"themes/icarus/source/img/logo.svg","hash":"f4a9aa50f9a732981ae79e3711a997fc7325a7db","modified":1596429937396},{"_id":"themes/icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1596429937397},{"_id":"themes/icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1596429937398},{"_id":"themes/icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1596429937398},{"_id":"themes/icarus/source/img/thumbnail.svg","hash":"38801ce6b2f60c660e1b8868da902c9ab553c82f","modified":1596429937399},{"_id":"themes/icarus/source/css/cyberpunk.styl","hash":"13b12c6024a67561a3678d1480113dfdf48f0269","modified":1596429937394},{"_id":"themes/icarus/source/css/default.styl","hash":"b2d886eacd43ab395ae3221e92bc0a9d23eff3a0","modified":1596429937394},{"_id":"themes/icarus/source/css/style.styl","hash":"4c1e1734d85fa68b3ebcb5347c32f79e443ddcba","modified":1596429937394},{"_id":"themes/icarus/source/js/.eslintrc.json","hash":"45c9014e02fbc516e257484487b4e29ddb5743e1","modified":1596429937400},{"_id":"themes/icarus/source/js/animation.js","hash":"5bb98c8b7e6fdde902f61e40ddfb2a3fbdeb13bf","modified":1596429937400},{"_id":"themes/icarus/source/js/back_to_top.js","hash":"6be1b206481d231ca93ff9b1ccb08c548618cfdf","modified":1596429937401},{"_id":"themes/icarus/source/js/main.js","hash":"34acf13d49dcca1d5e2393c4bfa459bcde40892a","modified":1596429937401},{"_id":"themes/icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937246},{"_id":"themes/icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937350},{"_id":"themes/icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937352},{"_id":"themes/icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937359},{"_id":"themes/icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1596429937357},{"_id":"themes/icarus/include/schema/common/article.json","hash":"e79bb7b210946d22bd3a9c710171c548de49a050","modified":1596429937247},{"_id":"themes/icarus/include/schema/common/comment.json","hash":"394665355c58e711ff9a739d1de047bb44588e72","modified":1596429937247},{"_id":"themes/icarus/include/schema/common/donates.json","hash":"8e2c3c2a89c47df841440598ab4e13504e7e37dc","modified":1596429937248},{"_id":"themes/icarus/include/schema/common/footer.json","hash":"b6036e21a11a5ed0455010ee668e43f165e55254","modified":1596429937248},{"_id":"themes/icarus/include/schema/common/head.json","hash":"cf95b825bfca5f1c03d066a4067bd42a7467a423","modified":1596429937248},{"_id":"themes/icarus/include/schema/common/navbar.json","hash":"52a7ae23ebcfb06e8c219be4da1506b824e17715","modified":1596429937249},{"_id":"themes/icarus/include/schema/common/plugins.json","hash":"1b4de5817363ad969b444477cda28eb677a2c0f7","modified":1596429937250},{"_id":"themes/icarus/include/schema/common/providers.json","hash":"5453827e1c267c67102bc983c8d2313865aa64fd","modified":1596429937250},{"_id":"themes/icarus/include/schema/common/search.json","hash":"dd34241b3776bc9aed8ef815c67f2fa622d0984b","modified":1596429937343},{"_id":"themes/icarus/include/schema/common/share.json","hash":"da98300e9197fbc717082419652d54636fd118b9","modified":1596429937345},{"_id":"themes/icarus/include/schema/common/sidebar.json","hash":"5687b24e32bcff12ff7660ff5dc26d74f466a994","modified":1596429937346},{"_id":"themes/icarus/include/schema/common/widgets.json","hash":"43a9c4fccaf75418038537e2e49f2457727a21e7","modified":1596429937347},{"_id":"themes/icarus/include/schema/plugin/animejs.json","hash":"0b5c4a315c0d25f2b296eb44ed14a1d59ccb8613","modified":1596429937354},{"_id":"themes/icarus/include/schema/plugin/back_to_top.json","hash":"c8e0e97a61c3a02c9736f303c206dd406de95d9a","modified":1596429937355},{"_id":"themes/icarus/include/schema/widget/profile.json","hash":"994aff115d59827ad6f98d03adf55b1cf1245378","modified":1596429937359},{"_id":"public/js/algolia.js","hash":"cbfc4355b23d84d2f0dc622e069b3f06c0d10f70","modified":1596430024838},{"_id":"public/js/google_cse.js","hash":"55e7250f4a12bf15220ba5d1d49c91fda5fbd3b4","modified":1596430024838},{"_id":"public/js/insight.js","hash":"78b74ae77f1e854089ccabd871d581dc391fcc29","modified":1596430024838},{"_id":"public/content.json","hash":"29cb2bc040ff58b6d6fa3131ac3a1be7de7e4b3e","modified":1596430024838},{"_id":"public/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":1596430024838},{"_id":"public/img/favicon.svg","hash":"50322629b1947588ff7a6e59fb07cb1b5bfb9f8c","modified":1596430024838},{"_id":"public/img/logo.svg","hash":"f4a9aa50f9a732981ae79e3711a997fc7325a7db","modified":1596430024838},{"_id":"public/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":1596430024838},{"_id":"public/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":1596430024838},{"_id":"public/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":1596430024838},{"_id":"public/img/thumbnail.svg","hash":"38801ce6b2f60c660e1b8868da902c9ab553c82f","modified":1596430024838},{"_id":"public/css/cyberpunk.css","hash":"22537684e6b69fcb9a46d085fedcb4ab38c9f0b6","modified":1596430024838},{"_id":"public/css/default.css","hash":"c4018cbab3b1fbe7fffa232abc5c0e770fe0d28f","modified":1596430024838},{"_id":"public/js/main.js","hash":"3fb6be34945798cd400825e021c4267856fff2df","modified":1596430024838},{"_id":"public/js/animation.js","hash":"59a05568fd5718513792b0d48bcb4bcf7eaa20e8","modified":1596430024838},{"_id":"public/js/back_to_top.js","hash":"0f071e2331e39043529041322c4812bb13a3990d","modified":1596430024838},{"_id":"source/_posts/随心记/.git/objects/05/976c640385364a81f9e21f2840ebfa5f79c4c4","hash":"81c49c1c76f426bc8db00d33f56fc220d7080eb7","modified":1596794835745},{"_id":"source/_posts/随心记/.git/objects/0a/28516bb415b0f7feec711d459984632da0fdb3","hash":"90a2a03d22c2c3902752d5e536a889881179e7b8","modified":1596794837082},{"_id":"source/_posts/随心记/.git/objects/23/11a4ad252b77ced8401279e6c5ebb3aa713f20","hash":"8c40c05d38e42da7cded51203f79710918f395c8","modified":1596794837400},{"_id":"source/_posts/随心记/.git/objects/23/f9fee57fa2b1cbe7d94ce381d4b694a2a91e41","hash":"821638eb9a628543e4f93c7a48e5ef0e213ea96e","modified":1596794835832},{"_id":"source/_posts/随心记/.git/objects/19/6817e69e3403f30170bdbddf457b4753a91688","hash":"11f74bc4b78752f6fd94a0003aaa95e372bcaf9b","modified":1596794835491},{"_id":"source/_posts/随心记/.git/objects/19/4e6e575143b1ce3635f7524614f5524326a47c","hash":"2240c8e81049a2573805f038c185fb6f509c47da","modified":1596794837375},{"_id":"source/_posts/随心记/.git/objects/1f/283d62459ef1cd3687008355835ddecd917fab","hash":"6201693166d616ebbac6aedc7cad820b536e693d","modified":1596794836775},{"_id":"source/_posts/随心记/.git/objects/25/f284b8bed866186d951e17f1f0c54339b8a848","hash":"acb44996f5db574472283b61e3dcad1aec6da8c0","modified":1596794835574},{"_id":"source/_posts/随心记/.git/objects/2b/aeb12ac5a9a82b2782a289a6bf558d34b802de","hash":"a2ea7b78d0eb9618a8e56030fac720def4f8bbf5","modified":1596794836691},{"_id":"source/_posts/随心记/.git/objects/2b/fcde02eb395e857cb613949bec182f9af089a1","hash":"0bec866e8b22b5351d75d8b2fadae8147196543c","modified":1596794836943},{"_id":"source/_posts/随心记/.git/objects/2f/bfd41280bf37fddfa017d1707cfab916f84a74","hash":"e3519ccc985ddd78eafefa6d2c211a4b46b90190","modified":1596794837158},{"_id":"source/_posts/随心记/.git/objects/36/4b41ae669e2e92bd1c52ddc7a7c01e656b2732","hash":"37db235702dde2134ce09c6170f6e76a7fa50baf","modified":1596794836974},{"_id":"source/_posts/随心记/.git/objects/2d/1e5d2f0558c0b9fba3849e2e7ea96d2086510b","hash":"7c8961035b1776a1734f12498c5d34b34979dbda","modified":1596794836383},{"_id":"source/_posts/随心记/.git/objects/37/ee1645c38793af6cc0f12ce0c61b53fc64e22c","hash":"6fd8e114f37390756fd8112cdf3be999535421fc","modified":1596794837233},{"_id":"source/_posts/随心记/.git/objects/36/8dd6c7ad5f23c68b6568fe8d26653231105e05","hash":"09fcd7ee14ca48e4302b006aaa0dfce2a3eb5848","modified":1596794836574},{"_id":"source/_posts/随心记/.git/objects/14/f0dd1144ddb349e0d91e048e67d8778580854b","hash":"9eedcec01caca11bc26a5d1fbe38fdb564aa7a7b","modified":1596794836508},{"_id":"source/_posts/随心记/.git/objects/43/e5f114e38639c9ad843cfded3dbc86ef6b8985","hash":"8b71bfab5f9c0bf029049bac5ef792a8706b8d84","modified":1596794836533},{"_id":"source/_posts/随心记/.git/objects/43/31637c4c1c2e3b21316f79adf1ca2e9c40a415","hash":"4cc15db100f1c250e42780b38fa06820c0682d2c","modified":1596794835543},{"_id":"source/_posts/随心记/.git/objects/3b/109405a2bd96279347815f8aa1a40003c94b7b","hash":"368f2ada5712357b5625b424fae21fedb4aa2b11","modified":1596794836334},{"_id":"source/_posts/随心记/.git/objects/50/5979141090b9942e1608e56deccef9aca011b7","hash":"4897b0047d5c35894d4723cdda3e3920ce0c33d4","modified":1596794836641},{"_id":"source/_posts/随心记/.git/objects/54/29986b1b2f4aeb47085a7298c972b7177f48fc","hash":"7601d2a755008d9ba9a5323db9a4421706792b5c","modified":1596794836999},{"_id":"source/_posts/随心记/.git/objects/4c/3c74b6259a93dc84c25b6920ef22d3bf06ec00","hash":"bd6bdb5bd9745520b607ae894219b499e0440e68","modified":1596794835908},{"_id":"source/_posts/随心记/.git/objects/55/351eb9edc8e82752a1d3d3c62b30dbab846c5c","hash":"20b6f855cc3cf62ef4866288b60093875c3523ff","modified":1596794836049},{"_id":"source/_posts/随心记/.git/objects/5d/a529bd1b221298d5349fd5ab4874deaa8380c0","hash":"97043929437fdeba82046dd96f02e1d3497eb2bc","modified":1596794836158},{"_id":"source/_posts/随心记/.git/objects/56/a7c24fe80fcc0f77fa11a297fd9b22b19a152b","hash":"7435b0c5af97daad806f4fbf8df3d045c4f42cda","modified":1596794835517},{"_id":"source/_posts/随心记/.git/objects/3a/66f3d3783e17dda6f85d32ac6364397acfaa1a","hash":"4bba7ba0f4f40a505c3348a0bc43c4405a58ad50","modified":1596794835600},{"_id":"source/_posts/随心记/.git/objects/63/a8c896fb20db8d739245a2d40ca166a105b325","hash":"4271c9b021a091e62cdeec068ae738e18510e3c4","modified":1596794835774},{"_id":"source/_posts/随心记/.git/objects/2c/ff87c37cdbe78e5cdeb2bfb3dca1a613fe2389","hash":"1d7cb88da811470f498b0e69893e2468f070cd87","modified":1596794835442},{"_id":"source/_posts/随心记/.git/objects/68/d75ac600c267b61fe732880a3e49d04ce442fe","hash":"7146dc59ee7f10ea225272ac2fdb281a902fd696","modified":1596794837299},{"_id":"source/_posts/随心记/.git/objects/6d/9fb535e13c3efc89d24dcc819bc53de1b2a2ef","hash":"209c374c9804afdba5b704f8e9db102d2692739f","modified":1596794835944},{"_id":"source/_posts/随心记/.git/objects/72/bf81efec3a4e76bcd09c2594babdf7190a7b2a","hash":"dd7244ab45911c96db81ca6cb7cd2ab5f4210663","modified":1596794835799},{"_id":"source/_posts/随心记/.git/objects/75/7b84d2e561edb56fe43eefaa105a678c1a6b6f","hash":"7bb143b6039e06e36072c19b0291ec870036b626","modified":1596794837274},{"_id":"source/_posts/随心记/.git/objects/75/88b1def25de3addb16bfc2db3792fc4099e3a0","hash":"69b315a0938573aecb332303ad70ae77d8f8c0b2","modified":1596794836458},{"_id":"source/_posts/随心记/.git/objects/81/5b1f0bf31fbba428c723c5bde9e099c0989b50","hash":"60efaf182f22da3562985bb4328387337ac040f6","modified":1596794837324},{"_id":"source/_posts/随心记/.git/objects/7e/dec6e392003174b8b385a60bebc657bf4b6f84","hash":"b6b2102e5dc61c9f56211a55586ed124a7090efa","modified":1596794837183},{"_id":"source/_posts/随心记/.git/objects/89/48810a1b3c2aa74e9e57f0ee311b5acff12f5c","hash":"5a306be7cdd76db8c82063d8bde11dd52483dba9","modified":1596794836358},{"_id":"source/_posts/随心记/.git/objects/07/295161f447f243b86e66b9cc52016077d4e641","hash":"78af7a222e35bf32002c2eab59549d9539184cb6","modified":1596794836025},{"_id":"source/_posts/随心记/.git/objects/58/534e3f52ce54554b0530944943d08a1a5bd0e5","hash":"e7efd2bdcd1d2b99c5c32cca980563c0be223eff","modified":1596794835884},{"_id":"source/_posts/随心记/.git/objects/95/58b52bce9e638a4ab6d7c01733bfd83bff44f8","hash":"bb165983780e19bf64a5de9e541521567a7a739a","modified":1596794836190},{"_id":"source/_posts/随心记/.git/objects/8f/0c76b536c487cd3d0cfc5a566744d8d145db98","hash":"adf7278e5e7555365e3947f956f44c6842946e8e","modified":1596794836133},{"_id":"source/_posts/随心记/.git/objects/9c/13662e4176a056454649b9c669012cf879f349","hash":"e46e1959a4e03f2e9a16e25eb345c23a85ab420f","modified":1596794836749},{"_id":"source/_posts/随心记/.git/objects/9d/55e3249421fa452421db3bc2fc8082cc688056","hash":"d071ce63d02dfe176acb1a950a180cd4e9981aa4","modified":1596794836108},{"_id":"source/_posts/随心记/.git/objects/49/0ef9c4eacbcf69ba3f271208716730f7dd4947","hash":"1c3ab95dc39b9e5aa187456265e1eda0a387cd59","modified":1596794836216},{"_id":"source/_posts/随心记/.git/objects/a5/c499d9f4db5208dac11ddd3b87cbbea20ced37","hash":"96f384bce97d9fe974067a969ef4032495df473d","modified":1596794837433},{"_id":"source/_posts/随心记/.git/objects/a3/fefc49aade55c9a968a0392e5e145912c257f0","hash":"e2f72b1240b846f8b8e25d449959f68a1b503672","modified":1596794835989},{"_id":"source/_posts/随心记/.git/objects/a7/7694dc01b40d1394a47f2835e6edde00c2e0f4","hash":"63d0f4113deae8351cb8a568acdf7cc197059f8e","modified":1596794837029},{"_id":"source/_posts/随心记/.git/objects/a9/47c304cbe43b853f959939db8bf8eabd55e171","hash":"778d60aa7772901f3ac6df4264b2f0ac56196129","modified":1596794836724},{"_id":"source/_posts/随心记/.git/objects/b1/b176021bd8f88b7a6caba37f7b02473cafa3b5","hash":"01a1543dc8b320fac22263778ee591d7654b2c04","modified":1596794837349},{"_id":"source/_posts/随心记/.git/objects/b6/d93adccc2787f89dcdd1ce938e3f13e737e8c0","hash":"9bd3af1b6e9419a6fd791e8c872bc7c003cd9849","modified":1596794836603},{"_id":"source/_posts/随心记/.git/objects/b8/c8d2a1592b1c58b5991fd424b9c1ed2e3ec67a","hash":"cab392ef29f1b5514452e073f4c67904192a5c7a","modified":1596794836666},{"_id":"source/_posts/随心记/.git/objects/97/244bf846c6c3e56090e77564d9be5de72dac6f","hash":"c8077fa08615e2ad02b54d6ffa415b0a4dd791b7","modified":1596794836483},{"_id":"source/_posts/随心记/.git/objects/ba/e1c9d73f594c6475f0e2f80143d223efcc16cb","hash":"c78a2915be5f57c53d4809d86dc1c5a901afab4f","modified":1596794835724},{"_id":"source/_posts/随心记/.git/objects/bd/55f5e8b87fcd6d8fdc6f998d5bab8681ce9d05","hash":"4baeb7700a9a0e94f871c16966efe5ab57331b7b","modified":1596794837132},{"_id":"source/_posts/随心记/.git/objects/bf/bf6cc5ae5e0389fdbe8be0abc09e693238a0f7","hash":"fe4369403dcb60da73a9d22d2c2291c9f99759de","modified":1596794837107},{"_id":"source/_posts/随心记/.git/objects/ba/0c4c43b62a172c9915c552e953ae02ad07d282","hash":"95494cb336088fe61bb504e144031ff7f7692cc2","modified":1596794835699},{"_id":"source/_posts/随心记/.git/objects/c1/018345b96a49a9a5f6bc5d2e3b0e608959f38e","hash":"0608216b4db3e15b879a53bf0ee5a93c39f29760","modified":1596794836432},{"_id":"source/_posts/随心记/.git/objects/65/6d4a84081e7406ec167b791097c50cb40d29c8","hash":"ee80ab23d4511f1cc607bc8720c94ba942b12f58","modified":1596794835466},{"_id":"source/_posts/随心记/.git/objects/60/b605b025e65b9efab7558f7e5763aa6e4fcc9a","hash":"f6aa6f8dbee4191ced16ba569171d4760e99e02c","modified":1596794835394},{"_id":"source/_posts/随心记/.git/objects/c7/3ee708c41460f6a3a36a0e6624b3f0c8a4487f","hash":"38f34dcc8daa8fbfd01ff5e4475a82d6559782e8","modified":1596794835282},{"_id":"source/_posts/随心记/.git/objects/d4/59581068bc1cc82d461839a8003cf4d6b050ae","hash":"75362912803d879c2e95b13fe810de8220378e7b","modified":1596794837058},{"_id":"source/_posts/随心记/.git/objects/d2/c9c5ee1395ddf89c6c92fd212169b3714c416f","hash":"7c666f9273f03eabcd0c5a289d112277c3353ba5","modified":1596794835673},{"_id":"source/_posts/随心记/.git/objects/ca/e71d778925f8d3902582878f9abb24fbd9ef15","hash":"af804bf711ebfd8ae3459512687a96ceda765ac0","modified":1596794835625},{"_id":"source/_posts/随心记/.git/objects/e2/3b992444507289bdcc00db2e857736d1cb411c","hash":"ad460e190abb23dc6d84a5aac332aa2d18c62dda","modified":1596794837207},{"_id":"source/_posts/随心记/.git/objects/e5/76383e0eba620df78c3b5b80be2e92518658ce","hash":"6a56279b6aeec382571d3a1c71b2dc4478546dd0","modified":1596794836404},{"_id":"source/_posts/随心记/.git/objects/e1/8c6179730582fe8e242cfd1829f522cdd1d808","hash":"9da2e6c6f690861495bdf36e64282f2e16343fc1","modified":1596794836312},{"_id":"source/_posts/随心记/.git/objects/e9/55c4ff0f47dcad887183e23679df911564b040","hash":"7e74369d72750c2b78b1caec55b6c8a1b04c7971","modified":1596794836240},{"_id":"source/_posts/随心记/.git/objects/c1/a45417540559b643724c40026a405c3786ec4a","hash":"ec433e1f4658ed6e6caccee227f6b5dac2096326","modified":1596794836082},{"_id":"source/_posts/随心记/.git/objects/6a/8336115d11f414820d9e06f2998eb7e524c9fd","hash":"4ffc764fd6ff19b6fbc5fa1092b8b1e242369984","modified":1596794835341},{"_id":"source/_posts/随心记/.git/objects/9b/3c78260216cf9af0942e0caeb8315fc78f8e6f","hash":"eaf9593fd9cc691664fb88f80f7bde8ce4c66a79","modified":1596794835656},{"_id":"source/_posts/随心记/.git/objects/e5/910a04a8ce9c6eaab23e3776df0ade024377b1","hash":"c322360886fbc2e0bea842a2703fe3d099d640dc","modified":1596794835857},{"_id":"source/_posts/随心记/.git/objects/eb/f7ab065ff4b5802f0eb8f95dc3613a4ab3df9a","hash":"68c88dc0c208c598937a6be77e944fa402cc709a","modified":1596794835366},{"_id":"source/_posts/随心记/.git/objects/9e/8543c4766e12dd7ce9917d938b3d513d944848","hash":"5a6f266dcfd147d86b4b24abcfeca9552d812bc7","modified":1596794836274}],"Category":[{"name":"Markdown","_id":"ckdcmq6620000kgamfhm53b0x"},{"name":"分类1","_id":"ckdcz30wd0000rkambh7kbkxr"},{"name":"分类2","parent":"ckdcz30wd0000rkambh7kbkxr","_id":"ckdcz4stb0004rkam3r1u8o5w"},{"name":"Diary","_id":"ckdcz9fd90007rkam2b443c0i"},{"name":"替换","_id":"ckdcza4fe001vrkam6uuscjng"},{"name":"3-1网络访问","_id":"ckdcza4g80020rkam6nmq5yz6"},{"name":"3-2-1安装Apache服务器","_id":"ckdcza4gm0025rkam0bbeed7n"},{"name":"3-2网络访问-数据格式","_id":"ckdcza4h1002brkamf6g51t2x"},{"name":"3-3 封装网络请求","_id":"ckdcza4h4002frkamh3hfd209"},{"name":"3-4 开源网络封装库Retofit","_id":"ckdcza4h5002jrkamdsyefllc"},{"name":"Android Studio使用技巧","_id":"ckdcza4h6002nrkambros6tmn"},{"name":"BottomNavigationView控件学习md","_id":"ckdcza4ho002urkam7mt0fa18"},{"name":"Jetpack","_id":"ckdcza4in0030rkam8pd3gzof"},{"name":"使用 ViewModel 处理配置更改","_id":"ckdcza4io0032rkam6l842yju"},{"name":"视图导航","_id":"ckdcza4jl0039rkam333h4584"},{"name":"基础学习","_id":"ckdcza4ld003erkam2x2lacra"},{"name":"1-1 安装bitnami虚拟机","_id":"ckdcza4lf003grkam8cs3gwav"},{"name":"1-1-安装","_id":"ckdcza4lg003krkam178bg5we"},{"name":"1-1 简介","_id":"ckdcza4mb003rrkam6e2451qq"},{"name":"1-2 连接SSH","_id":"ckdcza4me003wrkamgqp0hyg6"},{"name":"1-3 安装桌面","_id":"ckdcza4mj0041rkam8bidhvyv"},{"name":"2-1文档学习","_id":"ckdcza4mk0045rkamclww2gv6"},{"name":"简介","_id":"ckdcza4ml0049rkam7owl4kri"},{"name":"1-2-常用操作","_id":"ckdcza4mm004drkamhb2m2gxl"},{"name":"Untitled","_id":"ckdcza4mn004hrkam60ku1p4w"},{"name":"1-2 使用教程","_id":"ckdcza4mz004orkame91x3dyj"},{"name":"1-1简介","_id":"ckdcza4n3004rrkamaxczanvl"},{"name":"1-1 简单使用","_id":"ckdcza4n4004xrkam07woh88r"},{"name":"1-1 Git 设置和配置","_id":"ckdcza4n50052rkamf7qw8noy"},{"name":"IDEA中Tomcat日志乱码","_id":"ckdcza4nd0059rkam0wfchy2l"},{"name":"2-1 配置主题","_id":"ckdcza4ng005brkamby3tetey"},{"name":"3-1 hexo与md文件格式的冲突","_id":"ckdcza4nj005frkam1792grp9"},{"name":"Filter","_id":"ckdcza4nk005jrkamfj2v9b4m"},{"name":"2-1 Git忽略文件","_id":"ckdcza4nl005nrkam9kmrevlr"},{"name":"2-2 Git获取和创建项目","_id":"ckdcza4nm005rrkamgnwhfrnb"},{"name":"3-1 关键命令","_id":"ckdcza4nm005vrkam41ohfe1q"},{"name":"3-2 添加","_id":"ckdcza4nn005zrkamgbawbwqd"},{"name":"junit简介","_id":"ckdcza4nv0066rkamd1wqgi57"},{"name":"idea工具的使用","_id":"ckdcza4ny0068rkam6itlb4xq"},{"name":"idea报java版本错误解决方法","_id":"ckdcza4o0006crkam7221hyp6"},{"name":"创建代码块模板","_id":"ckdcza4o3006grkam9u7uh62a"},{"name":"利用IDEA学习编程语言","_id":"ckdcza4o5006krkamch2n3dhf"},{"name":"利用IDEA明明导入了包却显示缺少保留相关类","_id":"ckdcza4oa006rrkamalrf0lfw"},{"name":"快捷键","_id":"ckdcza4od006xrkam12ce98hy"},{"name":"插件使用","_id":"ckdcza4oe0071rkambwl844p8"},{"name":"1.学习网址","_id":"ckdcza4of0075rkam1x613r14"},{"name":"1-2 CentOS镜像使用帮助","_id":"ckdcza4og0079rkamg11h2cjd"},{"name":"Linux","_id":"ckdcza4og007drkamfuvk7pke"},{"name":"linux常用命令","_id":"ckdcza4oh007hrkamcuy94t2z"},{"name":"MyBatis框架","_id":"ckdcza4oi007lrkam8rkjg21r"},{"name":"Spring入门","_id":"ckdcza4oj007prkamhsi9avaw"},{"name":"多线程编程","_id":"ckdcza4ok007trkamga4k65ef"},{"name":"字节流与字符流","_id":"ckdcza4ok007xrkam5rwza4oo"},{"name":"index","_id":"ckdcza4ov0084rkam8r1resu4"},{"name":"spring注解","_id":"ckdcza4oy0088rkam9mgf4g0o"},{"name":"1-1 入门学习","_id":"ckdcza4p0008drkambbjc9b02"},{"name":"学习记录（一）","_id":"ckdcza4p2008irkam9g06eycp"},{"name":"Spring Framework简介","_id":"ckdcza4p4008mrkam9gel65mc"},{"name":"入门基础学习","_id":"ckdcza4p7008qrkam10yn5406"},{"name":"入门简介","_id":"ckdcza4p9008urkambfzm6jzv"},{"name":"数据类型","_id":"ckdcza4pb008zrkam4ejh2q03"},{"name":"框架搭建","_id":"ckdcza4pd0094rkamaj0xfxda"},{"name":"iptables的学习","_id":"ckdcza4ph0099rkam8jvxery4"},{"name":"2-1android moudle与libery切换","_id":"ckdcza4pj009erkama95d09u3"},{"name":"2-1阿里云服务器远程登录密码","_id":"ckdcza4pl009jrkam589q7gkh"},{"name":"Centos虚拟机网络连接问题","_id":"ckdcza4pn009nrkam0zbw35eq"},{"name":"Linux准备工作","_id":"ckdcza4pp009urkamczksd9a0"},{"name":"LINUX设置防火墙","_id":"ckdcza4pq009zrkam294u0glq"},{"name":"mysql安装","_id":"ckdcza4pr00a3rkam2tmd56ho"},{"name":"Nat连接网络","_id":"ckdcza4pr00a7rkamaa54byy5"},{"name":"Nginx简介","_id":"ckdcza4ps00abrkamh4m99xwm"},{"name":"Readis安装及配置","_id":"ckdcza4ps00afrkamhk280py9"},{"name":"文件命令操作md","_id":"ckdcza4pt00ajrkamh2jt0jjo"},{"name":"用户操作","_id":"ckdcza4pu00anrkamgsr8cldj"},{"name":"防火墙的设置","_id":"ckdcza4pu00arrkamg2nhfiyb"},{"name":"前期准备","_id":"ckdcza4pv00avrkamet68h1xa"},{"name":"01 Spring Boot入门","_id":"ckdcza4pv00azrkamd1m1cs3b"},{"name":"1-1-安装环境","_id":"ckdcza4pw00b3rkam3ix9029d"},{"name":"PermissionX权限管理库","_id":"ckdcza4px00b7rkamcmdvdz91"},{"name":"从安装到卸载","_id":"ckdcza4q300bfrkamftfi2228"},{"name":"初始化密码","_id":"ckdcza4q600bkrkam3g2neuhz"},{"name":"1-2-Redis启动","_id":"ckdcza4q800bqrkam8rnz26xs"},{"name":"2-1-数据结构","_id":"ckdcza4qb00bwrkam6ggjai6l"},{"name":"2-2 数据结构的常用命令","_id":"ckdcza4qf00c2rkamakxb8ocr"},{"name":"3-1分布式锁","_id":"ckdcza4qi00c7rkam9kdnfkvy"},{"name":"3-2 Lua脚本","_id":"ckdcza4qm00ccrkama42wfbrn"},{"name":"3-3 消息队列","_id":"ckdcza4qp00chrkam99lfhezp"},{"name":"Java客户端","_id":"ckdcza4qs00clrkam2ytj5fm4"},{"name":"错误问题","_id":"ckdcza4qt00cprkam8wne89fo"},{"name":"问题总结","_id":"ckdcza4qt00ctrkam5zqq6p9y"},{"name":"mysql数据库的安装与配置","_id":"ckdcza4qu00cxrkam3vj9hgak"},{"name":"vsftpd","_id":"ckdcza4qv00d1rkamg1fq59is"},{"name":"功能需求与技术可行性分析","_id":"ckdcza4qv00d5rkam6isd64li"},{"name":"需求文档","_id":"ckdcza4qw00d9rkambq8oexkp"},{"name":"项目知识点","_id":"ckdcza4qx00ddrkame5vde4uc"},{"name":"项目前期构建","_id":"ckdcza4qy00dhrkamgpq56zya"},{"name":"随心记","_id":"ckdd06ykv00002cam4eiwcola"},{"name":"Android学习","_id":"ckdd06yle00012camadnz0mg0"},{"name":"Bitnami虚拟机","_id":"ckdd06ylu000a2cam0irh7vcb"},{"name":"Docker学习","_id":"ckdd06ym6000g2camhqhg7iy5"},{"name":"GitBook学习","_id":"ckdd06ymc000l2cam2sx0frhp"},{"name":"GitHub学习","_id":"ckdd06ymi000p2camgf6c3yq3"},{"name":"Git学习","_id":"ckdd06ymk000r2cam482x1gq2"},{"name":"Junit","_id":"ckdd06ymw00112cam2rn5hwgc"},{"name":"IDEA","_id":"ckdd06ymz00132cam56xj91k0"},{"name":"Kotlin学习","_id":"ckdd06ynl001k2cam8nbw9l4j"},{"name":"Linux入门","_id":"ckdd06ynv001r2cam61qx2zva"},{"name":"Maven和Gradle","_id":"ckdd06yom002j2cam73znfekg"},{"name":"MySQL8.0","_id":"ckdd06yom002m2cam4wy87y1e"},{"name":"Redis学习","_id":"ckdd06yom002o2cam5weq337a"},{"name":"Spring","_id":"ckdd06yot00382camaup3d5rm"},{"name":"java_web","_id":"ckdd06yot003a2camdk4ketsk"},{"name":"企业级权限管理","_id":"ckdd06yox003o2camh5q06hp4"},{"name":"企业级电商项目","_id":"ckdd06yox003q2cam096nc1vw"},{"name":"创建个人博客","_id":"ckdd06yoz003y2cambd4280d5"},{"name":"创建图片地址创库","_id":"ckdd06yp000402cambh12dffa"},{"name":"SPring源码学习","_id":"ckdd06yp000422cam6dta6mhk"},{"name":"Spring-Mybatis项目","_id":"ckdd06yp100462cam8nzaahx7"},{"name":"SpringTest","_id":"ckdd06yp300492camckul7rso"},{"name":"Kotlin开发电商app","_id":"ckdd06yp3004b2camdd0yg77o"},{"name":"天气预报App","_id":"ckdd06yp4004d2cam38mi5eze"},{"name":"微人事项目管理","_id":"ckdd06yp6004h2camaknd30nu"},{"name":"淘淘商城项目实战","_id":"ckdd06ypm004r2cam6ahz816m"},{"name":"编写开源库","_id":"ckdd06ypr004t2cam503xdxar"},{"name":"Hexo","_id":"ckdd06ypt004v2cam0ftyfdio"},{"name":"github pages","_id":"ckdd06ypv00522cam03y329av"},{"name":"OneDrive","_id":"ckddpxskf0000a4am7a5a6ch9"},{"name":"项目实战","_id":"ckddqczou001er8amcdnmebux"}],"Data":[],"Page":[],"Post":[{"title":"1-1 安装bitnami虚拟机","auther":"ku jin","_content":"[toc]\n\n# 第 1 步：启动 Bitnami WordPress 虚拟机\n\n- 下载连接:https://bitnami.com/stack/wordpress/virtual-machine\n\n- 使用虚拟机打开连接\n\n![image-20200730114146505](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114146505.png)\n\n现在，您可以通过启动 Web 浏览器并浏览虚拟机的 IP 地址来访问 WordPress。您应该会看到博客的头版，并包含一个示例帖子，如下所示：\n\nhttp://192.168.2.139/\n\n![image-20200730114615539](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114615539.png)\n\n# 第 2 步：登录并使用 WordPress 开始\n\n要登录到 WordPress 仪表板，请按照以下步骤操作：\n\n- 浏览到 WordPress 仪表板，通常在 URL *http://192.168.2.139/wp-admin。*\n\n- 查看用户名和密码\n\n- ```bash\n  sudo cat /home/bitnami/bitnami_credentials\n  ```\n\n  ![image-20200730120745221](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120745221.png)\n\n## 设置中文显示\n\n![image-20200730120842595](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120842595.png)","source":"_posts/随心记/Bitnami虚拟机/1-1 安装bitnami虚拟机.md","raw":"---\ntitle: 1-1 安装bitnami虚拟机 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Bitnami虚拟机\ntags: # 标签=目标文件夹\n - 1-1 安装bitnami虚拟机 \n---\n[toc]\n\n# 第 1 步：启动 Bitnami WordPress 虚拟机\n\n- 下载连接:https://bitnami.com/stack/wordpress/virtual-machine\n\n- 使用虚拟机打开连接\n\n![image-20200730114146505](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114146505.png)\n\n现在，您可以通过启动 Web 浏览器并浏览虚拟机的 IP 地址来访问 WordPress。您应该会看到博客的头版，并包含一个示例帖子，如下所示：\n\nhttp://192.168.2.139/\n\n![image-20200730114615539](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114615539.png)\n\n# 第 2 步：登录并使用 WordPress 开始\n\n要登录到 WordPress 仪表板，请按照以下步骤操作：\n\n- 浏览到 WordPress 仪表板，通常在 URL *http://192.168.2.139/wp-admin。*\n\n- 查看用户名和密码\n\n- ```bash\n  sudo cat /home/bitnami/bitnami_credentials\n  ```\n\n  ![image-20200730120745221](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120745221.png)\n\n## 设置中文显示\n\n![image-20200730120842595](images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120842595.png)","slug":"随心记/Bitnami虚拟机/1-1 安装bitnami虚拟机","published":1,"date":"2020-08-02T23:42:42.533Z","updated":"2020-08-02T23:42:59.745Z","_id":"ckdcz9hu70009rkam1fvk8mhn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"第-1-步：启动-Bitnami-WordPress-虚拟机\"><a href=\"#第-1-步：启动-Bitnami-WordPress-虚拟机\" class=\"headerlink\" title=\"第 1 步：启动 Bitnami WordPress 虚拟机\"></a>第 1 步：启动 Bitnami WordPress 虚拟机</h1><ul>\n<li><p>下载连接:<a href=\"https://bitnami.com/stack/wordpress/virtual-machine\">https://bitnami.com/stack/wordpress/virtual-machine</a></p>\n</li>\n<li><p>使用虚拟机打开连接</p>\n</li>\n</ul>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114146505.png\" alt=\"image-20200730114146505\"></p>\n<p>现在，您可以通过启动 Web 浏览器并浏览虚拟机的 IP 地址来访问 WordPress。您应该会看到博客的头版，并包含一个示例帖子，如下所示：</p>\n<p><a href=\"http://192.168.2.139/\">http://192.168.2.139/</a></p>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114615539.png\" alt=\"image-20200730114615539\"></p>\n<h1 id=\"第-2-步：登录并使用-WordPress-开始\"><a href=\"#第-2-步：登录并使用-WordPress-开始\" class=\"headerlink\" title=\"第 2 步：登录并使用 WordPress 开始\"></a>第 2 步：登录并使用 WordPress 开始</h1><p>要登录到 WordPress 仪表板，请按照以下步骤操作：</p>\n<ul>\n<li><p>浏览到 WordPress 仪表板，通常在 URL <em><a href=\"http://192.168.2.139/wp-admin%E3%80%82\">http://192.168.2.139/wp-admin。</a></em></p>\n</li>\n<li><p>查看用户名和密码</p>\n</li>\n<li><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /home/bitnami/bitnami_credentials</code></pre>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120745221.png\" alt=\"image-20200730120745221\"></p>\n</li>\n</ul>\n<h2 id=\"设置中文显示\"><a href=\"#设置中文显示\" class=\"headerlink\" title=\"设置中文显示\"></a>设置中文显示</h2><p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120842595.png\" alt=\"image-20200730120842595\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"第-1-步：启动-Bitnami-WordPress-虚拟机\"><a href=\"#第-1-步：启动-Bitnami-WordPress-虚拟机\" class=\"headerlink\" title=\"第 1 步：启动 Bitnami WordPress 虚拟机\"></a>第 1 步：启动 Bitnami WordPress 虚拟机</h1><ul>\n<li><p>下载连接:<a href=\"https://bitnami.com/stack/wordpress/virtual-machine\">https://bitnami.com/stack/wordpress/virtual-machine</a></p>\n</li>\n<li><p>使用虚拟机打开连接</p>\n</li>\n</ul>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114146505.png\" alt=\"image-20200730114146505\"></p>\n<p>现在，您可以通过启动 Web 浏览器并浏览虚拟机的 IP 地址来访问 WordPress。您应该会看到博客的头版，并包含一个示例帖子，如下所示：</p>\n<p><a href=\"http://192.168.2.139/\">http://192.168.2.139/</a></p>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114615539.png\" alt=\"image-20200730114615539\"></p>\n<h1 id=\"第-2-步：登录并使用-WordPress-开始\"><a href=\"#第-2-步：登录并使用-WordPress-开始\" class=\"headerlink\" title=\"第 2 步：登录并使用 WordPress 开始\"></a>第 2 步：登录并使用 WordPress 开始</h1><p>要登录到 WordPress 仪表板，请按照以下步骤操作：</p>\n<ul>\n<li><p>浏览到 WordPress 仪表板，通常在 URL <em><a href=\"http://192.168.2.139/wp-admin%E3%80%82\">http://192.168.2.139/wp-admin。</a></em></p>\n</li>\n<li><p>查看用户名和密码</p>\n</li>\n<li><pre><code class=\"bash\">sudo cat /home/bitnami/bitnami_credentials</code></pre>\n<p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120745221.png\" alt=\"image-20200730120745221\"></p>\n</li>\n</ul>\n<h2 id=\"设置中文显示\"><a href=\"#设置中文显示\" class=\"headerlink\" title=\"设置中文显示\"></a>设置中文显示</h2><p><img src=\"images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120842595.png\" alt=\"image-20200730120842595\"></p>\n"},{"title":"1-1-安装","auther":"ku jin","_content":"# Docker入门安装\n\n简介：作用和虚拟机相似，可以一键部署linux mysql nginx。。。\n\n| docker       | 虚拟机                                                       |                                                              |\n| :----------- | :----------------------------------------------------------- | ------------------------------------------------------------ |\n| 相同点       | 1. 都可在不同的主机之间迁移 2. 都具备 root 权限 3. 都可以远程控制 4. 都有备份、回滚操作 |                                                              |\n| 操作系统     | 在性能上有优势，可以轻易的运行多个操作系统                   | 可以安装任何系统，但是性能不及容器                           |\n| 原理         | 和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，\b所有容器共享操作系统，在进程级进行隔离 | 每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统 |\n| 优点         | 高效、集中。一个硬件\b节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核\b由提供者升级，服务由服务提供者管理 | 对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。 |\n| 资源管理     | 弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小 | 虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。 |\n| 远程管理     | 根据操作系统的不同，可以通过 shell 或者远程桌面进行          | 远程控制由虚拟化平台提供，可以在\b虚拟机启动之前连接           |\n| 缺点         | 对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统 | 每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限 |\n| 配置         | 快速，基本上是一键配置                                       | 配置时间长                                                   |\n| 启动时间     | 秒级                                                         | 分钟级                                                       |\n| 硬盘使用     | MB                                                           | GB                                                           |\n| 性能         | 接近原生态                                                   | 弱于原生态                                                   |\n| 系统支持数量 | \b单机支持上千个                                               | 一般不多于几十个                                             |\n\n## 核心组件\n\n- 镜像 images\n\n  静态模板，保存保存容器需要的环境，和应用执行代码，可以将镜像看作容器的代码，当代码运行起来就成了容器\n\n- 容器 \n\n  一个运行的环境，镜像的运行状态，\n\n- 库\n\n  特定用户存储镜像的目录，一个用户可以建立多个用户来保存自己的镜像\n\n# 安装命令\n\n```shell\n# 首先安装 Docker\nyum -y install docker\n\n# 然后启动 Docker 服务\nservice docker start\n\n# 测试安装是否成功\ndocker -v\n```\n\n![image-20200707220336806](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200707220336806.png)","source":"_posts/随心记/Docker学习/1-1-安装.md","raw":"---\ntitle: 1-1-安装 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Docker学习\ntags: # 标签=目标文件夹\n - 1-1-安装 \n---\n# Docker入门安装\n\n简介：作用和虚拟机相似，可以一键部署linux mysql nginx。。。\n\n| docker       | 虚拟机                                                       |                                                              |\n| :----------- | :----------------------------------------------------------- | ------------------------------------------------------------ |\n| 相同点       | 1. 都可在不同的主机之间迁移 2. 都具备 root 权限 3. 都可以远程控制 4. 都有备份、回滚操作 |                                                              |\n| 操作系统     | 在性能上有优势，可以轻易的运行多个操作系统                   | 可以安装任何系统，但是性能不及容器                           |\n| 原理         | 和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，\b所有容器共享操作系统，在进程级进行隔离 | 每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统 |\n| 优点         | 高效、集中。一个硬件\b节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核\b由提供者升级，服务由服务提供者管理 | 对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。 |\n| 资源管理     | 弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小 | 虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。 |\n| 远程管理     | 根据操作系统的不同，可以通过 shell 或者远程桌面进行          | 远程控制由虚拟化平台提供，可以在\b虚拟机启动之前连接           |\n| 缺点         | 对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统 | 每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限 |\n| 配置         | 快速，基本上是一键配置                                       | 配置时间长                                                   |\n| 启动时间     | 秒级                                                         | 分钟级                                                       |\n| 硬盘使用     | MB                                                           | GB                                                           |\n| 性能         | 接近原生态                                                   | 弱于原生态                                                   |\n| 系统支持数量 | \b单机支持上千个                                               | 一般不多于几十个                                             |\n\n## 核心组件\n\n- 镜像 images\n\n  静态模板，保存保存容器需要的环境，和应用执行代码，可以将镜像看作容器的代码，当代码运行起来就成了容器\n\n- 容器 \n\n  一个运行的环境，镜像的运行状态，\n\n- 库\n\n  特定用户存储镜像的目录，一个用户可以建立多个用户来保存自己的镜像\n\n# 安装命令\n\n```shell\n# 首先安装 Docker\nyum -y install docker\n\n# 然后启动 Docker 服务\nservice docker start\n\n# 测试安装是否成功\ndocker -v\n```\n\n![image-20200707220336806](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200707220336806.png)","slug":"随心记/Docker学习/1-1-安装","published":1,"date":"2020-08-02T23:42:42.650Z","updated":"2020-08-02T23:42:59.748Z","_id":"ckdcz9hz5000arkam49907qmw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Docker入门安装\"><a href=\"#Docker入门安装\" class=\"headerlink\" title=\"Docker入门安装\"></a>Docker入门安装</h1><p>简介：作用和虚拟机相似，可以一键部署linux mysql nginx。。。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">docker</th>\n<th align=\"left\">虚拟机</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">相同点</td>\n<td align=\"left\">1. 都可在不同的主机之间迁移 2. 都具备 root 权限 3. 都可以远程控制 4. 都有备份、回滚操作</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">操作系统</td>\n<td align=\"left\">在性能上有优势，可以轻易的运行多个操作系统</td>\n<td>可以安装任何系统，但是性能不及容器</td>\n</tr>\n<tr>\n<td align=\"left\">原理</td>\n<td align=\"left\">和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，\b所有容器共享操作系统，在进程级进行隔离</td>\n<td>每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统</td>\n</tr>\n<tr>\n<td align=\"left\">优点</td>\n<td align=\"left\">高效、集中。一个硬件\b节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核\b由提供者升级，服务由服务提供者管理</td>\n<td>对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。</td>\n</tr>\n<tr>\n<td align=\"left\">资源管理</td>\n<td align=\"left\">弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小</td>\n<td>虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。</td>\n</tr>\n<tr>\n<td align=\"left\">远程管理</td>\n<td align=\"left\">根据操作系统的不同，可以通过 shell 或者远程桌面进行</td>\n<td>远程控制由虚拟化平台提供，可以在\b虚拟机启动之前连接</td>\n</tr>\n<tr>\n<td align=\"left\">缺点</td>\n<td align=\"left\">对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统</td>\n<td>每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限</td>\n</tr>\n<tr>\n<td align=\"left\">配置</td>\n<td align=\"left\">快速，基本上是一键配置</td>\n<td>配置时间长</td>\n</tr>\n<tr>\n<td align=\"left\">启动时间</td>\n<td align=\"left\">秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td align=\"left\">硬盘使用</td>\n<td align=\"left\">MB</td>\n<td>GB</td>\n</tr>\n<tr>\n<td align=\"left\">性能</td>\n<td align=\"left\">接近原生态</td>\n<td>弱于原生态</td>\n</tr>\n<tr>\n<td align=\"left\">系统支持数量</td>\n<td align=\"left\">\b单机支持上千个</td>\n<td>一般不多于几十个</td>\n</tr>\n</tbody></table>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><ul>\n<li><p>镜像 images</p>\n<p>静态模板，保存保存容器需要的环境，和应用执行代码，可以将镜像看作容器的代码，当代码运行起来就成了容器</p>\n</li>\n<li><p>容器 </p>\n<p>一个运行的环境，镜像的运行状态，</p>\n</li>\n<li><p>库</p>\n<p>特定用户存储镜像的目录，一个用户可以建立多个用户来保存自己的镜像</p>\n</li>\n</ul>\n<h1 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h1><pre class=\" language-shell\"><code class=\"language-shell\"># 首先安装 Docker\nyum -y install docker\n\n# 然后启动 Docker 服务\nservice docker start\n\n# 测试安装是否成功\ndocker -v</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200707220336806.png\" alt=\"image-20200707220336806\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Docker入门安装\"><a href=\"#Docker入门安装\" class=\"headerlink\" title=\"Docker入门安装\"></a>Docker入门安装</h1><p>简介：作用和虚拟机相似，可以一键部署linux mysql nginx。。。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">docker</th>\n<th align=\"left\">虚拟机</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">相同点</td>\n<td align=\"left\">1. 都可在不同的主机之间迁移 2. 都具备 root 权限 3. 都可以远程控制 4. 都有备份、回滚操作</td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">操作系统</td>\n<td align=\"left\">在性能上有优势，可以轻易的运行多个操作系统</td>\n<td>可以安装任何系统，但是性能不及容器</td>\n</tr>\n<tr>\n<td align=\"left\">原理</td>\n<td align=\"left\">和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，\b所有容器共享操作系统，在进程级进行隔离</td>\n<td>每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统</td>\n</tr>\n<tr>\n<td align=\"left\">优点</td>\n<td align=\"left\">高效、集中。一个硬件\b节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核\b由提供者升级，服务由服务提供者管理</td>\n<td>对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。</td>\n</tr>\n<tr>\n<td align=\"left\">资源管理</td>\n<td align=\"left\">弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小</td>\n<td>虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。</td>\n</tr>\n<tr>\n<td align=\"left\">远程管理</td>\n<td align=\"left\">根据操作系统的不同，可以通过 shell 或者远程桌面进行</td>\n<td>远程控制由虚拟化平台提供，可以在\b虚拟机启动之前连接</td>\n</tr>\n<tr>\n<td align=\"left\">缺点</td>\n<td align=\"left\">对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统</td>\n<td>每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限</td>\n</tr>\n<tr>\n<td align=\"left\">配置</td>\n<td align=\"left\">快速，基本上是一键配置</td>\n<td>配置时间长</td>\n</tr>\n<tr>\n<td align=\"left\">启动时间</td>\n<td align=\"left\">秒级</td>\n<td>分钟级</td>\n</tr>\n<tr>\n<td align=\"left\">硬盘使用</td>\n<td align=\"left\">MB</td>\n<td>GB</td>\n</tr>\n<tr>\n<td align=\"left\">性能</td>\n<td align=\"left\">接近原生态</td>\n<td>弱于原生态</td>\n</tr>\n<tr>\n<td align=\"left\">系统支持数量</td>\n<td align=\"left\">\b单机支持上千个</td>\n<td>一般不多于几十个</td>\n</tr>\n</tbody></table>\n<h2 id=\"核心组件\"><a href=\"#核心组件\" class=\"headerlink\" title=\"核心组件\"></a>核心组件</h2><ul>\n<li><p>镜像 images</p>\n<p>静态模板，保存保存容器需要的环境，和应用执行代码，可以将镜像看作容器的代码，当代码运行起来就成了容器</p>\n</li>\n<li><p>容器 </p>\n<p>一个运行的环境，镜像的运行状态，</p>\n</li>\n<li><p>库</p>\n<p>特定用户存储镜像的目录，一个用户可以建立多个用户来保存自己的镜像</p>\n</li>\n</ul>\n<h1 id=\"安装命令\"><a href=\"#安装命令\" class=\"headerlink\" title=\"安装命令\"></a>安装命令</h1><pre><code class=\"shell\"># 首先安装 Docker\nyum -y install docker\n\n# 然后启动 Docker 服务\nservice docker start\n\n# 测试安装是否成功\ndocker -v</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200707220336806.png\" alt=\"image-20200707220336806\"></p>\n"},{"title":"1-1 简介","auther":"ku jin","_content":"","source":"_posts/随心记/GitBook学习/1-1 简介.md","raw":"---\ntitle: 1-1 简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitBook学习\ntags: # 标签=目标文件夹\n - 1-1 简介 \n---\n","slug":"随心记/GitBook学习/1-1 简介","published":1,"date":"2020-08-02T23:42:42.768Z","updated":"2020-08-02T23:42:59.750Z","_id":"ckdcz9i3x000brkam5jc04frv","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"Untitled","auther":"ku jin","_content":"","source":"_posts/随心记/GitHub学习/Untitled.md","raw":"---\ntitle: Untitled # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - Untitled \n---\n","slug":"随心记/GitHub学习/Untitled","published":1,"date":"2020-08-02T23:42:42.796Z","updated":"2020-08-02T23:42:59.751Z","_id":"ckdcz9i4g000crkamasa380ur","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"1-1简介","auther":"ku jin","_content":"# 简介\n\n## github pages + Hexo 创建个人博客\n\n\n\n","source":"_posts/随心记/GitHub学习/创建个人博客/1-1简介.md","raw":"---\ntitle: 1-1简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 1-1简介 \n---\n# 简介\n\n## github pages + Hexo 创建个人博客\n\n\n\n","slug":"随心记/GitHub学习/创建个人博客/1-1简介","published":1,"date":"2020-08-02T23:42:42.799Z","updated":"2020-08-02T23:42:59.752Z","_id":"ckdcz9i4t000drkambglfaxia","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"github-pages-Hexo-创建个人博客\"><a href=\"#github-pages-Hexo-创建个人博客\" class=\"headerlink\" title=\"github pages + Hexo 创建个人博客\"></a>github pages + Hexo 创建个人博客</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"github-pages-Hexo-创建个人博客\"><a href=\"#github-pages-Hexo-创建个人博客\" class=\"headerlink\" title=\"github pages + Hexo 创建个人博客\"></a>github pages + Hexo 创建个人博客</h2>"},{"title":"1-1 简介","auther":"ku jin","_content":"# 简介\n\n地址:https://pages.github.com/\n\n","source":"_posts/随心记/GitHub学习/创建个人博客/github pages/1-1 简介.md","raw":"---\ntitle: 1-1 简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 1-1 简介 \n---\n# 简介\n\n地址:https://pages.github.com/\n\n","slug":"随心记/GitHub学习/创建个人博客/github pages/1-1 简介","published":1,"date":"2020-08-02T23:42:42.802Z","updated":"2020-08-02T23:42:59.753Z","_id":"ckdcz9i4x000erkam0p01bgtd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>地址:<a href=\"https://pages.github.com/\">https://pages.github.com/</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>地址:<a href=\"https://pages.github.com/\">https://pages.github.com/</a></p>\n"},{"title":"1-1 简介","auther":"ku jin","_content":"[TOC]\n\n[中文文档](https://hexo.io/zh-cn/docs/)\n\n# 什么是 Hexo？\n\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n# 安装前提\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- [Node.js](http://nodejs.org/) (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- [Git](http://git-scm.com/)\n\n# 安装 Hexo\n\n```\n npm install -g hexo-cli\n```\n\n# 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### _config.yml\n\n网站的 [配置](https://hexo.io/zh-cn/docs/configuration) 信息，您可以在此配置大部分的参数。","source":"_posts/随心记/GitHub学习/创建个人博客/Hexo/1-1 简介.md","raw":"---\ntitle: 1-1 简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 1-1 简介 \n---\n[TOC]\n\n[中文文档](https://hexo.io/zh-cn/docs/)\n\n# 什么是 Hexo？\n\n> Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 [Markdown](http://daringfireball.net/projects/markdown/)（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n# 安装前提\n\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\n\n- [Node.js](http://nodejs.org/) (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)\n- [Git](http://git-scm.com/)\n\n# 安装 Hexo\n\n```\n npm install -g hexo-cli\n```\n\n# 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n\n新建完成后，指定文件夹的目录如下：\n\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n\n### _config.yml\n\n网站的 [配置](https://hexo.io/zh-cn/docs/configuration) 信息，您可以在此配置大部分的参数。","slug":"随心记/GitHub学习/创建个人博客/Hexo/1-1 简介","published":1,"date":"2020-08-02T23:42:42.806Z","updated":"2020-08-02T23:42:59.753Z","_id":"ckdcz9i5n000frkam30q9hrbu","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">中文文档</a></p>\n<h1 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h1><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h1 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>\n<li><a href=\"http://git-scm.com/\">Git</a></li>\n</ul>\n<h1 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h1><pre><code> npm install -g hexo-cli</code></pre>\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>$ hexo init &lt;folder&gt;\n$ cd &lt;folder&gt;\n$ npm install</code></pre>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>网站的 <a href=\"https://hexo.io/zh-cn/docs/configuration\">配置</a> 信息，您可以在此配置大部分的参数。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">中文文档</a></p>\n<h1 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h1><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href=\"http://daringfireball.net/projects/markdown/\">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n</blockquote>\n<h1 id=\"安装前提\"><a href=\"#安装前提\" class=\"headerlink\" title=\"安装前提\"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p>\n<ul>\n<li><a href=\"http://nodejs.org/\">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li>\n<li><a href=\"http://git-scm.com/\">Git</a></li>\n</ul>\n<h1 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h1><pre><code> npm install -g hexo-cli</code></pre>\n<h1 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>$ hexo init &lt;folder&gt;\n$ cd &lt;folder&gt;\n$ npm install</code></pre>\n<p>新建完成后，指定文件夹的目录如下：</p>\n<pre><code>.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes</code></pre>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"_config.yml\"></a>_config.yml</h3><p>网站的 <a href=\"https://hexo.io/zh-cn/docs/configuration\">配置</a> 信息，您可以在此配置大部分的参数。</p>\n"},{"title":"3-1 hexo与md文件格式的冲突","auther":"ku jin","_content":"# 将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式\n\n```\n\n```\n\n","source":"_posts/随心记/GitHub学习/创建个人博客/Hexo/3-1 hexo与md文件格式的冲突.md","raw":"---\ntitle: 3-1 hexo与md文件格式的冲突 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 3-1 hexo与md文件格式的冲突 \n---\n# 将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式\n\n```\n\n```\n\n","slug":"随心记/GitHub学习/创建个人博客/Hexo/3-1 hexo与md文件格式的冲突","published":1,"date":"2020-08-02T23:42:42.828Z","updated":"2020-08-02T23:42:59.755Z","_id":"ckdcz9i5o000grkamg54lb78g","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式\"><a href=\"#将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式\" class=\"headerlink\" title=\"将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式\"></a>将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式</h1><pre><code></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式\"><a href=\"#将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式\" class=\"headerlink\" title=\"将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式\"></a>将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式</h1><pre><code></code></pre>\n"},{"title":"1-1 简单使用","auther":"ku jin","_content":"# 作用\n\n> 免费的图片服务器,用存放图片,方便引用地址\n\n# 条件\n\n- GitHub创建一个仓库\n- 在设置里GitHub获取token\n- 下载PicGo 设置图床\n\n![image-20200802180441861](https://raw.githubusercontent.com/kujin521/Typora_images/master/img/image-%E5%9B%BE%E5%BA%8A%E6%88%AA%E5%9B%BE.png)","source":"_posts/随心记/GitHub学习/创建图片地址创库/1-1 简单使用.md","raw":"---\ntitle: 1-1 简单使用 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 1-1 简单使用 \n---\n# 作用\n\n> 免费的图片服务器,用存放图片,方便引用地址\n\n# 条件\n\n- GitHub创建一个仓库\n- 在设置里GitHub获取token\n- 下载PicGo 设置图床\n\n![image-20200802180441861](https://raw.githubusercontent.com/kujin521/Typora_images/master/img/image-%E5%9B%BE%E5%BA%8A%E6%88%AA%E5%9B%BE.png)","slug":"随心记/GitHub学习/创建图片地址创库/1-1 简单使用","published":1,"date":"2020-08-02T23:42:42.852Z","updated":"2020-08-02T23:42:59.756Z","_id":"ckdcz9i6e000hrkam455kar7k","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><blockquote>\n<p>免费的图片服务器,用存放图片,方便引用地址</p>\n</blockquote>\n<h1 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h1><ul>\n<li>GitHub创建一个仓库</li>\n<li>在设置里GitHub获取token</li>\n<li>下载PicGo 设置图床</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/kujin521/Typora_images/master/img/image-%E5%9B%BE%E5%BA%8A%E6%88%AA%E5%9B%BE.png\" alt=\"image-20200802180441861\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h1><blockquote>\n<p>免费的图片服务器,用存放图片,方便引用地址</p>\n</blockquote>\n<h1 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h1><ul>\n<li>GitHub创建一个仓库</li>\n<li>在设置里GitHub获取token</li>\n<li>下载PicGo 设置图床</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/kujin521/Typora_images/master/img/image-%E5%9B%BE%E5%BA%8A%E6%88%AA%E5%9B%BE.png\" alt=\"image-20200802180441861\"></p>\n"},{"title":"1-1 Git 设置和配置","auther":"ku jin","_content":"[toc]\n\n# 简介\n\n官方文档：https://git-scm.com/docs\n\n```shell\ngit [--version] [--help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--super-prefix=<path>]\n    <command> [<args>]\n```\n\n> Git 是一个快速的、可扩展的、具有异常丰富的命令集的分散式版本控制，它既提供了高级操作，也提供了对内部的完全访问。\n>\n\n# 安装\n\n```\n# linux系统\nsudo apt-get install git\nyum install git\n# windos 去官网下载安装包\n```\n\n# 配置git\n\n- 打开git终端,配置用户名和邮箱,必须\n\n\n```bash\ngit config --global user.name \"kujin\"\ngit config --global user.email \"kujin@qq.com\"\n```","source":"_posts/随心记/Git学习/1-1 Git 设置和配置 .md","raw":"---\ntitle: 1-1 Git 设置和配置  # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Git学习\ntags: # 标签=目标文件夹\n - 1-1 Git 设置和配置  \n---\n[toc]\n\n# 简介\n\n官方文档：https://git-scm.com/docs\n\n```shell\ngit [--version] [--help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--super-prefix=<path>]\n    <command> [<args>]\n```\n\n> Git 是一个快速的、可扩展的、具有异常丰富的命令集的分散式版本控制，它既提供了高级操作，也提供了对内部的完全访问。\n>\n\n# 安装\n\n```\n# linux系统\nsudo apt-get install git\nyum install git\n# windos 去官网下载安装包\n```\n\n# 配置git\n\n- 打开git终端,配置用户名和邮箱,必须\n\n\n```bash\ngit config --global user.name \"kujin\"\ngit config --global user.email \"kujin@qq.com\"\n```","slug":"随心记/Git学习/1-1 Git 设置和配置 ","published":1,"date":"2020-08-02T23:42:42.856Z","updated":"2020-08-02T23:42:59.757Z","_id":"ckdcz9i6n000irkamdd2k99sj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>官方文档：<a href=\"https://git-scm.com/docs\">https://git-scm.com/docs</a></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">git [--version] [--help] [-C <path>] [-c <name>=<value>]\n    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\n    [--super-prefix=<path>]\n    <command> [<args>]</code></pre>\n<blockquote>\n<p>Git 是一个快速的、可扩展的、具有异常丰富的命令集的分散式版本控制，它既提供了高级操作，也提供了对内部的完全访问。</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code># linux系统\nsudo apt-get install git\nyum install git\n# windos 去官网下载安装包</code></pre>\n<h1 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h1><ul>\n<li>打开git终端,配置用户名和邮箱,必须</li>\n</ul>\n<pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"kujin\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"kujin@qq.com\"</span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>官方文档：<a href=\"https://git-scm.com/docs\">https://git-scm.com/docs</a></p>\n<pre><code class=\"shell\">git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]\n    [--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]\n    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]\n    [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]\n    [--super-prefix=&lt;path&gt;]\n    &lt;command&gt; [&lt;args&gt;]</code></pre>\n<blockquote>\n<p>Git 是一个快速的、可扩展的、具有异常丰富的命令集的分散式版本控制，它既提供了高级操作，也提供了对内部的完全访问。</p>\n</blockquote>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code># linux系统\nsudo apt-get install git\nyum install git\n# windos 去官网下载安装包</code></pre>\n<h1 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h1><ul>\n<li>打开git终端,配置用户名和邮箱,必须</li>\n</ul>\n<pre><code class=\"bash\">git config --global user.name &quot;kujin&quot;\ngit config --global user.email &quot;kujin@qq.com&quot;</code></pre>\n"},{"title":"2-1 Git忽略文件","auther":"ku jin","_content":"[toc]\n\n# 1.忽略文件\n\ngit会一行行读取文件内容,被忽略的文件不会被上传\n\n## 固定文件名: .gitignore\n\n```\n*.iml\n.gradle\n/locak.properties\n/build\n```\n\n# 2.查看修改内容\n\n```bash\ngit status\n```\n\n# 3.查看提交记录\n\n```bash\ngit log\n```\n\n","source":"_posts/随心记/Git学习/2-1 Git忽略文件.md","raw":"---\ntitle: 2-1 Git忽略文件 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Git学习\ntags: # 标签=目标文件夹\n - 2-1 Git忽略文件 \n---\n[toc]\n\n# 1.忽略文件\n\ngit会一行行读取文件内容,被忽略的文件不会被上传\n\n## 固定文件名: .gitignore\n\n```\n*.iml\n.gradle\n/locak.properties\n/build\n```\n\n# 2.查看修改内容\n\n```bash\ngit status\n```\n\n# 3.查看提交记录\n\n```bash\ngit log\n```\n\n","slug":"随心记/Git学习/2-1 Git忽略文件","published":1,"date":"2020-08-02T23:42:42.885Z","updated":"2020-08-02T23:42:59.757Z","_id":"ckdcz9i6o000jrkam93c66tc1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"1-忽略文件\"><a href=\"#1-忽略文件\" class=\"headerlink\" title=\"1.忽略文件\"></a>1.忽略文件</h1><p>git会一行行读取文件内容,被忽略的文件不会被上传</p>\n<h2 id=\"固定文件名-gitignore\"><a href=\"#固定文件名-gitignore\" class=\"headerlink\" title=\"固定文件名: .gitignore\"></a>固定文件名: .gitignore</h2><pre><code>*.iml\n.gradle\n/locak.properties\n/build</code></pre>\n<h1 id=\"2-查看修改内容\"><a href=\"#2-查看修改内容\" class=\"headerlink\" title=\"2.查看修改内容\"></a>2.查看修改内容</h1><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> status</code></pre>\n<h1 id=\"3-查看提交记录\"><a href=\"#3-查看提交记录\" class=\"headerlink\" title=\"3.查看提交记录\"></a>3.查看提交记录</h1><pre class=\" language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> log</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-忽略文件\"><a href=\"#1-忽略文件\" class=\"headerlink\" title=\"1.忽略文件\"></a>1.忽略文件</h1><p>git会一行行读取文件内容,被忽略的文件不会被上传</p>\n<h2 id=\"固定文件名-gitignore\"><a href=\"#固定文件名-gitignore\" class=\"headerlink\" title=\"固定文件名: .gitignore\"></a>固定文件名: .gitignore</h2><pre><code>*.iml\n.gradle\n/locak.properties\n/build</code></pre>\n<h1 id=\"2-查看修改内容\"><a href=\"#2-查看修改内容\" class=\"headerlink\" title=\"2.查看修改内容\"></a>2.查看修改内容</h1><pre><code class=\"bash\">git status</code></pre>\n<h1 id=\"3-查看提交记录\"><a href=\"#3-查看提交记录\" class=\"headerlink\" title=\"3.查看提交记录\"></a>3.查看提交记录</h1><pre><code class=\"bash\">git log</code></pre>\n"},{"title":"2-2 Git获取和创建项目","auther":"ku jin","_content":"# 简介\n\n# git init \n\n> 创建一个空的 Git 存储库或重新初始化现有存储库\n\n```git\ngit init [-q | --quiet] [--bare] [--template=<template_directory>]\n\t  [--separate-git-dir <git dir>] [--object-format=<format>]\n\t  [-b <branch-name> | --initial-branch=<branch-name>]\n\t  [--shared[=<permissions>]] [directory]\n```\n\n## 选择\n\n| 命令      | 描述                                                         |\n| --------- | ------------------------------------------------------------ |\n| -q        | 只打印错误和警告消息; 所有其他输出将被禁止                   |\n| **-bare** | 创建一个裸库。如果没有设置环境，则将其设置为当前的工作目录   |\n| **-b**    | 新创建的存储库中为初始分支使用指定的名称。如果没有指定，则退回到默认名称: master |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n\n# Git Clone \n\n> 将存储库克隆到一个新目录中\n\n```\ngit clone [--template=<template_directory>]\n\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n\t  [--dissociate] [--separate-git-dir <git dir>]\n\t  [--depth <depth>] [--[no-]single-branch] [--no-tags]\n\t  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]\n\t  [--[no-]remote-submodules] [--jobs <n>] [--sparse]\n\t  [--filter=<filter>] [--] <repository>\n\t  [<directory>]\n```\n\n克隆一个存储库到一个新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 git branch -- remotes 可见) ，并创建和检出从克隆的存储库的当前活动分支中分支出来的初始分支。\n\n## 选项\n\n| 命令                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| **-b <name>** - b < 姓名 > | 不要将新创建的 HEAD 指向克隆存储库的 HEAD 所指向的分支，而是指向 < name > branch。在非裸存储库中，这是要签出的分支。-- branch 还可以获取标记，并在结果存储库中的那个提交处分离 HEAD。 |\n|                            |                                                              |\n|                            |                                                              |\n\n","source":"_posts/随心记/Git学习/2-2 Git获取和创建项目.md","raw":"---\ntitle: 2-2 Git获取和创建项目 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Git学习\ntags: # 标签=目标文件夹\n - 2-2 Git获取和创建项目 \n---\n# 简介\n\n# git init \n\n> 创建一个空的 Git 存储库或重新初始化现有存储库\n\n```git\ngit init [-q | --quiet] [--bare] [--template=<template_directory>]\n\t  [--separate-git-dir <git dir>] [--object-format=<format>]\n\t  [-b <branch-name> | --initial-branch=<branch-name>]\n\t  [--shared[=<permissions>]] [directory]\n```\n\n## 选择\n\n| 命令      | 描述                                                         |\n| --------- | ------------------------------------------------------------ |\n| -q        | 只打印错误和警告消息; 所有其他输出将被禁止                   |\n| **-bare** | 创建一个裸库。如果没有设置环境，则将其设置为当前的工作目录   |\n| **-b**    | 新创建的存储库中为初始分支使用指定的名称。如果没有指定，则退回到默认名称: master |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n|           |                                                              |\n\n# Git Clone \n\n> 将存储库克隆到一个新目录中\n\n```\ngit clone [--template=<template_directory>]\n\t  [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n\t  [-o <name>] [-b <name>] [-u <upload-pack>] [--reference <repository>]\n\t  [--dissociate] [--separate-git-dir <git dir>]\n\t  [--depth <depth>] [--[no-]single-branch] [--no-tags]\n\t  [--recurse-submodules[=<pathspec>]] [--[no-]shallow-submodules]\n\t  [--[no-]remote-submodules] [--jobs <n>] [--sparse]\n\t  [--filter=<filter>] [--] <repository>\n\t  [<directory>]\n```\n\n克隆一个存储库到一个新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 git branch -- remotes 可见) ，并创建和检出从克隆的存储库的当前活动分支中分支出来的初始分支。\n\n## 选项\n\n| 命令                       | 描述                                                         |\n| -------------------------- | ------------------------------------------------------------ |\n| **-b <name>** - b < 姓名 > | 不要将新创建的 HEAD 指向克隆存储库的 HEAD 所指向的分支，而是指向 < name > branch。在非裸存储库中，这是要签出的分支。-- branch 还可以获取标记，并在结果存储库中的那个提交处分离 HEAD。 |\n|                            |                                                              |\n|                            |                                                              |\n\n","slug":"随心记/Git学习/2-2 Git获取和创建项目","published":1,"date":"2020-08-02T23:42:42.889Z","updated":"2020-08-02T23:42:59.758Z","_id":"ckdcz9i6p000krkam93sz0h5c","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h1 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h1><blockquote>\n<p>创建一个空的 Git 存储库或重新初始化现有存储库</p>\n</blockquote>\n<pre class=\" language-git\"><code class=\"language-git\">git init [-q | --quiet] [--bare] [--template=&lt;template_directory>]\n      [--separate-git-dir &lt;git dir>] [--object-format=&lt;format>]\n      [-b &lt;branch-name> | --initial-branch=&lt;branch-name>]\n      [--shared[=&lt;permissions>]] [directory]</code></pre>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-q</td>\n<td>只打印错误和警告消息; 所有其他输出将被禁止</td>\n</tr>\n<tr>\n<td><strong>-bare</strong></td>\n<td>创建一个裸库。如果没有设置环境，则将其设置为当前的工作目录</td>\n</tr>\n<tr>\n<td><strong>-b</strong></td>\n<td>新创建的存储库中为初始分支使用指定的名称。如果没有指定，则退回到默认名称: master</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Git-Clone\"><a href=\"#Git-Clone\" class=\"headerlink\" title=\"Git Clone\"></a>Git Clone</h1><blockquote>\n<p>将存储库克隆到一个新目录中</p>\n</blockquote>\n<pre><code>git clone [--template=&lt;template_directory&gt;]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]\n      [--dissociate] [--separate-git-dir &lt;git dir&gt;]\n      [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]\n      [--recurse-submodules[=&lt;pathspec&gt;]] [--[no-]shallow-submodules]\n      [--[no-]remote-submodules] [--jobs &lt;n&gt;] [--sparse]\n      [--filter=&lt;filter&gt;] [--] &lt;repository&gt;\n      [&lt;directory&gt;]</code></pre>\n<p>克隆一个存储库到一个新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 git branch – remotes 可见) ，并创建和检出从克隆的存储库的当前活动分支中分支出来的初始分支。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>-b <name></name></strong> - b &lt; 姓名 &gt;</td>\n<td>不要将新创建的 HEAD 指向克隆存储库的 HEAD 所指向的分支，而是指向 &lt; name &gt; branch。在非裸存储库中，这是要签出的分支。– branch 还可以获取标记，并在结果存储库中的那个提交处分离 HEAD。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h1 id=\"git-init\"><a href=\"#git-init\" class=\"headerlink\" title=\"git init\"></a>git init</h1><blockquote>\n<p>创建一个空的 Git 存储库或重新初始化现有存储库</p>\n</blockquote>\n<pre><code class=\"git\">git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]\n      [--separate-git-dir &lt;git dir&gt;] [--object-format=&lt;format&gt;]\n      [-b &lt;branch-name&gt; | --initial-branch=&lt;branch-name&gt;]\n      [--shared[=&lt;permissions&gt;]] [directory]</code></pre>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-q</td>\n<td>只打印错误和警告消息; 所有其他输出将被禁止</td>\n</tr>\n<tr>\n<td><strong>-bare</strong></td>\n<td>创建一个裸库。如果没有设置环境，则将其设置为当前的工作目录</td>\n</tr>\n<tr>\n<td><strong>-b</strong></td>\n<td>新创建的存储库中为初始分支使用指定的名称。如果没有指定，则退回到默认名称: master</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Git-Clone\"><a href=\"#Git-Clone\" class=\"headerlink\" title=\"Git Clone\"></a>Git Clone</h1><blockquote>\n<p>将存储库克隆到一个新目录中</p>\n</blockquote>\n<pre><code>git clone [--template=&lt;template_directory&gt;]\n      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]\n      [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]\n      [--dissociate] [--separate-git-dir &lt;git dir&gt;]\n      [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]\n      [--recurse-submodules[=&lt;pathspec&gt;]] [--[no-]shallow-submodules]\n      [--[no-]remote-submodules] [--jobs &lt;n&gt;] [--sparse]\n      [--filter=&lt;filter&gt;] [--] &lt;repository&gt;\n      [&lt;directory&gt;]</code></pre>\n<p>克隆一个存储库到一个新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 git branch – remotes 可见) ，并创建和检出从克隆的存储库的当前活动分支中分支出来的初始分支。</p>\n<h2 id=\"选项\"><a href=\"#选项\" class=\"headerlink\" title=\"选项\"></a>选项</h2><table>\n<thead>\n<tr>\n<th>命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>-b <name></strong> - b &lt; 姓名 &gt;</td>\n<td>不要将新创建的 HEAD 指向克隆存储库的 HEAD 所指向的分支，而是指向 &lt; name &gt; branch。在非裸存储库中，这是要签出的分支。– branch 还可以获取标记，并在结果存储库中的那个提交处分离 HEAD。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"3-1 关键命令","auther":"ku jin","_content":"| 命令                     | 解释                                                     |\n| ------------------------ | -------------------------------------------------------- |\n| git init                 | 进入一个空的目录，命令行 git init 进行初始化！           |\n| git clone ***.git        | 克隆一个git地址 后面添加一个git地址，git会自动下载到本地 |\n| git add .                | 添加需要提交的代码 可以是具体的文件名  . 代表全部        |\n| git commit -m “提交描述” | 提交文件，但没有上传到服务器 添加  -m “提交描述”         |\n| git push                 | 上传到服务器                                             |\n| git pull                 | 下载到本地                                               |\n| git branch testing       | 创建分支testing                                          |\n| git checkout testing     | 切换到新创建的 `testing` 分支                            |\n|                          |                                                          |\n\n","source":"_posts/随心记/Git学习/3-1 关键命令.md","raw":"---\ntitle: 3-1 关键命令 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Git学习\ntags: # 标签=目标文件夹\n - 3-1 关键命令 \n---\n| 命令                     | 解释                                                     |\n| ------------------------ | -------------------------------------------------------- |\n| git init                 | 进入一个空的目录，命令行 git init 进行初始化！           |\n| git clone ***.git        | 克隆一个git地址 后面添加一个git地址，git会自动下载到本地 |\n| git add .                | 添加需要提交的代码 可以是具体的文件名  . 代表全部        |\n| git commit -m “提交描述” | 提交文件，但没有上传到服务器 添加  -m “提交描述”         |\n| git push                 | 上传到服务器                                             |\n| git pull                 | 下载到本地                                               |\n| git branch testing       | 创建分支testing                                          |\n| git checkout testing     | 切换到新创建的 `testing` 分支                            |\n|                          |                                                          |\n\n","slug":"随心记/Git学习/3-1 关键命令","published":1,"date":"2020-08-02T23:42:42.915Z","updated":"2020-08-02T23:42:59.758Z","_id":"ckdcz9i6v000lrkam9qck4k7b","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>进入一个空的目录，命令行 git init 进行初始化！</td>\n</tr>\n<tr>\n<td>git clone ***.git</td>\n<td>克隆一个git地址 后面添加一个git地址，git会自动下载到本地</td>\n</tr>\n<tr>\n<td>git add .</td>\n<td>添加需要提交的代码 可以是具体的文件名  . 代表全部</td>\n</tr>\n<tr>\n<td>git commit -m “提交描述”</td>\n<td>提交文件，但没有上传到服务器 添加  -m “提交描述”</td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传到服务器</td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>下载到本地</td>\n</tr>\n<tr>\n<td>git branch testing</td>\n<td>创建分支testing</td>\n</tr>\n<tr>\n<td>git checkout testing</td>\n<td>切换到新创建的 <code>testing</code> 分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>git init</td>\n<td>进入一个空的目录，命令行 git init 进行初始化！</td>\n</tr>\n<tr>\n<td>git clone ***.git</td>\n<td>克隆一个git地址 后面添加一个git地址，git会自动下载到本地</td>\n</tr>\n<tr>\n<td>git add .</td>\n<td>添加需要提交的代码 可以是具体的文件名  . 代表全部</td>\n</tr>\n<tr>\n<td>git commit -m “提交描述”</td>\n<td>提交文件，但没有上传到服务器 添加  -m “提交描述”</td>\n</tr>\n<tr>\n<td>git push</td>\n<td>上传到服务器</td>\n</tr>\n<tr>\n<td>git pull</td>\n<td>下载到本地</td>\n</tr>\n<tr>\n<td>git branch testing</td>\n<td>创建分支testing</td>\n</tr>\n<tr>\n<td>git checkout testing</td>\n<td>切换到新创建的 <code>testing</code> 分支</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"3-2 添加","auther":"ku jin","_content":"# git-add - 将文件内容添加到索引\n\n```\ngit add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n\t  [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>…]\n```\n\n","source":"_posts/随心记/Git学习/3-2 添加.md","raw":"---\ntitle: 3-2 添加 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Git学习\ntags: # 标签=目标文件夹\n - 3-2 添加 \n---\n# git-add - 将文件内容添加到索引\n\n```\ngit add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n\t  [--chmod=(+|-)x] [--pathspec-from-file=<file> [--pathspec-file-nul]]\n\t  [--] [<pathspec>…]\n```\n\n","slug":"随心记/Git学习/3-2 添加","published":1,"date":"2020-08-02T23:42:42.924Z","updated":"2020-08-02T23:42:59.759Z","_id":"ckdcz9i72000mrkamah4v2439","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"git-add-将文件内容添加到索引\"><a href=\"#git-add-将文件内容添加到索引\" class=\"headerlink\" title=\"git-add - 将文件内容添加到索引\"></a>git-add - 将文件内容添加到索引</h1><pre><code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n      [--chmod=(+|-)x] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]\n      [--] [&lt;pathspec&gt;…]</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"git-add-将文件内容添加到索引\"><a href=\"#git-add-将文件内容添加到索引\" class=\"headerlink\" title=\"git-add - 将文件内容添加到索引\"></a>git-add - 将文件内容添加到索引</h1><pre><code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]\n      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]\n      [--chmod=(+|-)x] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]\n      [--] [&lt;pathspec&gt;…]</code></pre>\n"},{"title":"idea工具的使用","auther":"ku jin","_content":"","source":"_posts/随心记/IDEA/idea工具的使用.md","raw":"---\ntitle: idea工具的使用 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - idea工具的使用 \n---\n","slug":"随心记/IDEA/idea工具的使用","published":1,"date":"2020-08-02T23:42:42.945Z","updated":"2020-08-02T23:42:59.760Z","_id":"ckdcz9i7u000nrkam10rjal0e","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"利用IDEA明明导入了包却显示缺少保留相关类","auther":"ku jin","_content":"","source":"_posts/随心记/IDEA/利用IDEA明明导入了包却显示缺少保留相关类.md","raw":"---\ntitle: 利用IDEA明明导入了包却显示缺少保留相关类 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - 利用IDEA明明导入了包却显示缺少保留相关类 \n---\n","slug":"随心记/IDEA/利用IDEA明明导入了包却显示缺少保留相关类","published":1,"date":"2020-08-02T23:42:42.972Z","updated":"2020-08-02T23:42:59.763Z","_id":"ckdcz9i7v000orkam655u4n5i","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"IDEA中Tomcat日志乱码","auther":"ku jin","_content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p>&nbsp;</p>\n<p>问题，在idea中出现乱码问题，以前没有的，好像在设置系统代码为utf8之后就出现了，于是尝试了一系列办法，希望这些办法对您有帮助。</p>\n<p>先看一下乱码的样式。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093506839-714069128.png\" alt=\"\"></p>\n<p>设置办法</p>\n<p>1、在tomcat Server中设置 VM options , 值为&nbsp;-Dfile.encoding=UTF-8 ，可惜没生效</p>\n<p>1<img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093658943-1191924990.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>2、在setting中的 File encodings 中设置编码格式，后来发现这是设置页面编码格式的，所以也没生效，不过遇到相关问题的朋友也不防照此设置下。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094119079-1885159073.png\" alt=\"\"></p>\n<p>3、在java Complier中设置Additional command line parameters的值，-encoding=UTF-8，很可惜还没生效</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094405855-2002294699.png\" alt=\"\"></p>\n<p>4、在bin中设置idea.exe.vmoptions和idea64.exe.vmoptions中的参数，同时增加-Dfile.encoding=UTF-8，据说有些人保存后重启就可以了，但到我这边还是没生效。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094613937-68757272.png\" alt=\"\"></p>\n<p>5、在tomcat \\bin目录下的catalina.bat文件中加入&nbsp;-Dfile.encoding=UTF-8，可是还不生效，有些抓狂了...</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094827745-504540766.png\" alt=\"\"></p>\n<p>6、在 tomcat / conf 目录下，设置&nbsp;logging.properties ，增加参数&nbsp;&nbsp;java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了，总算松了口气。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094951059-25415614.png\" alt=\"\"></p>\n<p>终于，正常显示了......</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124095057327-1632560035.png\" alt=\"\"></p>\n<p>7、另外在服务器上tomcat还需要设置&nbsp;server.xml中的参数，以防页面出现乱码</p>\n<p>&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\"&nbsp; redirectPort=\"8443\"&nbsp; URIEncoding=\"UTF-8\" /&gt;</p>\n<p>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt;</p>\n","source":"_posts/随心记/IDEA/IDEA中Tomcat日志乱码.md","raw":"---\ntitle: IDEA中Tomcat日志乱码 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - IDEA中Tomcat日志乱码 \n---\n<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p>&nbsp;</p>\n<p>问题，在idea中出现乱码问题，以前没有的，好像在设置系统代码为utf8之后就出现了，于是尝试了一系列办法，希望这些办法对您有帮助。</p>\n<p>先看一下乱码的样式。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093506839-714069128.png\" alt=\"\"></p>\n<p>设置办法</p>\n<p>1、在tomcat Server中设置 VM options , 值为&nbsp;-Dfile.encoding=UTF-8 ，可惜没生效</p>\n<p>1<img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093658943-1191924990.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>2、在setting中的 File encodings 中设置编码格式，后来发现这是设置页面编码格式的，所以也没生效，不过遇到相关问题的朋友也不防照此设置下。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094119079-1885159073.png\" alt=\"\"></p>\n<p>3、在java Complier中设置Additional command line parameters的值，-encoding=UTF-8，很可惜还没生效</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094405855-2002294699.png\" alt=\"\"></p>\n<p>4、在bin中设置idea.exe.vmoptions和idea64.exe.vmoptions中的参数，同时增加-Dfile.encoding=UTF-8，据说有些人保存后重启就可以了，但到我这边还是没生效。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094613937-68757272.png\" alt=\"\"></p>\n<p>5、在tomcat \\bin目录下的catalina.bat文件中加入&nbsp;-Dfile.encoding=UTF-8，可是还不生效，有些抓狂了...</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094827745-504540766.png\" alt=\"\"></p>\n<p>6、在 tomcat / conf 目录下，设置&nbsp;logging.properties ，增加参数&nbsp;&nbsp;java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了，总算松了口气。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094951059-25415614.png\" alt=\"\"></p>\n<p>终于，正常显示了......</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124095057327-1632560035.png\" alt=\"\"></p>\n<p>7、另外在服务器上tomcat还需要设置&nbsp;server.xml中的参数，以防页面出现乱码</p>\n<p>&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\"&nbsp; redirectPort=\"8443\"&nbsp; URIEncoding=\"UTF-8\" /&gt;</p>\n<p>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt;</p>\n","slug":"随心记/IDEA/IDEA中Tomcat日志乱码","published":1,"date":"2020-08-02T23:42:42.934Z","updated":"2020-08-02T23:42:59.760Z","_id":"ckdcz9i7x000prkamd3jvhe0g","comments":1,"layout":"post","photos":[],"link":"","content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p>&nbsp;</p>\n<p>问题，在idea中出现乱码问题，以前没有的，好像在设置系统代码为utf8之后就出现了，于是尝试了一系列办法，希望这些办法对您有帮助。</p>\n<p>先看一下乱码的样式。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093506839-714069128.png\" alt=\"\"></p>\n<p>设置办法</p>\n<p>1、在tomcat Server中设置 VM options , 值为&nbsp;-Dfile.encoding=UTF-8 ，可惜没生效</p>\n<p>1<img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093658943-1191924990.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>2、在setting中的 File encodings 中设置编码格式，后来发现这是设置页面编码格式的，所以也没生效，不过遇到相关问题的朋友也不防照此设置下。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094119079-1885159073.png\" alt=\"\"></p>\n<p>3、在java Complier中设置Additional command line parameters的值，-encoding=UTF-8，很可惜还没生效</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094405855-2002294699.png\" alt=\"\"></p>\n<p>4、在bin中设置idea.exe.vmoptions和idea64.exe.vmoptions中的参数，同时增加-Dfile.encoding=UTF-8，据说有些人保存后重启就可以了，但到我这边还是没生效。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094613937-68757272.png\" alt=\"\"></p>\n<p>5、在tomcat \\bin目录下的catalina.bat文件中加入&nbsp;-Dfile.encoding=UTF-8，可是还不生效，有些抓狂了...</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094827745-504540766.png\" alt=\"\"></p>\n<p>6、在 tomcat / conf 目录下，设置&nbsp;logging.properties ，增加参数&nbsp;&nbsp;java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了，总算松了口气。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094951059-25415614.png\" alt=\"\"></p>\n<p>终于，正常显示了......</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124095057327-1632560035.png\" alt=\"\"></p>\n<p>7、另外在服务器上tomcat还需要设置&nbsp;server.xml中的参数，以防页面出现乱码</p>\n<p>&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\"&nbsp; redirectPort=\"8443\"&nbsp; URIEncoding=\"UTF-8\" /&gt;</p>\n<p>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt;</p>\n</div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p>&nbsp;</p>\n<p>问题，在idea中出现乱码问题，以前没有的，好像在设置系统代码为utf8之后就出现了，于是尝试了一系列办法，希望这些办法对您有帮助。</p>\n<p>先看一下乱码的样式。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093506839-714069128.png\" alt=\"\"></p>\n<p>设置办法</p>\n<p>1、在tomcat Server中设置 VM options , 值为&nbsp;-Dfile.encoding=UTF-8 ，可惜没生效</p>\n<p>1<img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093658943-1191924990.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>2、在setting中的 File encodings 中设置编码格式，后来发现这是设置页面编码格式的，所以也没生效，不过遇到相关问题的朋友也不防照此设置下。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094119079-1885159073.png\" alt=\"\"></p>\n<p>3、在java Complier中设置Additional command line parameters的值，-encoding=UTF-8，很可惜还没生效</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094405855-2002294699.png\" alt=\"\"></p>\n<p>4、在bin中设置idea.exe.vmoptions和idea64.exe.vmoptions中的参数，同时增加-Dfile.encoding=UTF-8，据说有些人保存后重启就可以了，但到我这边还是没生效。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094613937-68757272.png\" alt=\"\"></p>\n<p>5、在tomcat \\bin目录下的catalina.bat文件中加入&nbsp;-Dfile.encoding=UTF-8，可是还不生效，有些抓狂了...</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094827745-504540766.png\" alt=\"\"></p>\n<p>6、在 tomcat / conf 目录下，设置&nbsp;logging.properties ，增加参数&nbsp;&nbsp;java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了，总算松了口气。</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094951059-25415614.png\" alt=\"\"></p>\n<p>终于，正常显示了......</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/717943/201901/717943-20190124095057327-1632560035.png\" alt=\"\"></p>\n<p>7、另外在服务器上tomcat还需要设置&nbsp;server.xml中的参数，以防页面出现乱码</p>\n<p>&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\"&nbsp; redirectPort=\"8443\"&nbsp; URIEncoding=\"UTF-8\" /&gt;</p>\n<p>&lt;Connector port=\"8009\" protocol=\"AJP/1.3\" redirectPort=\"8443\" URIEncoding=\"UTF-8\" /&gt;</p>\n"},{"title":"idea报java版本错误解决方法","auther":"ku jin","_content":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>&nbsp; &nbsp; &nbsp; &nbsp;在Intellij idea中新建了一个Maven项目，运行时报错如下：<span style=\"color:#f33b45;\">Error : java 不支持发行版本5</span></p>\n\n<p><img alt=\"\" class=\"has\" height=\"153\" src=\"https://img-blog.csdn.net/20180904232438840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"832\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;本地运行用的是JDK9，测试Java的Stream操作，报错应该是项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;《1》在Intellij中点击“<span style=\"color:#3399ea;\">File</span>” --&gt;“<span style=\"color:#3399ea;\">Project Structure</span>”，看一下“Project”和“Module”栏目中Java版本是否与本地一致：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdn.net/20180904233036107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"709\"></p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" class=\"has\" height=\"494\" src=\"https://img-blog.csdn.net/20180904233152909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"970\"></p>\n\n<p>如果不一致，改成本地使用的Java版本。</p>\n\n<p>&nbsp; &nbsp; &nbsp; 《2》点击“<span style=\"color:#3399ea;\">Settings</span>”--&gt;“<span style=\"color:#3399ea;\">Bulid, Execution,Deployment</span>”--&gt;“<span style=\"color:#3399ea;\">Java Compiler</span>”，<strong>Target bytecode version</strong>设为本地Java版本。（可以在<span style=\"color:#3399ea;\">Default Settings</span>中把<strong>Project bytecode version </strong>一劳永逸地配置成本地Java版本）</p>\n\n<p><img alt=\"\" class=\"has\" height=\"709\" src=\"https://img-blog.csdn.net/201809042343056?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1043\"></p>\n\n<p><span style=\"color:#3399ea;\">Default Settings</span>：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"465\" src=\"https://img-blog.csdn.net/20180904234401401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1017\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以上两步都配置好之后，重新运行应该就不会报上述错误了。</p>                                    </div>","source":"_posts/随心记/IDEA/idea报java版本错误解决方法.md","raw":"---\ntitle: idea报java版本错误解决方法 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - idea报java版本错误解决方法 \n---\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>&nbsp; &nbsp; &nbsp; &nbsp;在Intellij idea中新建了一个Maven项目，运行时报错如下：<span style=\"color:#f33b45;\">Error : java 不支持发行版本5</span></p>\n\n<p><img alt=\"\" class=\"has\" height=\"153\" src=\"https://img-blog.csdn.net/20180904232438840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"832\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;本地运行用的是JDK9，测试Java的Stream操作，报错应该是项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;《1》在Intellij中点击“<span style=\"color:#3399ea;\">File</span>” --&gt;“<span style=\"color:#3399ea;\">Project Structure</span>”，看一下“Project”和“Module”栏目中Java版本是否与本地一致：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdn.net/20180904233036107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"709\"></p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" class=\"has\" height=\"494\" src=\"https://img-blog.csdn.net/20180904233152909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"970\"></p>\n\n<p>如果不一致，改成本地使用的Java版本。</p>\n\n<p>&nbsp; &nbsp; &nbsp; 《2》点击“<span style=\"color:#3399ea;\">Settings</span>”--&gt;“<span style=\"color:#3399ea;\">Bulid, Execution,Deployment</span>”--&gt;“<span style=\"color:#3399ea;\">Java Compiler</span>”，<strong>Target bytecode version</strong>设为本地Java版本。（可以在<span style=\"color:#3399ea;\">Default Settings</span>中把<strong>Project bytecode version </strong>一劳永逸地配置成本地Java版本）</p>\n\n<p><img alt=\"\" class=\"has\" height=\"709\" src=\"https://img-blog.csdn.net/201809042343056?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1043\"></p>\n\n<p><span style=\"color:#3399ea;\">Default Settings</span>：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"465\" src=\"https://img-blog.csdn.net/20180904234401401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1017\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以上两步都配置好之后，重新运行应该就不会报上述错误了。</p>                                    </div>","slug":"随心记/IDEA/idea报java版本错误解决方法","published":1,"date":"2020-08-02T23:42:42.946Z","updated":"2020-08-02T23:42:59.761Z","_id":"ckdcz9i7y000qrkamhq3thhpg","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>&nbsp; &nbsp; &nbsp; &nbsp;在Intellij idea中新建了一个Maven项目，运行时报错如下：<span style=\"color:#f33b45;\">Error : java 不支持发行版本5</span></p>\n\n<p><img alt=\"\" class=\"has\" height=\"153\" src=\"https://img-blog.csdn.net/20180904232438840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"832\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;本地运行用的是JDK9，测试Java的Stream操作，报错应该是项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;《1》在Intellij中点击“<span style=\"color:#3399ea;\">File</span>” --&gt;“<span style=\"color:#3399ea;\">Project Structure</span>”，看一下“Project”和“Module”栏目中Java版本是否与本地一致：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdn.net/20180904233036107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"709\"></p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" class=\"has\" height=\"494\" src=\"https://img-blog.csdn.net/20180904233152909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"970\"></p>\n\n<p>如果不一致，改成本地使用的Java版本。</p>\n\n<p>&nbsp; &nbsp; &nbsp; 《2》点击“<span style=\"color:#3399ea;\">Settings</span>”--&gt;“<span style=\"color:#3399ea;\">Bulid, Execution,Deployment</span>”--&gt;“<span style=\"color:#3399ea;\">Java Compiler</span>”，<strong>Target bytecode version</strong>设为本地Java版本。（可以在<span style=\"color:#3399ea;\">Default Settings</span>中把<strong>Project bytecode version </strong>一劳永逸地配置成本地Java版本）</p>\n\n<p><img alt=\"\" class=\"has\" height=\"709\" src=\"https://img-blog.csdn.net/201809042343056?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1043\"></p>\n\n<p><span style=\"color:#3399ea;\">Default Settings</span>：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"465\" src=\"https://img-blog.csdn.net/20180904234401401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1017\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以上两步都配置好之后，重新运行应该就不会报上述错误了。</p>                                    </div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>&nbsp; &nbsp; &nbsp; &nbsp;在Intellij idea中新建了一个Maven项目，运行时报错如下：<span style=\"color:#f33b45;\">Error : java 不支持发行版本5</span></p>\n\n<p><img alt=\"\" class=\"has\" height=\"153\" src=\"https://img-blog.csdn.net/20180904232438840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"832\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;本地运行用的是JDK9，测试Java的Stream操作，报错应该是项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;《1》在Intellij中点击“<span style=\"color:#3399ea;\">File</span>” --&gt;“<span style=\"color:#3399ea;\">Project Structure</span>”，看一下“Project”和“Module”栏目中Java版本是否与本地一致：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"387\" src=\"https://img-blog.csdn.net/20180904233036107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"709\"></p>\n\n<p>&nbsp;</p>\n\n<p><img alt=\"\" class=\"has\" height=\"494\" src=\"https://img-blog.csdn.net/20180904233152909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"970\"></p>\n\n<p>如果不一致，改成本地使用的Java版本。</p>\n\n<p>&nbsp; &nbsp; &nbsp; 《2》点击“<span style=\"color:#3399ea;\">Settings</span>”--&gt;“<span style=\"color:#3399ea;\">Bulid, Execution,Deployment</span>”--&gt;“<span style=\"color:#3399ea;\">Java Compiler</span>”，<strong>Target bytecode version</strong>设为本地Java版本。（可以在<span style=\"color:#3399ea;\">Default Settings</span>中把<strong>Project bytecode version </strong>一劳永逸地配置成本地Java版本）</p>\n\n<p><img alt=\"\" class=\"has\" height=\"709\" src=\"https://img-blog.csdn.net/201809042343056?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1043\"></p>\n\n<p><span style=\"color:#3399ea;\">Default Settings</span>：</p>\n\n<p><img alt=\"\" class=\"has\" height=\"465\" src=\"https://img-blog.csdn.net/20180904234401401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"1017\"></p>\n\n<p>&nbsp; &nbsp; &nbsp; &nbsp;以上两步都配置好之后，重新运行应该就不会报上述错误了。</p>                                    </div>"},{"title":"创建代码块模板","auther":"ku jin","_content":"# 创建代码块模板\n![](imgs/pv.png)","source":"_posts/随心记/IDEA/创建代码块模板.md","raw":"---\ntitle: 创建代码块模板 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - 创建代码块模板 \n---\n# 创建代码块模板\n![](imgs/pv.png)","slug":"随心记/IDEA/创建代码块模板","published":1,"date":"2020-08-02T23:42:42.964Z","updated":"2020-08-02T23:42:59.762Z","_id":"ckdcz9i7z000rrkam09wwg5fe","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"创建代码块模板\"><a href=\"#创建代码块模板\" class=\"headerlink\" title=\"创建代码块模板\"></a>创建代码块模板</h1><p><img src=\"imgs/pv.png\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"创建代码块模板\"><a href=\"#创建代码块模板\" class=\"headerlink\" title=\"创建代码块模板\"></a>创建代码块模板</h1><p><img src=\"imgs/pv.png\"></p>\n"},{"title":"利用IDEA学习编程语言","auther":"ku jin","_content":"# 安装学习插件EduTools \n\n> 借助 EduTools 插件，您可以学习和教授编程语言，如 Kotlin、Java、Python、JavaScript、Rust、C/C++ 和 Scala，其形式是编码任务和自定义验证测试，直接位于基于 JetBrains IntelliJ 平台的 IDU 内部。\n\n**工作原理**\n\n安装 EduTools 插件：转到首选项 + 插件（或从欢迎屏幕配置 + 插件）并搜索 EduTools 插件。\n\n> **作为一名教育家**：\n>\n> - 使用自定义任务、检查、测试、提示等创建您自己的交互式课程。\n> - 在[Stepik、](https://stepik.org/)学习管理和 MOOC 平台上公开或私下与学生或同事分享您的课程。或者，您可以将课程保存为存档文件。\n> - 让学员在集成测试的协助下独立完成作业。\n>\n> [阅读本教程了解更多详情](https://www.jetbrains.com/help/education/educator-start-guide.html)\n>\n> \n>\n> **作为学习者 ：**\n>\n> - 从列表中加入公共交互式编程课程，或从[Stepik 选择课程](https://stepik.org/)，为 Java 开发人员[解决 Kotlin](https://www.coursera.org/learn/kotlin-for-java-developers/)的编程作业和算法工具[箱课程，](https://www.coursera.org/learn/algorithmic-toolbox)完成[JetBrains 学院项目](https://hyperskill.org/)，解决[CheckiO 的挑战](https://checkio.org/)。\n> - 根据任务描述在练习代码中填写占位符开始学习。\n> - 使用智能开发工具验证任务、获得即时反馈和快速结果。\n>\n> [阅读本教程了解更多详情](https://www.jetbrains.com/help/education/learner-start-guide.html)\n\n**安装了这个插件相当于慕课网的网址编程作业一样**，非常牛逼，可以自定义课程，我这里用来学习kotlin语言\n\n","source":"_posts/随心记/IDEA/利用IDEA学习编程语言.md","raw":"---\ntitle: 利用IDEA学习编程语言 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - 利用IDEA学习编程语言 \n---\n# 安装学习插件EduTools \n\n> 借助 EduTools 插件，您可以学习和教授编程语言，如 Kotlin、Java、Python、JavaScript、Rust、C/C++ 和 Scala，其形式是编码任务和自定义验证测试，直接位于基于 JetBrains IntelliJ 平台的 IDU 内部。\n\n**工作原理**\n\n安装 EduTools 插件：转到首选项 + 插件（或从欢迎屏幕配置 + 插件）并搜索 EduTools 插件。\n\n> **作为一名教育家**：\n>\n> - 使用自定义任务、检查、测试、提示等创建您自己的交互式课程。\n> - 在[Stepik、](https://stepik.org/)学习管理和 MOOC 平台上公开或私下与学生或同事分享您的课程。或者，您可以将课程保存为存档文件。\n> - 让学员在集成测试的协助下独立完成作业。\n>\n> [阅读本教程了解更多详情](https://www.jetbrains.com/help/education/educator-start-guide.html)\n>\n> \n>\n> **作为学习者 ：**\n>\n> - 从列表中加入公共交互式编程课程，或从[Stepik 选择课程](https://stepik.org/)，为 Java 开发人员[解决 Kotlin](https://www.coursera.org/learn/kotlin-for-java-developers/)的编程作业和算法工具[箱课程，](https://www.coursera.org/learn/algorithmic-toolbox)完成[JetBrains 学院项目](https://hyperskill.org/)，解决[CheckiO 的挑战](https://checkio.org/)。\n> - 根据任务描述在练习代码中填写占位符开始学习。\n> - 使用智能开发工具验证任务、获得即时反馈和快速结果。\n>\n> [阅读本教程了解更多详情](https://www.jetbrains.com/help/education/learner-start-guide.html)\n\n**安装了这个插件相当于慕课网的网址编程作业一样**，非常牛逼，可以自定义课程，我这里用来学习kotlin语言\n\n","slug":"随心记/IDEA/利用IDEA学习编程语言","published":1,"date":"2020-08-02T23:42:42.966Z","updated":"2020-08-02T23:42:59.762Z","_id":"ckdcz9i80000srkamgi5bbmml","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"安装学习插件EduTools\"><a href=\"#安装学习插件EduTools\" class=\"headerlink\" title=\"安装学习插件EduTools\"></a>安装学习插件EduTools</h1><blockquote>\n<p>借助 EduTools 插件，您可以学习和教授编程语言，如 Kotlin、Java、Python、JavaScript、Rust、C/C++ 和 Scala，其形式是编码任务和自定义验证测试，直接位于基于 JetBrains IntelliJ 平台的 IDU 内部。</p>\n</blockquote>\n<p><strong>工作原理</strong></p>\n<p>安装 EduTools 插件：转到首选项 + 插件（或从欢迎屏幕配置 + 插件）并搜索 EduTools 插件。</p>\n<blockquote>\n<p><strong>作为一名教育家</strong>：</p>\n<ul>\n<li>使用自定义任务、检查、测试、提示等创建您自己的交互式课程。</li>\n<li>在<a href=\"https://stepik.org/\">Stepik、</a>学习管理和 MOOC 平台上公开或私下与学生或同事分享您的课程。或者，您可以将课程保存为存档文件。</li>\n<li>让学员在集成测试的协助下独立完成作业。</li>\n</ul>\n<p><a href=\"https://www.jetbrains.com/help/education/educator-start-guide.html\">阅读本教程了解更多详情</a></p>\n<p><strong>作为学习者 ：</strong></p>\n<ul>\n<li>从列表中加入公共交互式编程课程，或从<a href=\"https://stepik.org/\">Stepik 选择课程</a>，为 Java 开发人员<a href=\"https://www.coursera.org/learn/kotlin-for-java-developers/\">解决 Kotlin</a>的编程作业和算法工具<a href=\"https://www.coursera.org/learn/algorithmic-toolbox\">箱课程，</a>完成<a href=\"https://hyperskill.org/\">JetBrains 学院项目</a>，解决<a href=\"https://checkio.org/\">CheckiO 的挑战</a>。</li>\n<li>根据任务描述在练习代码中填写占位符开始学习。</li>\n<li>使用智能开发工具验证任务、获得即时反馈和快速结果。</li>\n</ul>\n<p><a href=\"https://www.jetbrains.com/help/education/learner-start-guide.html\">阅读本教程了解更多详情</a></p>\n</blockquote>\n<p><strong>安装了这个插件相当于慕课网的网址编程作业一样</strong>，非常牛逼，可以自定义课程，我这里用来学习kotlin语言</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"安装学习插件EduTools\"><a href=\"#安装学习插件EduTools\" class=\"headerlink\" title=\"安装学习插件EduTools\"></a>安装学习插件EduTools</h1><blockquote>\n<p>借助 EduTools 插件，您可以学习和教授编程语言，如 Kotlin、Java、Python、JavaScript、Rust、C/C++ 和 Scala，其形式是编码任务和自定义验证测试，直接位于基于 JetBrains IntelliJ 平台的 IDU 内部。</p>\n</blockquote>\n<p><strong>工作原理</strong></p>\n<p>安装 EduTools 插件：转到首选项 + 插件（或从欢迎屏幕配置 + 插件）并搜索 EduTools 插件。</p>\n<blockquote>\n<p><strong>作为一名教育家</strong>：</p>\n<ul>\n<li>使用自定义任务、检查、测试、提示等创建您自己的交互式课程。</li>\n<li>在<a href=\"https://stepik.org/\">Stepik、</a>学习管理和 MOOC 平台上公开或私下与学生或同事分享您的课程。或者，您可以将课程保存为存档文件。</li>\n<li>让学员在集成测试的协助下独立完成作业。</li>\n</ul>\n<p><a href=\"https://www.jetbrains.com/help/education/educator-start-guide.html\">阅读本教程了解更多详情</a></p>\n<p><strong>作为学习者 ：</strong></p>\n<ul>\n<li>从列表中加入公共交互式编程课程，或从<a href=\"https://stepik.org/\">Stepik 选择课程</a>，为 Java 开发人员<a href=\"https://www.coursera.org/learn/kotlin-for-java-developers/\">解决 Kotlin</a>的编程作业和算法工具<a href=\"https://www.coursera.org/learn/algorithmic-toolbox\">箱课程，</a>完成<a href=\"https://hyperskill.org/\">JetBrains 学院项目</a>，解决<a href=\"https://checkio.org/\">CheckiO 的挑战</a>。</li>\n<li>根据任务描述在练习代码中填写占位符开始学习。</li>\n<li>使用智能开发工具验证任务、获得即时反馈和快速结果。</li>\n</ul>\n<p><a href=\"https://www.jetbrains.com/help/education/learner-start-guide.html\">阅读本教程了解更多详情</a></p>\n</blockquote>\n<p><strong>安装了这个插件相当于慕课网的网址编程作业一样</strong>，非常牛逼，可以自定义课程，我这里用来学习kotlin语言</p>\n"},{"title":"快捷键","auther":"ku jin","_content":"# 格式化代码\n\n\tCtrl+Alt+L\n\n# 查看方法参数\n\n```\nCtrl+P\n```\n\n# 查看类、方法、属性注释\n\n```\nCtrl+Q\n```\n\n","source":"_posts/随心记/IDEA/快捷键.md","raw":"---\ntitle: 快捷键 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - 快捷键 \n---\n# 格式化代码\n\n\tCtrl+Alt+L\n\n# 查看方法参数\n\n```\nCtrl+P\n```\n\n# 查看类、方法、属性注释\n\n```\nCtrl+Q\n```\n\n","slug":"随心记/IDEA/快捷键","published":1,"date":"2020-08-02T23:42:42.974Z","updated":"2020-08-02T23:42:59.763Z","_id":"ckdcz9i81000trkam1vqce1fm","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h1><pre><code>Ctrl+Alt+L</code></pre>\n<h1 id=\"查看方法参数\"><a href=\"#查看方法参数\" class=\"headerlink\" title=\"查看方法参数\"></a>查看方法参数</h1><pre><code>Ctrl+P</code></pre>\n<h1 id=\"查看类、方法、属性注释\"><a href=\"#查看类、方法、属性注释\" class=\"headerlink\" title=\"查看类、方法、属性注释\"></a>查看类、方法、属性注释</h1><pre><code>Ctrl+Q</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"格式化代码\"><a href=\"#格式化代码\" class=\"headerlink\" title=\"格式化代码\"></a>格式化代码</h1><pre><code>Ctrl+Alt+L</code></pre>\n<h1 id=\"查看方法参数\"><a href=\"#查看方法参数\" class=\"headerlink\" title=\"查看方法参数\"></a>查看方法参数</h1><pre><code>Ctrl+P</code></pre>\n<h1 id=\"查看类、方法、属性注释\"><a href=\"#查看类、方法、属性注释\" class=\"headerlink\" title=\"查看类、方法、属性注释\"></a>查看类、方法、属性注释</h1><pre><code>Ctrl+Q</code></pre>\n"},{"title":"插件使用","auther":"ku jin","_content":"# codota(代码提示插件)\n\n  智能提示（ctrl + shift + o）和寻找案例（ctrl + shift + Y）：\n\n[官方帮助文档（很详细）]: https://www.codota.com/user-guide/code-completions#triggering\n\n## 代码完成\n\n当您编写代码时，Codota 会通过来自其 AI 的代码建议增强您的 IDE 自动完成。这些完成反映了从开放源代码中学到的常见编码模式，并省去主动搜索示例的需要。\n\n### 触发代码完成\n\nCodota 添加的建议可以通过左侧的 codota 图标识别 （![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png)）\n\nCodota 建议以两种方式显示：\n\n**自动：**当您编写代码时，它基于您键入的前缀显示。\n\n**按需：**它使用键盘快捷方式（Cmd+空格/Ctrl+空格）显示\n\n查看操作中的代码完成：\n\n### 分配完成\n\n无论何时从特定类型分配变量，Codota 都会建议基于上下文和从开放源代码中学到的模型分配变量的方法。\"等号 （\"= \" ） 之后，您点击空格键后，Codota 建议将自动显示![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_01.5629eb0f24b9659b29e92fdfae9ec90f.png)\n\n建议可能包括正式参数类型和名称（文件、字符串文件名）：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png)\n\n如果选择了具有非基元参数的代码建议，这些参数将预加在上一行中（在选择\"=新 FileReader（文件文件）\"后添加文件）;![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_03.51eb314d580dde5b41b4623dfe39825f.png)\n\n但是，如果 Codota 找到一个本地变量，该变量是一个很好的候选变量，它将将其绑定到建议（输入文件显示在建议中，并且未预报）：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png)\n\n在某些情况下，代码建议依赖于另一个对象。如果上下文中不存在此类对象，则建议以\"...\"开头，并在选择时预报此对象（注意：要创建需要连接的准备状态）。选择后，将在上一行中添加新的连接：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_05.7573b25f8368e9f3ed1169cc05743b23.png)\n\n### 新线路完成\n\n新代码行通常以声明新的局部变量开头。在某些情况下，Codota 可以根据当前上下文预测要使用的下一个变量的类型。\n\n在键入时，使用基本完成显示，按已键入的前缀进行筛选：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png)\n\n或者，按需使用 Ctrl+空间：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/new-line-completions_02.07cf8ed9ebb7decf97535ea1ea521474.png)\n\n### 方法完成\n\nCodota 还可以帮助您预测给定对象中的下一个调用方法。最有可能的方法将由科多塔放在建议列表的顶部：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_01.f5aa338015bb98c3af362343487a086a.png)\n\n在某些情况下，Codota 预测在调用方法时将使用给定的局部变量。在这种情况下，将出现具有局部变量的方法建议，选择 Codota 的建议后，将用此方法粘贴参数。建议将突出显示一个黄色星形：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_02.6f43bfe1f52d9147a6388a569cab2313.png)\n\n## 在 IDE Java 搜索中\n\n只需单击一下，您就会从 github 获得排名最高的代码段，这是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。\n\n编写良好的软件需要不断学习新的 API 或使用编程语言的不同元素。使用 Codota 在 IDE 中编写代码时搜索相关代码示例。只需单击一下，即可从 github 获得排名最高的代码段，该代码段是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。\n\n### 如何搜索\n\n**对于给定的类或方法：**要获取代码中使用的任何开源类或方法的相关示例，只需选择类或方法，然后右键单击**- 获取**相关示例或使用键快捷方式（默认值：Ctrl+Shift+O））![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_01.744aa29f671017172e3c9d39263911a6.png)![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png)\n\n代码片段将显示在 Codota 窗格中：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/search_04.ae928872ebf259913520f3ba8e543e62.png)\n\n您还可以在使用键快捷方式 （Ctrl=Shift+O） 导航给定类的方法时触发搜索，并获取所选方法的最佳代码段：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_05.efa49d39678c3f178d2f2f81b514a90d.png)\n\n**使用 Codota 的自动完成从零开始搜索**，您可以搜索任何开源类或方法的代码示例，即使它尚未在当前类中或当前类路径中不是事件。你可以去**\"工具 + 科多塔搜索...\"**或使用 Ctrl=Shift=Y 快捷方式：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_06.7c4f84689dc6759e6ec19403b18a73d6.png)\n\n将打开一个带搜索框的弹出窗口：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_07.1617b0baceaa44778ff1d527ded0fd0d.png)\n\n使用库多塔的自动完成机制键入搜索词：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_08.cc3816166c730ecb6f6e8a27ccc94365.png)\n\n选择术语时，相关示例将显示在侧面：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_09.93af76e45e1601443df91ae031ae19fb.png)\n\n### 查看代码段\n\n相关的代码片段显示在 codota 窗格中的\"代码段\"选项卡中。对于每个代码段，您可以查看它来自堆栈流后、github 存储库还是 maven 项目。单击源标题，了解有关代码段源的信息：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_10.80466706a44b4b8ae23706269ad9d3c5.png)\n\n或者查看帖子/源（如果您想要查看完整的源代码）。目前，每个搜索仅显示 20 个代码段，但在不久的将来，您将能够查看更多代码段或使用其他字词优化搜索。\n\n# 下一个插件","source":"_posts/随心记/IDEA/插件使用.md","raw":"---\ntitle: 插件使用 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - IDEA\ntags: # 标签=目标文件夹\n - 插件使用 \n---\n# codota(代码提示插件)\n\n  智能提示（ctrl + shift + o）和寻找案例（ctrl + shift + Y）：\n\n[官方帮助文档（很详细）]: https://www.codota.com/user-guide/code-completions#triggering\n\n## 代码完成\n\n当您编写代码时，Codota 会通过来自其 AI 的代码建议增强您的 IDE 自动完成。这些完成反映了从开放源代码中学到的常见编码模式，并省去主动搜索示例的需要。\n\n### 触发代码完成\n\nCodota 添加的建议可以通过左侧的 codota 图标识别 （![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png)）\n\nCodota 建议以两种方式显示：\n\n**自动：**当您编写代码时，它基于您键入的前缀显示。\n\n**按需：**它使用键盘快捷方式（Cmd+空格/Ctrl+空格）显示\n\n查看操作中的代码完成：\n\n### 分配完成\n\n无论何时从特定类型分配变量，Codota 都会建议基于上下文和从开放源代码中学到的模型分配变量的方法。\"等号 （\"= \" ） 之后，您点击空格键后，Codota 建议将自动显示![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_01.5629eb0f24b9659b29e92fdfae9ec90f.png)\n\n建议可能包括正式参数类型和名称（文件、字符串文件名）：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png)\n\n如果选择了具有非基元参数的代码建议，这些参数将预加在上一行中（在选择\"=新 FileReader（文件文件）\"后添加文件）;![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_03.51eb314d580dde5b41b4623dfe39825f.png)\n\n但是，如果 Codota 找到一个本地变量，该变量是一个很好的候选变量，它将将其绑定到建议（输入文件显示在建议中，并且未预报）：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png)\n\n在某些情况下，代码建议依赖于另一个对象。如果上下文中不存在此类对象，则建议以\"...\"开头，并在选择时预报此对象（注意：要创建需要连接的准备状态）。选择后，将在上一行中添加新的连接：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_05.7573b25f8368e9f3ed1169cc05743b23.png)\n\n### 新线路完成\n\n新代码行通常以声明新的局部变量开头。在某些情况下，Codota 可以根据当前上下文预测要使用的下一个变量的类型。\n\n在键入时，使用基本完成显示，按已键入的前缀进行筛选：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png)\n\n或者，按需使用 Ctrl+空间：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/new-line-completions_02.07cf8ed9ebb7decf97535ea1ea521474.png)\n\n### 方法完成\n\nCodota 还可以帮助您预测给定对象中的下一个调用方法。最有可能的方法将由科多塔放在建议列表的顶部：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_01.f5aa338015bb98c3af362343487a086a.png)\n\n在某些情况下，Codota 预测在调用方法时将使用给定的局部变量。在这种情况下，将出现具有局部变量的方法建议，选择 Codota 的建议后，将用此方法粘贴参数。建议将突出显示一个黄色星形：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_02.6f43bfe1f52d9147a6388a569cab2313.png)\n\n## 在 IDE Java 搜索中\n\n只需单击一下，您就会从 github 获得排名最高的代码段，这是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。\n\n编写良好的软件需要不断学习新的 API 或使用编程语言的不同元素。使用 Codota 在 IDE 中编写代码时搜索相关代码示例。只需单击一下，即可从 github 获得排名最高的代码段，该代码段是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。\n\n### 如何搜索\n\n**对于给定的类或方法：**要获取代码中使用的任何开源类或方法的相关示例，只需选择类或方法，然后右键单击**- 获取**相关示例或使用键快捷方式（默认值：Ctrl+Shift+O））![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_01.744aa29f671017172e3c9d39263911a6.png)![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png)\n\n代码片段将显示在 Codota 窗格中：![img](https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/search_04.ae928872ebf259913520f3ba8e543e62.png)\n\n您还可以在使用键快捷方式 （Ctrl=Shift+O） 导航给定类的方法时触发搜索，并获取所选方法的最佳代码段：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_05.efa49d39678c3f178d2f2f81b514a90d.png)\n\n**使用 Codota 的自动完成从零开始搜索**，您可以搜索任何开源类或方法的代码示例，即使它尚未在当前类中或当前类路径中不是事件。你可以去**\"工具 + 科多塔搜索...\"**或使用 Ctrl=Shift=Y 快捷方式：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_06.7c4f84689dc6759e6ec19403b18a73d6.png)\n\n将打开一个带搜索框的弹出窗口：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_07.1617b0baceaa44778ff1d527ded0fd0d.png)\n\n使用库多塔的自动完成机制键入搜索词：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_08.cc3816166c730ecb6f6e8a27ccc94365.png)\n\n选择术语时，相关示例将显示在侧面：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_09.93af76e45e1601443df91ae031ae19fb.png)\n\n### 查看代码段\n\n相关的代码片段显示在 codota 窗格中的\"代码段\"选项卡中。对于每个代码段，您可以查看它来自堆栈流后、github 存储库还是 maven 项目。单击源标题，了解有关代码段源的信息：![img](images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_10.80466706a44b4b8ae23706269ad9d3c5.png)\n\n或者查看帖子/源（如果您想要查看完整的源代码）。目前，每个搜索仅显示 20 个代码段，但在不久的将来，您将能够查看更多代码段或使用其他字词优化搜索。\n\n# 下一个插件","slug":"随心记/IDEA/插件使用","published":1,"date":"2020-08-02T23:42:42.979Z","updated":"2020-08-02T23:42:59.764Z","_id":"ckdcz9i83000urkamcv2749fy","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"codota-代码提示插件\"><a href=\"#codota-代码提示插件\" class=\"headerlink\" title=\"codota(代码提示插件)\"></a>codota(代码提示插件)</h1><p>  智能提示（ctrl + shift + o）和寻找案例（ctrl + shift + Y）：</p>\n<h2 id=\"代码完成\"><a href=\"#代码完成\" class=\"headerlink\" title=\"代码完成\"></a>代码完成</h2><p>当您编写代码时，Codota 会通过来自其 AI 的代码建议增强您的 IDE 自动完成。这些完成反映了从开放源代码中学到的常见编码模式，并省去主动搜索示例的需要。</p>\n<h3 id=\"触发代码完成\"><a href=\"#触发代码完成\" class=\"headerlink\" title=\"触发代码完成\"></a>触发代码完成</h3><p>Codota 添加的建议可以通过左侧的 codota 图标识别 （<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png\" alt=\"img\">）</p>\n<p>Codota 建议以两种方式显示：</p>\n<p><strong>自动：</strong>当您编写代码时，它基于您键入的前缀显示。</p>\n<p><strong>按需：</strong>它使用键盘快捷方式（Cmd+空格/Ctrl+空格）显示</p>\n<p>查看操作中的代码完成：</p>\n<h3 id=\"分配完成\"><a href=\"#分配完成\" class=\"headerlink\" title=\"分配完成\"></a>分配完成</h3><p>无论何时从特定类型分配变量，Codota 都会建议基于上下文和从开放源代码中学到的模型分配变量的方法。”等号 （”= “ ） 之后，您点击空格键后，Codota 建议将自动显示<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_01.5629eb0f24b9659b29e92fdfae9ec90f.png\" alt=\"img\"></p>\n<p>建议可能包括正式参数类型和名称（文件、字符串文件名）：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png\" alt=\"img\"></p>\n<p>如果选择了具有非基元参数的代码建议，这些参数将预加在上一行中（在选择”=新 FileReader（文件文件）”后添加文件）;<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_03.51eb314d580dde5b41b4623dfe39825f.png\" alt=\"img\"></p>\n<p>但是，如果 Codota 找到一个本地变量，该变量是一个很好的候选变量，它将将其绑定到建议（输入文件显示在建议中，并且未预报）：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png\" alt=\"img\"></p>\n<p>在某些情况下，代码建议依赖于另一个对象。如果上下文中不存在此类对象，则建议以”…”开头，并在选择时预报此对象（注意：要创建需要连接的准备状态）。选择后，将在上一行中添加新的连接：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_05.7573b25f8368e9f3ed1169cc05743b23.png\" alt=\"img\"></p>\n<h3 id=\"新线路完成\"><a href=\"#新线路完成\" class=\"headerlink\" title=\"新线路完成\"></a>新线路完成</h3><p>新代码行通常以声明新的局部变量开头。在某些情况下，Codota 可以根据当前上下文预测要使用的下一个变量的类型。</p>\n<p>在键入时，使用基本完成显示，按已键入的前缀进行筛选：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png\" alt=\"img\"></p>\n<p>或者，按需使用 Ctrl+空间：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/new-line-completions_02.07cf8ed9ebb7decf97535ea1ea521474.png\" alt=\"img\"></p>\n<h3 id=\"方法完成\"><a href=\"#方法完成\" class=\"headerlink\" title=\"方法完成\"></a>方法完成</h3><p>Codota 还可以帮助您预测给定对象中的下一个调用方法。最有可能的方法将由科多塔放在建议列表的顶部：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_01.f5aa338015bb98c3af362343487a086a.png\" alt=\"img\"></p>\n<p>在某些情况下，Codota 预测在调用方法时将使用给定的局部变量。在这种情况下，将出现具有局部变量的方法建议，选择 Codota 的建议后，将用此方法粘贴参数。建议将突出显示一个黄色星形：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_02.6f43bfe1f52d9147a6388a569cab2313.png\" alt=\"img\"></p>\n<h2 id=\"在-IDE-Java-搜索中\"><a href=\"#在-IDE-Java-搜索中\" class=\"headerlink\" title=\"在 IDE Java 搜索中\"></a>在 IDE Java 搜索中</h2><p>只需单击一下，您就会从 github 获得排名最高的代码段，这是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p>\n<p>编写良好的软件需要不断学习新的 API 或使用编程语言的不同元素。使用 Codota 在 IDE 中编写代码时搜索相关代码示例。只需单击一下，即可从 github 获得排名最高的代码段，该代码段是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p>\n<h3 id=\"如何搜索\"><a href=\"#如何搜索\" class=\"headerlink\" title=\"如何搜索\"></a>如何搜索</h3><p><strong>对于给定的类或方法：</strong>要获取代码中使用的任何开源类或方法的相关示例，只需选择类或方法，然后右键单击**- 获取**相关示例或使用键快捷方式（默认值：Ctrl+Shift+O））<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_01.744aa29f671017172e3c9d39263911a6.png\" alt=\"img\"><img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png\" alt=\"img\"></p>\n<p>代码片段将显示在 Codota 窗格中：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/search_04.ae928872ebf259913520f3ba8e543e62.png\" alt=\"img\"></p>\n<p>您还可以在使用键快捷方式 （Ctrl=Shift+O） 导航给定类的方法时触发搜索，并获取所选方法的最佳代码段：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_05.efa49d39678c3f178d2f2f81b514a90d.png\" alt=\"img\"></p>\n<p><strong>使用 Codota 的自动完成从零开始搜索</strong>，您可以搜索任何开源类或方法的代码示例，即使它尚未在当前类中或当前类路径中不是事件。你可以去**”工具 + 科多塔搜索…”**或使用 Ctrl=Shift=Y 快捷方式：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_06.7c4f84689dc6759e6ec19403b18a73d6.png\" alt=\"img\"></p>\n<p>将打开一个带搜索框的弹出窗口：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_07.1617b0baceaa44778ff1d527ded0fd0d.png\" alt=\"img\"></p>\n<p>使用库多塔的自动完成机制键入搜索词：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_08.cc3816166c730ecb6f6e8a27ccc94365.png\" alt=\"img\"></p>\n<p>选择术语时，相关示例将显示在侧面：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_09.93af76e45e1601443df91ae031ae19fb.png\" alt=\"img\"></p>\n<h3 id=\"查看代码段\"><a href=\"#查看代码段\" class=\"headerlink\" title=\"查看代码段\"></a>查看代码段</h3><p>相关的代码片段显示在 codota 窗格中的”代码段”选项卡中。对于每个代码段，您可以查看它来自堆栈流后、github 存储库还是 maven 项目。单击源标题，了解有关代码段源的信息：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_10.80466706a44b4b8ae23706269ad9d3c5.png\" alt=\"img\"></p>\n<p>或者查看帖子/源（如果您想要查看完整的源代码）。目前，每个搜索仅显示 20 个代码段，但在不久的将来，您将能够查看更多代码段或使用其他字词优化搜索。</p>\n<h1 id=\"下一个插件\"><a href=\"#下一个插件\" class=\"headerlink\" title=\"下一个插件\"></a>下一个插件</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"codota-代码提示插件\"><a href=\"#codota-代码提示插件\" class=\"headerlink\" title=\"codota(代码提示插件)\"></a>codota(代码提示插件)</h1><p>  智能提示（ctrl + shift + o）和寻找案例（ctrl + shift + Y）：</p>\n<h2 id=\"代码完成\"><a href=\"#代码完成\" class=\"headerlink\" title=\"代码完成\"></a>代码完成</h2><p>当您编写代码时，Codota 会通过来自其 AI 的代码建议增强您的 IDE 自动完成。这些完成反映了从开放源代码中学到的常见编码模式，并省去主动搜索示例的需要。</p>\n<h3 id=\"触发代码完成\"><a href=\"#触发代码完成\" class=\"headerlink\" title=\"触发代码完成\"></a>触发代码完成</h3><p>Codota 添加的建议可以通过左侧的 codota 图标识别 （<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png\" alt=\"img\">）</p>\n<p>Codota 建议以两种方式显示：</p>\n<p><strong>自动：</strong>当您编写代码时，它基于您键入的前缀显示。</p>\n<p><strong>按需：</strong>它使用键盘快捷方式（Cmd+空格/Ctrl+空格）显示</p>\n<p>查看操作中的代码完成：</p>\n<h3 id=\"分配完成\"><a href=\"#分配完成\" class=\"headerlink\" title=\"分配完成\"></a>分配完成</h3><p>无论何时从特定类型分配变量，Codota 都会建议基于上下文和从开放源代码中学到的模型分配变量的方法。”等号 （”= “ ） 之后，您点击空格键后，Codota 建议将自动显示<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_01.5629eb0f24b9659b29e92fdfae9ec90f.png\" alt=\"img\"></p>\n<p>建议可能包括正式参数类型和名称（文件、字符串文件名）：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png\" alt=\"img\"></p>\n<p>如果选择了具有非基元参数的代码建议，这些参数将预加在上一行中（在选择”=新 FileReader（文件文件）”后添加文件）;<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_03.51eb314d580dde5b41b4623dfe39825f.png\" alt=\"img\"></p>\n<p>但是，如果 Codota 找到一个本地变量，该变量是一个很好的候选变量，它将将其绑定到建议（输入文件显示在建议中，并且未预报）：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png\" alt=\"img\"></p>\n<p>在某些情况下，代码建议依赖于另一个对象。如果上下文中不存在此类对象，则建议以”…”开头，并在选择时预报此对象（注意：要创建需要连接的准备状态）。选择后，将在上一行中添加新的连接：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_05.7573b25f8368e9f3ed1169cc05743b23.png\" alt=\"img\"></p>\n<h3 id=\"新线路完成\"><a href=\"#新线路完成\" class=\"headerlink\" title=\"新线路完成\"></a>新线路完成</h3><p>新代码行通常以声明新的局部变量开头。在某些情况下，Codota 可以根据当前上下文预测要使用的下一个变量的类型。</p>\n<p>在键入时，使用基本完成显示，按已键入的前缀进行筛选：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png\" alt=\"img\"></p>\n<p>或者，按需使用 Ctrl+空间：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/new-line-completions_02.07cf8ed9ebb7decf97535ea1ea521474.png\" alt=\"img\"></p>\n<h3 id=\"方法完成\"><a href=\"#方法完成\" class=\"headerlink\" title=\"方法完成\"></a>方法完成</h3><p>Codota 还可以帮助您预测给定对象中的下一个调用方法。最有可能的方法将由科多塔放在建议列表的顶部：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_01.f5aa338015bb98c3af362343487a086a.png\" alt=\"img\"></p>\n<p>在某些情况下，Codota 预测在调用方法时将使用给定的局部变量。在这种情况下，将出现具有局部变量的方法建议，选择 Codota 的建议后，将用此方法粘贴参数。建议将突出显示一个黄色星形：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_02.6f43bfe1f52d9147a6388a569cab2313.png\" alt=\"img\"></p>\n<h2 id=\"在-IDE-Java-搜索中\"><a href=\"#在-IDE-Java-搜索中\" class=\"headerlink\" title=\"在 IDE Java 搜索中\"></a>在 IDE Java 搜索中</h2><p>只需单击一下，您就会从 github 获得排名最高的代码段，这是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p>\n<p>编写良好的软件需要不断学习新的 API 或使用编程语言的不同元素。使用 Codota 在 IDE 中编写代码时搜索相关代码示例。只需单击一下，即可从 github 获得排名最高的代码段，该代码段是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p>\n<h3 id=\"如何搜索\"><a href=\"#如何搜索\" class=\"headerlink\" title=\"如何搜索\"></a>如何搜索</h3><p><strong>对于给定的类或方法：</strong>要获取代码中使用的任何开源类或方法的相关示例，只需选择类或方法，然后右键单击**- 获取**相关示例或使用键快捷方式（默认值：Ctrl+Shift+O））<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_01.744aa29f671017172e3c9d39263911a6.png\" alt=\"img\"><img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png\" alt=\"img\"></p>\n<p>代码片段将显示在 Codota 窗格中：<img src=\"https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/search_04.ae928872ebf259913520f3ba8e543e62.png\" alt=\"img\"></p>\n<p>您还可以在使用键快捷方式 （Ctrl=Shift+O） 导航给定类的方法时触发搜索，并获取所选方法的最佳代码段：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_05.efa49d39678c3f178d2f2f81b514a90d.png\" alt=\"img\"></p>\n<p><strong>使用 Codota 的自动完成从零开始搜索</strong>，您可以搜索任何开源类或方法的代码示例，即使它尚未在当前类中或当前类路径中不是事件。你可以去**”工具 + 科多塔搜索…”**或使用 Ctrl=Shift=Y 快捷方式：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_06.7c4f84689dc6759e6ec19403b18a73d6.png\" alt=\"img\"></p>\n<p>将打开一个带搜索框的弹出窗口：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_07.1617b0baceaa44778ff1d527ded0fd0d.png\" alt=\"img\"></p>\n<p>使用库多塔的自动完成机制键入搜索词：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_08.cc3816166c730ecb6f6e8a27ccc94365.png\" alt=\"img\"></p>\n<p>选择术语时，相关示例将显示在侧面：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_09.93af76e45e1601443df91ae031ae19fb.png\" alt=\"img\"></p>\n<h3 id=\"查看代码段\"><a href=\"#查看代码段\" class=\"headerlink\" title=\"查看代码段\"></a>查看代码段</h3><p>相关的代码片段显示在 codota 窗格中的”代码段”选项卡中。对于每个代码段，您可以查看它来自堆栈流后、github 存储库还是 maven 项目。单击源标题，了解有关代码段源的信息：<img src=\"images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_10.80466706a44b4b8ae23706269ad9d3c5.png\" alt=\"img\"></p>\n<p>或者查看帖子/源（如果您想要查看完整的源代码）。目前，每个搜索仅显示 20 个代码段，但在不久的将来，您将能够查看更多代码段或使用其他字词优化搜索。</p>\n<h1 id=\"下一个插件\"><a href=\"#下一个插件\" class=\"headerlink\" title=\"下一个插件\"></a>下一个插件</h1>"},{"title":"Filter","auther":"ku jin","_content":"# Filter\n## Filter是什么？\n    1. javaweb的一个重要组件，可以对发送到servlet的请求进行拦截，并对响应也进行拦截\n    2. Filter 是实现Filter 接口的java类\n    3. Filter 需要在web.xml中进行配置和映射\n## 如何创建一个Filter，并把它跑起来\n    `public class MyFilter implements Filter {`\n\tweb.xml\n\t`<filter>\n        <filter-name>别名</filter-name>\n        <filter-class>全类名</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>别名</filter-name>\n        <url-pattern>拦截url</url-pattern>\n    </filter-mapping>`\n## Filter 相关API\n\t1. init(FilterConfig filterConfig) 单例初始化\n\t2. doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) 相关逻辑的处理\n\t\t/放行，传给下一个filter 如果是最后一个Filter 则传给servler（jsp）\n        filterChain.doFilter(servletRequest,servletResponse);\n\t\t多个Filter 的拦截顺序与<filter-mapping>的配置顺序有关 靠前的先被调用\n\t3. destroy()销毁","source":"_posts/随心记/java_web/Filter.md","raw":"---\ntitle: Filter # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - Filter \n---\n# Filter\n## Filter是什么？\n    1. javaweb的一个重要组件，可以对发送到servlet的请求进行拦截，并对响应也进行拦截\n    2. Filter 是实现Filter 接口的java类\n    3. Filter 需要在web.xml中进行配置和映射\n## 如何创建一个Filter，并把它跑起来\n    `public class MyFilter implements Filter {`\n\tweb.xml\n\t`<filter>\n        <filter-name>别名</filter-name>\n        <filter-class>全类名</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>别名</filter-name>\n        <url-pattern>拦截url</url-pattern>\n    </filter-mapping>`\n## Filter 相关API\n\t1. init(FilterConfig filterConfig) 单例初始化\n\t2. doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) 相关逻辑的处理\n\t\t/放行，传给下一个filter 如果是最后一个Filter 则传给servler（jsp）\n        filterChain.doFilter(servletRequest,servletResponse);\n\t\t多个Filter 的拦截顺序与<filter-mapping>的配置顺序有关 靠前的先被调用\n\t3. destroy()销毁","slug":"随心记/java_web/Filter","published":1,"date":"2020-08-02T23:42:43.348Z","updated":"2020-08-02T23:42:59.765Z","_id":"ckdcz9iij000vrkamexgk3gu2","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h1><h2 id=\"Filter是什么？\"><a href=\"#Filter是什么？\" class=\"headerlink\" title=\"Filter是什么？\"></a>Filter是什么？</h2><pre><code>1. javaweb的一个重要组件，可以对发送到servlet的请求进行拦截，并对响应也进行拦截\n2. Filter 是实现Filter 接口的java类\n3. Filter 需要在web.xml中进行配置和映射</code></pre>\n<h2 id=\"如何创建一个Filter，并把它跑起来\"><a href=\"#如何创建一个Filter，并把它跑起来\" class=\"headerlink\" title=\"如何创建一个Filter，并把它跑起来\"></a>如何创建一个Filter，并把它跑起来</h2><pre><code>`public class MyFilter implements Filter {`\nweb.xml\n`&lt;filter&gt;\n    &lt;filter-name&gt;别名&lt;/filter-name&gt;\n    &lt;filter-class&gt;全类名&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;别名&lt;/filter-name&gt;\n    &lt;url-pattern&gt;拦截url&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;`</code></pre>\n<h2 id=\"Filter-相关API\"><a href=\"#Filter-相关API\" class=\"headerlink\" title=\"Filter 相关API\"></a>Filter 相关API</h2><pre><code>1. init(FilterConfig filterConfig) 单例初始化\n2. doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) 相关逻辑的处理\n    /放行，传给下一个filter 如果是最后一个Filter 则传给servler（jsp）\n    filterChain.doFilter(servletRequest,servletResponse);\n    多个Filter 的拦截顺序与&lt;filter-mapping&gt;的配置顺序有关 靠前的先被调用\n3. destroy()销毁</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Filter\"><a href=\"#Filter\" class=\"headerlink\" title=\"Filter\"></a>Filter</h1><h2 id=\"Filter是什么？\"><a href=\"#Filter是什么？\" class=\"headerlink\" title=\"Filter是什么？\"></a>Filter是什么？</h2><pre><code>1. javaweb的一个重要组件，可以对发送到servlet的请求进行拦截，并对响应也进行拦截\n2. Filter 是实现Filter 接口的java类\n3. Filter 需要在web.xml中进行配置和映射</code></pre>\n<h2 id=\"如何创建一个Filter，并把它跑起来\"><a href=\"#如何创建一个Filter，并把它跑起来\" class=\"headerlink\" title=\"如何创建一个Filter，并把它跑起来\"></a>如何创建一个Filter，并把它跑起来</h2><pre><code>`public class MyFilter implements Filter &#123;`\nweb.xml\n`&lt;filter&gt;\n    &lt;filter-name&gt;别名&lt;/filter-name&gt;\n    &lt;filter-class&gt;全类名&lt;/filter-class&gt;\n&lt;/filter&gt;\n&lt;filter-mapping&gt;\n    &lt;filter-name&gt;别名&lt;/filter-name&gt;\n    &lt;url-pattern&gt;拦截url&lt;/url-pattern&gt;\n&lt;/filter-mapping&gt;`</code></pre>\n<h2 id=\"Filter-相关API\"><a href=\"#Filter-相关API\" class=\"headerlink\" title=\"Filter 相关API\"></a>Filter 相关API</h2><pre><code>1. init(FilterConfig filterConfig) 单例初始化\n2. doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) 相关逻辑的处理\n    /放行，传给下一个filter 如果是最后一个Filter 则传给servler（jsp）\n    filterChain.doFilter(servletRequest,servletResponse);\n    多个Filter 的拦截顺序与&lt;filter-mapping&gt;的配置顺序有关 靠前的先被调用\n3. destroy()销毁</code></pre>\n"},{"title":"Linux","auther":"ku jin","_content":"# Linux\n\n## linux版本\n\n### ubuntu:界面友好\n\n### Red Hat：商业级-红帽认证工程师\n\n### Centos：企业级-使用yum管理软件包\n\n## linux组成部分\n\n### 内核\n\n- 作用：运行程序管理硬件\n- 进程管理，内存管理，硬件设备驱动，文件系统驱动\n\n### shell\n\n- 作用：提供用户与内核进行交互操作接口（命令解释器）\n- \n\n### 文件结构\n\n- 文件存放磁盘的组织方法\n\n### 实用工具\n\n- 编辑器：用于编辑文件\n- 过滤器：用于接收并过滤数据\n- 交互程序：容许用户发送信息或接收来自其他用户的信息\n\n## linux常用命令\n\n### 终端与工作区\n\n- alt+fx\n\n### 用户和用户组管理\n\n- 用户：user\n\n\t- 切换用户：su 用户名\n\t- 添加用户：useradd 选项 用户名\n\n\t\t- -c：描述\n\t\t- -d：目录\n\t\t- -g：用户组\n\t\t- -G：附加用户组\n\t\t- -s：用户登录shell\n\t\t- -u：用户号\n\n\t- 删除用户：userdel -r 用户名\n\t- 修改账号：usermod 选项 用户名\n\t- 设置密码：passwd 选项 用户名\n\n\t\t- 强制设置简单密码：echo 123456 |passwd --stdin kujin\n\t\t- -l 禁用账号\n\t\t- -u 解锁\n\t\t- -d 无口令\n\t\t- -f 下次登录修改口令\n\n- 用户组：group\n\n\t- groupadd 选项 用户组\n\n\t\t- -g：指定用户组标识GID\n\t\t- -o：和-g差不多\n\n\t- groupdel 删除用户组\n\t- groupmod 选项 用户组\n\n\t\t- -g：GID\n\t\t- -n：新用户组（新名字）\n\n### 文件，目录操作命令\n\n- 什么是路径？\n\n\t- 绝对路径\n\t- 相对路径：cd ../\n\n- 处理目录的常用命令\n\n\t- ls: 列出目录\n\t- cd：切换目录\n\t- pwd：显示目前的目录\n\t- mkdir：创建一个新的目录\n\t- rmdir：删除一个空的目录\n\t- cp: 复制文件或目录\n\t- rm: 移除文件或目录\n\t- mv: 移动文件与目录，或修改文件与目录的名称\n\n- linux文件内容查看\n\n\t- cat 由第一行开始显示文件内容\n\t- tac 从最后一行开始显示\n\t- nl 显示行号\n\t- more 一页一页的显示\n\t- less 可以往前翻页\n\t- head 头部几行\n\t- tail 尾巴几行\n\n### 文件信息显示\n\n### \n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/Linux.md","raw":"---\ntitle: Linux # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - Linux \n---\n# Linux\n\n## linux版本\n\n### ubuntu:界面友好\n\n### Red Hat：商业级-红帽认证工程师\n\n### Centos：企业级-使用yum管理软件包\n\n## linux组成部分\n\n### 内核\n\n- 作用：运行程序管理硬件\n- 进程管理，内存管理，硬件设备驱动，文件系统驱动\n\n### shell\n\n- 作用：提供用户与内核进行交互操作接口（命令解释器）\n- \n\n### 文件结构\n\n- 文件存放磁盘的组织方法\n\n### 实用工具\n\n- 编辑器：用于编辑文件\n- 过滤器：用于接收并过滤数据\n- 交互程序：容许用户发送信息或接收来自其他用户的信息\n\n## linux常用命令\n\n### 终端与工作区\n\n- alt+fx\n\n### 用户和用户组管理\n\n- 用户：user\n\n\t- 切换用户：su 用户名\n\t- 添加用户：useradd 选项 用户名\n\n\t\t- -c：描述\n\t\t- -d：目录\n\t\t- -g：用户组\n\t\t- -G：附加用户组\n\t\t- -s：用户登录shell\n\t\t- -u：用户号\n\n\t- 删除用户：userdel -r 用户名\n\t- 修改账号：usermod 选项 用户名\n\t- 设置密码：passwd 选项 用户名\n\n\t\t- 强制设置简单密码：echo 123456 |passwd --stdin kujin\n\t\t- -l 禁用账号\n\t\t- -u 解锁\n\t\t- -d 无口令\n\t\t- -f 下次登录修改口令\n\n- 用户组：group\n\n\t- groupadd 选项 用户组\n\n\t\t- -g：指定用户组标识GID\n\t\t- -o：和-g差不多\n\n\t- groupdel 删除用户组\n\t- groupmod 选项 用户组\n\n\t\t- -g：GID\n\t\t- -n：新用户组（新名字）\n\n### 文件，目录操作命令\n\n- 什么是路径？\n\n\t- 绝对路径\n\t- 相对路径：cd ../\n\n- 处理目录的常用命令\n\n\t- ls: 列出目录\n\t- cd：切换目录\n\t- pwd：显示目前的目录\n\t- mkdir：创建一个新的目录\n\t- rmdir：删除一个空的目录\n\t- cp: 复制文件或目录\n\t- rm: 移除文件或目录\n\t- mv: 移动文件与目录，或修改文件与目录的名称\n\n- linux文件内容查看\n\n\t- cat 由第一行开始显示文件内容\n\t- tac 从最后一行开始显示\n\t- nl 显示行号\n\t- more 一页一页的显示\n\t- less 可以往前翻页\n\t- head 头部几行\n\t- tail 尾巴几行\n\n### 文件信息显示\n\n### \n\n*XMind - Trial Version*","slug":"随心记/java_web/Linux","published":1,"date":"2020-08-02T23:42:43.408Z","updated":"2020-08-02T23:42:59.766Z","_id":"ckdcz9ij4000wrkamg1vy1m4r","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><h2 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h2><h3 id=\"ubuntu-界面友好\"><a href=\"#ubuntu-界面友好\" class=\"headerlink\" title=\"ubuntu:界面友好\"></a>ubuntu:界面友好</h3><h3 id=\"Red-Hat：商业级-红帽认证工程师\"><a href=\"#Red-Hat：商业级-红帽认证工程师\" class=\"headerlink\" title=\"Red Hat：商业级-红帽认证工程师\"></a>Red Hat：商业级-红帽认证工程师</h3><h3 id=\"Centos：企业级-使用yum管理软件包\"><a href=\"#Centos：企业级-使用yum管理软件包\" class=\"headerlink\" title=\"Centos：企业级-使用yum管理软件包\"></a>Centos：企业级-使用yum管理软件包</h3><h2 id=\"linux组成部分\"><a href=\"#linux组成部分\" class=\"headerlink\" title=\"linux组成部分\"></a>linux组成部分</h2><h3 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h3><ul>\n<li>作用：运行程序管理硬件</li>\n<li>进程管理，内存管理，硬件设备驱动，文件系统驱动</li>\n</ul>\n<h3 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h3><ul>\n<li>作用：提供用户与内核进行交互操作接口（命令解释器）</li>\n<li></li>\n</ul>\n<h3 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h3><ul>\n<li>文件存放磁盘的组织方法</li>\n</ul>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><ul>\n<li>编辑器：用于编辑文件</li>\n<li>过滤器：用于接收并过滤数据</li>\n<li>交互程序：容许用户发送信息或接收来自其他用户的信息</li>\n</ul>\n<h2 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h2><h3 id=\"终端与工作区\"><a href=\"#终端与工作区\" class=\"headerlink\" title=\"终端与工作区\"></a>终端与工作区</h3><ul>\n<li>alt+fx</li>\n</ul>\n<h3 id=\"用户和用户组管理\"><a href=\"#用户和用户组管理\" class=\"headerlink\" title=\"用户和用户组管理\"></a>用户和用户组管理</h3><ul>\n<li><p>用户：user</p>\n<ul>\n<li><p>切换用户：su 用户名</p>\n</li>\n<li><p>添加用户：useradd 选项 用户名</p>\n<ul>\n<li>-c：描述</li>\n<li>-d：目录</li>\n<li>-g：用户组</li>\n<li>-G：附加用户组</li>\n<li>-s：用户登录shell</li>\n<li>-u：用户号</li>\n</ul>\n</li>\n<li><p>删除用户：userdel -r 用户名</p>\n</li>\n<li><p>修改账号：usermod 选项 用户名</p>\n</li>\n<li><p>设置密码：passwd 选项 用户名</p>\n<ul>\n<li>强制设置简单密码：echo 123456 |passwd –stdin kujin</li>\n<li>-l 禁用账号</li>\n<li>-u 解锁</li>\n<li>-d 无口令</li>\n<li>-f 下次登录修改口令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>用户组：group</p>\n<ul>\n<li><p>groupadd 选项 用户组</p>\n<ul>\n<li>-g：指定用户组标识GID</li>\n<li>-o：和-g差不多</li>\n</ul>\n</li>\n<li><p>groupdel 删除用户组</p>\n</li>\n<li><p>groupmod 选项 用户组</p>\n<ul>\n<li>-g：GID</li>\n<li>-n：新用户组（新名字）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件，目录操作命令\"><a href=\"#文件，目录操作命令\" class=\"headerlink\" title=\"文件，目录操作命令\"></a>文件，目录操作命令</h3><ul>\n<li><p>什么是路径？</p>\n<ul>\n<li>绝对路径</li>\n<li>相对路径：cd ../</li>\n</ul>\n</li>\n<li><p>处理目录的常用命令</p>\n<ul>\n<li>ls: 列出目录</li>\n<li>cd：切换目录</li>\n<li>pwd：显示目前的目录</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n<li>cp: 复制文件或目录</li>\n<li>rm: 移除文件或目录</li>\n<li>mv: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n</li>\n<li><p>linux文件内容查看</p>\n<ul>\n<li>cat 由第一行开始显示文件内容</li>\n<li>tac 从最后一行开始显示</li>\n<li>nl 显示行号</li>\n<li>more 一页一页的显示</li>\n<li>less 可以往前翻页</li>\n<li>head 头部几行</li>\n<li>tail 尾巴几行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件信息显示\"><a href=\"#文件信息显示\" class=\"headerlink\" title=\"文件信息显示\"></a>文件信息显示</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h1><h2 id=\"linux版本\"><a href=\"#linux版本\" class=\"headerlink\" title=\"linux版本\"></a>linux版本</h2><h3 id=\"ubuntu-界面友好\"><a href=\"#ubuntu-界面友好\" class=\"headerlink\" title=\"ubuntu:界面友好\"></a>ubuntu:界面友好</h3><h3 id=\"Red-Hat：商业级-红帽认证工程师\"><a href=\"#Red-Hat：商业级-红帽认证工程师\" class=\"headerlink\" title=\"Red Hat：商业级-红帽认证工程师\"></a>Red Hat：商业级-红帽认证工程师</h3><h3 id=\"Centos：企业级-使用yum管理软件包\"><a href=\"#Centos：企业级-使用yum管理软件包\" class=\"headerlink\" title=\"Centos：企业级-使用yum管理软件包\"></a>Centos：企业级-使用yum管理软件包</h3><h2 id=\"linux组成部分\"><a href=\"#linux组成部分\" class=\"headerlink\" title=\"linux组成部分\"></a>linux组成部分</h2><h3 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h3><ul>\n<li>作用：运行程序管理硬件</li>\n<li>进程管理，内存管理，硬件设备驱动，文件系统驱动</li>\n</ul>\n<h3 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h3><ul>\n<li>作用：提供用户与内核进行交互操作接口（命令解释器）</li>\n<li></li>\n</ul>\n<h3 id=\"文件结构\"><a href=\"#文件结构\" class=\"headerlink\" title=\"文件结构\"></a>文件结构</h3><ul>\n<li>文件存放磁盘的组织方法</li>\n</ul>\n<h3 id=\"实用工具\"><a href=\"#实用工具\" class=\"headerlink\" title=\"实用工具\"></a>实用工具</h3><ul>\n<li>编辑器：用于编辑文件</li>\n<li>过滤器：用于接收并过滤数据</li>\n<li>交互程序：容许用户发送信息或接收来自其他用户的信息</li>\n</ul>\n<h2 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h2><h3 id=\"终端与工作区\"><a href=\"#终端与工作区\" class=\"headerlink\" title=\"终端与工作区\"></a>终端与工作区</h3><ul>\n<li>alt+fx</li>\n</ul>\n<h3 id=\"用户和用户组管理\"><a href=\"#用户和用户组管理\" class=\"headerlink\" title=\"用户和用户组管理\"></a>用户和用户组管理</h3><ul>\n<li><p>用户：user</p>\n<ul>\n<li><p>切换用户：su 用户名</p>\n</li>\n<li><p>添加用户：useradd 选项 用户名</p>\n<ul>\n<li>-c：描述</li>\n<li>-d：目录</li>\n<li>-g：用户组</li>\n<li>-G：附加用户组</li>\n<li>-s：用户登录shell</li>\n<li>-u：用户号</li>\n</ul>\n</li>\n<li><p>删除用户：userdel -r 用户名</p>\n</li>\n<li><p>修改账号：usermod 选项 用户名</p>\n</li>\n<li><p>设置密码：passwd 选项 用户名</p>\n<ul>\n<li>强制设置简单密码：echo 123456 |passwd –stdin kujin</li>\n<li>-l 禁用账号</li>\n<li>-u 解锁</li>\n<li>-d 无口令</li>\n<li>-f 下次登录修改口令</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>用户组：group</p>\n<ul>\n<li><p>groupadd 选项 用户组</p>\n<ul>\n<li>-g：指定用户组标识GID</li>\n<li>-o：和-g差不多</li>\n</ul>\n</li>\n<li><p>groupdel 删除用户组</p>\n</li>\n<li><p>groupmod 选项 用户组</p>\n<ul>\n<li>-g：GID</li>\n<li>-n：新用户组（新名字）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件，目录操作命令\"><a href=\"#文件，目录操作命令\" class=\"headerlink\" title=\"文件，目录操作命令\"></a>文件，目录操作命令</h3><ul>\n<li><p>什么是路径？</p>\n<ul>\n<li>绝对路径</li>\n<li>相对路径：cd ../</li>\n</ul>\n</li>\n<li><p>处理目录的常用命令</p>\n<ul>\n<li>ls: 列出目录</li>\n<li>cd：切换目录</li>\n<li>pwd：显示目前的目录</li>\n<li>mkdir：创建一个新的目录</li>\n<li>rmdir：删除一个空的目录</li>\n<li>cp: 复制文件或目录</li>\n<li>rm: 移除文件或目录</li>\n<li>mv: 移动文件与目录，或修改文件与目录的名称</li>\n</ul>\n</li>\n<li><p>linux文件内容查看</p>\n<ul>\n<li>cat 由第一行开始显示文件内容</li>\n<li>tac 从最后一行开始显示</li>\n<li>nl 显示行号</li>\n<li>more 一页一页的显示</li>\n<li>less 可以往前翻页</li>\n<li>head 头部几行</li>\n<li>tail 尾巴几行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件信息显示\"><a href=\"#文件信息显示\" class=\"headerlink\" title=\"文件信息显示\"></a>文件信息显示</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><p><em>XMind - Trial Version</em></p>\n"},{"title":"1.学习网址","auther":"ku jin","_content":"[toc]\n\n# 官方网址\n\n## [关键字查看](https://kotlinlang.org/docs/reference/keyword-reference.html#soft-keywords)\n\n![image-20200729173322076](images/1.%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/image-20200729173322076.png)","source":"_posts/随心记/Kotlin学习/1.学习网址.md","raw":"---\ntitle: 1.学习网址 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Kotlin学习\ntags: # 标签=目标文件夹\n - 1.学习网址 \n---\n[toc]\n\n# 官方网址\n\n## [关键字查看](https://kotlinlang.org/docs/reference/keyword-reference.html#soft-keywords)\n\n![image-20200729173322076](images/1.%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/image-20200729173322076.png)","slug":"随心记/Kotlin学习/1.学习网址","published":1,"date":"2020-08-02T23:42:43.615Z","updated":"2020-08-02T23:42:59.771Z","_id":"ckdcz9iqc000xrkam4w7v4iqd","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"官方网址\"><a href=\"#官方网址\" class=\"headerlink\" title=\"官方网址\"></a>官方网址</h1><h2 id=\"关键字查看\"><a href=\"#关键字查看\" class=\"headerlink\" title=\"关键字查看\"></a><a href=\"https://kotlinlang.org/docs/reference/keyword-reference.html#soft-keywords\">关键字查看</a></h2><p><img src=\"images/1.%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/image-20200729173322076.png\" alt=\"image-20200729173322076\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"官方网址\"><a href=\"#官方网址\" class=\"headerlink\" title=\"官方网址\"></a>官方网址</h1><h2 id=\"关键字查看\"><a href=\"#关键字查看\" class=\"headerlink\" title=\"关键字查看\"></a><a href=\"https://kotlinlang.org/docs/reference/keyword-reference.html#soft-keywords\">关键字查看</a></h2><p><img src=\"images/1.%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/image-20200729173322076.png\" alt=\"image-20200729173322076\"></p>\n"},{"title":"数据类型","auther":"ku jin","_content":"","source":"_posts/随心记/Kotlin学习/数据类型.md","raw":"---\ntitle: 数据类型 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Kotlin学习\ntags: # 标签=目标文件夹\n - 数据类型 \n---\n","slug":"随心记/Kotlin学习/数据类型","published":1,"date":"2020-08-02T23:42:43.648Z","updated":"2020-08-02T23:42:59.774Z","_id":"ckdcz9iqx000yrkamhtjzem0k","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"1-2 CentOS镜像使用帮助","auther":"ku jin","_content":"# CentOS镜像使用帮助\n[http://mirrors.163.com/.help/centos.html](http://mirrors.163.com/.help/centos.html)\n\t1. 首先下载 wget\n\t\tyum install wget\n\t2. 其次进行备份\n\t\t mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\t3. 进入 /etc/yum.repos.d/ 目录，下载下载对应版本repo文件\n\t\tcd /etc/yum.repos.d/\n\t\twget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n\t4. 运行以下命令生成缓存\n\t\tyum clean all\n\t\tyum makecache","source":"_posts/随心记/Linux入门/1-2 CentOS镜像使用帮助.md","raw":"---\ntitle: 1-2 CentOS镜像使用帮助 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - 1-2 CentOS镜像使用帮助 \n---\n# CentOS镜像使用帮助\n[http://mirrors.163.com/.help/centos.html](http://mirrors.163.com/.help/centos.html)\n\t1. 首先下载 wget\n\t\tyum install wget\n\t2. 其次进行备份\n\t\t mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\t3. 进入 /etc/yum.repos.d/ 目录，下载下载对应版本repo文件\n\t\tcd /etc/yum.repos.d/\n\t\twget http://mirrors.163.com/.help/CentOS6-Base-163.repo\n\t4. 运行以下命令生成缓存\n\t\tyum clean all\n\t\tyum makecache","slug":"随心记/Linux入门/1-2 CentOS镜像使用帮助","published":1,"date":"2020-08-02T23:42:43.663Z","updated":"2020-08-02T23:42:59.775Z","_id":"ckdcz9irq000zrkam3nxh8cl5","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CentOS镜像使用帮助\"><a href=\"#CentOS镜像使用帮助\" class=\"headerlink\" title=\"CentOS镜像使用帮助\"></a>CentOS镜像使用帮助</h1><p><a href=\"http://mirrors.163.com/.help/centos.html\">http://mirrors.163.com/.help/centos.html</a><br>    1. 首先下载 wget<br>        yum install wget<br>    2. 其次进行备份<br>         mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br>    3. 进入 /etc/yum.repos.d/ 目录，下载下载对应版本repo文件<br>        cd /etc/yum.repos.d/<br>        wget <a href=\"http://mirrors.163.com/.help/CentOS6-Base-163.repo\">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a><br>    4. 运行以下命令生成缓存<br>        yum clean all<br>        yum makecache</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"CentOS镜像使用帮助\"><a href=\"#CentOS镜像使用帮助\" class=\"headerlink\" title=\"CentOS镜像使用帮助\"></a>CentOS镜像使用帮助</h1><p><a href=\"http://mirrors.163.com/.help/centos.html\">http://mirrors.163.com/.help/centos.html</a><br>    1. 首先下载 wget<br>        yum install wget<br>    2. 其次进行备份<br>         mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br>    3. 进入 /etc/yum.repos.d/ 目录，下载下载对应版本repo文件<br>        cd /etc/yum.repos.d/<br>        wget <a href=\"http://mirrors.163.com/.help/CentOS6-Base-163.repo\">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a><br>    4. 运行以下命令生成缓存<br>        yum clean all<br>        yum makecache</p>\n"},{"title":"2-1阿里云服务器远程登录密码","auther":"ku jin","_content":"# 远程登录密码 660593","source":"_posts/随心记/Linux入门/2-1阿里云服务器远程登录密码.md","raw":"---\ntitle: 2-1阿里云服务器远程登录密码 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - 2-1阿里云服务器远程登录密码 \n---\n# 远程登录密码 660593","slug":"随心记/Linux入门/2-1阿里云服务器远程登录密码","published":1,"date":"2020-08-02T23:42:43.671Z","updated":"2020-08-02T23:42:59.775Z","_id":"ckdcz9irt0010rkam3wqaheem","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"远程登录密码-660593\"><a href=\"#远程登录密码-660593\" class=\"headerlink\" title=\"远程登录密码 660593\"></a>远程登录密码 660593</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"远程登录密码-660593\"><a href=\"#远程登录密码-660593\" class=\"headerlink\" title=\"远程登录密码 660593\"></a>远程登录密码 660593</h1>"},{"title":"Centos虚拟机网络连接问题","auther":"ku jin","_content":"<p>装好CentOS7后，我们一开始是上不了网的 <br>\n<img src=\"https://img-blog.csdn.net/20180804201654166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n这时候，可以输入命令dhclient，可以自动获取一个IP地址，再用命令ip addr查看IP <br>\n<img src=\"https://img-blog.csdn.net/20180804201723248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n不过这时候获取的IP是动态的，下次重启系统后，IP地址也会变化，这时候我们可以把系统的IP设置为静态的，设置步骤如下： <br>\n（1）点击VMware虚拟机左上角的“编辑”，选择“虚拟网络编译器”。 <br>\n（2）选中VMnet8（NAT模式），再点击右侧的“NAT设置”此时会看到如下界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804201749749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（3）在命令行中输入：vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br>\n<img src=\"https://img-blog.csdn.net/20180804201953160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（4）此时会进入如下图所示界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804202037986?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（5）将ONBOOT=no改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static,并在后面增加几行内容： <br>\nIPADDR=192.168.127.128 <br>\nNETMASK=255.255.255.0 <br>\nGATEWAY=192.168.127.2 <br>\nDNS1=119.29.29.29 <br>\n<img src=\"https://img-blog.csdn.net/20180804202050977?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（6）保存后退出，然后输入命令：systemctl restart network.service来重启网络服务。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202124183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（7）再用ip addr查看IP,并用命令ping测试网络的连通性。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202204447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n至此，IP即设置完毕。</p>","source":"_posts/随心记/Linux入门/Centos虚拟机网络连接问题.md","raw":"---\ntitle: Centos虚拟机网络连接问题 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Centos虚拟机网络连接问题 \n---\n<p>装好CentOS7后，我们一开始是上不了网的 <br>\n<img src=\"https://img-blog.csdn.net/20180804201654166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n这时候，可以输入命令dhclient，可以自动获取一个IP地址，再用命令ip addr查看IP <br>\n<img src=\"https://img-blog.csdn.net/20180804201723248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n不过这时候获取的IP是动态的，下次重启系统后，IP地址也会变化，这时候我们可以把系统的IP设置为静态的，设置步骤如下： <br>\n（1）点击VMware虚拟机左上角的“编辑”，选择“虚拟网络编译器”。 <br>\n（2）选中VMnet8（NAT模式），再点击右侧的“NAT设置”此时会看到如下界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804201749749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（3）在命令行中输入：vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br>\n<img src=\"https://img-blog.csdn.net/20180804201953160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（4）此时会进入如下图所示界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804202037986?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（5）将ONBOOT=no改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static,并在后面增加几行内容： <br>\nIPADDR=192.168.127.128 <br>\nNETMASK=255.255.255.0 <br>\nGATEWAY=192.168.127.2 <br>\nDNS1=119.29.29.29 <br>\n<img src=\"https://img-blog.csdn.net/20180804202050977?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（6）保存后退出，然后输入命令：systemctl restart network.service来重启网络服务。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202124183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（7）再用ip addr查看IP,并用命令ping测试网络的连通性。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202204447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n至此，IP即设置完毕。</p>","slug":"随心记/Linux入门/Centos虚拟机网络连接问题","published":1,"date":"2020-08-02T23:42:43.673Z","updated":"2020-08-02T23:42:59.776Z","_id":"ckdcz9irv0011rkamguh5ft1p","comments":1,"layout":"post","photos":[],"link":"","content":"<p>装好CentOS7后，我们一开始是上不了网的 <br>\n<img src=\"https://img-blog.csdn.net/20180804201654166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n这时候，可以输入命令dhclient，可以自动获取一个IP地址，再用命令ip addr查看IP <br>\n<img src=\"https://img-blog.csdn.net/20180804201723248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n不过这时候获取的IP是动态的，下次重启系统后，IP地址也会变化，这时候我们可以把系统的IP设置为静态的，设置步骤如下： <br>\n（1）点击VMware虚拟机左上角的“编辑”，选择“虚拟网络编译器”。 <br>\n（2）选中VMnet8（NAT模式），再点击右侧的“NAT设置”此时会看到如下界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804201749749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（3）在命令行中输入：vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br>\n<img src=\"https://img-blog.csdn.net/20180804201953160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（4）此时会进入如下图所示界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804202037986?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（5）将ONBOOT=no改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static,并在后面增加几行内容： <br>\nIPADDR=192.168.127.128 <br>\nNETMASK=255.255.255.0 <br>\nGATEWAY=192.168.127.2 <br>\nDNS1=119.29.29.29 <br>\n<img src=\"https://img-blog.csdn.net/20180804202050977?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（6）保存后退出，然后输入命令：systemctl restart network.service来重启网络服务。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202124183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（7）再用ip addr查看IP,并用命令ping测试网络的连通性。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202204447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n至此，IP即设置完毕。</p><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>装好CentOS7后，我们一开始是上不了网的 <br>\n<img src=\"https://img-blog.csdn.net/20180804201654166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n这时候，可以输入命令dhclient，可以自动获取一个IP地址，再用命令ip addr查看IP <br>\n<img src=\"https://img-blog.csdn.net/20180804201723248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n不过这时候获取的IP是动态的，下次重启系统后，IP地址也会变化，这时候我们可以把系统的IP设置为静态的，设置步骤如下： <br>\n（1）点击VMware虚拟机左上角的“编辑”，选择“虚拟网络编译器”。 <br>\n（2）选中VMnet8（NAT模式），再点击右侧的“NAT设置”此时会看到如下界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804201749749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（3）在命令行中输入：vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br>\n<img src=\"https://img-blog.csdn.net/20180804201953160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（4）此时会进入如下图所示界面 <br>\n<img src=\"https://img-blog.csdn.net/20180804202037986?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（5）将ONBOOT=no改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static,并在后面增加几行内容： <br>\nIPADDR=192.168.127.128 <br>\nNETMASK=255.255.255.0 <br>\nGATEWAY=192.168.127.2 <br>\nDNS1=119.29.29.29 <br>\n<img src=\"https://img-blog.csdn.net/20180804202050977?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（6）保存后退出，然后输入命令：systemctl restart network.service来重启网络服务。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202124183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n（7）再用ip addr查看IP,并用命令ping测试网络的连通性。 <br>\n<img src=\"https://img-blog.csdn.net/20180804202204447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\" title=\"\"> <br>\n至此，IP即设置完毕。</p>"},{"title":"iptables的学习","auther":"ku jin","_content":"# iptables\n## 什么是iptables\n\t常见与linux系统的应用层防火墙工具\n## 什么是Netfilter?\n\tNetfilter是Linux操作系统核心层内部的一个数据包处理模块\n\t什么是Hook point>\n\t\t数据包在Netfilter中的挂载点\n\t\t（PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）\n## iptables规则组成\n\t组成部分：四张表+五条链（Hook point）+规则\n\t四张表：\n\t\tfilter表:访问控制，规则匹配\n\t\tnat表：地址转发\n\t\tmangle表，\n\t\traw表\n\t五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n\t数据包访问控制：ACCEPT,DROP,REJECT\n\t数据包改写:SNAT,DNAT\n\t信息记录：LOG\n## iptables 配置 场景一\n\t》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n\t》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n\t》其他未被允许的端口则禁止访问","source":"_posts/随心记/Linux入门/iptables的学习.md","raw":"---\ntitle: iptables的学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - iptables的学习 \n---\n# iptables\n## 什么是iptables\n\t常见与linux系统的应用层防火墙工具\n## 什么是Netfilter?\n\tNetfilter是Linux操作系统核心层内部的一个数据包处理模块\n\t什么是Hook point>\n\t\t数据包在Netfilter中的挂载点\n\t\t（PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）\n## iptables规则组成\n\t组成部分：四张表+五条链（Hook point）+规则\n\t四张表：\n\t\tfilter表:访问控制，规则匹配\n\t\tnat表：地址转发\n\t\tmangle表，\n\t\traw表\n\t五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n\t数据包访问控制：ACCEPT,DROP,REJECT\n\t数据包改写:SNAT,DNAT\n\t信息记录：LOG\n## iptables 配置 场景一\n\t》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n\t》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n\t》其他未被允许的端口则禁止访问","slug":"随心记/Linux入门/iptables的学习","published":1,"date":"2020-08-02T23:42:43.675Z","updated":"2020-08-02T23:42:59.776Z","_id":"ckdcz9is50012rkam9bmv42tg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h1><h2 id=\"什么是iptables\"><a href=\"#什么是iptables\" class=\"headerlink\" title=\"什么是iptables\"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre>\n<h2 id=\"什么是Netfilter\"><a href=\"#什么是Netfilter\" class=\"headerlink\" title=\"什么是Netfilter?\"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块\n什么是Hook point&gt;\n    数据包在Netfilter中的挂载点\n    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre>\n<h2 id=\"iptables规则组成\"><a href=\"#iptables规则组成\" class=\"headerlink\" title=\"iptables规则组成\"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则\n四张表：\n    filter表:访问控制，规则匹配\n    nat表：地址转发\n    mangle表，\n    raw表\n五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n数据包访问控制：ACCEPT,DROP,REJECT\n数据包改写:SNAT,DNAT\n信息记录：LOG</code></pre>\n<h2 id=\"iptables-配置-场景一\"><a href=\"#iptables-配置-场景一\" class=\"headerlink\" title=\"iptables 配置 场景一\"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n》其他未被允许的端口则禁止访问</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h1><h2 id=\"什么是iptables\"><a href=\"#什么是iptables\" class=\"headerlink\" title=\"什么是iptables\"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre>\n<h2 id=\"什么是Netfilter\"><a href=\"#什么是Netfilter\" class=\"headerlink\" title=\"什么是Netfilter?\"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块\n什么是Hook point&gt;\n    数据包在Netfilter中的挂载点\n    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre>\n<h2 id=\"iptables规则组成\"><a href=\"#iptables规则组成\" class=\"headerlink\" title=\"iptables规则组成\"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则\n四张表：\n    filter表:访问控制，规则匹配\n    nat表：地址转发\n    mangle表，\n    raw表\n五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n数据包访问控制：ACCEPT,DROP,REJECT\n数据包改写:SNAT,DNAT\n信息记录：LOG</code></pre>\n<h2 id=\"iptables-配置-场景一\"><a href=\"#iptables-配置-场景一\" class=\"headerlink\" title=\"iptables 配置 场景一\"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n》其他未被允许的端口则禁止访问</code></pre>\n"},{"title":"Linux准备工作","auther":"ku jin","_content":"# CentOS\n\n### 虚拟机里的CentOS网络配置\n\t1.首先你要检查vm的网关ip是否和Centos 的IP一致\n![img](ip.png)\n\t2. \n### 前期准备工作\n\t 一.查看ip\n\t\t1. ifconfig\n\t\t2. ip addr\n\t\t3. vi/ect/sysconfig/network-scripts/ifcfg-xx\n\t\t4. yun install net-tool","source":"_posts/随心记/Linux入门/Linux准备工作.md","raw":"---\ntitle: Linux准备工作 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Linux准备工作 \n---\n# CentOS\n\n### 虚拟机里的CentOS网络配置\n\t1.首先你要检查vm的网关ip是否和Centos 的IP一致\n![img](ip.png)\n\t2. \n### 前期准备工作\n\t 一.查看ip\n\t\t1. ifconfig\n\t\t2. ip addr\n\t\t3. vi/ect/sysconfig/network-scripts/ifcfg-xx\n\t\t4. yun install net-tool","slug":"随心记/Linux入门/Linux准备工作","published":1,"date":"2020-08-02T23:42:43.678Z","updated":"2020-08-02T23:42:59.777Z","_id":"ckdcz9isb0013rkam7k443chw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h1><h3 id=\"虚拟机里的CentOS网络配置\"><a href=\"#虚拟机里的CentOS网络配置\" class=\"headerlink\" title=\"虚拟机里的CentOS网络配置\"></a>虚拟机里的CentOS网络配置</h3><pre><code>1.首先你要检查vm的网关ip是否和Centos 的IP一致</code></pre>\n<p><img src=\"ip.png\" alt=\"img\"><br>    2. </p>\n<h3 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h3><pre><code> 一.查看ip\n    1. ifconfig\n    2. ip addr\n    3. vi/ect/sysconfig/network-scripts/ifcfg-xx\n    4. yun install net-tool</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"CentOS\"><a href=\"#CentOS\" class=\"headerlink\" title=\"CentOS\"></a>CentOS</h1><h3 id=\"虚拟机里的CentOS网络配置\"><a href=\"#虚拟机里的CentOS网络配置\" class=\"headerlink\" title=\"虚拟机里的CentOS网络配置\"></a>虚拟机里的CentOS网络配置</h3><pre><code>1.首先你要检查vm的网关ip是否和Centos 的IP一致</code></pre>\n<p><img src=\"ip.png\" alt=\"img\"><br>    2. </p>\n<h3 id=\"前期准备工作\"><a href=\"#前期准备工作\" class=\"headerlink\" title=\"前期准备工作\"></a>前期准备工作</h3><pre><code> 一.查看ip\n    1. ifconfig\n    2. ip addr\n    3. vi/ect/sysconfig/network-scripts/ifcfg-xx\n    4. yun install net-tool</code></pre>\n"},{"title":"LINUX设置防火墙","auther":"ku jin","_content":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\nservice  iptables  start          开启防火墙\n\nservice  iptables  stop          关闭防火墙\n\nservice  iptables  restart        重启防火墙\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent        ##永久开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent  ##永久移除ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent      ##永久添加<span class=\"token number\">80</span>端口\n\niptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的\n\nman firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助\n\nsystemctl stop firewalld                  ##关闭防火墙\n\nsystemctl start firewalld                  ##开启防火墙\n\nsystemctl status firewalld              ##查看防火墙状态\n\nsystemctl restart firewalld              ##重启防火墙\n\nsystemctl disable firewalld              ##开机关闭防火墙，即永久关闭\n","source":"_posts/随心记/Linux入门/LINUX设置防火墙.md","raw":"---\ntitle: LINUX设置防火墙 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - LINUX设置防火墙 \n---\n<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\nservice  iptables  start          开启防火墙\n\nservice  iptables  stop          关闭防火墙\n\nservice  iptables  restart        重启防火墙\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent        ##永久开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent  ##永久移除ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent      ##永久添加<span class=\"token number\">80</span>端口\n\niptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的\n\nman firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助\n\nsystemctl stop firewalld                  ##关闭防火墙\n\nsystemctl start firewalld                  ##开启防火墙\n\nsystemctl status firewalld              ##查看防火墙状态\n\nsystemctl restart firewalld              ##重启防火墙\n\nsystemctl disable firewalld              ##开机关闭防火墙，即永久关闭\n","slug":"随心记/Linux入门/LINUX设置防火墙","published":1,"date":"2020-08-02T23:42:43.679Z","updated":"2020-08-02T23:42:59.778Z","_id":"ckdcz9ise0014rkam8ez8g949","comments":1,"layout":"post","photos":[],"link":"","content":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\n<p>service  iptables  start          开启防火墙</p>\n<p>service  iptables  stop          关闭防火墙</p>\n<p>service  iptables  restart        重启防火墙</p>\n</code><p><code class=\"  language-undefined\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></p></pre><p></p>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent        ##永久开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent  ##永久移除ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">–</span>permanent      ##永久添加<span class=\"token number\">80</span>端口</p>\n<p>iptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p>\n<p>man firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助</p>\n<p>systemctl stop firewalld                  ##关闭防火墙</p>\n<p>systemctl start firewalld                  ##开启防火墙</p>\n<p>systemctl status firewalld              ##查看防火墙状态</p>\n<p>systemctl restart firewalld              ##重启防火墙</p>\n<p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p>\n</code></pre></article></section><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\n<p>service  iptables  start          开启防火墙</p>\n<p>service  iptables  stop          关闭防火墙</p>\n<p>service  iptables  restart        重启防火墙</p>\n<p><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent        ##永久开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent  ##永久移除ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">–</span>permanent      ##永久添加<span class=\"token number\">80</span>端口</p>\n<p>iptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p>\n<p>man firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助</p>\n<p>systemctl stop firewalld                  ##关闭防火墙</p>\n<p>systemctl start firewalld                  ##开启防火墙</p>\n<p>systemctl status firewalld              ##查看防火墙状态</p>\n<p>systemctl restart firewalld              ##重启防火墙</p>\n<p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p>\n"},{"title":"Nat连接网络","auther":"ku jin","_content":"# 虚拟机NAT模式连接SSH\n<img src=\"nat.png\">","source":"_posts/随心记/Linux入门/Nat连接网络.md","raw":"---\ntitle: Nat连接网络 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Nat连接网络 \n---\n# 虚拟机NAT模式连接SSH\n<img src=\"nat.png\">","slug":"随心记/Linux入门/Nat连接网络","published":1,"date":"2020-08-02T23:42:43.716Z","updated":"2020-08-02T23:42:59.779Z","_id":"ckdcz9itn0015rkam26zn1avg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"虚拟机NAT模式连接SSH\"><a href=\"#虚拟机NAT模式连接SSH\" class=\"headerlink\" title=\"虚拟机NAT模式连接SSH\"></a>虚拟机NAT模式连接SSH</h1><img src=\"nat.png\"><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"虚拟机NAT模式连接SSH\"><a href=\"#虚拟机NAT模式连接SSH\" class=\"headerlink\" title=\"虚拟机NAT模式连接SSH\"></a>虚拟机NAT模式连接SSH</h1><img src=\"nat.png\">"},{"title":"Untitled","auther":"ku jin","_content":"","source":"_posts/随心记/Linux入门/Untitled.md","raw":"---\ntitle: Untitled # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Untitled \n---\n","slug":"随心记/Linux入门/Untitled","published":1,"date":"2020-08-02T23:42:43.730Z","updated":"2020-08-02T23:42:59.781Z","_id":"ckdcz9iua0016rkam7ut51ahm","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"文件命令操作md","auther":"ku jin","_content":"# 文件命令操作\n<div id=\"navCategory\" style=\"color:#152e97;\"><p style=\"font-size:18px;\"><b>目录</b></p><ul><li><a href=\"#_label0\">1、Linux命令的普遍语法格式</a></li><li><a href=\"#_label1\">2、目录处理命令</a><ul><li><a href=\"#_label1_0\">　一、显示目录文件命令：ls</a></li><li><a href=\"#_label1_1\">　二、创建目录命令：mkdir</a></li><li><a href=\"#_label1_2\">　三、切换目录命令：cd</a></li><li><a href=\"#_label1_3\">　四、shell内置命令和外部命令的区别</a></li><li><a href=\"#_label1_4\">　五、显示当前目录命令：pwd</a></li><li><a href=\"#_label1_5\">　六、删除空目录命令：rmdir</a></li><li><a href=\"#_label1_6\">　七、复制文件或目录命令：cp</a></li><li><a href=\"#_label1_7\">　八、剪切文件或目录命令：mv</a></li><li><a href=\"#_label1_8\">　九、删除文件或目录命令：rm</a></li></ul></li><li><a href=\"#_label2\">3、文件处理命令</a><ul><li><a href=\"#_label2_0\">　一、创建空文件命令：touch</a></li><li><a href=\"#_label2_1\">　二、显示文件内容命令（适合内容较少的文件）：cat</a></li><li><a href=\"#_label2_2\">　三、反向显示文件内容命令（适合内容较少的文件）：tac</a></li><li><a href=\"#_label2_3\">　四、分页显示文件内容命令（不能向前翻页）：more</a></li><li><a href=\"#_label2_4\">　五、分页显示文件内容命令（可以前后翻页）：less</a></li><li><a href=\"#_label2_5\">　六、显示文件内容命令（指定行数）：head</a></li><li><a href=\"#_label2_6\">　七、反向文件内容命令（文件即时更新后也能动态显示，多用于日志文件显示）：tail</a></li></ul></li><li><a href=\"#_label3\">4、总结</a></li></ul></div>","source":"_posts/随心记/Linux入门/文件命令操作md.md","raw":"---\ntitle: 文件命令操作md # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - 文件命令操作md \n---\n# 文件命令操作\n<div id=\"navCategory\" style=\"color:#152e97;\"><p style=\"font-size:18px;\"><b>目录</b></p><ul><li><a href=\"#_label0\">1、Linux命令的普遍语法格式</a></li><li><a href=\"#_label1\">2、目录处理命令</a><ul><li><a href=\"#_label1_0\">　一、显示目录文件命令：ls</a></li><li><a href=\"#_label1_1\">　二、创建目录命令：mkdir</a></li><li><a href=\"#_label1_2\">　三、切换目录命令：cd</a></li><li><a href=\"#_label1_3\">　四、shell内置命令和外部命令的区别</a></li><li><a href=\"#_label1_4\">　五、显示当前目录命令：pwd</a></li><li><a href=\"#_label1_5\">　六、删除空目录命令：rmdir</a></li><li><a href=\"#_label1_6\">　七、复制文件或目录命令：cp</a></li><li><a href=\"#_label1_7\">　八、剪切文件或目录命令：mv</a></li><li><a href=\"#_label1_8\">　九、删除文件或目录命令：rm</a></li></ul></li><li><a href=\"#_label2\">3、文件处理命令</a><ul><li><a href=\"#_label2_0\">　一、创建空文件命令：touch</a></li><li><a href=\"#_label2_1\">　二、显示文件内容命令（适合内容较少的文件）：cat</a></li><li><a href=\"#_label2_2\">　三、反向显示文件内容命令（适合内容较少的文件）：tac</a></li><li><a href=\"#_label2_3\">　四、分页显示文件内容命令（不能向前翻页）：more</a></li><li><a href=\"#_label2_4\">　五、分页显示文件内容命令（可以前后翻页）：less</a></li><li><a href=\"#_label2_5\">　六、显示文件内容命令（指定行数）：head</a></li><li><a href=\"#_label2_6\">　七、反向文件内容命令（文件即时更新后也能动态显示，多用于日志文件显示）：tail</a></li></ul></li><li><a href=\"#_label3\">4、总结</a></li></ul></div>","slug":"随心记/Linux入门/文件命令操作md","published":1,"date":"2020-08-02T23:42:43.730Z","updated":"2020-08-02T23:42:59.781Z","_id":"ckdcz9iue0017rkamfjnncq9a","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"文件命令操作\"><a href=\"#文件命令操作\" class=\"headerlink\" title=\"文件命令操作\"></a>文件命令操作</h1><div id=\"navCategory\" style=\"color:#152e97;\"><p style=\"font-size:18px;\"><b>目录</b></p><ul><li><a href=\"#_label0\">1、Linux命令的普遍语法格式</a></li><li><a href=\"#_label1\">2、目录处理命令</a><ul><li><a href=\"#_label1_0\">　一、显示目录文件命令：ls</a></li><li><a href=\"#_label1_1\">　二、创建目录命令：mkdir</a></li><li><a href=\"#_label1_2\">　三、切换目录命令：cd</a></li><li><a href=\"#_label1_3\">　四、shell内置命令和外部命令的区别</a></li><li><a href=\"#_label1_4\">　五、显示当前目录命令：pwd</a></li><li><a href=\"#_label1_5\">　六、删除空目录命令：rmdir</a></li><li><a href=\"#_label1_6\">　七、复制文件或目录命令：cp</a></li><li><a href=\"#_label1_7\">　八、剪切文件或目录命令：mv</a></li><li><a href=\"#_label1_8\">　九、删除文件或目录命令：rm</a></li></ul></li><li><a href=\"#_label2\">3、文件处理命令</a><ul><li><a href=\"#_label2_0\">　一、创建空文件命令：touch</a></li><li><a href=\"#_label2_1\">　二、显示文件内容命令（适合内容较少的文件）：cat</a></li><li><a href=\"#_label2_2\">　三、反向显示文件内容命令（适合内容较少的文件）：tac</a></li><li><a href=\"#_label2_3\">　四、分页显示文件内容命令（不能向前翻页）：more</a></li><li><a href=\"#_label2_4\">　五、分页显示文件内容命令（可以前后翻页）：less</a></li><li><a href=\"#_label2_5\">　六、显示文件内容命令（指定行数）：head</a></li><li><a href=\"#_label2_6\">　七、反向文件内容命令（文件即时更新后也能动态显示，多用于日志文件显示）：tail</a></li></ul></li><li><a href=\"#_label3\">4、总结</a></li></ul></div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"文件命令操作\"><a href=\"#文件命令操作\" class=\"headerlink\" title=\"文件命令操作\"></a>文件命令操作</h1><div id=\"navCategory\" style=\"color:#152e97;\"><p style=\"font-size:18px;\"><b>目录</b></p><ul><li><a href=\"#_label0\">1、Linux命令的普遍语法格式</a></li><li><a href=\"#_label1\">2、目录处理命令</a><ul><li><a href=\"#_label1_0\">　一、显示目录文件命令：ls</a></li><li><a href=\"#_label1_1\">　二、创建目录命令：mkdir</a></li><li><a href=\"#_label1_2\">　三、切换目录命令：cd</a></li><li><a href=\"#_label1_3\">　四、shell内置命令和外部命令的区别</a></li><li><a href=\"#_label1_4\">　五、显示当前目录命令：pwd</a></li><li><a href=\"#_label1_5\">　六、删除空目录命令：rmdir</a></li><li><a href=\"#_label1_6\">　七、复制文件或目录命令：cp</a></li><li><a href=\"#_label1_7\">　八、剪切文件或目录命令：mv</a></li><li><a href=\"#_label1_8\">　九、删除文件或目录命令：rm</a></li></ul></li><li><a href=\"#_label2\">3、文件处理命令</a><ul><li><a href=\"#_label2_0\">　一、创建空文件命令：touch</a></li><li><a href=\"#_label2_1\">　二、显示文件内容命令（适合内容较少的文件）：cat</a></li><li><a href=\"#_label2_2\">　三、反向显示文件内容命令（适合内容较少的文件）：tac</a></li><li><a href=\"#_label2_3\">　四、分页显示文件内容命令（不能向前翻页）：more</a></li><li><a href=\"#_label2_4\">　五、分页显示文件内容命令（可以前后翻页）：less</a></li><li><a href=\"#_label2_5\">　六、显示文件内容命令（指定行数）：head</a></li><li><a href=\"#_label2_6\">　七、反向文件内容命令（文件即时更新后也能动态显示，多用于日志文件显示）：tail</a></li></ul></li><li><a href=\"#_label3\">4、总结</a></li></ul></div>"},{"title":"用户操作","auther":"ku jin","_content":"# 系统用户操作命令\n 1. useradd 选项 用户名\n\t1. 参数说明：\n\t选项:\n\t1. -c comment 指定一段注释性描述.\n\t-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n\t-g 用户组 指定用户所属的用户组。\n\t-G 用户组，用户组 指定用户所属的附加组。\n\t-s Shell文件 指定用户的登录Shell。\n\t-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。","source":"_posts/随心记/Linux入门/用户操作.md","raw":"---\ntitle: 用户操作 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - 用户操作 \n---\n# 系统用户操作命令\n 1. useradd 选项 用户名\n\t1. 参数说明：\n\t选项:\n\t1. -c comment 指定一段注释性描述.\n\t-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。\n\t-g 用户组 指定用户所属的用户组。\n\t-G 用户组，用户组 指定用户所属的附加组。\n\t-s Shell文件 指定用户的登录Shell。\n\t-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。","slug":"随心记/Linux入门/用户操作","published":1,"date":"2020-08-02T23:42:43.733Z","updated":"2020-08-02T23:42:59.782Z","_id":"ckdcz9ium0018rkam2sdi60zw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"系统用户操作命令\"><a href=\"#系统用户操作命令\" class=\"headerlink\" title=\"系统用户操作命令\"></a>系统用户操作命令</h1><ol>\n<li>useradd 选项 用户名<ol>\n<li>参数说明：<br>选项:</li>\n<li>-c comment 指定一段注释性描述.</li>\n</ol>\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。<br>-g 用户组 指定用户所属的用户组。<br>-G 用户组，用户组 指定用户所属的附加组。<br>-s Shell文件 指定用户的登录Shell。<br>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"系统用户操作命令\"><a href=\"#系统用户操作命令\" class=\"headerlink\" title=\"系统用户操作命令\"></a>系统用户操作命令</h1><ol>\n<li>useradd 选项 用户名<ol>\n<li>参数说明：<br>选项:</li>\n<li>-c comment 指定一段注释性描述.</li>\n</ol>\n-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。<br>-g 用户组 指定用户所属的用户组。<br>-G 用户组，用户组 指定用户所属的附加组。<br>-s Shell文件 指定用户的登录Shell。<br>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li>\n</ol>\n"},{"title":"防火墙的设置","auther":"ku jin","_content":"# 防火墙的设置\n\t保护服务器的安全\n\t设置防火墙规则\n\t开放80 22端口\n\t关闭防火墙\n# 相关命令\n\t1. 安装 yum install firewalld\n\t2. 启动 service firewalld start\n\t3. 检查状态 service firewalld status\n\t4. 关闭或禁用防火墙 service firewalld stop/disable","source":"_posts/随心记/Linux入门/防火墙的设置.md","raw":"---\ntitle: 防火墙的设置 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - 防火墙的设置 \n---\n# 防火墙的设置\n\t保护服务器的安全\n\t设置防火墙规则\n\t开放80 22端口\n\t关闭防火墙\n# 相关命令\n\t1. 安装 yum install firewalld\n\t2. 启动 service firewalld start\n\t3. 检查状态 service firewalld status\n\t4. 关闭或禁用防火墙 service firewalld stop/disable","slug":"随心记/Linux入门/防火墙的设置","published":1,"date":"2020-08-02T23:42:43.745Z","updated":"2020-08-02T23:42:59.782Z","_id":"ckdcz9iup0019rkam19j1051h","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"防火墙的设置\"><a href=\"#防火墙的设置\" class=\"headerlink\" title=\"防火墙的设置\"></a>防火墙的设置</h1><pre><code>保护服务器的安全\n设置防火墙规则\n开放80 22端口\n关闭防火墙</code></pre>\n<h1 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h1><pre><code>1. 安装 yum install firewalld\n2. 启动 service firewalld start\n3. 检查状态 service firewalld status\n4. 关闭或禁用防火墙 service firewalld stop/disable</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"防火墙的设置\"><a href=\"#防火墙的设置\" class=\"headerlink\" title=\"防火墙的设置\"></a>防火墙的设置</h1><pre><code>保护服务器的安全\n设置防火墙规则\n开放80 22端口\n关闭防火墙</code></pre>\n<h1 id=\"相关命令\"><a href=\"#相关命令\" class=\"headerlink\" title=\"相关命令\"></a>相关命令</h1><pre><code>1. 安装 yum install firewalld\n2. 启动 service firewalld start\n3. 检查状态 service firewalld status\n4. 关闭或禁用防火墙 service firewalld stop/disable</code></pre>\n"},{"title":"index","auther":"ku jin","_content":"# idea对项目创建创建的两种方式maven和gradle\n\n注意：idea对gradle的支持还不是很智能，对maven的依赖的好\n\n### maven\n\n\n\n## gradle","source":"_posts/随心记/Maven和Gradle/index.md","raw":"---\ntitle: index # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Maven和Gradle\ntags: # 标签=目标文件夹\n - index \n---\n# idea对项目创建创建的两种方式maven和gradle\n\n注意：idea对gradle的支持还不是很智能，对maven的依赖的好\n\n### maven\n\n\n\n## gradle","slug":"随心记/Maven和Gradle/index","published":1,"date":"2020-08-02T23:42:43.749Z","updated":"2020-08-02T23:42:59.783Z","_id":"ckdcz9iuy001arkam94tvd4hi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"idea对项目创建创建的两种方式maven和gradle\"><a href=\"#idea对项目创建创建的两种方式maven和gradle\" class=\"headerlink\" title=\"idea对项目创建创建的两种方式maven和gradle\"></a>idea对项目创建创建的两种方式maven和gradle</h1><p>注意：idea对gradle的支持还不是很智能，对maven的依赖的好</p>\n<h3 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h3><h2 id=\"gradle\"><a href=\"#gradle\" class=\"headerlink\" title=\"gradle\"></a>gradle</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"idea对项目创建创建的两种方式maven和gradle\"><a href=\"#idea对项目创建创建的两种方式maven和gradle\" class=\"headerlink\" title=\"idea对项目创建创建的两种方式maven和gradle\"></a>idea对项目创建创建的两种方式maven和gradle</h1><p>注意：idea对gradle的支持还不是很智能，对maven的依赖的好</p>\n<h3 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h3><h2 id=\"gradle\"><a href=\"#gradle\" class=\"headerlink\" title=\"gradle\"></a>gradle</h2>"},{"title":"错误问题","auther":"ku jin","_content":"# Redis (error) NOAUTH Authentication required.解决方法\n\n认证错误，没有设置密码\n\n```\nauth \"密码\"\n```\n\n","source":"_posts/随心记/Redis学习/错误问题.md","raw":"---\ntitle: 错误问题 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 错误问题 \n---\n# Redis (error) NOAUTH Authentication required.解决方法\n\n认证错误，没有设置密码\n\n```\nauth \"密码\"\n```\n\n","slug":"随心记/Redis学习/错误问题","published":1,"date":"2020-08-02T23:42:43.901Z","updated":"2020-08-02T23:42:59.792Z","_id":"ckdcz9jel001brkamduopdtx7","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis-error-NOAUTH-Authentication-required-解决方法\"><a href=\"#Redis-error-NOAUTH-Authentication-required-解决方法\" class=\"headerlink\" title=\"Redis (error) NOAUTH Authentication required.解决方法\"></a>Redis (error) NOAUTH Authentication required.解决方法</h1><p>认证错误，没有设置密码</p>\n<pre><code>auth \"密码\"</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Redis-error-NOAUTH-Authentication-required-解决方法\"><a href=\"#Redis-error-NOAUTH-Authentication-required-解决方法\" class=\"headerlink\" title=\"Redis (error) NOAUTH Authentication required.解决方法\"></a>Redis (error) NOAUTH Authentication required.解决方法</h1><p>认证错误，没有设置密码</p>\n<pre><code>auth &quot;密码&quot;</code></pre>\n"},{"title":"mysql数据库的安装与配置","auther":"ku jin","_content":"","source":"_posts/随心记/企业级电商项目/mysql数据库的安装与配置.md","raw":"---\ntitle: mysql数据库的安装与配置 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 企业级电商项目\ntags: # 标签=目标文件夹\n - mysql数据库的安装与配置 \n---\n","slug":"随心记/企业级电商项目/mysql数据库的安装与配置","published":1,"date":"2020-08-02T23:42:44.178Z","updated":"2020-08-02T23:42:59.800Z","_id":"ckdcz9jfg001crkamept4gt49","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"spring注解","auther":"ku jin","_content":"## spring注解\n### 定义配置\n\t1. @Configuration\n\t2. @ComoinentScan\n### 定义组件\n\t1. @Component\n\t2. @AutiWired\n\t3. @Autowired(required=false)\n### 自动装配歧义性\n\t1. @Primary\n\t2. @Qualifier\n\t3. @Resource\n### 分层架构中定义组件\n\t1. @Controller\n\t2. @Service\n\t3. @Repository\n\t4. @Repository\n### Spring测试环境\n\t1. @RunWith\n\t2. @ContextConfiguration\n### 使用xml启用组件扫描\n\t<comtext:component-scan base-package=\"com....\"/>","source":"_posts/随心记/Spring/spring注解.md","raw":"---\ntitle: spring注解 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Spring\ntags: # 标签=目标文件夹\n - spring注解 \n---\n## spring注解\n### 定义配置\n\t1. @Configuration\n\t2. @ComoinentScan\n### 定义组件\n\t1. @Component\n\t2. @AutiWired\n\t3. @Autowired(required=false)\n### 自动装配歧义性\n\t1. @Primary\n\t2. @Qualifier\n\t3. @Resource\n### 分层架构中定义组件\n\t1. @Controller\n\t2. @Service\n\t3. @Repository\n\t4. @Repository\n### Spring测试环境\n\t1. @RunWith\n\t2. @ContextConfiguration\n### 使用xml启用组件扫描\n\t<comtext:component-scan base-package=\"com....\"/>","slug":"随心记/Spring/spring注解","published":1,"date":"2020-08-02T23:42:44.111Z","updated":"2020-08-02T23:42:59.794Z","_id":"ckdcz9jfk001drkam1m6t9vem","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"spring注解\"><a href=\"#spring注解\" class=\"headerlink\" title=\"spring注解\"></a>spring注解</h2><h3 id=\"定义配置\"><a href=\"#定义配置\" class=\"headerlink\" title=\"定义配置\"></a>定义配置</h3><pre><code>1. @Configuration\n2. @ComoinentScan</code></pre>\n<h3 id=\"定义组件\"><a href=\"#定义组件\" class=\"headerlink\" title=\"定义组件\"></a>定义组件</h3><pre><code>1. @Component\n2. @AutiWired\n3. @Autowired(required=false)</code></pre>\n<h3 id=\"自动装配歧义性\"><a href=\"#自动装配歧义性\" class=\"headerlink\" title=\"自动装配歧义性\"></a>自动装配歧义性</h3><pre><code>1. @Primary\n2. @Qualifier\n3. @Resource</code></pre>\n<h3 id=\"分层架构中定义组件\"><a href=\"#分层架构中定义组件\" class=\"headerlink\" title=\"分层架构中定义组件\"></a>分层架构中定义组件</h3><pre><code>1. @Controller\n2. @Service\n3. @Repository\n4. @Repository</code></pre>\n<h3 id=\"Spring测试环境\"><a href=\"#Spring测试环境\" class=\"headerlink\" title=\"Spring测试环境\"></a>Spring测试环境</h3><pre><code>1. @RunWith\n2. @ContextConfiguration</code></pre>\n<h3 id=\"使用xml启用组件扫描\"><a href=\"#使用xml启用组件扫描\" class=\"headerlink\" title=\"使用xml启用组件扫描\"></a>使用xml启用组件扫描</h3><pre><code>&lt;comtext:component-scan base-package=\"com....\"/&gt;</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"spring注解\"><a href=\"#spring注解\" class=\"headerlink\" title=\"spring注解\"></a>spring注解</h2><h3 id=\"定义配置\"><a href=\"#定义配置\" class=\"headerlink\" title=\"定义配置\"></a>定义配置</h3><pre><code>1. @Configuration\n2. @ComoinentScan</code></pre>\n<h3 id=\"定义组件\"><a href=\"#定义组件\" class=\"headerlink\" title=\"定义组件\"></a>定义组件</h3><pre><code>1. @Component\n2. @AutiWired\n3. @Autowired(required=false)</code></pre>\n<h3 id=\"自动装配歧义性\"><a href=\"#自动装配歧义性\" class=\"headerlink\" title=\"自动装配歧义性\"></a>自动装配歧义性</h3><pre><code>1. @Primary\n2. @Qualifier\n3. @Resource</code></pre>\n<h3 id=\"分层架构中定义组件\"><a href=\"#分层架构中定义组件\" class=\"headerlink\" title=\"分层架构中定义组件\"></a>分层架构中定义组件</h3><pre><code>1. @Controller\n2. @Service\n3. @Repository\n4. @Repository</code></pre>\n<h3 id=\"Spring测试环境\"><a href=\"#Spring测试环境\" class=\"headerlink\" title=\"Spring测试环境\"></a>Spring测试环境</h3><pre><code>1. @RunWith\n2. @ContextConfiguration</code></pre>\n<h3 id=\"使用xml启用组件扫描\"><a href=\"#使用xml启用组件扫描\" class=\"headerlink\" title=\"使用xml启用组件扫描\"></a>使用xml启用组件扫描</h3><pre><code>&lt;comtext:component-scan base-package=&quot;com....&quot;/&gt;</code></pre>\n"},{"title":"iptables的学习","auther":"ku jin","_content":"# iptables\n## 什么是iptables\n\t常见与linux系统的应用层防火墙工具\n## 什么是Netfilter?\n\tNetfilter是Linux操作系统核心层内部的一个数据包处理模块\n\t什么是Hook point>\n\t\t数据包在Netfilter中的挂载点\n\t\t（PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）\n## iptables规则组成\n\t组成部分：四张表+五条链（Hook point）+规则\n\t四张表：\n\t\tfilter表:访问控制，规则匹配\n\t\tnat表：地址转发\n\t\tmangle表，\n\t\traw表\n\t五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n\t数据包访问控制：ACCEPT,DROP,REJECT\n\t数据包改写:SNAT,DNAT\n\t信息记录：LOG\n## iptables 配置 场景一\n\t》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n\t》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n\t》其他未被允许的端口则禁止访问","source":"_posts/随心记/企业级电商项目/iptables的学习.md","raw":"---\ntitle: iptables的学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 企业级电商项目\ntags: # 标签=目标文件夹\n - iptables的学习 \n---\n# iptables\n## 什么是iptables\n\t常见与linux系统的应用层防火墙工具\n## 什么是Netfilter?\n\tNetfilter是Linux操作系统核心层内部的一个数据包处理模块\n\t什么是Hook point>\n\t\t数据包在Netfilter中的挂载点\n\t\t（PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）\n## iptables规则组成\n\t组成部分：四张表+五条链（Hook point）+规则\n\t四张表：\n\t\tfilter表:访问控制，规则匹配\n\t\tnat表：地址转发\n\t\tmangle表，\n\t\traw表\n\t五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n\t数据包访问控制：ACCEPT,DROP,REJECT\n\t数据包改写:SNAT,DNAT\n\t信息记录：LOG\n## iptables 配置 场景一\n\t》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n\t》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n\t》其他未被允许的端口则禁止访问","slug":"随心记/企业级电商项目/iptables的学习","published":1,"date":"2020-08-02T23:42:44.157Z","updated":"2020-08-02T23:42:59.798Z","_id":"ckdcz9jfl001erkam2qbv2on8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h1><h2 id=\"什么是iptables\"><a href=\"#什么是iptables\" class=\"headerlink\" title=\"什么是iptables\"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre>\n<h2 id=\"什么是Netfilter\"><a href=\"#什么是Netfilter\" class=\"headerlink\" title=\"什么是Netfilter?\"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块\n什么是Hook point&gt;\n    数据包在Netfilter中的挂载点\n    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre>\n<h2 id=\"iptables规则组成\"><a href=\"#iptables规则组成\" class=\"headerlink\" title=\"iptables规则组成\"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则\n四张表：\n    filter表:访问控制，规则匹配\n    nat表：地址转发\n    mangle表，\n    raw表\n五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n数据包访问控制：ACCEPT,DROP,REJECT\n数据包改写:SNAT,DNAT\n信息记录：LOG</code></pre>\n<h2 id=\"iptables-配置-场景一\"><a href=\"#iptables-配置-场景一\" class=\"headerlink\" title=\"iptables 配置 场景一\"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n》其他未被允许的端口则禁止访问</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"iptables\"><a href=\"#iptables\" class=\"headerlink\" title=\"iptables\"></a>iptables</h1><h2 id=\"什么是iptables\"><a href=\"#什么是iptables\" class=\"headerlink\" title=\"什么是iptables\"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre>\n<h2 id=\"什么是Netfilter\"><a href=\"#什么是Netfilter\" class=\"headerlink\" title=\"什么是Netfilter?\"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块\n什么是Hook point&gt;\n    数据包在Netfilter中的挂载点\n    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre>\n<h2 id=\"iptables规则组成\"><a href=\"#iptables规则组成\" class=\"headerlink\" title=\"iptables规则组成\"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则\n四张表：\n    filter表:访问控制，规则匹配\n    nat表：地址转发\n    mangle表，\n    raw表\n五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING\n数据包访问控制：ACCEPT,DROP,REJECT\n数据包改写:SNAT,DNAT\n信息记录：LOG</code></pre>\n<h2 id=\"iptables-配置-场景一\"><a href=\"#iptables-配置-场景一\" class=\"headerlink\" title=\"iptables 配置 场景一\"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问\n》允许对所有的地址开放本机的基于ICMP协议的数据包访问\n》其他未被允许的端口则禁止访问</code></pre>\n"},{"title":"LINUX设置防火墙","auther":"ku jin","_content":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\nservice  iptables  start          开启防火墙\n\nservice  iptables  stop          关闭防火墙\n\nservice  iptables  restart        重启防火墙\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent        ##永久开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent  ##永久移除ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent      ##永久添加<span class=\"token number\">80</span>端口\n\niptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的\n\nman firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助\n\nsystemctl stop firewalld                  ##关闭防火墙\n\nsystemctl start firewalld                  ##开启防火墙\n\nsystemctl status firewalld              ##查看防火墙状态\n\nsystemctl restart firewalld              ##重启防火墙\n\nsystemctl disable firewalld              ##开机关闭防火墙，即永久关闭\n","source":"_posts/随心记/企业级电商项目/LINUX设置防火墙.md","raw":"---\ntitle: LINUX设置防火墙 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 企业级电商项目\ntags: # 标签=目标文件夹\n - LINUX设置防火墙 \n---\n<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\nservice  iptables  start          开启防火墙\n\nservice  iptables  stop          关闭防火墙\n\nservice  iptables  restart        重启防火墙\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent        ##永久开放ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">--</span>permanent  ##永久移除ftp服务\n\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">--</span>permanent      ##永久添加<span class=\"token number\">80</span>端口\n\niptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的\n\nman firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助\n\nsystemctl stop firewalld                  ##关闭防火墙\n\nsystemctl start firewalld                  ##开启防火墙\n\nsystemctl status firewalld              ##查看防火墙状态\n\nsystemctl restart firewalld              ##重启防火墙\n\nsystemctl disable firewalld              ##开机关闭防火墙，即永久关闭\n","slug":"随心记/企业级电商项目/LINUX设置防火墙","published":1,"date":"2020-08-02T23:42:44.164Z","updated":"2020-08-02T23:42:59.799Z","_id":"ckdcz9jfm001frkam6zcvb91f","comments":1,"layout":"post","photos":[],"link":"","content":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\n<p>service  iptables  start          开启防火墙</p>\n<p>service  iptables  stop          关闭防火墙</p>\n<p>service  iptables  restart        重启防火墙</p>\n</code><p><code class=\"  language-undefined\"><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></p></pre><p></p>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent        ##永久开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent  ##永久移除ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">–</span>permanent      ##永久添加<span class=\"token number\">80</span>端口</p>\n<p>iptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p>\n<p>man firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助</p>\n<p>systemctl stop firewalld                  ##关闭防火墙</p>\n<p>systemctl start firewalld                  ##开启防火墙</p>\n<p>systemctl status firewalld              ##查看防火墙状态</p>\n<p>systemctl restart firewalld              ##重启防火墙</p>\n<p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p>\n</code></pre></article></section><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<section class=\"ouvJEz\"><h1 class=\"_1RuRku\">Linux设置防火墙</h1><div class=\"rEsl9f\"><div class=\"s-dsoj\"><time datetime=\"2019-02-25T03:01:08.000Z\">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class=\"_2rhmJa\"><p>Centos 7之前的防火墙基本都是修改iptables</p>\n<pre class=\"line-numbers  language-undefined\"><code class=\"  language-undefined\">\nservice  iptables  status        查看防火墙状态\n\n<p>service  iptables  start          开启防火墙</p>\n<p>service  iptables  stop          关闭防火墙</p>\n<p>service  iptables  restart        重启防火墙</p>\n<p><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>\n<p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p>\n<p>其常用命令为：</p>\n<pre class=\"line-numbers  language-csharp\"><code class=\"  language-csharp\">\nfirewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">--</span>state                          ##查看防火墙运行状态，是否是running\n\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>zones                  ##列出支持的zone</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">get</span><span class=\"token operator\">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>list<span class=\"token operator\">-</span>ports                    ##列出开放的端口</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span>query<span class=\"token operator\">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp                            ##临时开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent        ##永久开放ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">remove</span><span class=\"token operator\">-</span>service<span class=\"token operator\">=</span>ftp <span class=\"token operator\">–</span>permanent  ##永久移除ftp服务</p>\n<p>firewall<span class=\"token operator\">-</span>cmd <span class=\"token operator\">–</span><span class=\"token keyword\">add</span><span class=\"token operator\">-</span>port<span class=\"token operator\">=</span><span class=\"token number\">80</span><span class=\"token operator\">/</span>tcp <span class=\"token operator\">–</span>permanent      ##永久添加<span class=\"token number\">80</span>端口</p>\n<p>iptables <span class=\"token operator\">-</span>L <span class=\"token operator\">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p>\n<p>man firewall<span class=\"token operator\">-</span>cmd                            ##查看帮助</p>\n<p>systemctl stop firewalld                  ##关闭防火墙</p>\n<p>systemctl start firewalld                  ##开启防火墙</p>\n<p>systemctl status firewalld              ##查看防火墙状态</p>\n<p>systemctl restart firewalld              ##重启防火墙</p>\n<p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p>\n"},{"title":"vsftpd","auther":"ku jin","_content":"# 简介\n\tvsftpd是“very secure FTP daemon”的缩写是一个完全免费，开放源代码的ftp服务器软件\n# 特点\n\tvsftpd是一款Linux发行版中最受推崇的ftp服务器程序，小巧轻快，安全易用，支持带宽限制等功能\n# 安装\n\t1. 执行 yum -y install vsftpd\n\t\t1. 默认配置文件在/etc/vsftpd/vsftpd.conf\n\t2. 创建虚拟用户\n\t\t1. 选择根或者用户目录下创建ftp文件夹：mkdir ftpfile,如：/ftpfile\n\t\t2. 添加匿名用户：useradd ftpuser -d /ftpfile -s /sbin/nologin\n\t\t3. 修改ftpfile权限：chown -R ftpuser.ftpuser /ftpfie\n\t\t4. 重设ftpuser密码：password ftpuser(12346)\n\t3. 配置\n\t\t1. cd /etc/vsftpd\n\t\t2. sudo vim chroot_list\n\t\t3. 把刚才新增的虚拟用户添加到此配置文件中，后续要引用\n\t\t4. :wq 保存退出\n\t\t5. sudo vim /etc/selinux/config,修改SELINUX=disabled\n\t\t6. :wq 保存退出\n\t\t\t如果遇到550拒绝访问执行sudo setsebool -P ftp_home_dir 1\n\t\t\t然后重启linux服务区，执行reboot命令\n\t\t7. sudo vim /etc/vsftpd/vsftpd.conf\n\t\t8. 添加配置或更新配置\n\t4. 防火墙配置\n\t\t1. sudo vim /etc/sysconfig/iptables\n\t\t2.1. -A INPUT -p TCP --dport 61001:62000 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT\n\n\t\t2.1. -A INPUT -p TCP --dport 20 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 20 -j ACCEPT\t\n\n\t\t2.1. -A INPUT -p TCP --dport 21 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 21 -j ACCEPT\t\n\t\t3. :wq 保存退出\n\t\t4. sudo service iptables restart 执行命令重启防火墙\n# vsftpd验证\n\t1. 执行 sodo service vsftpd restart\n\t2. 执行ifconfig 查看运行vsftpd服务器的ip地址\n\t3. 打开浏览器访问：ftp://10.211.55.6\n\t4. 输入之前创建的ftp匿名用户账号和密码\n\t5. 通过ftp客户端软件\n# 常用命令\n\t启动 sudo service vsftpd start\n\t关闭 sudo service vsftpd stop\n\t重启 sudo service vsftpd restart","source":"_posts/随心记/企业级电商项目/vsftpd.md","raw":"---\ntitle: vsftpd # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 企业级电商项目\ntags: # 标签=目标文件夹\n - vsftpd \n---\n# 简介\n\tvsftpd是“very secure FTP daemon”的缩写是一个完全免费，开放源代码的ftp服务器软件\n# 特点\n\tvsftpd是一款Linux发行版中最受推崇的ftp服务器程序，小巧轻快，安全易用，支持带宽限制等功能\n# 安装\n\t1. 执行 yum -y install vsftpd\n\t\t1. 默认配置文件在/etc/vsftpd/vsftpd.conf\n\t2. 创建虚拟用户\n\t\t1. 选择根或者用户目录下创建ftp文件夹：mkdir ftpfile,如：/ftpfile\n\t\t2. 添加匿名用户：useradd ftpuser -d /ftpfile -s /sbin/nologin\n\t\t3. 修改ftpfile权限：chown -R ftpuser.ftpuser /ftpfie\n\t\t4. 重设ftpuser密码：password ftpuser(12346)\n\t3. 配置\n\t\t1. cd /etc/vsftpd\n\t\t2. sudo vim chroot_list\n\t\t3. 把刚才新增的虚拟用户添加到此配置文件中，后续要引用\n\t\t4. :wq 保存退出\n\t\t5. sudo vim /etc/selinux/config,修改SELINUX=disabled\n\t\t6. :wq 保存退出\n\t\t\t如果遇到550拒绝访问执行sudo setsebool -P ftp_home_dir 1\n\t\t\t然后重启linux服务区，执行reboot命令\n\t\t7. sudo vim /etc/vsftpd/vsftpd.conf\n\t\t8. 添加配置或更新配置\n\t4. 防火墙配置\n\t\t1. sudo vim /etc/sysconfig/iptables\n\t\t2.1. -A INPUT -p TCP --dport 61001:62000 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT\n\n\t\t2.1. -A INPUT -p TCP --dport 20 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 20 -j ACCEPT\t\n\n\t\t2.1. -A INPUT -p TCP --dport 21 -j ACCEPT\n\t\t2.2. -A OUTPUT -p TCP --sport 21 -j ACCEPT\t\n\t\t3. :wq 保存退出\n\t\t4. sudo service iptables restart 执行命令重启防火墙\n# vsftpd验证\n\t1. 执行 sodo service vsftpd restart\n\t2. 执行ifconfig 查看运行vsftpd服务器的ip地址\n\t3. 打开浏览器访问：ftp://10.211.55.6\n\t4. 输入之前创建的ftp匿名用户账号和密码\n\t5. 通过ftp客户端软件\n# 常用命令\n\t启动 sudo service vsftpd start\n\t关闭 sudo service vsftpd stop\n\t重启 sudo service vsftpd restart","slug":"随心记/企业级电商项目/vsftpd","published":1,"date":"2020-08-02T23:42:44.179Z","updated":"2020-08-02T23:42:59.800Z","_id":"ckdcz9jfm001grkam81ljbe7w","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>vsftpd是“very secure FTP daemon”的缩写是一个完全免费，开放源代码的ftp服务器软件</code></pre>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><pre><code>vsftpd是一款Linux发行版中最受推崇的ftp服务器程序，小巧轻快，安全易用，支持带宽限制等功能</code></pre>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>1. 执行 yum -y install vsftpd\n    1. 默认配置文件在/etc/vsftpd/vsftpd.conf\n2. 创建虚拟用户\n    1. 选择根或者用户目录下创建ftp文件夹：mkdir ftpfile,如：/ftpfile\n    2. 添加匿名用户：useradd ftpuser -d /ftpfile -s /sbin/nologin\n    3. 修改ftpfile权限：chown -R ftpuser.ftpuser /ftpfie\n    4. 重设ftpuser密码：password ftpuser(12346)\n3. 配置\n    1. cd /etc/vsftpd\n    2. sudo vim chroot_list\n    3. 把刚才新增的虚拟用户添加到此配置文件中，后续要引用\n    4. :wq 保存退出\n    5. sudo vim /etc/selinux/config,修改SELINUX=disabled\n    6. :wq 保存退出\n        如果遇到550拒绝访问执行sudo setsebool -P ftp_home_dir 1\n        然后重启linux服务区，执行reboot命令\n    7. sudo vim /etc/vsftpd/vsftpd.conf\n    8. 添加配置或更新配置\n4. 防火墙配置\n    1. sudo vim /etc/sysconfig/iptables\n    2.1. -A INPUT -p TCP --dport 61001:62000 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT\n\n    2.1. -A INPUT -p TCP --dport 20 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 20 -j ACCEPT    \n\n    2.1. -A INPUT -p TCP --dport 21 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 21 -j ACCEPT    \n    3. :wq 保存退出\n    4. sudo service iptables restart 执行命令重启防火墙</code></pre>\n<h1 id=\"vsftpd验证\"><a href=\"#vsftpd验证\" class=\"headerlink\" title=\"vsftpd验证\"></a>vsftpd验证</h1><pre><code>1. 执行 sodo service vsftpd restart\n2. 执行ifconfig 查看运行vsftpd服务器的ip地址\n3. 打开浏览器访问：ftp://10.211.55.6\n4. 输入之前创建的ftp匿名用户账号和密码\n5. 通过ftp客户端软件</code></pre>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><pre><code>启动 sudo service vsftpd start\n关闭 sudo service vsftpd stop\n重启 sudo service vsftpd restart</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><pre><code>vsftpd是“very secure FTP daemon”的缩写是一个完全免费，开放源代码的ftp服务器软件</code></pre>\n<h1 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h1><pre><code>vsftpd是一款Linux发行版中最受推崇的ftp服务器程序，小巧轻快，安全易用，支持带宽限制等功能</code></pre>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><pre><code>1. 执行 yum -y install vsftpd\n    1. 默认配置文件在/etc/vsftpd/vsftpd.conf\n2. 创建虚拟用户\n    1. 选择根或者用户目录下创建ftp文件夹：mkdir ftpfile,如：/ftpfile\n    2. 添加匿名用户：useradd ftpuser -d /ftpfile -s /sbin/nologin\n    3. 修改ftpfile权限：chown -R ftpuser.ftpuser /ftpfie\n    4. 重设ftpuser密码：password ftpuser(12346)\n3. 配置\n    1. cd /etc/vsftpd\n    2. sudo vim chroot_list\n    3. 把刚才新增的虚拟用户添加到此配置文件中，后续要引用\n    4. :wq 保存退出\n    5. sudo vim /etc/selinux/config,修改SELINUX=disabled\n    6. :wq 保存退出\n        如果遇到550拒绝访问执行sudo setsebool -P ftp_home_dir 1\n        然后重启linux服务区，执行reboot命令\n    7. sudo vim /etc/vsftpd/vsftpd.conf\n    8. 添加配置或更新配置\n4. 防火墙配置\n    1. sudo vim /etc/sysconfig/iptables\n    2.1. -A INPUT -p TCP --dport 61001:62000 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT\n\n    2.1. -A INPUT -p TCP --dport 20 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 20 -j ACCEPT    \n\n    2.1. -A INPUT -p TCP --dport 21 -j ACCEPT\n    2.2. -A OUTPUT -p TCP --sport 21 -j ACCEPT    \n    3. :wq 保存退出\n    4. sudo service iptables restart 执行命令重启防火墙</code></pre>\n<h1 id=\"vsftpd验证\"><a href=\"#vsftpd验证\" class=\"headerlink\" title=\"vsftpd验证\"></a>vsftpd验证</h1><pre><code>1. 执行 sodo service vsftpd restart\n2. 执行ifconfig 查看运行vsftpd服务器的ip地址\n3. 打开浏览器访问：ftp://10.211.55.6\n4. 输入之前创建的ftp匿名用户账号和密码\n5. 通过ftp客户端软件</code></pre>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><pre><code>启动 sudo service vsftpd start\n关闭 sudo service vsftpd stop\n重启 sudo service vsftpd restart</code></pre>\n"},{"title":"框架搭建","auther":"ku jin","_content":"## Spring Boot +Spring Security\n1. [快速搭建spring项目官方网址](https://start.spring.io)\n2. 通过idea快速创建springboot<br>\n\t- file->new Project->Spring Intializr\n## 常见注解\n\t@SpringBootApplication：\n\t@RestController:相当于@ResponseBody","source":"_posts/随心记/企业级权限管理/框架搭建.md","raw":"---\ntitle: 框架搭建 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 企业级权限管理\ntags: # 标签=目标文件夹\n - 框架搭建 \n---\n## Spring Boot +Spring Security\n1. [快速搭建spring项目官方网址](https://start.spring.io)\n2. 通过idea快速创建springboot<br>\n\t- file->new Project->Spring Intializr\n## 常见注解\n\t@SpringBootApplication：\n\t@RestController:相当于@ResponseBody","slug":"随心记/企业级权限管理/框架搭建","published":1,"date":"2020-08-02T23:42:44.154Z","updated":"2020-08-02T23:42:59.798Z","_id":"ckdcz9jfu001hrkam7wc59z0i","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Spring-Boot-Spring-Security\"><a href=\"#Spring-Boot-Spring-Security\" class=\"headerlink\" title=\"Spring Boot +Spring Security\"></a>Spring Boot +Spring Security</h2><ol>\n<li><a href=\"https://start.spring.io/\">快速搭建spring项目官方网址</a></li>\n<li>通过idea快速创建springboot<br><ul>\n<li>file-&gt;new Project-&gt;Spring Intializr<h2 id=\"常见注解\"><a href=\"#常见注解\" class=\"headerlink\" title=\"常见注解\"></a>常见注解</h2>@SpringBootApplication：<br>@RestController:相当于@ResponseBody</li>\n</ul>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Spring-Boot-Spring-Security\"><a href=\"#Spring-Boot-Spring-Security\" class=\"headerlink\" title=\"Spring Boot +Spring Security\"></a>Spring Boot +Spring Security</h2><ol>\n<li><a href=\"https://start.spring.io/\">快速搭建spring项目官方网址</a></li>\n<li>通过idea快速创建springboot<br><ul>\n<li>file-&gt;new Project-&gt;Spring Intializr<h2 id=\"常见注解\"><a href=\"#常见注解\" class=\"headerlink\" title=\"常见注解\"></a>常见注解</h2>@SpringBootApplication：<br>@RestController:相当于@ResponseBody</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Spring Framework简介","auther":"ku jin","_content":"[TOC]\n\n官方网址：https://spring.io/projects\n\n参考网址：https://spring.io/projects/spring-framework\n\nclone 地址：https://github.com/kujin521/spring\n\n# Spring Framework\n\n> The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n>\n> Spring 框架为现代基于 java 的企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。\n>\n> A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.\n>\n> Spring 的一个关键元素是应用程序级别的基础设施支持: Spring 关注企业应用程序的\"管道\"，这样团队就可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。\n\n## 功能\n\n- 核心技术: 依赖注入、事件、资源、 i18n、验证、数据绑定、类型转换、 SpEL、 AOP。\n\n- 测试: 模拟对象，TestContext 框架，Spring MVC Test，WebTestClient。\n- 数据访问: 事务，DAO 支持，JDBC，ORM，封送 XML。\n- 集成: 远程处理、 JMS、 JCA、 JMX、电子邮件、任务、调度、缓存。\n- 语言: Kotlin，Groovy，动态语言。\n\n","source":"_posts/随心记/Spring/SPring源码学习/Spring Framework简介.md","raw":"---\ntitle: Spring Framework简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Spring\ntags: # 标签=目标文件夹\n - Spring Framework简介 \n---\n[TOC]\n\n官方网址：https://spring.io/projects\n\n参考网址：https://spring.io/projects/spring-framework\n\nclone 地址：https://github.com/kujin521/spring\n\n# Spring Framework\n\n> The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n>\n> Spring 框架为现代基于 java 的企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。\n>\n> A key element of Spring is infrastructural support at the application level: Spring focuses on the \"plumbing\" of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.\n>\n> Spring 的一个关键元素是应用程序级别的基础设施支持: Spring 关注企业应用程序的\"管道\"，这样团队就可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。\n\n## 功能\n\n- 核心技术: 依赖注入、事件、资源、 i18n、验证、数据绑定、类型转换、 SpEL、 AOP。\n\n- 测试: 模拟对象，TestContext 框架，Spring MVC Test，WebTestClient。\n- 数据访问: 事务，DAO 支持，JDBC，ORM，封送 XML。\n- 集成: 远程处理、 JMS、 JCA、 JMX、电子邮件、任务、调度、缓存。\n- 语言: Kotlin，Groovy，动态语言。\n\n","slug":"随心记/Spring/SPring源码学习/Spring Framework简介","published":1,"date":"2020-08-02T23:42:44.133Z","updated":"2020-08-02T23:42:59.796Z","_id":"ckdcz9jiz001irkamdt0kdfmk","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<p>官方网址：<a href=\"https://spring.io/projects\">https://spring.io/projects</a></p>\n<p>参考网址：<a href=\"https://spring.io/projects/spring-framework\">https://spring.io/projects/spring-framework</a></p>\n<p>clone 地址：<a href=\"https://github.com/kujin521/spring\">https://github.com/kujin521/spring</a></p>\n<h1 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h1><blockquote>\n<p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p>\n<p>Spring 框架为现代基于 java 的企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。</p>\n<p>A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>\n<p>Spring 的一个关键元素是应用程序级别的基础设施支持: Spring 关注企业应用程序的”管道”，这样团队就可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。</p>\n</blockquote>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li><p>核心技术: 依赖注入、事件、资源、 i18n、验证、数据绑定、类型转换、 SpEL、 AOP。</p>\n</li>\n<li><p>测试: 模拟对象，TestContext 框架，Spring MVC Test，WebTestClient。</p>\n</li>\n<li><p>数据访问: 事务，DAO 支持，JDBC，ORM，封送 XML。</p>\n</li>\n<li><p>集成: 远程处理、 JMS、 JCA、 JMX、电子邮件、任务、调度、缓存。</p>\n</li>\n<li><p>语言: Kotlin，Groovy，动态语言。</p>\n</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<p>官方网址：<a href=\"https://spring.io/projects\">https://spring.io/projects</a></p>\n<p>参考网址：<a href=\"https://spring.io/projects/spring-framework\">https://spring.io/projects/spring-framework</a></p>\n<p>clone 地址：<a href=\"https://github.com/kujin521/spring\">https://github.com/kujin521/spring</a></p>\n<h1 id=\"Spring-Framework\"><a href=\"#Spring-Framework\" class=\"headerlink\" title=\"Spring Framework\"></a>Spring Framework</h1><blockquote>\n<p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p>\n<p>Spring 框架为现代基于 java 的企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。</p>\n<p>A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p>\n<p>Spring 的一个关键元素是应用程序级别的基础设施支持: Spring 关注企业应用程序的”管道”，这样团队就可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。</p>\n</blockquote>\n<h2 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h2><ul>\n<li><p>核心技术: 依赖注入、事件、资源、 i18n、验证、数据绑定、类型转换、 SpEL、 AOP。</p>\n</li>\n<li><p>测试: 模拟对象，TestContext 框架，Spring MVC Test，WebTestClient。</p>\n</li>\n<li><p>数据访问: 事务，DAO 支持，JDBC，ORM，封送 XML。</p>\n</li>\n<li><p>集成: 远程处理、 JMS、 JCA、 JMX、电子邮件、任务、调度、缓存。</p>\n</li>\n<li><p>语言: Kotlin，Groovy，动态语言。</p>\n</li>\n</ul>\n"},{"title":"问题总结","auther":"ku jin","_content":"[TOC]\n\n# idea下载spring源码编译不通过\n\n## 找不到xx.xx.jar\n\n> 解决方式：查看连接，发现确实没有这个jar，由于sping使用的是最新版本的依赖，尝试使用旧版本，发现旧版本有相应的jar，但版本不一致，缺少很多包。\n>\n> 怀疑是网络问题，分别加上阿里云maven和使用源代码，分别编译，科学上网，结论：不行！\n>\n> 怀疑是第三方还没有公开最新jar，果断放弃，果然第二天，再次编译，成功下载jar，查看昨天的网址发现有了jar，**编译通过**！！\n>\n> http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/\n>\n> ![image-20200709140540967](D:\\OneDrive\\随心记\\Spring\\images\\image-20200709140540967.png)\n\n","source":"_posts/随心记/Spring/SPring源码学习/问题总结.md","raw":"---\ntitle: 问题总结 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Spring\ntags: # 标签=目标文件夹\n - 问题总结 \n---\n[TOC]\n\n# idea下载spring源码编译不通过\n\n## 找不到xx.xx.jar\n\n> 解决方式：查看连接，发现确实没有这个jar，由于sping使用的是最新版本的依赖，尝试使用旧版本，发现旧版本有相应的jar，但版本不一致，缺少很多包。\n>\n> 怀疑是网络问题，分别加上阿里云maven和使用源代码，分别编译，科学上网，结论：不行！\n>\n> 怀疑是第三方还没有公开最新jar，果断放弃，果然第二天，再次编译，成功下载jar，查看昨天的网址发现有了jar，**编译通过**！！\n>\n> http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/\n>\n> ![image-20200709140540967](D:\\OneDrive\\随心记\\Spring\\images\\image-20200709140540967.png)\n\n","slug":"随心记/Spring/SPring源码学习/问题总结","published":1,"date":"2020-08-02T23:42:44.143Z","updated":"2020-08-02T23:42:59.797Z","_id":"ckdcz9jj0001jrkam4ni21hkz","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"idea下载spring源码编译不通过\"><a href=\"#idea下载spring源码编译不通过\" class=\"headerlink\" title=\"idea下载spring源码编译不通过\"></a>idea下载spring源码编译不通过</h1><h2 id=\"找不到xx-xx-jar\"><a href=\"#找不到xx-xx-jar\" class=\"headerlink\" title=\"找不到xx.xx.jar\"></a>找不到xx.xx.jar</h2><blockquote>\n<p>解决方式：查看连接，发现确实没有这个jar，由于sping使用的是最新版本的依赖，尝试使用旧版本，发现旧版本有相应的jar，但版本不一致，缺少很多包。</p>\n<p>怀疑是网络问题，分别加上阿里云maven和使用源代码，分别编译，科学上网，结论：不行！</p>\n<p>怀疑是第三方还没有公开最新jar，果断放弃，果然第二天，再次编译，成功下载jar，查看昨天的网址发现有了jar，<strong>编译通过</strong>！！</p>\n<p><a href=\"http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/\">http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/</a></p>\n<p><img src=\"D:\\OneDrive\\随心记\\Spring\\images\\image-20200709140540967.png\" alt=\"image-20200709140540967\"></p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"idea下载spring源码编译不通过\"><a href=\"#idea下载spring源码编译不通过\" class=\"headerlink\" title=\"idea下载spring源码编译不通过\"></a>idea下载spring源码编译不通过</h1><h2 id=\"找不到xx-xx-jar\"><a href=\"#找不到xx-xx-jar\" class=\"headerlink\" title=\"找不到xx.xx.jar\"></a>找不到xx.xx.jar</h2><blockquote>\n<p>解决方式：查看连接，发现确实没有这个jar，由于sping使用的是最新版本的依赖，尝试使用旧版本，发现旧版本有相应的jar，但版本不一致，缺少很多包。</p>\n<p>怀疑是网络问题，分别加上阿里云maven和使用源代码，分别编译，科学上网，结论：不行！</p>\n<p>怀疑是第三方还没有公开最新jar，果断放弃，果然第二天，再次编译，成功下载jar，查看昨天的网址发现有了jar，<strong>编译通过</strong>！！</p>\n<p><a href=\"http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/\">http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/</a></p>\n<p><img src=\"D:\\OneDrive\\随心记\\Spring\\images\\image-20200709140540967.png\" alt=\"image-20200709140540967\"></p>\n</blockquote>\n"},{"title":"1-1 入门学习","auther":"ku jin","_content":"# 配置Mybatis-Spring项目\n\n[官方文档](http://mybatis.org/spring/zh/index.html)\n\n官方实例代码：https://github.com/mybatis/jpetstore-6.git\n\n## 1.配置数据源（简单版）\n\n```xml\n<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.SimpleDriverDataSource\">\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"123456\"/>\n        <property name=\"driverClass\" value=\"com.mysql.cj.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/chapter12\"/>\n    </bean>\n```\n\n## 2.配置SqlSessionFactory\n\n","source":"_posts/随心记/Spring/Spring-Mybatis项目/1-1 入门学习.md","raw":"---\ntitle: 1-1 入门学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Spring\ntags: # 标签=目标文件夹\n - 1-1 入门学习 \n---\n# 配置Mybatis-Spring项目\n\n[官方文档](http://mybatis.org/spring/zh/index.html)\n\n官方实例代码：https://github.com/mybatis/jpetstore-6.git\n\n## 1.配置数据源（简单版）\n\n```xml\n<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.SimpleDriverDataSource\">\n        <property name=\"username\" value=\"root\"/>\n        <property name=\"password\" value=\"123456\"/>\n        <property name=\"driverClass\" value=\"com.mysql.cj.jdbc.Driver\"/>\n        <property name=\"url\" value=\"jdbc:mysql://localhost:3306/chapter12\"/>\n    </bean>\n```\n\n## 2.配置SqlSessionFactory\n\n","slug":"随心记/Spring/Spring-Mybatis项目/1-1 入门学习","published":1,"date":"2020-08-02T23:42:44.125Z","updated":"2020-08-02T23:42:59.795Z","_id":"ckdcz9jj1001krkamhh4a1s6n","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"配置Mybatis-Spring项目\"><a href=\"#配置Mybatis-Spring项目\" class=\"headerlink\" title=\"配置Mybatis-Spring项目\"></a>配置Mybatis-Spring项目</h1><p><a href=\"http://mybatis.org/spring/zh/index.html\">官方文档</a></p>\n<p>官方实例代码：<a href=\"https://github.com/mybatis/jpetstore-6.git\">https://github.com/mybatis/jpetstore-6.git</a></p>\n<h2 id=\"1-配置数据源（简单版）\"><a href=\"#1-配置数据源（简单版）\" class=\"headerlink\" title=\"1.配置数据源（简单版）\"></a>1.配置数据源（简单版）</h2><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dataSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.jdbc.datasource.SimpleDriverDataSource<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>123456<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>driverClass<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.mysql.cj.jdbc.Driver<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jdbc:mysql://localhost:3306/chapter12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"2-配置SqlSessionFactory\"><a href=\"#2-配置SqlSessionFactory\" class=\"headerlink\" title=\"2.配置SqlSessionFactory\"></a>2.配置SqlSessionFactory</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"配置Mybatis-Spring项目\"><a href=\"#配置Mybatis-Spring项目\" class=\"headerlink\" title=\"配置Mybatis-Spring项目\"></a>配置Mybatis-Spring项目</h1><p><a href=\"http://mybatis.org/spring/zh/index.html\">官方文档</a></p>\n<p>官方实例代码：<a href=\"https://github.com/mybatis/jpetstore-6.git\">https://github.com/mybatis/jpetstore-6.git</a></p>\n<h2 id=\"1-配置数据源（简单版）\"><a href=\"#1-配置数据源（简单版）\" class=\"headerlink\" title=\"1.配置数据源（简单版）\"></a>1.配置数据源（简单版）</h2><pre><code class=\"xml\">&lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.SimpleDriverDataSource&quot;&gt;\n        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;\n        &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;\n        &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.cj.jdbc.Driver&quot;/&gt;\n        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/chapter12&quot;/&gt;\n    &lt;/bean&gt;</code></pre>\n<h2 id=\"2-配置SqlSessionFactory\"><a href=\"#2-配置SqlSessionFactory\" class=\"headerlink\" title=\"2.配置SqlSessionFactory\"></a>2.配置SqlSessionFactory</h2>"},{"title":"学习记录（一）","auther":"ku jin","_content":"[Toc]\n\n[spring官方文档]: https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing\n\n# 简介\n\n测试是企业软件开发不可或缺的一部分。本章重点介绍IoC原则对单元[测试的价值，](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#unit-testing)以及春框架支持集成测试[的好处](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#integration-testing)。（对企业中的测试进行彻底处理超出了本参考手册的范围。\n\n# 1.单元测试\n\n","source":"_posts/随心记/Spring/SpringTest/学习记录（一）.md","raw":"---\ntitle: 学习记录（一） # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Spring\ntags: # 标签=目标文件夹\n - 学习记录（一） \n---\n[Toc]\n\n[spring官方文档]: https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#testing\n\n# 简介\n\n测试是企业软件开发不可或缺的一部分。本章重点介绍IoC原则对单元[测试的价值，](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#unit-testing)以及春框架支持集成测试[的好处](https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#integration-testing)。（对企业中的测试进行彻底处理超出了本参考手册的范围。\n\n# 1.单元测试\n\n","slug":"随心记/Spring/SpringTest/学习记录（一）","published":1,"date":"2020-08-02T23:42:44.130Z","updated":"2020-08-02T23:42:59.796Z","_id":"ckdcz9jj1001lrkam133qf6q8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[Toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>测试是企业软件开发不可或缺的一部分。本章重点介绍IoC原则对单元<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#unit-testing\">测试的价值，</a>以及春框架支持集成测试<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#integration-testing\">的好处</a>。（对企业中的测试进行彻底处理超出了本参考手册的范围。</p>\n<h1 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1.单元测试\"></a>1.单元测试</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[Toc]</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>测试是企业软件开发不可或缺的一部分。本章重点介绍IoC原则对单元<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#unit-testing\">测试的价值，</a>以及春框架支持集成测试<a href=\"https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#integration-testing\">的好处</a>。（对企业中的测试进行彻底处理超出了本参考手册的范围。</p>\n<h1 id=\"1-单元测试\"><a href=\"#1-单元测试\" class=\"headerlink\" title=\"1.单元测试\"></a>1.单元测试</h1>"},{"title":"01 Spring Boot入门","auther":"ku jin","_content":"","source":"_posts/随心记/项目实战/微人事项目管理/01 Spring Boot入门.md","raw":"---\ntitle: 01 Spring Boot入门 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 01 Spring Boot入门 \n---\n","slug":"随心记/项目实战/微人事项目管理/01 Spring Boot入门","published":1,"date":"2020-08-02T23:42:44.207Z","updated":"2020-08-02T23:42:59.803Z","_id":"ckdcz9jml001mrkam5p1m8h9v","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"需求文档","auther":"ku jin","_content":"","source":"_posts/随心记/项目实战/微人事项目管理/需求文档.md","raw":"---\ntitle: 需求文档 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 需求文档 \n---\n","slug":"随心记/项目实战/微人事项目管理/需求文档","published":1,"date":"2020-08-02T23:42:44.208Z","updated":"2020-08-02T23:42:59.804Z","_id":"ckdcz9jml001nrkam5tne54ib","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"PermissionX权限管理库","auther":"ku jin","_content":"","source":"_posts/随心记/项目实战/编写开源库/PermissionX权限管理库.md","raw":"---\ntitle: PermissionX权限管理库 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - PermissionX权限管理库 \n---\n","slug":"随心记/项目实战/编写开源库/PermissionX权限管理库","published":1,"date":"2020-08-02T23:42:44.222Z","updated":"2020-08-02T23:42:59.807Z","_id":"ckdcz9jmm001orkamfwjo1fta","comments":1,"layout":"post","photos":[],"link":"","content":"<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"前期准备","auther":"ku jin","_content":"## 天气数据API 接口获取\n\n彩云天气 https://dashboard.caiyunapp.com/\n\napi文档阅读 [https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8](https://open.caiyunapp.com/彩云天气_API_一览表)\n\n![image-20200714172407951](images/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/image-20200714172407951.png)\n\n","source":"_posts/随心记/项目实战/天气预报App/前期准备.md","raw":"---\ntitle: 前期准备 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 前期准备 \n---\n## 天气数据API 接口获取\n\n彩云天气 https://dashboard.caiyunapp.com/\n\napi文档阅读 [https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8](https://open.caiyunapp.com/彩云天气_API_一览表)\n\n![image-20200714172407951](images/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/image-20200714172407951.png)\n\n","slug":"随心记/项目实战/天气预报App/前期准备","published":1,"date":"2020-08-02T23:42:44.188Z","updated":"2020-08-02T23:42:59.802Z","_id":"ckdcz9jmn001prkamhyao5zqx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"天气数据API-接口获取\"><a href=\"#天气数据API-接口获取\" class=\"headerlink\" title=\"天气数据API 接口获取\"></a>天气数据API 接口获取</h2><p>彩云天气 <a href=\"https://dashboard.caiyunapp.com/\">https://dashboard.caiyunapp.com/</a></p>\n<p>api文档阅读 <a href=\"https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8\">https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8</a></p>\n<p><img src=\"images/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/image-20200714172407951.png\" alt=\"image-20200714172407951\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"天气数据API-接口获取\"><a href=\"#天气数据API-接口获取\" class=\"headerlink\" title=\"天气数据API 接口获取\"></a>天气数据API 接口获取</h2><p>彩云天气 <a href=\"https://dashboard.caiyunapp.com/\">https://dashboard.caiyunapp.com/</a></p>\n<p>api文档阅读 <a href=\"https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8\">https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8</a></p>\n<p><img src=\"images/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/image-20200714172407951.png\" alt=\"image-20200714172407951\"></p>\n"},{"title":"功能需求与技术可行性分析","auther":"ku jin","_content":"## 功能分析\n\n- 可以搜索各个国家的城市数据\n- 可以查看全球大多数城市的天气信息\n- 可以自由的切换城市，查看其他城市的天气信息\n- 可以手动刷新实时的天气\n\n## 技术分析\n\n- UI\n- 网络\n- 数据存储\n- 异步处理\n\n","source":"_posts/随心记/项目实战/天气预报App/功能需求与技术可行性分析.md","raw":"---\ntitle: 功能需求与技术可行性分析 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 功能需求与技术可行性分析 \n---\n## 功能分析\n\n- 可以搜索各个国家的城市数据\n- 可以查看全球大多数城市的天气信息\n- 可以自由的切换城市，查看其他城市的天气信息\n- 可以手动刷新实时的天气\n\n## 技术分析\n\n- UI\n- 网络\n- 数据存储\n- 异步处理\n\n","slug":"随心记/项目实战/天气预报App/功能需求与技术可行性分析","published":1,"date":"2020-08-02T23:42:44.190Z","updated":"2020-08-02T23:42:59.802Z","_id":"ckdcz9jmn001qrkam0rjq07f7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ul>\n<li>可以搜索各个国家的城市数据</li>\n<li>可以查看全球大多数城市的天气信息</li>\n<li>可以自由的切换城市，查看其他城市的天气信息</li>\n<li>可以手动刷新实时的天气</li>\n</ul>\n<h2 id=\"技术分析\"><a href=\"#技术分析\" class=\"headerlink\" title=\"技术分析\"></a>技术分析</h2><ul>\n<li>UI</li>\n<li>网络</li>\n<li>数据存储</li>\n<li>异步处理</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"功能分析\"><a href=\"#功能分析\" class=\"headerlink\" title=\"功能分析\"></a>功能分析</h2><ul>\n<li>可以搜索各个国家的城市数据</li>\n<li>可以查看全球大多数城市的天气信息</li>\n<li>可以自由的切换城市，查看其他城市的天气信息</li>\n<li>可以手动刷新实时的天气</li>\n</ul>\n<h2 id=\"技术分析\"><a href=\"#技术分析\" class=\"headerlink\" title=\"技术分析\"></a>技术分析</h2><ul>\n<li>UI</li>\n<li>网络</li>\n<li>数据存储</li>\n<li>异步处理</li>\n</ul>\n"},{"title":"2-1android moudle与libery切换","auther":"ku jin","_content":"# Application与Library切换\n\n","source":"_posts/随心记/项目实战/Kotlin开发电商app/2-1android moudle与libery切换.md","raw":"---\ntitle: 2-1android moudle与libery切换 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 2-1android moudle与libery切换 \n---\n# Application与Library切换\n\n","slug":"随心记/项目实战/Kotlin开发电商app/2-1android moudle与libery切换","published":1,"date":"2020-08-02T23:42:44.185Z","updated":"2020-08-02T23:42:59.801Z","_id":"ckdcz9jmo001rrkam2gdmalvi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Application与Library切换\"><a href=\"#Application与Library切换\" class=\"headerlink\" title=\"Application与Library切换\"></a>Application与Library切换</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Application与Library切换\"><a href=\"#Application与Library切换\" class=\"headerlink\" title=\"Application与Library切换\"></a>Application与Library切换</h1>"},{"title":"项目知识点","auther":"ku jin","_content":"#### \t\t后端技术\n\n1. Spring boot (SSM)\n\n2. spring Secunity\n\n3. Redis\n\n4. POI/邮件发送/消息中间件\n\n5. Mysql\n\n   #### 前端技术\n\n6. Vue\n\n7. axios\n\n8. ElemnetUI\n\n9. Vuex","source":"_posts/随心记/项目实战/微人事项目管理/项目知识点.md","raw":"---\ntitle: 项目知识点 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 项目知识点 \n---\n#### \t\t后端技术\n\n1. Spring boot (SSM)\n\n2. spring Secunity\n\n3. Redis\n\n4. POI/邮件发送/消息中间件\n\n5. Mysql\n\n   #### 前端技术\n\n6. Vue\n\n7. axios\n\n8. ElemnetUI\n\n9. Vuex","slug":"随心记/项目实战/微人事项目管理/项目知识点","published":1,"date":"2020-08-02T23:42:44.209Z","updated":"2020-08-02T23:42:59.805Z","_id":"ckdcz9jmo001srkam08jdd95d","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h4><ol>\n<li><p>Spring boot (SSM)</p>\n</li>\n<li><p>spring Secunity</p>\n</li>\n<li><p>Redis</p>\n</li>\n<li><p>POI/邮件发送/消息中间件</p>\n</li>\n<li><p>Mysql</p>\n<h4 id=\"前端技术\"><a href=\"#前端技术\" class=\"headerlink\" title=\"前端技术\"></a>前端技术</h4></li>\n<li><p>Vue</p>\n</li>\n<li><p>axios</p>\n</li>\n<li><p>ElemnetUI</p>\n</li>\n<li><p>Vuex</p>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h4 id=\"后端技术\"><a href=\"#后端技术\" class=\"headerlink\" title=\"后端技术\"></a>后端技术</h4><ol>\n<li><p>Spring boot (SSM)</p>\n</li>\n<li><p>spring Secunity</p>\n</li>\n<li><p>Redis</p>\n</li>\n<li><p>POI/邮件发送/消息中间件</p>\n</li>\n<li><p>Mysql</p>\n<h4 id=\"前端技术\"><a href=\"#前端技术\" class=\"headerlink\" title=\"前端技术\"></a>前端技术</h4></li>\n<li><p>Vue</p>\n</li>\n<li><p>axios</p>\n</li>\n<li><p>ElemnetUI</p>\n</li>\n<li><p>Vuex</p>\n</li>\n</ol>\n"},{"title":"1-1-安装环境","auther":"ku jin","_content":"# 开发工具和环境\n\n| 工具                  | 版本    |\n| --------------------- | :------ |\n| idea（ide）           | 2020.1  |\n| git（版本控制）github | 2.26    |\n| maven（项目构建）     | 3.6     |\n| tomcat（web容器）     | 9       |\n| Java jdk              | 1.8     |\n| mysql                 | 8       |\n| 本地系统              | win10   |\n| 服务器                | Centos7 |\n|                       |         |\n\n\n\n","source":"_posts/随心记/项目实战/淘淘商城项目实战/1-1-安装环境.md","raw":"---\ntitle: 1-1-安装环境 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 1-1-安装环境 \n---\n# 开发工具和环境\n\n| 工具                  | 版本    |\n| --------------------- | :------ |\n| idea（ide）           | 2020.1  |\n| git（版本控制）github | 2.26    |\n| maven（项目构建）     | 3.6     |\n| tomcat（web容器）     | 9       |\n| Java jdk              | 1.8     |\n| mysql                 | 8       |\n| 本地系统              | win10   |\n| 服务器                | Centos7 |\n|                       |         |\n\n\n\n","slug":"随心记/项目实战/淘淘商城项目实战/1-1-安装环境","published":1,"date":"2020-08-02T23:42:44.213Z","updated":"2020-08-02T23:42:59.805Z","_id":"ckdcz9jmp001trkamaqybfasd","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"开发工具和环境\"><a href=\"#开发工具和环境\" class=\"headerlink\" title=\"开发工具和环境\"></a>开发工具和环境</h1><table>\n<thead>\n<tr>\n<th>工具</th>\n<th align=\"left\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>idea（ide）</td>\n<td align=\"left\">2020.1</td>\n</tr>\n<tr>\n<td>git（版本控制）github</td>\n<td align=\"left\">2.26</td>\n</tr>\n<tr>\n<td>maven（项目构建）</td>\n<td align=\"left\">3.6</td>\n</tr>\n<tr>\n<td>tomcat（web容器）</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td>Java jdk</td>\n<td align=\"left\">1.8</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td align=\"left\">8</td>\n</tr>\n<tr>\n<td>本地系统</td>\n<td align=\"left\">win10</td>\n</tr>\n<tr>\n<td>服务器</td>\n<td align=\"left\">Centos7</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"开发工具和环境\"><a href=\"#开发工具和环境\" class=\"headerlink\" title=\"开发工具和环境\"></a>开发工具和环境</h1><table>\n<thead>\n<tr>\n<th>工具</th>\n<th align=\"left\">版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>idea（ide）</td>\n<td align=\"left\">2020.1</td>\n</tr>\n<tr>\n<td>git（版本控制）github</td>\n<td align=\"left\">2.26</td>\n</tr>\n<tr>\n<td>maven（项目构建）</td>\n<td align=\"left\">3.6</td>\n</tr>\n<tr>\n<td>tomcat（web容器）</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td>Java jdk</td>\n<td align=\"left\">1.8</td>\n</tr>\n<tr>\n<td>mysql</td>\n<td align=\"left\">8</td>\n</tr>\n<tr>\n<td>本地系统</td>\n<td align=\"left\">win10</td>\n</tr>\n<tr>\n<td>服务器</td>\n<td align=\"left\">Centos7</td>\n</tr>\n<tr>\n<td></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n"},{"title":"项目前期构建","auther":"ku jin","_content":"# 人员配置\n\n产品经理：3人，确定需求及给出产品原型\n\n项目经理：1人，项目管理\n\n前端团队：5人，根据产品经理给出原型制作静态页面\n\n后端团队：20人，实现产品功能\n\n测试团队：5人，测试所有功能\n\n运维团队：3人，项目的发布和维护","source":"_posts/随心记/项目实战/淘淘商城项目实战/项目前期构建.md","raw":"---\ntitle: 项目前期构建 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - 项目实战\ntags: # 标签=目标文件夹\n - 项目前期构建 \n---\n# 人员配置\n\n产品经理：3人，确定需求及给出产品原型\n\n项目经理：1人，项目管理\n\n前端团队：5人，根据产品经理给出原型制作静态页面\n\n后端团队：20人，实现产品功能\n\n测试团队：5人，测试所有功能\n\n运维团队：3人，项目的发布和维护","slug":"随心记/项目实战/淘淘商城项目实战/项目前期构建","published":1,"date":"2020-08-02T23:42:44.215Z","updated":"2020-08-02T23:42:59.806Z","_id":"ckdcz9jmq001urkamfyyi6xs8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"人员配置\"><a href=\"#人员配置\" class=\"headerlink\" title=\"人员配置\"></a>人员配置</h1><p>产品经理：3人，确定需求及给出产品原型</p>\n<p>项目经理：1人，项目管理</p>\n<p>前端团队：5人，根据产品经理给出原型制作静态页面</p>\n<p>后端团队：20人，实现产品功能</p>\n<p>测试团队：5人，测试所有功能</p>\n<p>运维团队：3人，项目的发布和维护</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"人员配置\"><a href=\"#人员配置\" class=\"headerlink\" title=\"人员配置\"></a>人员配置</h1><p>产品经理：3人，确定需求及给出产品原型</p>\n<p>项目经理：1人，项目管理</p>\n<p>前端团队：5人，根据产品经理给出原型制作静态页面</p>\n<p>后端团队：20人，实现产品功能</p>\n<p>测试团队：5人，测试所有功能</p>\n<p>运维团队：3人，项目的发布和维护</p>\n"},{"title":"3-1网络访问","auther":"ku jin","_content":"[toc]\n\n# 1.WebView的用法\n\n> WevView是andorid控件,可以显示简单的网页\n\n1. 编写main.xml界面\n2. 关键代码\n3. 添加AndroidMainifest.xml权限\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <WebView\n        android:id=\"@+id/webView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n```\n\n```kotlin\n//设置一些浏览器属性,支持JavaScript脚本\n        webView.settings.setJavaScriptEnabled(true)\n        //获取实例,设置url\n        webView.webViewClient = WebViewClient()\n        webView.loadUrl(\"https://www.baidu.com\")\n```\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n![image-20200729175044618](images/3-1%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/image-20200729175044618.png)\n\n# 2.使用HttpURLConnection\n\n```kotlin\nprivate fun sendRequestWithHttpURLConnection() {\n        // 开启线程来发起网络请求\n        thread {\n            var connection: HttpURLConnection? = null\n            try {\n                val response = StringBuilder()\n                //1. 创建url,获取HttpURLConnection实例\n                val url = URL(\"https://www.baidu.com\")\n                connection = url.openConnection() as HttpURLConnection\n                //2. 设置请求方式,连接超时,读取时间\n                connection.requestMethod=\"GET\"\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                //3. 获取服务器返回的输入流\n                val input = connection.inputStream\n                // 下面对获取到的输入流进行读取\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                showResponse(response.toString())\n            } catch (e: Exception) {\n                e.printStackTrace()\n            } finally {\n                connection?.disconnect()\n            }\n        }\n    }\n\n    private fun showResponse(response: String) {\n        runOnUiThread {\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        }\n    }\n```\n\n## post请求设置\n\n```kotlin\nconnection.requestMethod=\"POST\"\n                val output=DataOutputStream(connection.outputStream)\n                output.writeUTF(\"UTF-8\")\n                output.writeBytes(\"username=admin&password=123456\")\n```\n\n# 3.使用OkHttp(推荐)\n\n首选的android开源网络通信库 github:https://square.github.io/okhttp/\n\n1. 添加依赖\n2. 关键代码\n3. 添加权限\n\n```groovy\nimplementation(\"com.squareup.okhttp3:okhttp:4.8.0\")\n```\n\n```kotlin\nprivate fun sendRequestWithOkHttp() {\n        thread {\n            try {\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n                \n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(\"username\",\"admin\")\n                    .add(\"password\",\"123456\")\n                    .build()\n                val request = Request.Builder()\n                    .url(\"https://www.baidu.com\")\n                    //.post(requestBody)\n                    .build()\n                \n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) {\n                    showResponse(responseData)\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\nprivate fun showResponse(response: String) {\n        runOnUiThread {\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        }\n    }\n```\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n","source":"_posts/随心记/Android学习/3-1网络访问.md","raw":"---\ntitle: 3-1网络访问 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 3-1网络访问 \n---\n[toc]\n\n# 1.WebView的用法\n\n> WevView是andorid控件,可以显示简单的网页\n\n1. 编写main.xml界面\n2. 关键代码\n3. 添加AndroidMainifest.xml权限\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <WebView\n        android:id=\"@+id/webView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\" />\n\n</LinearLayout>\n```\n\n```kotlin\n//设置一些浏览器属性,支持JavaScript脚本\n        webView.settings.setJavaScriptEnabled(true)\n        //获取实例,设置url\n        webView.webViewClient = WebViewClient()\n        webView.loadUrl(\"https://www.baidu.com\")\n```\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n![image-20200729175044618](images/3-1%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/image-20200729175044618.png)\n\n# 2.使用HttpURLConnection\n\n```kotlin\nprivate fun sendRequestWithHttpURLConnection() {\n        // 开启线程来发起网络请求\n        thread {\n            var connection: HttpURLConnection? = null\n            try {\n                val response = StringBuilder()\n                //1. 创建url,获取HttpURLConnection实例\n                val url = URL(\"https://www.baidu.com\")\n                connection = url.openConnection() as HttpURLConnection\n                //2. 设置请求方式,连接超时,读取时间\n                connection.requestMethod=\"GET\"\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                //3. 获取服务器返回的输入流\n                val input = connection.inputStream\n                // 下面对获取到的输入流进行读取\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use {\n                    reader.forEachLine {\n                        response.append(it)\n                    }\n                }\n                showResponse(response.toString())\n            } catch (e: Exception) {\n                e.printStackTrace()\n            } finally {\n                connection?.disconnect()\n            }\n        }\n    }\n\n    private fun showResponse(response: String) {\n        runOnUiThread {\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        }\n    }\n```\n\n## post请求设置\n\n```kotlin\nconnection.requestMethod=\"POST\"\n                val output=DataOutputStream(connection.outputStream)\n                output.writeUTF(\"UTF-8\")\n                output.writeBytes(\"username=admin&password=123456\")\n```\n\n# 3.使用OkHttp(推荐)\n\n首选的android开源网络通信库 github:https://square.github.io/okhttp/\n\n1. 添加依赖\n2. 关键代码\n3. 添加权限\n\n```groovy\nimplementation(\"com.squareup.okhttp3:okhttp:4.8.0\")\n```\n\n```kotlin\nprivate fun sendRequestWithOkHttp() {\n        thread {\n            try {\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n                \n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(\"username\",\"admin\")\n                    .add(\"password\",\"123456\")\n                    .build()\n                val request = Request.Builder()\n                    .url(\"https://www.baidu.com\")\n                    //.post(requestBody)\n                    .build()\n                \n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) {\n                    showResponse(responseData)\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\nprivate fun showResponse(response: String) {\n        runOnUiThread {\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        }\n    }\n```\n\n```xml\n<uses-permission android:name=\"android.permission.INTERNET\" />\n```\n\n","slug":"随心记/Android学习/3-1网络访问","published":1,"date":"2020-08-02T23:42:41.978Z","updated":"2020-08-02T23:42:59.736Z","_id":"ckdcza4g7001zrkam9ve52h2u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"1-WebView的用法\"><a href=\"#1-WebView的用法\" class=\"headerlink\" title=\"1.WebView的用法\"></a>1.WebView的用法</h1><blockquote>\n<p>WevView是andorid控件,可以显示简单的网页</p>\n</blockquote>\n<ol>\n<li>编写main.xml界面</li>\n<li>关键代码</li>\n<li>添加AndroidMainifest.xml权限</li>\n</ol>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WebView</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/webView<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//设置一些浏览器属性,支持JavaScript脚本</span>\n        webView<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">.</span><span class=\"token function\">setJavaScriptEnabled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取实例,设置url</span>\n        webView<span class=\"token punctuation\">.</span>webViewClient <span class=\"token operator\">=</span> <span class=\"token function\">WebViewClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        webView<span class=\"token punctuation\">.</span><span class=\"token function\">loadUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p><img src=\"images/3-1%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/image-20200729175044618.png\" alt=\"image-20200729175044618\"></p>\n<h1 id=\"2-使用HttpURLConnection\"><a href=\"#2-使用HttpURLConnection\" class=\"headerlink\" title=\"2.使用HttpURLConnection\"></a>2.使用HttpURLConnection</h1><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sendRequestWithHttpURLConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 开启线程来发起网络请求</span>\n        thread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">//1. 创建url,获取HttpURLConnection实例</span>\n                <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n                connection <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HttpURLConnection\n                <span class=\"token comment\" spellcheck=\"true\">//2. 设置请求方式,连接超时,读取时间</span>\n                connection<span class=\"token punctuation\">.</span>requestMethod<span class=\"token operator\">=</span><span class=\"token string\">\"GET\"</span>\n                connection<span class=\"token punctuation\">.</span>connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n                connection<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n                <span class=\"token comment\" spellcheck=\"true\">//3. 获取服务器返回的输入流</span>\n                <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream\n                <span class=\"token comment\" spellcheck=\"true\">// 下面对获取到的输入流进行读取</span>\n                <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                reader<span class=\"token punctuation\">.</span>use &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    reader<span class=\"token punctuation\">.</span>forEachLine &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n                    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">showResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                connection<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">showResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        runOnUiThread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 在这里进行UI操作，将结果显示到界面上</span>\n            responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> response\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"post请求设置\"><a href=\"#post请求设置\" class=\"headerlink\" title=\"post请求设置\"></a>post请求设置</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\">connection<span class=\"token punctuation\">.</span>requestMethod<span class=\"token operator\">=</span><span class=\"token string\">\"POST\"</span>\n                <span class=\"token keyword\">val</span> output<span class=\"token operator\">=</span><span class=\"token function\">DataOutputStream</span><span class=\"token punctuation\">(</span>connection<span class=\"token punctuation\">.</span>outputStream<span class=\"token punctuation\">)</span>\n                output<span class=\"token punctuation\">.</span><span class=\"token function\">writeUTF</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">)</span>\n                output<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username=admin&amp;password=123456\"</span><span class=\"token punctuation\">)</span></code></pre>\n<h1 id=\"3-使用OkHttp-推荐\"><a href=\"#3-使用OkHttp-推荐\" class=\"headerlink\" title=\"3.使用OkHttp(推荐)\"></a>3.使用OkHttp(推荐)</h1><p>首选的android开源网络通信库 github:<a href=\"https://square.github.io/okhttp/\">https://square.github.io/okhttp/</a></p>\n<ol>\n<li>添加依赖</li>\n<li>关键代码</li>\n<li>添加权限</li>\n</ol>\n<pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token function\">implementation</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.squareup.okhttp3:okhttp:4.8.0\"</span><span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sendRequestWithOkHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        thread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//1. 获取okhttp实例</span>\n                <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//2. 设置请求参数</span>\n                <span class=\"token comment\" spellcheck=\"true\">//post请求(可选)</span>\n                <span class=\"token keyword\">val</span> requestBody<span class=\"token operator\">=</span>FormBody<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//.post(requestBody)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//3. 获取服务器返回的数据</span>\n                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> responseData <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseData <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">showResponse</span><span class=\"token punctuation\">(</span>responseData<span class=\"token punctuation\">)</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">showResponse</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        runOnUiThread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 在这里进行UI操作，将结果显示到界面上</span>\n            responseText<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> response\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-WebView的用法\"><a href=\"#1-WebView的用法\" class=\"headerlink\" title=\"1.WebView的用法\"></a>1.WebView的用法</h1><blockquote>\n<p>WevView是andorid控件,可以显示简单的网页</p>\n</blockquote>\n<ol>\n<li>编写main.xml界面</li>\n<li>关键代码</li>\n<li>添加AndroidMainifest.xml权限</li>\n</ol>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot; &gt;\n\n    &lt;WebView\n        android:id=&quot;@+id/webView&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n<pre><code class=\"kotlin\">//设置一些浏览器属性,支持JavaScript脚本\n        webView.settings.setJavaScriptEnabled(true)\n        //获取实例,设置url\n        webView.webViewClient = WebViewClient()\n        webView.loadUrl(&quot;https://www.baidu.com&quot;)</code></pre>\n<pre><code class=\"xml\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></pre>\n<p><img src=\"images/3-1%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/image-20200729175044618.png\" alt=\"image-20200729175044618\"></p>\n<h1 id=\"2-使用HttpURLConnection\"><a href=\"#2-使用HttpURLConnection\" class=\"headerlink\" title=\"2.使用HttpURLConnection\"></a>2.使用HttpURLConnection</h1><pre><code class=\"kotlin\">private fun sendRequestWithHttpURLConnection() &amp;#123;\n        // 开启线程来发起网络请求\n        thread &amp;#123;\n            var connection: HttpURLConnection? = null\n            try &amp;#123;\n                val response = StringBuilder()\n                //1. 创建url,获取HttpURLConnection实例\n                val url = URL(&quot;https://www.baidu.com&quot;)\n                connection = url.openConnection() as HttpURLConnection\n                //2. 设置请求方式,连接超时,读取时间\n                connection.requestMethod=&quot;GET&quot;\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                //3. 获取服务器返回的输入流\n                val input = connection.inputStream\n                // 下面对获取到的输入流进行读取\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use &amp;#123;\n                    reader.forEachLine &amp;#123;\n                        response.append(it)\n                    &amp;#125;\n                &amp;#125;\n                showResponse(response.toString())\n            &amp;#125; catch (e: Exception) &amp;#123;\n                e.printStackTrace()\n            &amp;#125; finally &amp;#123;\n                connection?.disconnect()\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;\n\n    private fun showResponse(response: String) &amp;#123;\n        runOnUiThread &amp;#123;\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        &amp;#125;\n    &amp;#125;</code></pre>\n<h2 id=\"post请求设置\"><a href=\"#post请求设置\" class=\"headerlink\" title=\"post请求设置\"></a>post请求设置</h2><pre><code class=\"kotlin\">connection.requestMethod=&quot;POST&quot;\n                val output=DataOutputStream(connection.outputStream)\n                output.writeUTF(&quot;UTF-8&quot;)\n                output.writeBytes(&quot;username=admin&amp;password=123456&quot;)</code></pre>\n<h1 id=\"3-使用OkHttp-推荐\"><a href=\"#3-使用OkHttp-推荐\" class=\"headerlink\" title=\"3.使用OkHttp(推荐)\"></a>3.使用OkHttp(推荐)</h1><p>首选的android开源网络通信库 github:<a href=\"https://square.github.io/okhttp/\">https://square.github.io/okhttp/</a></p>\n<ol>\n<li>添加依赖</li>\n<li>关键代码</li>\n<li>添加权限</li>\n</ol>\n<pre><code class=\"groovy\">implementation(&quot;com.squareup.okhttp3:okhttp:4.8.0&quot;)</code></pre>\n<pre><code class=\"kotlin\">private fun sendRequestWithOkHttp() &amp;#123;\n        thread &amp;#123;\n            try &amp;#123;\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n\n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(&quot;username&quot;,&quot;admin&quot;)\n                    .add(&quot;password&quot;,&quot;123456&quot;)\n                    .build()\n                val request = Request.Builder()\n                    .url(&quot;https://www.baidu.com&quot;)\n                    //.post(requestBody)\n                    .build()\n\n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) &amp;#123;\n                    showResponse(responseData)\n                &amp;#125;\n            &amp;#125; catch (e: Exception) &amp;#123;\n                e.printStackTrace()\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;\nprivate fun showResponse(response: String) &amp;#123;\n        runOnUiThread &amp;#123;\n            // 在这里进行UI操作，将结果显示到界面上\n            responseText.text = response\n        &amp;#125;\n    &amp;#125;</code></pre>\n<pre><code class=\"xml\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</code></pre>\n"},{"title":"3-2-1安装Apache服务器","auther":"ku jin","_content":"# 打开Apache文件夹：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116191738802-1520378758.png)\n\n# 打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192340009-252139911.png)\n\n# 在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192853889-223879327.png)\n\n# 配置安装Apache的主服务，在cmd中输入：\"E:\\\\Apache-2.4.37\\Apache\\bin\\httpd.exe\" -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193655296-284734092.png)\n\n# 启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\n\n　　注意：关闭Apache服务点击stop来关闭，当然也可以Windows系统来关闭\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193905150-1782682408.png) \n\n ![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194605315-1293110702.png)\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194636633-1358003770.png)\n\n# 打开浏览器，在网址栏输入：127.0.0.1(或者：http://localhost)，出现如下界面就表示配置成功了\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116195213945-320211796.png)","source":"_posts/随心记/Android学习/3-2-1安装Apache服务器.md","raw":"---\ntitle: 3-2-1安装Apache服务器 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 3-2-1安装Apache服务器 \n---\n# 打开Apache文件夹：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116191738802-1520378758.png)\n\n# 打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192340009-252139911.png)\n\n# 在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192853889-223879327.png)\n\n# 配置安装Apache的主服务，在cmd中输入：\"E:\\\\Apache-2.4.37\\Apache\\bin\\httpd.exe\" -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193655296-284734092.png)\n\n# 启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\n\n　　注意：关闭Apache服务点击stop来关闭，当然也可以Windows系统来关闭\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193905150-1782682408.png) \n\n ![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194605315-1293110702.png)\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194636633-1358003770.png)\n\n# 打开浏览器，在网址栏输入：127.0.0.1(或者：http://localhost)，出现如下界面就表示配置成功了\n\n![img](https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116195213945-320211796.png)","slug":"随心记/Android学习/3-2-1安装Apache服务器","published":1,"date":"2020-08-02T23:42:41.996Z","updated":"2020-08-02T23:42:59.736Z","_id":"ckdcza4gk0024rkam1fyn0oxl","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"打开Apache文件夹：\"><a href=\"#打开Apache文件夹：\" class=\"headerlink\" title=\"打开Apache文件夹：\"></a>打开Apache文件夹：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116191738802-1520378758.png\" alt=\"img\"></p>\n<h1 id=\"打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\"><a href=\"#打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\" class=\"headerlink\" title=\"打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\"></a>打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192340009-252139911.png\" alt=\"img\"></p>\n<h1 id=\"在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存\"><a href=\"#在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存\" class=\"headerlink\" title=\"在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存\"></a>在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192853889-223879327.png\" alt=\"img\"></p>\n<h1 id=\"配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\"><a href=\"#配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\" class=\"headerlink\" title=\"配置安装Apache的主服务，在cmd中输入：”E:\\Apache-2.4.37\\Apache\\bin\\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\"></a>配置安装Apache的主服务，在cmd中输入：”E:\\Apache-2.4.37\\Apache\\bin\\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193655296-284734092.png\" alt=\"img\"></p>\n<h1 id=\"启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\"><a href=\"#启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\" class=\"headerlink\" title=\"启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\"></a>启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。</h1><p>　　注意：关闭Apache服务点击stop来关闭，当然也可以Windows系统来关闭</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193905150-1782682408.png\" alt=\"img\"> </p>\n<p> <img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194605315-1293110702.png\" alt=\"img\"></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194636633-1358003770.png\" alt=\"img\"></p>\n<h1 id=\"打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了\"><a href=\"#打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了\" class=\"headerlink\" title=\"打开浏览器，在网址栏输入：127.0.0.1(或者：http://localhost)，出现如下界面就表示配置成功了\"></a>打开浏览器，在网址栏输入：127.0.0.1(或者：<a href=\"http://localhost),出现如下界面就表示配置成功了/\">http://localhost)，出现如下界面就表示配置成功了</a></h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116195213945-320211796.png\" alt=\"img\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"打开Apache文件夹：\"><a href=\"#打开Apache文件夹：\" class=\"headerlink\" title=\"打开Apache文件夹：\"></a>打开Apache文件夹：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116191738802-1520378758.png\" alt=\"img\"></p>\n<h1 id=\"打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\"><a href=\"#打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\" class=\"headerlink\" title=\"打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：\"></a>打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192340009-252139911.png\" alt=\"img\"></p>\n<h1 id=\"在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存\"><a href=\"#在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存\" class=\"headerlink\" title=\"在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存\"></a>在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192853889-223879327.png\" alt=\"img\"></p>\n<h1 id=\"配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\"><a href=\"#配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\" class=\"headerlink\" title=\"配置安装Apache的主服务，在cmd中输入：”E:\\Apache-2.4.37\\Apache\\bin\\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：\"></a>配置安装Apache的主服务，在cmd中输入：”E:\\Apache-2.4.37\\Apache\\bin\\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：</h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193655296-284734092.png\" alt=\"img\"></p>\n<h1 id=\"启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\"><a href=\"#启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\" class=\"headerlink\" title=\"启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。\"></a>启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。</h1><p>　　注意：关闭Apache服务点击stop来关闭，当然也可以Windows系统来关闭</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193905150-1782682408.png\" alt=\"img\"> </p>\n<p> <img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194605315-1293110702.png\" alt=\"img\"></p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194636633-1358003770.png\" alt=\"img\"></p>\n<h1 id=\"打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了\"><a href=\"#打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了\" class=\"headerlink\" title=\"打开浏览器，在网址栏输入：127.0.0.1(或者：http://localhost)，出现如下界面就表示配置成功了\"></a>打开浏览器，在网址栏输入：127.0.0.1(或者：<a href=\"http://localhost),出现如下界面就表示配置成功了/\">http://localhost)，出现如下界面就表示配置成功了</a></h1><p><img src=\"https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116195213945-320211796.png\" alt=\"img\"></p>\n"},{"title":"3-2网络访问-数据格式","auther":"ku jin","_content":"[toc]\n\n# 1.创建一个本地简单的服务器\n\napache服务器: https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14\n\n# 2.解析XML格式数据\n\n1. 在桌面编写一个get_data.xml文件\n2. 请求网络代码\n3. 解析xml\n4. 由于android9开始不支持http请求,默认是https,需要配置,创建res/xml/network_config.xml\n5. 声明权限\n\n```xml\n<apps>\n\t<app>\n\t\t<id>1</id>\n        <name>Google Maps</name>\n\t\t<version>1.0</version>\n\t</app>\n\t<app>\n\t\t<id>2</id>\n\t\t<name>Chrom</name>\n\t\t<version>2.1</version>\n\t</app>\n\t<app>\n\t\t<id>3</id>\n\t\t<name>Google Play</name>\n\t\t<version>2.3</version>\n\t</app>\n</apps>\n```\n\n```kotlin\nprivate fun sendRequestWithOkHttp() {\n        thread {\n            try {\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n\n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(\"username\",\"admin\")\n                    .add(\"password\",\"123456\")\n                    .build()\n                val request = Request.Builder()\n                    //.url(\"https://www.baidu.com\")\n                        //读取本地服务器文件\n                    .url(\"http://192.168.2.228/get_data.xml\")\n                    //.post(requestBody)\n                    .build()\n\n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) {\n                    //showResponse(responseData)\n                    //解析xml数据\n                    parseXMLWithPull(responseData)\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n```\n\n```kotlin\n/**\n     * 解析xml数据格式\n     * Pull方式\n     */\n    private fun parseXMLWithPull(xmlData: String) {\n        try {\n            //1. 创建XmlPullParserFactory实例,获取XmlPullParser对象\n            val factory = XmlPullParserFactory.newInstance()\n            val xmlPullParser = factory.newPullParser()\n\n            //2. 将服务器返回的XML设置进去,开始解析\n            xmlPullParser.setInput(StringReader(xmlData))\n\n            //3. 得到当前解析事件\n            var eventType = xmlPullParser.eventType\n            var id = \"\"\n            var name = \"\"\n            var version = \"\"\n\n            //4. 遍历解析事件\n            while (eventType != XmlPullParser.END_DOCUMENT) {\n                val nodeName = xmlPullParser.name\n                when (eventType) {\n                    //4.1 开始解析某个节点\n                    XmlPullParser.START_TAG -> {\n                        when (nodeName) {\n                            //如果节点名等于id name version 就调用nextText()获取节点内容\n                            \"id\" -> id = xmlPullParser.nextText()\n                            \"name\" -> name = xmlPullParser.nextText()\n                            \"version\" -> version = xmlPullParser.nextText()\n                        }\n                    }\n                    //4.2 完成解析某个节点,打印节点内容\n                    XmlPullParser.END_TAG -> {\n                        if (\"app\" == nodeName) {\n                            Log.d(\"MainActivity\", \"id is $id\")\n                            Log.d(\"MainActivity\", \"name is $name\")\n                            Log.d(\"MainActivity\", \"version is $version\")\n                        }\n                    }\n                }\n                eventType = xmlPullParser.next()\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <base-config cleartextTrafficPermitted=\"true\">\n        <trust-anchors>\n            <certificates src=\"system\" />\n        </trust-anchors>\n    </base-config>\n</network-security-config>\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.networktest\">\n\n<!--    声明网络权限-->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        \n        android:networkSecurityConfig=\"@xml/network_config\">\n        <!--        设置http请求-->\n        \n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n![image-20200729223542261](images/3-2%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/image-20200729223542261.png)\n\n# 3.解析JSON格式数据\n\n1. 在htdocs目录下创建一个get_data.json文件\n2. 编写解析代码\n\n```json\n[\n\t{\"id\":\"5\",\"version\":\"5.5\",\"name\":\"Clash of Clans\"},\n\t{\"id\":\"6\",\"version\":\"7.0\",\"name\":\"Boom Beach\"},\n\t{\"id\":\"7\",\"version\":\"3.5\",\"name\":\"Clash Royale\"}\n]\n```\n\n```kotlin\n/**\n     * 使用官方提供的JsonObject\n     */\n    private fun parseJSONWithJSONObject(jsonData: String) {\n        try {\n            //1. 获取jsonarray,进行循环解析\n            val jsonArray = JSONArray(jsonData)\n            \n            //2. 如果循环中不要最后一个范围区间的值可以使用 until 函数:\n            for (i in 0 until jsonArray.length()) {\n                \n                val jsonObject = jsonArray.getJSONObject(i)\n                \n                val id = jsonObject.getString(\"id\")\n                val name = jsonObject.getString(\"name\")\n                val version = jsonObject.getString(\"version\")\n                \n                Log.d(\"MainActivity\", \"id is $id\")\n                Log.d(\"MainActivity\", \"name is $name\")\n                Log.d(\"MainActivity\", \"version is $version\")\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n```\n\n# 4.优化解析,使用GSON开源库\n\n## 1.导入gson依赖\n\n```groovy\nimplementation 'com.google.code.gson:gson:2.8.5'\n```\n\n一段json数据\n\n```json\n{\"name\":\"Tom\",\"age\":20}\n```\n\n```kotlin\nval gson=Gson()\nval person=gson.fromJson(jsonData,Person::class.java)\n```\n\n解析json数组\n\n```json\n[\n\t{\"id\":\"5\",\"version\":\"5.5\",\"name\":\"Clash of Clans\"},\n\t{\"id\":\"6\",\"version\":\"7.0\",\"name\":\"Boom Beach\"},\n\t{\"id\":\"7\",\"version\":\"3.5\",\"name\":\"Clash Royale\"}\n]\n```\n\n```kotlin\nval typeOf = object : TypeToken<List<App>>() {}.type\n        val appList = gson.fromJson<List<App>>(jsonData, typeOf)\n```\n\n## 2.根据gson格式,编写实体类,\n\n```kotlin\nclass App(val id: String, val name: String, val version: String)\n```\n\n```kotlin\n/**\n     * 利用Gson解析json数据\n     */\n    private fun parseJSONWithGSON(jsonData: String) {\n        //1. 获取gson实例\n        val gson = Gson()\n        //2. 设置gson数据格式\n        val typeOf = object : TypeToken<List<App>>() {}.type\n        val appList = gson.fromJson<List<App>>(jsonData, typeOf)\n        //3. 循环遍历jsonarray数据\n        for (app in appList) {\n            Log.d(\"MainActivity\", \"id is ${app.id}\")\n            Log.d(\"MainActivity\", \"name is ${app.name}\")\n            Log.d(\"MainActivity\", \"version is ${app.version}\")\n        }\n    }\n```\n\n","source":"_posts/随心记/Android学习/3-2网络访问-数据格式.md","raw":"---\ntitle: 3-2网络访问-数据格式 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 3-2网络访问-数据格式 \n---\n[toc]\n\n# 1.创建一个本地简单的服务器\n\napache服务器: https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14\n\n# 2.解析XML格式数据\n\n1. 在桌面编写一个get_data.xml文件\n2. 请求网络代码\n3. 解析xml\n4. 由于android9开始不支持http请求,默认是https,需要配置,创建res/xml/network_config.xml\n5. 声明权限\n\n```xml\n<apps>\n\t<app>\n\t\t<id>1</id>\n        <name>Google Maps</name>\n\t\t<version>1.0</version>\n\t</app>\n\t<app>\n\t\t<id>2</id>\n\t\t<name>Chrom</name>\n\t\t<version>2.1</version>\n\t</app>\n\t<app>\n\t\t<id>3</id>\n\t\t<name>Google Play</name>\n\t\t<version>2.3</version>\n\t</app>\n</apps>\n```\n\n```kotlin\nprivate fun sendRequestWithOkHttp() {\n        thread {\n            try {\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n\n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(\"username\",\"admin\")\n                    .add(\"password\",\"123456\")\n                    .build()\n                val request = Request.Builder()\n                    //.url(\"https://www.baidu.com\")\n                        //读取本地服务器文件\n                    .url(\"http://192.168.2.228/get_data.xml\")\n                    //.post(requestBody)\n                    .build()\n\n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) {\n                    //showResponse(responseData)\n                    //解析xml数据\n                    parseXMLWithPull(responseData)\n                }\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        }\n    }\n```\n\n```kotlin\n/**\n     * 解析xml数据格式\n     * Pull方式\n     */\n    private fun parseXMLWithPull(xmlData: String) {\n        try {\n            //1. 创建XmlPullParserFactory实例,获取XmlPullParser对象\n            val factory = XmlPullParserFactory.newInstance()\n            val xmlPullParser = factory.newPullParser()\n\n            //2. 将服务器返回的XML设置进去,开始解析\n            xmlPullParser.setInput(StringReader(xmlData))\n\n            //3. 得到当前解析事件\n            var eventType = xmlPullParser.eventType\n            var id = \"\"\n            var name = \"\"\n            var version = \"\"\n\n            //4. 遍历解析事件\n            while (eventType != XmlPullParser.END_DOCUMENT) {\n                val nodeName = xmlPullParser.name\n                when (eventType) {\n                    //4.1 开始解析某个节点\n                    XmlPullParser.START_TAG -> {\n                        when (nodeName) {\n                            //如果节点名等于id name version 就调用nextText()获取节点内容\n                            \"id\" -> id = xmlPullParser.nextText()\n                            \"name\" -> name = xmlPullParser.nextText()\n                            \"version\" -> version = xmlPullParser.nextText()\n                        }\n                    }\n                    //4.2 完成解析某个节点,打印节点内容\n                    XmlPullParser.END_TAG -> {\n                        if (\"app\" == nodeName) {\n                            Log.d(\"MainActivity\", \"id is $id\")\n                            Log.d(\"MainActivity\", \"name is $name\")\n                            Log.d(\"MainActivity\", \"version is $version\")\n                        }\n                    }\n                }\n                eventType = xmlPullParser.next()\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<network-security-config>\n    <base-config cleartextTrafficPermitted=\"true\">\n        <trust-anchors>\n            <certificates src=\"system\" />\n        </trust-anchors>\n    </base-config>\n</network-security-config>\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.networktest\">\n\n<!--    声明网络权限-->\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/AppTheme\"\n        \n        android:networkSecurityConfig=\"@xml/network_config\">\n        <!--        设置http请求-->\n        \n        <activity android:name=\".MainActivity\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n\n</manifest>\n```\n\n![image-20200729223542261](images/3-2%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/image-20200729223542261.png)\n\n# 3.解析JSON格式数据\n\n1. 在htdocs目录下创建一个get_data.json文件\n2. 编写解析代码\n\n```json\n[\n\t{\"id\":\"5\",\"version\":\"5.5\",\"name\":\"Clash of Clans\"},\n\t{\"id\":\"6\",\"version\":\"7.0\",\"name\":\"Boom Beach\"},\n\t{\"id\":\"7\",\"version\":\"3.5\",\"name\":\"Clash Royale\"}\n]\n```\n\n```kotlin\n/**\n     * 使用官方提供的JsonObject\n     */\n    private fun parseJSONWithJSONObject(jsonData: String) {\n        try {\n            //1. 获取jsonarray,进行循环解析\n            val jsonArray = JSONArray(jsonData)\n            \n            //2. 如果循环中不要最后一个范围区间的值可以使用 until 函数:\n            for (i in 0 until jsonArray.length()) {\n                \n                val jsonObject = jsonArray.getJSONObject(i)\n                \n                val id = jsonObject.getString(\"id\")\n                val name = jsonObject.getString(\"name\")\n                val version = jsonObject.getString(\"version\")\n                \n                Log.d(\"MainActivity\", \"id is $id\")\n                Log.d(\"MainActivity\", \"name is $name\")\n                Log.d(\"MainActivity\", \"version is $version\")\n            }\n        } catch (e: Exception) {\n            e.printStackTrace()\n        }\n    }\n```\n\n# 4.优化解析,使用GSON开源库\n\n## 1.导入gson依赖\n\n```groovy\nimplementation 'com.google.code.gson:gson:2.8.5'\n```\n\n一段json数据\n\n```json\n{\"name\":\"Tom\",\"age\":20}\n```\n\n```kotlin\nval gson=Gson()\nval person=gson.fromJson(jsonData,Person::class.java)\n```\n\n解析json数组\n\n```json\n[\n\t{\"id\":\"5\",\"version\":\"5.5\",\"name\":\"Clash of Clans\"},\n\t{\"id\":\"6\",\"version\":\"7.0\",\"name\":\"Boom Beach\"},\n\t{\"id\":\"7\",\"version\":\"3.5\",\"name\":\"Clash Royale\"}\n]\n```\n\n```kotlin\nval typeOf = object : TypeToken<List<App>>() {}.type\n        val appList = gson.fromJson<List<App>>(jsonData, typeOf)\n```\n\n## 2.根据gson格式,编写实体类,\n\n```kotlin\nclass App(val id: String, val name: String, val version: String)\n```\n\n```kotlin\n/**\n     * 利用Gson解析json数据\n     */\n    private fun parseJSONWithGSON(jsonData: String) {\n        //1. 获取gson实例\n        val gson = Gson()\n        //2. 设置gson数据格式\n        val typeOf = object : TypeToken<List<App>>() {}.type\n        val appList = gson.fromJson<List<App>>(jsonData, typeOf)\n        //3. 循环遍历jsonarray数据\n        for (app in appList) {\n            Log.d(\"MainActivity\", \"id is ${app.id}\")\n            Log.d(\"MainActivity\", \"name is ${app.name}\")\n            Log.d(\"MainActivity\", \"version is ${app.version}\")\n        }\n    }\n```\n\n","slug":"随心记/Android学习/3-2网络访问-数据格式","published":1,"date":"2020-08-02T23:42:42.013Z","updated":"2020-08-02T23:42:59.738Z","_id":"ckdcza4gx0029rkam1y6i24dq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"1-创建一个本地简单的服务器\"><a href=\"#1-创建一个本地简单的服务器\" class=\"headerlink\" title=\"1.创建一个本地简单的服务器\"></a>1.创建一个本地简单的服务器</h1><p>apache服务器: <a href=\"https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14\">https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14</a></p>\n<h1 id=\"2-解析XML格式数据\"><a href=\"#2-解析XML格式数据\" class=\"headerlink\" title=\"2.解析XML格式数据\"></a>2.解析XML格式数据</h1><ol>\n<li>在桌面编写一个get_data.xml文件</li>\n<li>请求网络代码</li>\n<li>解析xml</li>\n<li>由于android9开始不支持http请求,默认是https,需要配置,创建res/xml/network_config.xml</li>\n<li>声明权限</li>\n</ol>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>apps</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Google Maps<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Chrom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>app</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>Google Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>app</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>apps</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">sendRequestWithOkHttp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        thread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//1. 获取okhttp实例</span>\n                <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//2. 设置请求参数</span>\n                <span class=\"token comment\" spellcheck=\"true\">//post请求(可选)</span>\n                <span class=\"token keyword\">val</span> requestBody<span class=\"token operator\">=</span>FormBody<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//.url(\"https://www.baidu.com\")</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//读取本地服务器文件</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://192.168.2.228/get_data.xml\"</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//.post(requestBody)</span>\n                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//3. 获取服务器返回的数据</span>\n                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> responseData <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responseData <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//showResponse(responseData)</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//解析xml数据</span>\n                    <span class=\"token function\">parseXMLWithPull</span><span class=\"token punctuation\">(</span>responseData<span class=\"token punctuation\">)</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 解析xml数据格式\n     * Pull方式\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">parseXMLWithPull</span><span class=\"token punctuation\">(</span>xmlData<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//1. 创建XmlPullParserFactory实例,获取XmlPullParser对象</span>\n            <span class=\"token keyword\">val</span> factory <span class=\"token operator\">=</span> XmlPullParserFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">val</span> xmlPullParser <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newPullParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//2. 将服务器返回的XML设置进去,开始解析</span>\n            xmlPullParser<span class=\"token punctuation\">.</span><span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span><span class=\"token function\">StringReader</span><span class=\"token punctuation\">(</span>xmlData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//3. 得到当前解析事件</span>\n            <span class=\"token keyword\">var</span> eventType <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span>eventType\n            <span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n            <span class=\"token keyword\">var</span> version <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//4. 遍历解析事件</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>eventType <span class=\"token operator\">!=</span> XmlPullParser<span class=\"token punctuation\">.</span>END_DOCUMENT<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">val</span> nodeName <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span>name\n                <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//4.1 开始解析某个节点</span>\n                    XmlPullParser<span class=\"token punctuation\">.</span>START_TAG <span class=\"token operator\">-></span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>nodeName<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token comment\" spellcheck=\"true\">//如果节点名等于id name version 就调用nextText()获取节点内容</span>\n                            <span class=\"token string\">\"id\"</span> <span class=\"token operator\">-></span> id <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span><span class=\"token function\">nextText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token string\">\"name\"</span> <span class=\"token operator\">-></span> name <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span><span class=\"token function\">nextText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                            <span class=\"token string\">\"version\"</span> <span class=\"token operator\">-></span> version <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span><span class=\"token function\">nextText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//4.2 完成解析某个节点,打印节点内容</span>\n                    XmlPullParser<span class=\"token punctuation\">.</span>END_TAG <span class=\"token operator\">-></span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span> <span class=\"token operator\">==</span> nodeName<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id is <span class=\"token interpolation variable\">$id</span>\"</span><span class=\"token punctuation\">)</span>\n                            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name is <span class=\"token interpolation variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n                            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"version is <span class=\"token interpolation variable\">$version</span>\"</span><span class=\"token punctuation\">)</span>\n                        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                eventType <span class=\"token operator\">=</span> xmlPullParser<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>network-security-config</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>base-config</span> <span class=\"token attr-name\">cleartextTrafficPermitted</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>trust-anchors</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>certificates</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>system<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>trust-anchors</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>base-config</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>network-security-config</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.example.networktest<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--    声明网络权限--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span>\n\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>networkSecurityConfig</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@xml/network_config<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--        设置http请求--></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><img src=\"images/3-2%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/image-20200729223542261.png\" alt=\"image-20200729223542261\"></p>\n<h1 id=\"3-解析JSON格式数据\"><a href=\"#3-解析JSON格式数据\" class=\"headerlink\" title=\"3.解析JSON格式数据\"></a>3.解析JSON格式数据</h1><ol>\n<li>在htdocs目录下创建一个get_data.json文件</li>\n<li>编写解析代码</li>\n</ol>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Clash of Clans\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"7.0\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Boom Beach\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"3.5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Clash Royale\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 使用官方提供的JsonObject\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">parseJSONWithJSONObject</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//1. 获取jsonarray,进行循环解析</span>\n            <span class=\"token keyword\">val</span> jsonArray <span class=\"token operator\">=</span> <span class=\"token function\">JSONArray</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//2. 如果循环中不要最后一个范围区间的值可以使用 until 函数:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">0</span> until jsonArray<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">val</span> jsonObject <span class=\"token operator\">=</span> jsonArray<span class=\"token punctuation\">.</span><span class=\"token function\">getJSONObject</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">val</span> id <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> version <span class=\"token operator\">=</span> jsonObject<span class=\"token punctuation\">.</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span>\n\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id is <span class=\"token interpolation variable\">$id</span>\"</span><span class=\"token punctuation\">)</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name is <span class=\"token interpolation variable\">$name</span>\"</span><span class=\"token punctuation\">)</span>\n                Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"version is <span class=\"token interpolation variable\">$version</span>\"</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"4-优化解析-使用GSON开源库\"><a href=\"#4-优化解析-使用GSON开源库\" class=\"headerlink\" title=\"4.优化解析,使用GSON开源库\"></a>4.优化解析,使用GSON开源库</h1><h2 id=\"1-导入gson依赖\"><a href=\"#1-导入gson依赖\" class=\"headerlink\" title=\"1.导入gson依赖\"></a>1.导入gson依赖</h2><pre class=\" language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'com.google.code.gson:gson:2.8.5'</span></code></pre>\n<p>一段json数据</p>\n<pre class=\" language-json\"><code class=\"language-json\">&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span><span class=\"token number\">20</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> gson<span class=\"token operator\">=</span><span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> person<span class=\"token operator\">=</span>gson<span class=\"token punctuation\">.</span><span class=\"token function\">fromJson</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">,</span>Person<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span></code></pre>\n<p>解析json数组</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"5.5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Clash of Clans\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"7.0\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Boom Beach\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"3.5\"</span><span class=\"token punctuation\">,</span><span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"Clash Royale\"</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">]</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> typeOf <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TypeToken<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>type\n        <span class=\"token keyword\">val</span> appList <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span>fromJson<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">,</span> typeOf<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"2-根据gson格式-编写实体类\"><a href=\"#2-根据gson格式-编写实体类\" class=\"headerlink\" title=\"2.根据gson格式,编写实体类,\"></a>2.根据gson格式,编写实体类,</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> version<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 利用Gson解析json数据\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">parseJSONWithGSON</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//1. 获取gson实例</span>\n        <span class=\"token keyword\">val</span> gson <span class=\"token operator\">=</span> <span class=\"token function\">Gson</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//2. 设置gson数据格式</span>\n        <span class=\"token keyword\">val</span> typeOf <span class=\"token operator\">=</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TypeToken<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>type\n        <span class=\"token keyword\">val</span> appList <span class=\"token operator\">=</span> gson<span class=\"token punctuation\">.</span>fromJson<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">,</span> typeOf<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">//3. 循环遍历jsonarray数据</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>app <span class=\"token keyword\">in</span> appList<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"id is $&amp;#123;app.id&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name is $&amp;#123;app.name&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"version is $&amp;#123;app.version&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-创建一个本地简单的服务器\"><a href=\"#1-创建一个本地简单的服务器\" class=\"headerlink\" title=\"1.创建一个本地简单的服务器\"></a>1.创建一个本地简单的服务器</h1><p>apache服务器: <a href=\"https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14\">https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14</a></p>\n<h1 id=\"2-解析XML格式数据\"><a href=\"#2-解析XML格式数据\" class=\"headerlink\" title=\"2.解析XML格式数据\"></a>2.解析XML格式数据</h1><ol>\n<li>在桌面编写一个get_data.xml文件</li>\n<li>请求网络代码</li>\n<li>解析xml</li>\n<li>由于android9开始不支持http请求,默认是https,需要配置,创建res/xml/network_config.xml</li>\n<li>声明权限</li>\n</ol>\n<pre><code class=\"xml\">&lt;apps&gt;\n    &lt;app&gt;\n        &lt;id&gt;1&lt;/id&gt;\n        &lt;name&gt;Google Maps&lt;/name&gt;\n        &lt;version&gt;1.0&lt;/version&gt;\n    &lt;/app&gt;\n    &lt;app&gt;\n        &lt;id&gt;2&lt;/id&gt;\n        &lt;name&gt;Chrom&lt;/name&gt;\n        &lt;version&gt;2.1&lt;/version&gt;\n    &lt;/app&gt;\n    &lt;app&gt;\n        &lt;id&gt;3&lt;/id&gt;\n        &lt;name&gt;Google Play&lt;/name&gt;\n        &lt;version&gt;2.3&lt;/version&gt;\n    &lt;/app&gt;\n&lt;/apps&gt;</code></pre>\n<pre><code class=\"kotlin\">private fun sendRequestWithOkHttp() &amp;#123;\n        thread &amp;#123;\n            try &amp;#123;\n                //1. 获取okhttp实例\n                val client = OkHttpClient()\n\n                //2. 设置请求参数\n                //post请求(可选)\n                val requestBody=FormBody.Builder()\n                    .add(&quot;username&quot;,&quot;admin&quot;)\n                    .add(&quot;password&quot;,&quot;123456&quot;)\n                    .build()\n                val request = Request.Builder()\n                    //.url(&quot;https://www.baidu.com&quot;)\n                        //读取本地服务器文件\n                    .url(&quot;http://192.168.2.228/get_data.xml&quot;)\n                    //.post(requestBody)\n                    .build()\n\n                //3. 获取服务器返回的数据\n                val response = client.newCall(request).execute()\n                val responseData = response.body?.string()\n                if (responseData != null) &amp;#123;\n                    //showResponse(responseData)\n                    //解析xml数据\n                    parseXMLWithPull(responseData)\n                &amp;#125;\n            &amp;#125; catch (e: Exception) &amp;#123;\n                e.printStackTrace()\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;</code></pre>\n<pre><code class=\"kotlin\">/**\n     * 解析xml数据格式\n     * Pull方式\n     */\n    private fun parseXMLWithPull(xmlData: String) &amp;#123;\n        try &amp;#123;\n            //1. 创建XmlPullParserFactory实例,获取XmlPullParser对象\n            val factory = XmlPullParserFactory.newInstance()\n            val xmlPullParser = factory.newPullParser()\n\n            //2. 将服务器返回的XML设置进去,开始解析\n            xmlPullParser.setInput(StringReader(xmlData))\n\n            //3. 得到当前解析事件\n            var eventType = xmlPullParser.eventType\n            var id = &quot;&quot;\n            var name = &quot;&quot;\n            var version = &quot;&quot;\n\n            //4. 遍历解析事件\n            while (eventType != XmlPullParser.END_DOCUMENT) &amp;#123;\n                val nodeName = xmlPullParser.name\n                when (eventType) &amp;#123;\n                    //4.1 开始解析某个节点\n                    XmlPullParser.START_TAG -&gt; &amp;#123;\n                        when (nodeName) &amp;#123;\n                            //如果节点名等于id name version 就调用nextText()获取节点内容\n                            &quot;id&quot; -&gt; id = xmlPullParser.nextText()\n                            &quot;name&quot; -&gt; name = xmlPullParser.nextText()\n                            &quot;version&quot; -&gt; version = xmlPullParser.nextText()\n                        &amp;#125;\n                    &amp;#125;\n                    //4.2 完成解析某个节点,打印节点内容\n                    XmlPullParser.END_TAG -&gt; &amp;#123;\n                        if (&quot;app&quot; == nodeName) &amp;#123;\n                            Log.d(&quot;MainActivity&quot;, &quot;id is $id&quot;)\n                            Log.d(&quot;MainActivity&quot;, &quot;name is $name&quot;)\n                            Log.d(&quot;MainActivity&quot;, &quot;version is $version&quot;)\n                        &amp;#125;\n                    &amp;#125;\n                &amp;#125;\n                eventType = xmlPullParser.next()\n            &amp;#125;\n        &amp;#125; catch (e: Exception) &amp;#123;\n            e.printStackTrace()\n        &amp;#125;\n    &amp;#125;</code></pre>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;network-security-config&gt;\n    &lt;base-config cleartextTrafficPermitted=&quot;true&quot;&gt;\n        &lt;trust-anchors&gt;\n            &lt;certificates src=&quot;system&quot; /&gt;\n        &lt;/trust-anchors&gt;\n    &lt;/base-config&gt;\n&lt;/network-security-config&gt;</code></pre>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    package=&quot;com.example.networktest&quot;&gt;\n\n&lt;!--    声明网络权限--&gt;\n    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;\n\n    &lt;application\n        android:allowBackup=&quot;true&quot;\n        android:icon=&quot;@mipmap/ic_launcher&quot;\n        android:label=&quot;@string/app_name&quot;\n        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;\n        android:supportsRtl=&quot;true&quot;\n        android:theme=&quot;@style/AppTheme&quot;\n\n        android:networkSecurityConfig=&quot;@xml/network_config&quot;&gt;\n        &lt;!--        设置http请求--&gt;\n\n        &lt;activity android:name=&quot;.MainActivity&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;\n\n                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n    &lt;/application&gt;\n\n&lt;/manifest&gt;</code></pre>\n<p><img src=\"images/3-2%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/image-20200729223542261.png\" alt=\"image-20200729223542261\"></p>\n<h1 id=\"3-解析JSON格式数据\"><a href=\"#3-解析JSON格式数据\" class=\"headerlink\" title=\"3.解析JSON格式数据\"></a>3.解析JSON格式数据</h1><ol>\n<li>在htdocs目录下创建一个get_data.json文件</li>\n<li>编写解析代码</li>\n</ol>\n<pre><code class=\"json\">[\n    &amp;#123;&quot;id&quot;:&quot;5&quot;,&quot;version&quot;:&quot;5.5&quot;,&quot;name&quot;:&quot;Clash of Clans&quot;&amp;#125;,\n    &amp;#123;&quot;id&quot;:&quot;6&quot;,&quot;version&quot;:&quot;7.0&quot;,&quot;name&quot;:&quot;Boom Beach&quot;&amp;#125;,\n    &amp;#123;&quot;id&quot;:&quot;7&quot;,&quot;version&quot;:&quot;3.5&quot;,&quot;name&quot;:&quot;Clash Royale&quot;&amp;#125;\n]</code></pre>\n<pre><code class=\"kotlin\">/**\n     * 使用官方提供的JsonObject\n     */\n    private fun parseJSONWithJSONObject(jsonData: String) &amp;#123;\n        try &amp;#123;\n            //1. 获取jsonarray,进行循环解析\n            val jsonArray = JSONArray(jsonData)\n\n            //2. 如果循环中不要最后一个范围区间的值可以使用 until 函数:\n            for (i in 0 until jsonArray.length()) &amp;#123;\n\n                val jsonObject = jsonArray.getJSONObject(i)\n\n                val id = jsonObject.getString(&quot;id&quot;)\n                val name = jsonObject.getString(&quot;name&quot;)\n                val version = jsonObject.getString(&quot;version&quot;)\n\n                Log.d(&quot;MainActivity&quot;, &quot;id is $id&quot;)\n                Log.d(&quot;MainActivity&quot;, &quot;name is $name&quot;)\n                Log.d(&quot;MainActivity&quot;, &quot;version is $version&quot;)\n            &amp;#125;\n        &amp;#125; catch (e: Exception) &amp;#123;\n            e.printStackTrace()\n        &amp;#125;\n    &amp;#125;</code></pre>\n<h1 id=\"4-优化解析-使用GSON开源库\"><a href=\"#4-优化解析-使用GSON开源库\" class=\"headerlink\" title=\"4.优化解析,使用GSON开源库\"></a>4.优化解析,使用GSON开源库</h1><h2 id=\"1-导入gson依赖\"><a href=\"#1-导入gson依赖\" class=\"headerlink\" title=\"1.导入gson依赖\"></a>1.导入gson依赖</h2><pre><code class=\"groovy\">implementation &#39;com.google.code.gson:gson:2.8.5&#39;</code></pre>\n<p>一段json数据</p>\n<pre><code class=\"json\">&amp;#123;&quot;name&quot;:&quot;Tom&quot;,&quot;age&quot;:20&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">val gson=Gson()\nval person=gson.fromJson(jsonData,Person::class.java)</code></pre>\n<p>解析json数组</p>\n<pre><code class=\"json\">[\n    &amp;#123;&quot;id&quot;:&quot;5&quot;,&quot;version&quot;:&quot;5.5&quot;,&quot;name&quot;:&quot;Clash of Clans&quot;&amp;#125;,\n    &amp;#123;&quot;id&quot;:&quot;6&quot;,&quot;version&quot;:&quot;7.0&quot;,&quot;name&quot;:&quot;Boom Beach&quot;&amp;#125;,\n    &amp;#123;&quot;id&quot;:&quot;7&quot;,&quot;version&quot;:&quot;3.5&quot;,&quot;name&quot;:&quot;Clash Royale&quot;&amp;#125;\n]</code></pre>\n<pre><code class=\"kotlin\">val typeOf = object : TypeToken&lt;List&lt;App&gt;&gt;() &amp;#123;&amp;#125;.type\n        val appList = gson.fromJson&lt;List&lt;App&gt;&gt;(jsonData, typeOf)</code></pre>\n<h2 id=\"2-根据gson格式-编写实体类\"><a href=\"#2-根据gson格式-编写实体类\" class=\"headerlink\" title=\"2.根据gson格式,编写实体类,\"></a>2.根据gson格式,编写实体类,</h2><pre><code class=\"kotlin\">class App(val id: String, val name: String, val version: String)</code></pre>\n<pre><code class=\"kotlin\">/**\n     * 利用Gson解析json数据\n     */\n    private fun parseJSONWithGSON(jsonData: String) &amp;#123;\n        //1. 获取gson实例\n        val gson = Gson()\n        //2. 设置gson数据格式\n        val typeOf = object : TypeToken&lt;List&lt;App&gt;&gt;() &amp;#123;&amp;#125;.type\n        val appList = gson.fromJson&lt;List&lt;App&gt;&gt;(jsonData, typeOf)\n        //3. 循环遍历jsonarray数据\n        for (app in appList) &amp;#123;\n            Log.d(&quot;MainActivity&quot;, &quot;id is $&amp;#123;app.id&amp;#125;&quot;)\n            Log.d(&quot;MainActivity&quot;, &quot;name is $&amp;#123;app.name&amp;#125;&quot;)\n            Log.d(&quot;MainActivity&quot;, &quot;version is $&amp;#123;app.version&amp;#125;&quot;)\n        &amp;#125;\n    &amp;#125;</code></pre>\n"},{"title":"3-3 封装网络请求","auther":"ku jin","_content":"# 1.HttpURLConnection网络封装\n\n1. 定义接口\n\n2. 编写工具类\n\n3. 测试应用\n\n   ```kotlin\n   /**\n    * 创建http回调接口\n    */\n   interface HttpCallbackListener {\n       //服务器成功响应\n       fun onFinish(response: String)\n       //服务器响应失败\n       fun onError(e: Exception)\n   }\n   ```\n\n   ```kotlin\n   object HttpUtil {\n   \n       fun sendHttpRequest(address: String, listener: HttpCallbackListener) {\n           thread {\n               var connection: HttpURLConnection? = null\n               try {\n                   val response = StringBuilder()\n                   val url = URL(address)\n                   connection = url.openConnection() as HttpURLConnection\n                   connection.connectTimeout = 8000\n                   connection.readTimeout = 8000\n                   val input = connection.inputStream\n                   val reader = BufferedReader(InputStreamReader(input))\n                   reader.use {\n                       reader.forEachLine {\n                           response.append(it)\n                       }\n                   }\n                   // 回调onFinish()方法\n                   listener.onFinish(response.toString())\n               } catch (e: Exception) {\n                   e.printStackTrace()\n                   // 回调onError()方法\n                   listener.onError(e)\n               } finally {\n                   connection?.disconnect()\n               }\n           }\n       }\n   }\n   ```\n\n```kotlin\nfun main() {\n    //创建一个新的协程运行\n    runBlocking {\n        getBaiduResponse()\n    }\n}\n\nsuspend fun getBaiduResponse() {\n    try {\n        val response = request(\"https://www.baidu.com/\")\n        // 得到服务器返回的具体内容\n        println(response)\n    } catch (e: Exception) {\n        // 在这里对异常情况进行处理\n    }\n}\n\nsuspend fun request(address: String): String {\n    return suspendCoroutine { continuation ->\n        HttpUtil.sendHttpRequest(address, object :\n            HttpCallbackListener {\n            override fun onFinish(response: String) {\n                continuation.resume(response)\n            }\n\n            override fun onError(e: Exception) {\n                continuation.resumeWithException(e)\n            }\n        })\n    }\n}\n```\n\n# 2.Okhttp网络封装\n\n```kotlin\n/**\n     * callback: okhttp3.Callback: okhttp自带的回调接口\n     */\n    fun sendOkHttpRequest(address: String, callback: okhttp3.Callback) {\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(address)\n            .build()\n        client.newCall(request).enqueue(callback)\n    }\n```\n\n```kotlin\nHttpUtil.sendOkHttpRequest(address,object :Callback{\n        override fun onFailure(call: Call, e: IOException) {\n            //处理异常数据\n        }\n        override fun onResponse(call: Call, response: Response) {\n            //得到服务器返回的具体内容\n            val reponseData=response.body?.string()\n        }\n    })\n```\n\n","source":"_posts/随心记/Android学习/3-3 封装网络请求.md","raw":"---\ntitle: 3-3 封装网络请求 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 3-3 封装网络请求 \n---\n# 1.HttpURLConnection网络封装\n\n1. 定义接口\n\n2. 编写工具类\n\n3. 测试应用\n\n   ```kotlin\n   /**\n    * 创建http回调接口\n    */\n   interface HttpCallbackListener {\n       //服务器成功响应\n       fun onFinish(response: String)\n       //服务器响应失败\n       fun onError(e: Exception)\n   }\n   ```\n\n   ```kotlin\n   object HttpUtil {\n   \n       fun sendHttpRequest(address: String, listener: HttpCallbackListener) {\n           thread {\n               var connection: HttpURLConnection? = null\n               try {\n                   val response = StringBuilder()\n                   val url = URL(address)\n                   connection = url.openConnection() as HttpURLConnection\n                   connection.connectTimeout = 8000\n                   connection.readTimeout = 8000\n                   val input = connection.inputStream\n                   val reader = BufferedReader(InputStreamReader(input))\n                   reader.use {\n                       reader.forEachLine {\n                           response.append(it)\n                       }\n                   }\n                   // 回调onFinish()方法\n                   listener.onFinish(response.toString())\n               } catch (e: Exception) {\n                   e.printStackTrace()\n                   // 回调onError()方法\n                   listener.onError(e)\n               } finally {\n                   connection?.disconnect()\n               }\n           }\n       }\n   }\n   ```\n\n```kotlin\nfun main() {\n    //创建一个新的协程运行\n    runBlocking {\n        getBaiduResponse()\n    }\n}\n\nsuspend fun getBaiduResponse() {\n    try {\n        val response = request(\"https://www.baidu.com/\")\n        // 得到服务器返回的具体内容\n        println(response)\n    } catch (e: Exception) {\n        // 在这里对异常情况进行处理\n    }\n}\n\nsuspend fun request(address: String): String {\n    return suspendCoroutine { continuation ->\n        HttpUtil.sendHttpRequest(address, object :\n            HttpCallbackListener {\n            override fun onFinish(response: String) {\n                continuation.resume(response)\n            }\n\n            override fun onError(e: Exception) {\n                continuation.resumeWithException(e)\n            }\n        })\n    }\n}\n```\n\n# 2.Okhttp网络封装\n\n```kotlin\n/**\n     * callback: okhttp3.Callback: okhttp自带的回调接口\n     */\n    fun sendOkHttpRequest(address: String, callback: okhttp3.Callback) {\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(address)\n            .build()\n        client.newCall(request).enqueue(callback)\n    }\n```\n\n```kotlin\nHttpUtil.sendOkHttpRequest(address,object :Callback{\n        override fun onFailure(call: Call, e: IOException) {\n            //处理异常数据\n        }\n        override fun onResponse(call: Call, response: Response) {\n            //得到服务器返回的具体内容\n            val reponseData=response.body?.string()\n        }\n    })\n```\n\n","slug":"随心记/Android学习/3-3 封装网络请求","published":1,"date":"2020-08-02T23:42:42.024Z","updated":"2020-08-02T23:42:59.739Z","_id":"ckdcza4h0002arkamh4srelyg","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-HttpURLConnection网络封装\"><a href=\"#1-HttpURLConnection网络封装\" class=\"headerlink\" title=\"1.HttpURLConnection网络封装\"></a>1.HttpURLConnection网络封装</h1><ol>\n<li><p>定义接口</p>\n</li>\n<li><p>编写工具类</p>\n</li>\n<li><p>测试应用</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 创建http回调接口\n */</span>\n<span class=\"token keyword\">interface</span> HttpCallbackListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//服务器成功响应</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//服务器响应失败</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> HttpUtil &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">sendHttpRequest</span><span class=\"token punctuation\">(</span>address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> listener<span class=\"token operator\">:</span> HttpCallbackListener<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        thread &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> connection<span class=\"token operator\">:</span> HttpURLConnection<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n            <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">val</span> url <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n                connection <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">openConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HttpURLConnection\n                connection<span class=\"token punctuation\">.</span>connectTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n                connection<span class=\"token punctuation\">.</span>readTimeout <span class=\"token operator\">=</span> <span class=\"token number\">8000</span>\n                <span class=\"token keyword\">val</span> input <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span>inputStream\n                <span class=\"token keyword\">val</span> reader <span class=\"token operator\">=</span> <span class=\"token function\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token function\">InputStreamReader</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                reader<span class=\"token punctuation\">.</span>use &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    reader<span class=\"token punctuation\">.</span>forEachLine &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        response<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span>\n                    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 回调onFinish()方法</span>\n                listener<span class=\"token punctuation\">.</span><span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 回调onError()方法</span>\n                listener<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">finally</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                connection<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//创建一个新的协程运行</span>\n    runBlocking &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getBaiduResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nsuspend <span class=\"token keyword\">fun</span> <span class=\"token function\">getBaiduResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">val</span> response <span class=\"token operator\">=</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com/\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 得到服务器返回的具体内容</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 在这里对异常情况进行处理</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\nsuspend <span class=\"token keyword\">fun</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span>address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> suspendCoroutine &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> continuation <span class=\"token operator\">-></span>\n        HttpUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendHttpRequest</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span>\n            HttpCallbackListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onFinish</span><span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                continuation<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                continuation<span class=\"token punctuation\">.</span><span class=\"token function\">resumeWithException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h1 id=\"2-Okhttp网络封装\"><a href=\"#2-Okhttp网络封装\" class=\"headerlink\" title=\"2.Okhttp网络封装\"></a>2.Okhttp网络封装</h1><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * callback: okhttp3.Callback: okhttp自带的回调接口\n     */</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">sendOkHttpRequest</span><span class=\"token punctuation\">(</span>address<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">:</span> okhttp3<span class=\"token punctuation\">.</span>Callback<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">val</span> client <span class=\"token operator\">=</span> <span class=\"token function\">OkHttpClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> request <span class=\"token operator\">=</span> Request<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        client<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">HttpUtil<span class=\"token punctuation\">.</span><span class=\"token function\">sendOkHttpRequest</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">,</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span>Callback&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onFailure</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> Call<span class=\"token punctuation\">,</span> e<span class=\"token operator\">:</span> IOException<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//处理异常数据</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onResponse</span><span class=\"token punctuation\">(</span>call<span class=\"token operator\">:</span> Call<span class=\"token punctuation\">,</span> response<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//得到服务器返回的具体内容</span>\n            <span class=\"token keyword\">val</span> reponseData<span class=\"token operator\">=</span>response<span class=\"token punctuation\">.</span>body<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"1-HttpURLConnection网络封装\"><a href=\"#1-HttpURLConnection网络封装\" class=\"headerlink\" title=\"1.HttpURLConnection网络封装\"></a>1.HttpURLConnection网络封装</h1><ol>\n<li><p>定义接口</p>\n</li>\n<li><p>编写工具类</p>\n</li>\n<li><p>测试应用</p>\n<pre><code class=\"kotlin\">/**\n * 创建http回调接口\n */\ninterface HttpCallbackListener &amp;#123;\n    //服务器成功响应\n    fun onFinish(response: String)\n    //服务器响应失败\n    fun onError(e: Exception)\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">object HttpUtil &amp;#123;\n\n    fun sendHttpRequest(address: String, listener: HttpCallbackListener) &amp;#123;\n        thread &amp;#123;\n            var connection: HttpURLConnection? = null\n            try &amp;#123;\n                val response = StringBuilder()\n                val url = URL(address)\n                connection = url.openConnection() as HttpURLConnection\n                connection.connectTimeout = 8000\n                connection.readTimeout = 8000\n                val input = connection.inputStream\n                val reader = BufferedReader(InputStreamReader(input))\n                reader.use &amp;#123;\n                    reader.forEachLine &amp;#123;\n                        response.append(it)\n                    &amp;#125;\n                &amp;#125;\n                // 回调onFinish()方法\n                listener.onFinish(response.toString())\n            &amp;#125; catch (e: Exception) &amp;#123;\n                e.printStackTrace()\n                // 回调onError()方法\n                listener.onError(e)\n            &amp;#125; finally &amp;#123;\n                connection?.disconnect()\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n</li>\n</ol>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n    //创建一个新的协程运行\n    runBlocking &amp;#123;\n        getBaiduResponse()\n    &amp;#125;\n&amp;#125;\n\nsuspend fun getBaiduResponse() &amp;#123;\n    try &amp;#123;\n        val response = request(&quot;https://www.baidu.com/&quot;)\n        // 得到服务器返回的具体内容\n        println(response)\n    &amp;#125; catch (e: Exception) &amp;#123;\n        // 在这里对异常情况进行处理\n    &amp;#125;\n&amp;#125;\n\nsuspend fun request(address: String): String &amp;#123;\n    return suspendCoroutine &amp;#123; continuation -&gt;\n        HttpUtil.sendHttpRequest(address, object :\n            HttpCallbackListener &amp;#123;\n            override fun onFinish(response: String) &amp;#123;\n                continuation.resume(response)\n            &amp;#125;\n\n            override fun onError(e: Exception) &amp;#123;\n                continuation.resumeWithException(e)\n            &amp;#125;\n        &amp;#125;)\n    &amp;#125;\n&amp;#125;</code></pre>\n<h1 id=\"2-Okhttp网络封装\"><a href=\"#2-Okhttp网络封装\" class=\"headerlink\" title=\"2.Okhttp网络封装\"></a>2.Okhttp网络封装</h1><pre><code class=\"kotlin\">/**\n     * callback: okhttp3.Callback: okhttp自带的回调接口\n     */\n    fun sendOkHttpRequest(address: String, callback: okhttp3.Callback) &amp;#123;\n        val client = OkHttpClient()\n        val request = Request.Builder()\n            .url(address)\n            .build()\n        client.newCall(request).enqueue(callback)\n    &amp;#125;</code></pre>\n<pre><code class=\"kotlin\">HttpUtil.sendOkHttpRequest(address,object :Callback&amp;#123;\n        override fun onFailure(call: Call, e: IOException) &amp;#123;\n            //处理异常数据\n        &amp;#125;\n        override fun onResponse(call: Call, response: Response) &amp;#123;\n            //得到服务器返回的具体内容\n            val reponseData=response.body?.string()\n        &amp;#125;\n    &amp;#125;)</code></pre>\n"},{"title":"3-4 开源网络封装库Retofit","auther":"ku jin","_content":"# 1.简介\n\n\n\n# 2.Retrofit基本用法\n\n### 2.1添加依赖\n\n```groovy\n    implementation 'com.squareup.retrofit2:retrofit:2.6.1'\n    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'\n```\n\n## 2.2.编写gson实体类\n\n```kotlin\nclass App(val id: String, val name: String, val version: String)\n```\n\n## 2.3创建接口\n\n```kotlin\ninterface AppService {\n    /**\n     * 使用get请求,参数是请求相对地址\n     * 返回类型是 对应的实体类\n     */\n    @GET(\"get_data.json\")\n    fun getAppData(): Call<List<App>>\n\n}\n```\n\n## 2.4Activity界面编辑\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <Button\n        android:id=\"@+id/getAppDataBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Get App Data\" />\n\n</LinearLayout>\n```\n\n","source":"_posts/随心记/Android学习/3-4 开源网络封装库Retofit .md","raw":"---\ntitle: 3-4 开源网络封装库Retofit  # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 3-4 开源网络封装库Retofit  \n---\n# 1.简介\n\n\n\n# 2.Retrofit基本用法\n\n### 2.1添加依赖\n\n```groovy\n    implementation 'com.squareup.retrofit2:retrofit:2.6.1'\n    implementation 'com.squareup.retrofit2:converter-gson:2.6.1'\n```\n\n## 2.2.编写gson实体类\n\n```kotlin\nclass App(val id: String, val name: String, val version: String)\n```\n\n## 2.3创建接口\n\n```kotlin\ninterface AppService {\n    /**\n     * 使用get请求,参数是请求相对地址\n     * 返回类型是 对应的实体类\n     */\n    @GET(\"get_data.json\")\n    fun getAppData(): Call<List<App>>\n\n}\n```\n\n## 2.4Activity界面编辑\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" >\n\n    <Button\n        android:id=\"@+id/getAppDataBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Get App Data\" />\n\n</LinearLayout>\n```\n\n","slug":"随心记/Android学习/3-4 开源网络封装库Retofit ","published":1,"date":"2020-08-02T23:42:42.036Z","updated":"2020-08-02T23:42:59.739Z","_id":"ckdcza4h1002drkam8kj670yb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h1><h1 id=\"2-Retrofit基本用法\"><a href=\"#2-Retrofit基本用法\" class=\"headerlink\" title=\"2.Retrofit基本用法\"></a>2.Retrofit基本用法</h1><h3 id=\"2-1添加依赖\"><a href=\"#2-1添加依赖\" class=\"headerlink\" title=\"2.1添加依赖\"></a>2.1添加依赖</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">    implementation <span class=\"token string\">'com.squareup.retrofit2:retrofit:2.6.1'</span>\n    implementation <span class=\"token string\">'com.squareup.retrofit2:converter-gson:2.6.1'</span></code></pre>\n<h2 id=\"2-2-编写gson实体类\"><a href=\"#2-2-编写gson实体类\" class=\"headerlink\" title=\"2.2.编写gson实体类\"></a>2.2.编写gson实体类</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> version<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"2-3创建接口\"><a href=\"#2-3创建接口\" class=\"headerlink\" title=\"2.3创建接口\"></a>2.3创建接口</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> AppService &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 使用get请求,参数是请求相对地址\n     * 返回类型是 对应的实体类\n     */</span>\n    <span class=\"token annotation builtin\">@GET</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get_data.json\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getAppData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Call<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">></span>\n\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-4Activity界面编辑\"><a href=\"#2-4Activity界面编辑\" class=\"headerlink\" title=\"2.4Activity界面编辑\"></a>2.4Activity界面编辑</h2><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/getAppDataBtn<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Get App Data<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h1><h1 id=\"2-Retrofit基本用法\"><a href=\"#2-Retrofit基本用法\" class=\"headerlink\" title=\"2.Retrofit基本用法\"></a>2.Retrofit基本用法</h1><h3 id=\"2-1添加依赖\"><a href=\"#2-1添加依赖\" class=\"headerlink\" title=\"2.1添加依赖\"></a>2.1添加依赖</h3><pre><code class=\"groovy\">    implementation &#39;com.squareup.retrofit2:retrofit:2.6.1&#39;\n    implementation &#39;com.squareup.retrofit2:converter-gson:2.6.1&#39;</code></pre>\n<h2 id=\"2-2-编写gson实体类\"><a href=\"#2-2-编写gson实体类\" class=\"headerlink\" title=\"2.2.编写gson实体类\"></a>2.2.编写gson实体类</h2><pre><code class=\"kotlin\">class App(val id: String, val name: String, val version: String)</code></pre>\n<h2 id=\"2-3创建接口\"><a href=\"#2-3创建接口\" class=\"headerlink\" title=\"2.3创建接口\"></a>2.3创建接口</h2><pre><code class=\"kotlin\">interface AppService &amp;#123;\n    /**\n     * 使用get请求,参数是请求相对地址\n     * 返回类型是 对应的实体类\n     */\n    @GET(&quot;get_data.json&quot;)\n    fun getAppData(): Call&lt;List&lt;App&gt;&gt;\n\n&amp;#125;</code></pre>\n<h2 id=\"2-4Activity界面编辑\"><a href=\"#2-4Activity界面编辑\" class=\"headerlink\" title=\"2.4Activity界面编辑\"></a>2.4Activity界面编辑</h2><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    android:orientation=&quot;vertical&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot; &gt;\n\n    &lt;Button\n        android:id=&quot;@+id/getAppDataBtn&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;Get App Data&quot; /&gt;\n\n&lt;/LinearLayout&gt;</code></pre>\n"},{"title":"Android Studio使用技巧","auther":"ku jin","_content":"[toc]\n\n# IDE技巧\n\n## 1. 提取样式\n\n![image-20200718112705738](images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112705738.png)\n\n![image-20200718112818773](images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112818773.png)","source":"_posts/随心记/Android学习/Android Studio使用技巧.md","raw":"---\ntitle: Android Studio使用技巧 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - Android Studio使用技巧 \n---\n[toc]\n\n# IDE技巧\n\n## 1. 提取样式\n\n![image-20200718112705738](images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112705738.png)\n\n![image-20200718112818773](images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112818773.png)","slug":"随心记/Android学习/Android Studio使用技巧","published":1,"date":"2020-08-02T23:42:42.042Z","updated":"2020-08-02T23:42:59.740Z","_id":"ckdcza4h2002erkamf0stde74","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"IDE技巧\"><a href=\"#IDE技巧\" class=\"headerlink\" title=\"IDE技巧\"></a>IDE技巧</h1><h2 id=\"1-提取样式\"><a href=\"#1-提取样式\" class=\"headerlink\" title=\"1. 提取样式\"></a>1. 提取样式</h2><p><img src=\"images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112705738.png\" alt=\"image-20200718112705738\"></p>\n<p><img src=\"images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112818773.png\" alt=\"image-20200718112818773\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"IDE技巧\"><a href=\"#IDE技巧\" class=\"headerlink\" title=\"IDE技巧\"></a>IDE技巧</h1><h2 id=\"1-提取样式\"><a href=\"#1-提取样式\" class=\"headerlink\" title=\"1. 提取样式\"></a>1. 提取样式</h2><p><img src=\"images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112705738.png\" alt=\"image-20200718112705738\"></p>\n<p><img src=\"images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112818773.png\" alt=\"image-20200718112818773\"></p>\n"},{"title":"BottomNavigationView控件学习md","auther":"ku jin","_content":"# as可直接生成底部导航\n![](/imgs/1.png)\n# 相关文件\n![](/imgs/2.png)\n![](/imgs/2_1.png)\n## 注意\n\tmenu->item->id 要和 navigation->fragment->id 保持一致<br>\n\tstartDestination:启动页面\n![](/imgs/3.png)\n![](/imgs/4.png)\n### 核心代码\n     private void setNav() {\n        states = new int[][] {\n                new int[] { android.R.attr.state_selected}, // 选中状态\n                new int[] { android.R.attr.state_enabled}  // 未选中状态\n        };\n\n        colors = new int[] {\n                Color.BLUE,\n                Color.GRAY\n        };\n        ColorStateList myList = new ColorStateList(states, colors);\n        BottomNavigationView navView = findViewById(R.id.nav_view);\n        navView.setItemTextColor(myList);//设置item文字颜色\n        navView.setItemIconTintList(myList);//设置item图片颜色\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\n        NavigationUI.setupWithNavController(navView, navController);\n    }","source":"_posts/随心记/Android学习/BottomNavigationView控件学习md.md","raw":"---\ntitle: BottomNavigationView控件学习md # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - BottomNavigationView控件学习md \n---\n# as可直接生成底部导航\n![](/imgs/1.png)\n# 相关文件\n![](/imgs/2.png)\n![](/imgs/2_1.png)\n## 注意\n\tmenu->item->id 要和 navigation->fragment->id 保持一致<br>\n\tstartDestination:启动页面\n![](/imgs/3.png)\n![](/imgs/4.png)\n### 核心代码\n     private void setNav() {\n        states = new int[][] {\n                new int[] { android.R.attr.state_selected}, // 选中状态\n                new int[] { android.R.attr.state_enabled}  // 未选中状态\n        };\n\n        colors = new int[] {\n                Color.BLUE,\n                Color.GRAY\n        };\n        ColorStateList myList = new ColorStateList(states, colors);\n        BottomNavigationView navView = findViewById(R.id.nav_view);\n        navView.setItemTextColor(myList);//设置item文字颜色\n        navView.setItemIconTintList(myList);//设置item图片颜色\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\n        NavigationUI.setupWithNavController(navView, navController);\n    }","slug":"随心记/Android学习/BottomNavigationView控件学习md","published":1,"date":"2020-08-02T23:42:42.048Z","updated":"2020-08-02T23:42:59.740Z","_id":"ckdcza4hk002trkamb7ppa0mb","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"as可直接生成底部导航\"><a href=\"#as可直接生成底部导航\" class=\"headerlink\" title=\"as可直接生成底部导航\"></a>as可直接生成底部导航</h1><p><img src=\"/imgs/1.png\"></p>\n<h1 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h1><p><img src=\"/imgs/2.png\"><br><img src=\"/imgs/2_1.png\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><pre><code>menu-&gt;item-&gt;id 要和 navigation-&gt;fragment-&gt;id 保持一致&lt;br&gt;\nstartDestination:启动页面</code></pre>\n<p><img src=\"/imgs/3.png\"><br><img src=\"/imgs/4.png\"></p>\n<h3 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h3><pre><code> private void setNav() {\n    states = new int[][] {\n            new int[] { android.R.attr.state_selected}, // 选中状态\n            new int[] { android.R.attr.state_enabled}  // 未选中状态\n    };\n\n    colors = new int[] {\n            Color.BLUE,\n            Color.GRAY\n    };\n    ColorStateList myList = new ColorStateList(states, colors);\n    BottomNavigationView navView = findViewById(R.id.nav_view);\n    navView.setItemTextColor(myList);//设置item文字颜色\n    navView.setItemIconTintList(myList);//设置item图片颜色\n    NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\n    NavigationUI.setupWithNavController(navView, navController);\n}</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"as可直接生成底部导航\"><a href=\"#as可直接生成底部导航\" class=\"headerlink\" title=\"as可直接生成底部导航\"></a>as可直接生成底部导航</h1><p><img src=\"/imgs/1.png\"></p>\n<h1 id=\"相关文件\"><a href=\"#相关文件\" class=\"headerlink\" title=\"相关文件\"></a>相关文件</h1><p><img src=\"/imgs/2.png\"><br><img src=\"/imgs/2_1.png\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><pre><code>menu-&gt;item-&gt;id 要和 navigation-&gt;fragment-&gt;id 保持一致&lt;br&gt;\nstartDestination:启动页面</code></pre>\n<p><img src=\"/imgs/3.png\"><br><img src=\"/imgs/4.png\"></p>\n<h3 id=\"核心代码\"><a href=\"#核心代码\" class=\"headerlink\" title=\"核心代码\"></a>核心代码</h3><pre><code> private void setNav() &#123;\n    states = new int[][] &#123;\n            new int[] &#123; android.R.attr.state_selected&#125;, // 选中状态\n            new int[] &#123; android.R.attr.state_enabled&#125;  // 未选中状态\n    &#125;;\n\n    colors = new int[] &#123;\n            Color.BLUE,\n            Color.GRAY\n    &#125;;\n    ColorStateList myList = new ColorStateList(states, colors);\n    BottomNavigationView navView = findViewById(R.id.nav_view);\n    navView.setItemTextColor(myList);//设置item文字颜色\n    navView.setItemIconTintList(myList);//设置item图片颜色\n    NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);\n    NavigationUI.setupWithNavController(navView, navController);\n&#125;</code></pre>\n"},{"title":"Jetpack","auther":"ku jin","_content":"[toc]\n\n# Jetpack简介\n\nJetpack是一个开发组件工具集，官网：https://developer.android.google.cn/jetpack\n\nJetpack 是一套库，可帮助开发人员遵循最佳实践，减少样板代码，并编写跨 Android 版本和设备一致工作的代码，以便开发人员可以专注于他们关心的代码。\n\nJetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。\n\n- [WorkManager](https://developer.android.google.cn/topic/libraries/architecture/workmanager) - 满足您的后台调度需求。\n- [Room](https://developer.android.google.cn/topic/libraries/architecture/room) - 实现数据存储持久性。\n- [Navigation](https://developer.android.google.cn/guide/navigation/navigation-getting-started) - 管理应用导航流程。\n- [CameraX](https://developer.android.google.cn/training/camerax) - 满足相机应用需求。\n- 请参阅所有 Jetpack 库的[概览](https://developer.android.google.cn/jetpack/androidx/versions#version-table)。\n\n![image-20200721153616389](images/Jetpack/image-20200721153616389.png)\n\n![image-20200722131636968](images/Jetpack/image-20200722131636968.png)\n\n## ViewModel\n\n### 简介\n\nViewModel是Jetpack组件之一，在传统Activity中需要负责逻辑处理，又要控制UI展示，甚至还得处理网络回调，现在ViewModel将负责Activity的数据部分\n\n当手机旋转时Activity会被重新创建，但ViewModel生命周期是Activtity创建到销毁全过程，所以旋转不会导致数据丢失\n\n![image-20200721154242410](images/Jetpack/image-20200721154242410.png)\n\n### 简单的计时器\n\n1. #### 导入依赖\n\n   ```groovy\n   def lifecycle_version = \"2.2.0\"\n       implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n   ```\n\n   ​\t\n\n2. #### 创建ViewModel\n\n   ```kotlin\n   import androidx.lifecycle.ViewModel\n   \n   class MainModel:ViewModel() {\n       var counter=0\n   }\n   ```\n\n3. #### 编写Activity\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       xmlns:tools=\"http://schemas.android.com/tools\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:orientation=\"vertical\"\n       tools:context=\".MainActivity\">\n   \n   \n       <TextView\n           android:id=\"@+id/infoText\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_gravity=\"center_horizontal\"\n           android:text=\"@string/jishi\" />\n   \n       <Button\n           android:id=\"@+id/plusOnBtn\"\n           android:layout_gravity=\"center_vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@string/pulus_one\" />\n   </LinearLayout>\n   ```\n\n   ```kotlin\n   \n   package com.kj.scoreviewmodel\n   \n   import android.os.Bundle\n   import androidx.appcompat.app.AppCompatActivity\n   import androidx.lifecycle.ViewModelProviders\n   import kotlinx.android.synthetic.main.activity_main.*\n   \n   class MainActivity : AppCompatActivity() {\n   \n       //定义viewmodel\n       lateinit var viewModel: MainModel\n   \n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_main)\n   \n           //初始化viewmodel\n           viewModel= ViewModelProviders.of(this).get(MainModel::class.java)\n           \n           //button点击事件\n           plusOnBtn.setOnClickListener {\n               viewModel.counter++\n               refreshCounter()\n           }\n           refreshCounter()\n   \n       }\n       //更新视图\n       private fun refreshCounter() {\n           infoText.text=viewModel.counter.toString()\n       }\n   }\n   \n   ```\n\n### 向ViewModel传递参数\n\n```kotlin\nimport androidx.lifecycle.ViewModel\n//添加构造参数\nclass MainModel2(counter:Int): ViewModel() {\n    var counter=counter\n}\n```\n\n```kotlin\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n//利用ViewModelProvider.Factory 接口 实现构造函数\nclass MainViewModelFactory(private val counter: Int) : ViewModelProvider.Factory {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        return MainModel2(counter) as T\n    }\n}\n```\n\n```kotlin\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProviders\nimport kotlinx.android.synthetic.main.activity_main.*\n\n\nclass MainActivity2 : AppCompatActivity() {\n\n    lateinit var viewModel:MainModel2\n    lateinit var sp: SharedPreferences\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sp=getPreferences(Context.MODE_PRIVATE)\n        val countReserved=sp.getInt(\"count_reserved\",0)\n\n        //初始化viewmodel（修改点）\n        viewModel= ViewModelProviders.of(this,MainViewModelFactory(countReserved)).get(MainModel2::class.java)\n\n        //button点击事件\n        plusOnBtn.setOnClickListener {\n            viewModel.counter++\n            refreshCounter()\n        }\n        refreshCounter()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        sp.edit().putInt(\"count_reserved\",viewModel.counter).apply()\n    }\n\n    //更新视图\n    private fun refreshCounter() {\n        infoText.text=viewModel.counter.toString()\n    }\n}\n```\n\n### 更正由于ViewModel 设计理念是不依赖与Activity\n\n### 使用google推荐的写法\n\n```kotlin\nclass UserProfileViewModel : ViewModel() {\n   val userId : String = TODO()\n   val user : User = TODO()\n}\n```\n\n```kotlin\nprivate val viewModel: UserProfileViewModel by viewModels()\n```\n\n### 遇到的错误\n\n```\nCannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target\n//解决\nandroid {\n    ...\n    compileOptions {\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n    }\n \n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n}\n\n```\n\n![image-20200722134519104](images/Jetpack/image-20200722134519104.png)\n\n## Lifecycles\n\n### 简介\n\n在网络请求中，由于网络响应延迟，页面关闭情况，我们要对activity生命周期进行逻辑处理\n\n### 监听器\n\n```\nimport android.util.Log\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\n\nclass MyObserver(val lifecycle: Lifecycle) : LifecycleObserver {\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    fun activityStart(){\n        Log.d(\"MyObserver\", \"activityStart: \")\n    }\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    fun activityStop(){\n        Log.d(\"MyObserver\", \"activityStop: \")\n    }\n}\n```\n\n```\n//activity监听生命周期\n        MyObserver(lifecycle)\n        val currentState = lifecycle.currentState\n        Toast.makeText(this, \"\"+currentState, Toast.LENGTH_SHORT).show()\n```\n\n## LiveData\n\n[`LiveData`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData) 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。\n\n您可以注册与实现 [`LifecycleOwner`](https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner) 接口的对象配对的观察者。有了这种关系，当相应的 [`Lifecycle`](https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle) 对象的状态变为 [`DESTROYED`](https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.State#DESTROYED) 时，便可移除此观察者。 这对于 Activity 和 Fragment 特别有用，因为它们可以放心地观察 [`LiveData`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData) 对象而不必担心泄露（当 Activity 和 Fragment 的生命周期被销毁时，系统会立即退订它们）。\n\n- 确保界面符合数据状态\n- 不会发生内存泄漏\n- 不会因Activity停止导致崩溃\n- 不需要手动处理生命周期\n- 数据保持最新状态\n- 适当的配置更改\n- 共享资源\n\n### 1.使用LiveData对象\n\n1. 创建 `LiveData` 实例以存储某种类型的数据。这通常在 [`ViewModel`](https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel) 类中完成。\n\n2. 创建可定义 [`onChanged()`](https://developer.android.google.cn/reference/androidx/lifecycle/Observer#onChanged(T)) 方法的 [`Observer`](https://developer.android.google.cn/reference/androidx/lifecycle/Observer) 对象，该方法可以控制当 `LiveData` 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 `Observer` 对象。\n\n3. 使用 [`observe()`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe(android.arch.lifecycle.LifecycleOwner, android.arch.lifecycle.Observer)) 方法将 `Observer` 对象附加到 `LiveData` 对象。`observe()` 方法会采用 [`LifecycleOwner`](https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner) 对象。这样会使 `Observer` 对象订阅 `LiveData` 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 `Observer` 对象。\n\n   ```kotlin\n   import androidx.lifecycle.MutableLiveData\n   import androidx.lifecycle.ViewModel\n   \n   class NameViewModel : ViewModel() {\n   \n       // 用字符串创建一个LiveData\n       val currentName: MutableLiveData<String> by lazy {\n           MutableLiveData<String>()\n       }\n   \n       // ViewModel的其余部分…\n   }\n   ```\n\n   ```kotlin\n   class NameActivity : AppCompatActivity() {\n   \n       // 使用'by viewModels()' Kotlin属性委托\n       // 来自activity-ktx工件\n       private val model: NameViewModel by viewModels()\n   \n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_name)\n   \n           // 创建用于更新UI的观察者。\n           val nameObserver = Observer<String> { newName ->\n               // 更新UI，这里是TextView。\n               nameTextView.text = newName\n           }\n   \n           // 观察LiveData，将此活动作为LifecycleOwner和observer传递进来。\n           model.currentName.observe(this, nameObserver)\n   \n           // 修改参数\n           button.setOnClickListener {\n               model.currentName.setValue(edText.text.toString())\n               //model.currentName.postValue(edText.text.toString())\n           }\n   \n       }\n   }\n   ```\n\n### 2.map和switchMap的使用\n\n1. 定义一个User类\n\n   ```kotlin\n   data class User(var fistName:String,var lastName:String,var age:Int)\n   ```\n\n   \n\n2. 编写ViewModel\n\n   ```kotlin\n   class MainViewModel(countReserved:Int):ViewModel(){\n   \tprivate val userLiveData=MytableLiveData<User>()\n       \n       val userName:LiveData<String>=Transformations.map(userLiveData){user->\n           \"${user.firstName} ${user.lastName}\"                                                            \n       }\n   }\n   ```\n\n   \n\n3. \n\n## Room\n\n[Room](https://developer.android.google.cn/training/data-storage/room) 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。\n\nRoom 包含 3 个主要组件：\n\n- [**数据库**](https://developer.android.google.cn/reference/androidx/room/Database)：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。\n\n  使用 [`@Database`](https://developer.android.google.cn/reference/androidx/room/Database) 注释的类应满足以下条件：\n\n  - 是扩展 [`RoomDatabase`](https://developer.android.google.cn/reference/androidx/room/RoomDatabase) 的抽象类。\n  - 在注释中添加与数据库关联的实体列表。\n  - 包含具有 0 个参数且返回使用 [`@Dao`](https://developer.android.google.cn/reference/androidx/room/Dao) 注释的类的抽象方法。\n\n  在运行时，您可以通过调用 [`Room.databaseBuilder()`](https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder(android.content.Context, java.lang.Class, java.lang.String)) 或 [`Room.inMemoryDatabaseBuilder()`](https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder(android.content.Context, java.lang.Class)) 获取 [`Database`](https://developer.android.google.cn/reference/androidx/room/Database) 的实例。\n\n  \n\n- [**Entity**](https://developer.android.google.cn/training/data-storage/room/defining-data)：表示数据库中的表。\n\n- [**DAO**](https://developer.android.google.cn/training/data-storage/room/accessing-data)：包含用于访问数据库的方法。\n\n应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。\n\n![image-20200722181709403](images/Jetpack/image-20200722181709403.png)\n\n### 简单使用\n\n导入依赖\n\n```kotlin\ndef room_version = \"2.2.5\"\n\n    implementation \"androidx.room:room-runtime:$room_version\"\n    //annotationProcessor \"androidx.room:room-compiler:$room_version\" // 对于Kotlin来说，使用kapt而不是annotationProcessor\n    kapt \"androidx.room:room-compiler:$room_version\" // 对于Kotlin来说，使用kapt而不是annotationProcessor\n\n// 可选- Kotlin扩展和协同程序支持空间\nimplementation \"androidx.room:room-ktx:$room_version\"\n\n// 可选- RxJava支持房间\nimplementation \"androidx.room:room-rxjava2:$room_version\"\n\n// 可选-番石榴支持房间，包括可选和ListenableFuture\nimplementation \"androidx.room:room-guava:$room_version\"\n\n// 测试助手\ntestImplementation \"androidx.room:room-testing:$room_version\"\n```\n\nUser\n\n```kotlin\n//数据库的表\n@Entity\ndata class User(\n    @ColumnInfo(name = \"first_name\") val firstName: String?,\n    @ColumnInfo(name = \"last_name\") val lastName: String?\n){\n    @PrimaryKey(autoGenerate = true)\n    var uid: Long=0\n}   \n```\n\nUserDao\n\n```kotlin\n//数据访问对象\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): List<User>\n\n    @Query(\"SELECT * FROM user WHERE uid IN (:userIds)\")\n    fun loadAllByIds(userIds: IntArray): List<User>\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :first AND \" +\n            \"last_name LIKE :last LIMIT 1\")\n    fun findByName(first: String, last: String): User\n\n    @Insert\n    fun insertUser(user: User):Long\n\n    @Delete\n    fun delete(user: User)\n}\n```\n\nAppDatabase\n\n```kotlin\n    @Database(entities = arrayOf(User::class), version = 1)\n    abstract class AppDatabase : RoomDatabase() {\n        abstract fun userDao(): UserDao\n    }\n    \n```\n\n创建上述文件后，您可以使用以下代码获取已创建的数据库的实例：\n\n```kotlin\n//定义数据库对象，数据库版本，包含的实体类\n@Database(entities = [User::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n\n    companion object{\n        private var instance: AppDatabase?=null\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let {\n                return it\n            }\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,\"app_database\")\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n\n                .build().apply {\n                    instance =this\n                }\n        }\n    }\n} \n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"20dp\"\n    android:orientation=\"vertical\"\n    tools:context=\".room.RoomActivity\">\n\n    <EditText\n        android:id=\"@+id/edText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"name 用空格隔开\"\n        android:autofillHints=\"姓名\"\n        android:inputType=\"text\" />\n\n    <Button\n        android:id=\"@+id/addBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/add\" />\n\n    <Button\n        android:id=\"@+id/queryBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/query_data\"/>\n\n    <Button\n        android:id=\"@+id/updateBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/update\" />\n\n    <Button\n        android:id=\"@+id/deleteBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/delete\" />\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:id=\"@+id/textView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/aldrich\"\n                android:textSize=\"20sp\" />\n        </LinearLayout>\n    </ScrollView>\n\n\n</LinearLayout>\n```\n\n```kotlin\nclass RoomActivity : AppCompatActivity() {\n\n    //获取数据库实例\n    val userDao= AppDatabase.getDatabase(this).userDao()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_room)\n\n        addBtn.setOnClickListener {\n            userDao.insertUser(User(edText.text.toString().split(\" \")[0],edText.text.toString().split(\" \")[1]))\n        }\n\n        updateBtn.setOnClickListener {\n            userDao.upDateUser(User(edText.text.toString().split(\" \")[0],edText.text.toString().split(\" \")[1]))\n        }\n\n        deleteBtn.setOnClickListener {\n            userDao.deleteUserByLastName(textView.text.toString())\n        }\n\n        queryBtn.setOnClickListener {\n            var str=\"\"\n            for (user in userDao.getAll()){\n                str+=user.toString()+\"\\n\"\n            }\n            textView.text=str\n        }\n    }\n}\n```\n\n### Room的数据库升级\n\n添加数据库表Book\n\n```kotlin\n@Entity\ndata class Book(var name:String,var pages: Int) {\n    @PrimaryKey(autoGenerate = true)\n    var id:Long=0\n}\n```\n\nBookDao\n\n```kotlin\n@Dao\ninterface BookDao {\n    @Insert\n    fun insertBook(book: Book):Long\n\n    @Query(\"select * from Book\")\n    fun loadAllBooks(): List<Book>\n}\n```\n\n```kotlin\n//定义数据库对象，数据库版本，包含的实体类\n//版本变成2 添加Book class\n@Database(version = 2, entities = [User::class,Book::class])\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n    abstract fun bookDao(): BookDao\n\n    companion object{\n        private var instance: AppDatabase?=null\n\n        val MIGRATION_1_2=object : Migration(1,2){\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"create table Book (\" +\n                        \"id integer primary key autoincrement not null,\" +\n                        \"name text not null,\" +\n                        \"pages integer not null)\")\n            }\n        }\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let {\n                return it\n            }\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,\"app_database\")\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n                .addMigrations(MIGRATION_1_2)//添加数据表\n                .build().apply {\n                    instance =this\n                }\n        }\n    }\n}\n```\n\n## WorkManager 调度任务 \n\n使用 WorkManager API 可以轻松地调度即使在应用退出或设备重启时仍应运行的可延迟异步任务。\n\n**主要功能**：\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\nWorkManager 旨在用于**可延迟**运行（即不需要立即运行）并且在应用退出或设备重启时必须能够**可靠运行**的任务。例如：\n\n- 向后端服务发送日志或分析数据\n- 定期将应用数据与服务器同步\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.google.cn/guide/background)，了解哪种解决方案符合您的需求。\n\n### WorkManger基本用法\n\n#### 添加依赖\n\n```groovy\ndef work_version = \"2.3.4\"\n\n        // (Java only)\n        implementation \"androidx.work:work-runtime:$work_version\"\n\n        // Kotlin + coroutines\n        implementation \"androidx.work:work-runtime-ktx:$work_version\"\n\n        // optional - RxJava2 support\n        implementation \"androidx.work:work-rxjava2:$work_version\"\n\n        // optional - GCMNetworkManager support\n        implementation \"androidx.work:work-gcm:$work_version\"\n\n        // optional - Test helpers\n        androidTestImplementation \"androidx.work:work-testing:$work_version\"\n```\n\n#### 创建后台任务\n\n```kotlin\nclass SimpleWorker(context: Context,params: WorkerParameters): Worker(context,params) {\n    override fun doWork(): Result {\n        //耗时操作\n        Log.d(\"SimpleWorker\", \"doWork: do work in SimpleWorker\")\n        return Result.success()\n    }\n}\n```\n\n```kotlin\nbutton.setOnClickListener {\n            val request=OneTimeWorkRequest.Builder(SimpleWorker::class.java)\n                .setInitialDelay(5,TimeUnit.MINUTES)//设置5分钟后运行\n                .addTag(\"simple\")//添加请求标签，\n                .build()\n            WorkManager.getInstance(this).enqueue(request)\n        }\n```\n\n","source":"_posts/随心记/Android学习/Jetpack.md","raw":"---\ntitle: Jetpack # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - Jetpack \n---\n[toc]\n\n# Jetpack简介\n\nJetpack是一个开发组件工具集，官网：https://developer.android.google.cn/jetpack\n\nJetpack 是一套库，可帮助开发人员遵循最佳实践，减少样板代码，并编写跨 Android 版本和设备一致工作的代码，以便开发人员可以专注于他们关心的代码。\n\nJetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。\n\n- [WorkManager](https://developer.android.google.cn/topic/libraries/architecture/workmanager) - 满足您的后台调度需求。\n- [Room](https://developer.android.google.cn/topic/libraries/architecture/room) - 实现数据存储持久性。\n- [Navigation](https://developer.android.google.cn/guide/navigation/navigation-getting-started) - 管理应用导航流程。\n- [CameraX](https://developer.android.google.cn/training/camerax) - 满足相机应用需求。\n- 请参阅所有 Jetpack 库的[概览](https://developer.android.google.cn/jetpack/androidx/versions#version-table)。\n\n![image-20200721153616389](images/Jetpack/image-20200721153616389.png)\n\n![image-20200722131636968](images/Jetpack/image-20200722131636968.png)\n\n## ViewModel\n\n### 简介\n\nViewModel是Jetpack组件之一，在传统Activity中需要负责逻辑处理，又要控制UI展示，甚至还得处理网络回调，现在ViewModel将负责Activity的数据部分\n\n当手机旋转时Activity会被重新创建，但ViewModel生命周期是Activtity创建到销毁全过程，所以旋转不会导致数据丢失\n\n![image-20200721154242410](images/Jetpack/image-20200721154242410.png)\n\n### 简单的计时器\n\n1. #### 导入依赖\n\n   ```groovy\n   def lifecycle_version = \"2.2.0\"\n       implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\n   ```\n\n   ​\t\n\n2. #### 创建ViewModel\n\n   ```kotlin\n   import androidx.lifecycle.ViewModel\n   \n   class MainModel:ViewModel() {\n       var counter=0\n   }\n   ```\n\n3. #### 编写Activity\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       xmlns:tools=\"http://schemas.android.com/tools\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       android:orientation=\"vertical\"\n       tools:context=\".MainActivity\">\n   \n   \n       <TextView\n           android:id=\"@+id/infoText\"\n           android:layout_width=\"wrap_content\"\n           android:layout_height=\"wrap_content\"\n           android:layout_gravity=\"center_horizontal\"\n           android:text=\"@string/jishi\" />\n   \n       <Button\n           android:id=\"@+id/plusOnBtn\"\n           android:layout_gravity=\"center_vertical\"\n           android:layout_width=\"match_parent\"\n           android:layout_height=\"wrap_content\"\n           android:text=\"@string/pulus_one\" />\n   </LinearLayout>\n   ```\n\n   ```kotlin\n   \n   package com.kj.scoreviewmodel\n   \n   import android.os.Bundle\n   import androidx.appcompat.app.AppCompatActivity\n   import androidx.lifecycle.ViewModelProviders\n   import kotlinx.android.synthetic.main.activity_main.*\n   \n   class MainActivity : AppCompatActivity() {\n   \n       //定义viewmodel\n       lateinit var viewModel: MainModel\n   \n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_main)\n   \n           //初始化viewmodel\n           viewModel= ViewModelProviders.of(this).get(MainModel::class.java)\n           \n           //button点击事件\n           plusOnBtn.setOnClickListener {\n               viewModel.counter++\n               refreshCounter()\n           }\n           refreshCounter()\n   \n       }\n       //更新视图\n       private fun refreshCounter() {\n           infoText.text=viewModel.counter.toString()\n       }\n   }\n   \n   ```\n\n### 向ViewModel传递参数\n\n```kotlin\nimport androidx.lifecycle.ViewModel\n//添加构造参数\nclass MainModel2(counter:Int): ViewModel() {\n    var counter=counter\n}\n```\n\n```kotlin\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n//利用ViewModelProvider.Factory 接口 实现构造函数\nclass MainViewModelFactory(private val counter: Int) : ViewModelProvider.Factory {\n    override fun <T : ViewModel?> create(modelClass: Class<T>): T {\n        return MainModel2(counter) as T\n    }\n}\n```\n\n```kotlin\nimport android.content.Context\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProviders\nimport kotlinx.android.synthetic.main.activity_main.*\n\n\nclass MainActivity2 : AppCompatActivity() {\n\n    lateinit var viewModel:MainModel2\n    lateinit var sp: SharedPreferences\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sp=getPreferences(Context.MODE_PRIVATE)\n        val countReserved=sp.getInt(\"count_reserved\",0)\n\n        //初始化viewmodel（修改点）\n        viewModel= ViewModelProviders.of(this,MainViewModelFactory(countReserved)).get(MainModel2::class.java)\n\n        //button点击事件\n        plusOnBtn.setOnClickListener {\n            viewModel.counter++\n            refreshCounter()\n        }\n        refreshCounter()\n    }\n\n    override fun onPause() {\n        super.onPause()\n        sp.edit().putInt(\"count_reserved\",viewModel.counter).apply()\n    }\n\n    //更新视图\n    private fun refreshCounter() {\n        infoText.text=viewModel.counter.toString()\n    }\n}\n```\n\n### 更正由于ViewModel 设计理念是不依赖与Activity\n\n### 使用google推荐的写法\n\n```kotlin\nclass UserProfileViewModel : ViewModel() {\n   val userId : String = TODO()\n   val user : User = TODO()\n}\n```\n\n```kotlin\nprivate val viewModel: UserProfileViewModel by viewModels()\n```\n\n### 遇到的错误\n\n```\nCannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target\n//解决\nandroid {\n    ...\n    compileOptions {\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n    }\n \n    kotlinOptions {\n        jvmTarget = \"1.8\"\n    }\n}\n\n```\n\n![image-20200722134519104](images/Jetpack/image-20200722134519104.png)\n\n## Lifecycles\n\n### 简介\n\n在网络请求中，由于网络响应延迟，页面关闭情况，我们要对activity生命周期进行逻辑处理\n\n### 监听器\n\n```\nimport android.util.Log\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\n\nclass MyObserver(val lifecycle: Lifecycle) : LifecycleObserver {\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    fun activityStart(){\n        Log.d(\"MyObserver\", \"activityStart: \")\n    }\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    fun activityStop(){\n        Log.d(\"MyObserver\", \"activityStop: \")\n    }\n}\n```\n\n```\n//activity监听生命周期\n        MyObserver(lifecycle)\n        val currentState = lifecycle.currentState\n        Toast.makeText(this, \"\"+currentState, Toast.LENGTH_SHORT).show()\n```\n\n## LiveData\n\n[`LiveData`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData) 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。\n\n您可以注册与实现 [`LifecycleOwner`](https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner) 接口的对象配对的观察者。有了这种关系，当相应的 [`Lifecycle`](https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle) 对象的状态变为 [`DESTROYED`](https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.State#DESTROYED) 时，便可移除此观察者。 这对于 Activity 和 Fragment 特别有用，因为它们可以放心地观察 [`LiveData`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData) 对象而不必担心泄露（当 Activity 和 Fragment 的生命周期被销毁时，系统会立即退订它们）。\n\n- 确保界面符合数据状态\n- 不会发生内存泄漏\n- 不会因Activity停止导致崩溃\n- 不需要手动处理生命周期\n- 数据保持最新状态\n- 适当的配置更改\n- 共享资源\n\n### 1.使用LiveData对象\n\n1. 创建 `LiveData` 实例以存储某种类型的数据。这通常在 [`ViewModel`](https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel) 类中完成。\n\n2. 创建可定义 [`onChanged()`](https://developer.android.google.cn/reference/androidx/lifecycle/Observer#onChanged(T)) 方法的 [`Observer`](https://developer.android.google.cn/reference/androidx/lifecycle/Observer) 对象，该方法可以控制当 `LiveData` 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 `Observer` 对象。\n\n3. 使用 [`observe()`](https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe(android.arch.lifecycle.LifecycleOwner, android.arch.lifecycle.Observer)) 方法将 `Observer` 对象附加到 `LiveData` 对象。`observe()` 方法会采用 [`LifecycleOwner`](https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner) 对象。这样会使 `Observer` 对象订阅 `LiveData` 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 `Observer` 对象。\n\n   ```kotlin\n   import androidx.lifecycle.MutableLiveData\n   import androidx.lifecycle.ViewModel\n   \n   class NameViewModel : ViewModel() {\n   \n       // 用字符串创建一个LiveData\n       val currentName: MutableLiveData<String> by lazy {\n           MutableLiveData<String>()\n       }\n   \n       // ViewModel的其余部分…\n   }\n   ```\n\n   ```kotlin\n   class NameActivity : AppCompatActivity() {\n   \n       // 使用'by viewModels()' Kotlin属性委托\n       // 来自activity-ktx工件\n       private val model: NameViewModel by viewModels()\n   \n       override fun onCreate(savedInstanceState: Bundle?) {\n           super.onCreate(savedInstanceState)\n           setContentView(R.layout.activity_name)\n   \n           // 创建用于更新UI的观察者。\n           val nameObserver = Observer<String> { newName ->\n               // 更新UI，这里是TextView。\n               nameTextView.text = newName\n           }\n   \n           // 观察LiveData，将此活动作为LifecycleOwner和observer传递进来。\n           model.currentName.observe(this, nameObserver)\n   \n           // 修改参数\n           button.setOnClickListener {\n               model.currentName.setValue(edText.text.toString())\n               //model.currentName.postValue(edText.text.toString())\n           }\n   \n       }\n   }\n   ```\n\n### 2.map和switchMap的使用\n\n1. 定义一个User类\n\n   ```kotlin\n   data class User(var fistName:String,var lastName:String,var age:Int)\n   ```\n\n   \n\n2. 编写ViewModel\n\n   ```kotlin\n   class MainViewModel(countReserved:Int):ViewModel(){\n   \tprivate val userLiveData=MytableLiveData<User>()\n       \n       val userName:LiveData<String>=Transformations.map(userLiveData){user->\n           \"${user.firstName} ${user.lastName}\"                                                            \n       }\n   }\n   ```\n\n   \n\n3. \n\n## Room\n\n[Room](https://developer.android.google.cn/training/data-storage/room) 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。\n\nRoom 包含 3 个主要组件：\n\n- [**数据库**](https://developer.android.google.cn/reference/androidx/room/Database)：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。\n\n  使用 [`@Database`](https://developer.android.google.cn/reference/androidx/room/Database) 注释的类应满足以下条件：\n\n  - 是扩展 [`RoomDatabase`](https://developer.android.google.cn/reference/androidx/room/RoomDatabase) 的抽象类。\n  - 在注释中添加与数据库关联的实体列表。\n  - 包含具有 0 个参数且返回使用 [`@Dao`](https://developer.android.google.cn/reference/androidx/room/Dao) 注释的类的抽象方法。\n\n  在运行时，您可以通过调用 [`Room.databaseBuilder()`](https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder(android.content.Context, java.lang.Class, java.lang.String)) 或 [`Room.inMemoryDatabaseBuilder()`](https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder(android.content.Context, java.lang.Class)) 获取 [`Database`](https://developer.android.google.cn/reference/androidx/room/Database) 的实例。\n\n  \n\n- [**Entity**](https://developer.android.google.cn/training/data-storage/room/defining-data)：表示数据库中的表。\n\n- [**DAO**](https://developer.android.google.cn/training/data-storage/room/accessing-data)：包含用于访问数据库的方法。\n\n应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。\n\n![image-20200722181709403](images/Jetpack/image-20200722181709403.png)\n\n### 简单使用\n\n导入依赖\n\n```kotlin\ndef room_version = \"2.2.5\"\n\n    implementation \"androidx.room:room-runtime:$room_version\"\n    //annotationProcessor \"androidx.room:room-compiler:$room_version\" // 对于Kotlin来说，使用kapt而不是annotationProcessor\n    kapt \"androidx.room:room-compiler:$room_version\" // 对于Kotlin来说，使用kapt而不是annotationProcessor\n\n// 可选- Kotlin扩展和协同程序支持空间\nimplementation \"androidx.room:room-ktx:$room_version\"\n\n// 可选- RxJava支持房间\nimplementation \"androidx.room:room-rxjava2:$room_version\"\n\n// 可选-番石榴支持房间，包括可选和ListenableFuture\nimplementation \"androidx.room:room-guava:$room_version\"\n\n// 测试助手\ntestImplementation \"androidx.room:room-testing:$room_version\"\n```\n\nUser\n\n```kotlin\n//数据库的表\n@Entity\ndata class User(\n    @ColumnInfo(name = \"first_name\") val firstName: String?,\n    @ColumnInfo(name = \"last_name\") val lastName: String?\n){\n    @PrimaryKey(autoGenerate = true)\n    var uid: Long=0\n}   \n```\n\nUserDao\n\n```kotlin\n//数据访问对象\n@Dao\ninterface UserDao {\n    @Query(\"SELECT * FROM user\")\n    fun getAll(): List<User>\n\n    @Query(\"SELECT * FROM user WHERE uid IN (:userIds)\")\n    fun loadAllByIds(userIds: IntArray): List<User>\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :first AND \" +\n            \"last_name LIKE :last LIMIT 1\")\n    fun findByName(first: String, last: String): User\n\n    @Insert\n    fun insertUser(user: User):Long\n\n    @Delete\n    fun delete(user: User)\n}\n```\n\nAppDatabase\n\n```kotlin\n    @Database(entities = arrayOf(User::class), version = 1)\n    abstract class AppDatabase : RoomDatabase() {\n        abstract fun userDao(): UserDao\n    }\n    \n```\n\n创建上述文件后，您可以使用以下代码获取已创建的数据库的实例：\n\n```kotlin\n//定义数据库对象，数据库版本，包含的实体类\n@Database(entities = [User::class], version = 1)\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n\n    companion object{\n        private var instance: AppDatabase?=null\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let {\n                return it\n            }\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,\"app_database\")\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n\n                .build().apply {\n                    instance =this\n                }\n        }\n    }\n} \n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:padding=\"20dp\"\n    android:orientation=\"vertical\"\n    tools:context=\".room.RoomActivity\">\n\n    <EditText\n        android:id=\"@+id/edText\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:hint=\"name 用空格隔开\"\n        android:autofillHints=\"姓名\"\n        android:inputType=\"text\" />\n\n    <Button\n        android:id=\"@+id/addBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/add\" />\n\n    <Button\n        android:id=\"@+id/queryBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/query_data\"/>\n\n    <Button\n        android:id=\"@+id/updateBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/update\" />\n\n    <Button\n        android:id=\"@+id/deleteBtn\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/delete\" />\n\n    <ScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <LinearLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            android:orientation=\"vertical\">\n\n            <TextView\n                android:id=\"@+id/textView\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:fontFamily=\"@font/aldrich\"\n                android:textSize=\"20sp\" />\n        </LinearLayout>\n    </ScrollView>\n\n\n</LinearLayout>\n```\n\n```kotlin\nclass RoomActivity : AppCompatActivity() {\n\n    //获取数据库实例\n    val userDao= AppDatabase.getDatabase(this).userDao()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_room)\n\n        addBtn.setOnClickListener {\n            userDao.insertUser(User(edText.text.toString().split(\" \")[0],edText.text.toString().split(\" \")[1]))\n        }\n\n        updateBtn.setOnClickListener {\n            userDao.upDateUser(User(edText.text.toString().split(\" \")[0],edText.text.toString().split(\" \")[1]))\n        }\n\n        deleteBtn.setOnClickListener {\n            userDao.deleteUserByLastName(textView.text.toString())\n        }\n\n        queryBtn.setOnClickListener {\n            var str=\"\"\n            for (user in userDao.getAll()){\n                str+=user.toString()+\"\\n\"\n            }\n            textView.text=str\n        }\n    }\n}\n```\n\n### Room的数据库升级\n\n添加数据库表Book\n\n```kotlin\n@Entity\ndata class Book(var name:String,var pages: Int) {\n    @PrimaryKey(autoGenerate = true)\n    var id:Long=0\n}\n```\n\nBookDao\n\n```kotlin\n@Dao\ninterface BookDao {\n    @Insert\n    fun insertBook(book: Book):Long\n\n    @Query(\"select * from Book\")\n    fun loadAllBooks(): List<Book>\n}\n```\n\n```kotlin\n//定义数据库对象，数据库版本，包含的实体类\n//版本变成2 添加Book class\n@Database(version = 2, entities = [User::class,Book::class])\nabstract class AppDatabase : RoomDatabase() {\n    abstract fun userDao(): UserDao\n    abstract fun bookDao(): BookDao\n\n    companion object{\n        private var instance: AppDatabase?=null\n\n        val MIGRATION_1_2=object : Migration(1,2){\n            override fun migrate(database: SupportSQLiteDatabase) {\n                database.execSQL(\"create table Book (\" +\n                        \"id integer primary key autoincrement not null,\" +\n                        \"name text not null,\" +\n                        \"pages integer not null)\")\n            }\n        }\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase {\n            instance?.let {\n                return it\n            }\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,\"app_database\")\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n                .addMigrations(MIGRATION_1_2)//添加数据表\n                .build().apply {\n                    instance =this\n                }\n        }\n    }\n}\n```\n\n## WorkManager 调度任务 \n\n使用 WorkManager API 可以轻松地调度即使在应用退出或设备重启时仍应运行的可延迟异步任务。\n\n**主要功能**：\n\n- 最高向后兼容到 API 14\n  - 在运行 API 23 及以上级别的设备上使用 JobScheduler\n  - 在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager\n- 添加网络可用性或充电状态等工作约束\n- 调度一次性或周期性异步任务\n- 监控和管理计划任务\n- 将任务链接起来\n- 确保任务执行，即使应用或设备重启也同样执行任务\n- 遵循低电耗模式等省电功能\n\nWorkManager 旨在用于**可延迟**运行（即不需要立即运行）并且在应用退出或设备重启时必须能够**可靠运行**的任务。例如：\n\n- 向后端服务发送日志或分析数据\n- 定期将应用数据与服务器同步\n\nWorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看[后台处理指南](https://developer.android.google.cn/guide/background)，了解哪种解决方案符合您的需求。\n\n### WorkManger基本用法\n\n#### 添加依赖\n\n```groovy\ndef work_version = \"2.3.4\"\n\n        // (Java only)\n        implementation \"androidx.work:work-runtime:$work_version\"\n\n        // Kotlin + coroutines\n        implementation \"androidx.work:work-runtime-ktx:$work_version\"\n\n        // optional - RxJava2 support\n        implementation \"androidx.work:work-rxjava2:$work_version\"\n\n        // optional - GCMNetworkManager support\n        implementation \"androidx.work:work-gcm:$work_version\"\n\n        // optional - Test helpers\n        androidTestImplementation \"androidx.work:work-testing:$work_version\"\n```\n\n#### 创建后台任务\n\n```kotlin\nclass SimpleWorker(context: Context,params: WorkerParameters): Worker(context,params) {\n    override fun doWork(): Result {\n        //耗时操作\n        Log.d(\"SimpleWorker\", \"doWork: do work in SimpleWorker\")\n        return Result.success()\n    }\n}\n```\n\n```kotlin\nbutton.setOnClickListener {\n            val request=OneTimeWorkRequest.Builder(SimpleWorker::class.java)\n                .setInitialDelay(5,TimeUnit.MINUTES)//设置5分钟后运行\n                .addTag(\"simple\")//添加请求标签，\n                .build()\n            WorkManager.getInstance(this).enqueue(request)\n        }\n```\n\n","slug":"随心记/Android学习/Jetpack","published":1,"date":"2020-08-02T23:42:42.062Z","updated":"2020-08-02T23:42:59.741Z","_id":"ckdcza4ij002yrkamb7qy2a93","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"Jetpack简介\"><a href=\"#Jetpack简介\" class=\"headerlink\" title=\"Jetpack简介\"></a>Jetpack简介</h1><p>Jetpack是一个开发组件工具集，官网：<a href=\"https://developer.android.google.cn/jetpack\">https://developer.android.google.cn/jetpack</a></p>\n<p>Jetpack 是一套库，可帮助开发人员遵循最佳实践，减少样板代码，并编写跨 Android 版本和设备一致工作的代码，以便开发人员可以专注于他们关心的代码。</p>\n<p>Jetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。</p>\n<ul>\n<li><a href=\"https://developer.android.google.cn/topic/libraries/architecture/workmanager\">WorkManager</a> - 满足您的后台调度需求。</li>\n<li><a href=\"https://developer.android.google.cn/topic/libraries/architecture/room\">Room</a> - 实现数据存储持久性。</li>\n<li><a href=\"https://developer.android.google.cn/guide/navigation/navigation-getting-started\">Navigation</a> - 管理应用导航流程。</li>\n<li><a href=\"https://developer.android.google.cn/training/camerax\">CameraX</a> - 满足相机应用需求。</li>\n<li>请参阅所有 Jetpack 库的<a href=\"https://developer.android.google.cn/jetpack/androidx/versions#version-table\">概览</a>。</li>\n</ul>\n<p><img src=\"images/Jetpack/image-20200721153616389.png\" alt=\"image-20200721153616389\"></p>\n<p><img src=\"images/Jetpack/image-20200722131636968.png\" alt=\"image-20200722131636968\"></p>\n<h2 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>ViewModel是Jetpack组件之一，在传统Activity中需要负责逻辑处理，又要控制UI展示，甚至还得处理网络回调，现在ViewModel将负责Activity的数据部分</p>\n<p>当手机旋转时Activity会被重新创建，但ViewModel生命周期是Activtity创建到销毁全过程，所以旋转不会导致数据丢失</p>\n<p><img src=\"images/Jetpack/image-20200721154242410.png\" alt=\"image-20200721154242410\"></p>\n<h3 id=\"简单的计时器\"><a href=\"#简单的计时器\" class=\"headerlink\" title=\"简单的计时器\"></a>简单的计时器</h3><ol>\n<li><h4 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h4><pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">def</span> lifecycle_version <span class=\"token operator\">=</span> <span class=\"token string\">\"2.2.0\"</span>\n    implementation <span class=\"token string\">\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"</span></code></pre>\n<p>​    </p>\n</li>\n<li><h4 id=\"创建ViewModel\"><a href=\"#创建ViewModel\" class=\"headerlink\" title=\"创建ViewModel\"></a>创建ViewModel</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel\n\n<span class=\"token keyword\">class</span> MainModel<span class=\"token operator\">:</span><span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> counter<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><h4 id=\"编写Activity\"><a href=\"#编写Activity\" class=\"headerlink\" title=\"编写Activity\"></a>编写Activity</h4><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n</code></pre>\n</li>\n</ol>\n<pre><code>   &lt;TextView\n       android:id=\"@+id/infoText\"\n       android:layout_width=\"wrap_content\"\n       android:layout_height=\"wrap_content\"\n       android:layout_gravity=\"center_horizontal\"\n       android:text=\"@string/jishi\" /&gt;\n\n   &lt;Button\n       android:id=\"@+id/plusOnBtn\"\n       android:layout_gravity=\"center_vertical\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"wrap_content\"\n       android:text=\"@string/pulus_one\" /&gt;</code></pre>\n   \n   ```\n\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">\n<span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>kj<span class=\"token punctuation\">.</span>scoreviewmodel\n\n<span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProviders\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>synthetic<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n<span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//定义viewmodel</span>\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span> MainModel\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//初始化viewmodel</span>\n        viewModel<span class=\"token operator\">=</span> ViewModelProviders<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainModel<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//button点击事件</span>\n        plusOnBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n            <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//更新视图</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        infoText<span class=\"token punctuation\">.</span>text<span class=\"token operator\">=</span>viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"向ViewModel传递参数\"><a href=\"#向ViewModel传递参数\" class=\"headerlink\" title=\"向ViewModel传递参数\"></a>向ViewModel传递参数</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel\n<span class=\"token comment\" spellcheck=\"true\">//添加构造参数</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">MainModel2</span><span class=\"token punctuation\">(</span>counter<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> counter<span class=\"token operator\">=</span>counter\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProvider\n<span class=\"token comment\" spellcheck=\"true\">//利用ViewModelProvider.Factory 接口 实现构造函数</span>\n<span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModelFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> counter<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> ViewModelProvider<span class=\"token punctuation\">.</span>Factory &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T <span class=\"token operator\">:</span> ViewModel<span class=\"token operator\">?</span><span class=\"token operator\">></span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>modelClass<span class=\"token operator\">:</span> Class<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">MainModel2</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> T\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>Context\n<span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span>SharedPreferences\n<span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>appcompat<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModelProviders\n<span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>synthetic<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span>\n\n\n<span class=\"token keyword\">class</span> MainActivity2 <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> viewModel<span class=\"token operator\">:</span>MainModel2\n    <span class=\"token keyword\">lateinit</span> <span class=\"token keyword\">var</span> sp<span class=\"token operator\">:</span> SharedPreferences\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span>\n\n        sp<span class=\"token operator\">=</span><span class=\"token function\">getPreferences</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>MODE_PRIVATE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">val</span> countReserved<span class=\"token operator\">=</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">getInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count_reserved\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//初始化viewmodel（修改点）</span>\n        viewModel<span class=\"token operator\">=</span> ViewModelProviders<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token function\">MainViewModelFactory</span><span class=\"token punctuation\">(</span>countReserved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>MainModel2<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//button点击事件</span>\n        plusOnBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token operator\">++</span>\n            <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onPause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        sp<span class=\"token punctuation\">.</span><span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">putInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count_reserved\"</span><span class=\"token punctuation\">,</span>viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//更新视图</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">refreshCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        infoText<span class=\"token punctuation\">.</span>text<span class=\"token operator\">=</span>viewModel<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"更正由于ViewModel-设计理念是不依赖与Activity\"><a href=\"#更正由于ViewModel-设计理念是不依赖与Activity\" class=\"headerlink\" title=\"更正由于ViewModel 设计理念是不依赖与Activity\"></a>更正由于ViewModel 设计理念是不依赖与Activity</h3><h3 id=\"使用google推荐的写法\"><a href=\"#使用google推荐的写法\" class=\"headerlink\" title=\"使用google推荐的写法\"></a>使用google推荐的写法</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> UserProfileViewModel <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">val</span> userId <span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">val</span> user <span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token function\">TODO</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> viewModel<span class=\"token operator\">:</span> UserProfileViewModel <span class=\"token keyword\">by</span> <span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<h3 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h3><pre><code>Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target\n//解决\nandroid &amp;#123;\n    ...\n    compileOptions &amp;#123;\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n    &amp;#125;\n\n    kotlinOptions &amp;#123;\n        jvmTarget = \"1.8\"\n    &amp;#125;\n&amp;#125;\n</code></pre>\n<p><img src=\"images/Jetpack/image-20200722134519104.png\" alt=\"image-20200722134519104\"></p>\n<h2 id=\"Lifecycles\"><a href=\"#Lifecycles\" class=\"headerlink\" title=\"Lifecycles\"></a>Lifecycles</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在网络请求中，由于网络响应延迟，页面关闭情况，我们要对activity生命周期进行逻辑处理</p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><pre><code>import android.util.Log\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\n\nclass MyObserver(val lifecycle: Lifecycle) : LifecycleObserver &amp;#123;\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    fun activityStart()&amp;#123;\n        Log.d(\"MyObserver\", \"activityStart: \")\n    &amp;#125;\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    fun activityStop()&amp;#123;\n        Log.d(\"MyObserver\", \"activityStop: \")\n    &amp;#125;\n&amp;#125;</code></pre>\n<pre><code>//activity监听生命周期\n        MyObserver(lifecycle)\n        val currentState = lifecycle.currentState\n        Toast.makeText(this, \"\"+currentState, Toast.LENGTH_SHORT).show()</code></pre>\n<h2 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h2><p><a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。</p>\n<p>您可以注册与实现 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner\"><code>LifecycleOwner</code></a> 接口的对象配对的观察者。有了这种关系，当相应的 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle\"><code>Lifecycle</code></a> 对象的状态变为 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.State#DESTROYED\"><code>DESTROYED</code></a> 时，便可移除此观察者。 这对于 Activity 和 Fragment 特别有用，因为它们可以放心地观察 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\"><code>LiveData</code></a> 对象而不必担心泄露（当 Activity 和 Fragment 的生命周期被销毁时，系统会立即退订它们）。</p>\n<ul>\n<li>确保界面符合数据状态</li>\n<li>不会发生内存泄漏</li>\n<li>不会因Activity停止导致崩溃</li>\n<li>不需要手动处理生命周期</li>\n<li>数据保持最新状态</li>\n<li>适当的配置更改</li>\n<li>共享资源</li>\n</ul>\n<h3 id=\"1-使用LiveData对象\"><a href=\"#1-使用LiveData对象\" class=\"headerlink\" title=\"1.使用LiveData对象\"></a>1.使用LiveData对象</h3><ol>\n<li><p>创建 <code>LiveData</code> 实例以存储某种类型的数据。这通常在 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel\"><code>ViewModel</code></a> 类中完成。</p>\n</li>\n<li><p>创建可定义 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Observer#onChanged(T)\"><code>onChanged()</code></a> 方法的 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Observer\"><code>Observer</code></a> 对象，该方法可以控制当 <code>LiveData</code> 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 <code>Observer</code> 对象。</p>\n</li>\n<li><p>使用 [<code>observe()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe\">https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe</a>(android.arch.lifecycle.LifecycleOwner, android.arch.lifecycle.Observer)) 方法将 <code>Observer</code> 对象附加到 <code>LiveData</code> 对象。<code>observe()</code> 方法会采用 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner\"><code>LifecycleOwner</code></a> 对象。这样会使 <code>Observer</code> 对象订阅 <code>LiveData</code> 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 <code>Observer</code> 对象。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>MutableLiveData\n<span class=\"token keyword\">import</span> androidx<span class=\"token punctuation\">.</span>lifecycle<span class=\"token punctuation\">.</span>ViewModel\n\n<span class=\"token keyword\">class</span> NameViewModel <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 用字符串创建一个LiveData</span>\n    <span class=\"token keyword\">val</span> currentName<span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token keyword\">by</span> lazy &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// ViewModel的其余部分…</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> NameActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 使用'by viewModels()' Kotlin属性委托</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 来自activity-ktx工件</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> model<span class=\"token operator\">:</span> NameViewModel <span class=\"token keyword\">by</span> <span class=\"token function\">viewModels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_name<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 创建用于更新UI的观察者。</span>\n        <span class=\"token keyword\">val</span> nameObserver <span class=\"token operator\">=</span> Observer<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> newName <span class=\"token operator\">-></span>\n            <span class=\"token comment\" spellcheck=\"true\">// 更新UI，这里是TextView。</span>\n            nameTextView<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> newName\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 观察LiveData，将此活动作为LifecycleOwner和observer传递进来。</span>\n        model<span class=\"token punctuation\">.</span>currentName<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> nameObserver<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 修改参数</span>\n        button<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            model<span class=\"token punctuation\">.</span>currentName<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>edText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\" spellcheck=\"true\">//model.currentName.postValue(edText.text.toString())</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<h3 id=\"2-map和switchMap的使用\"><a href=\"#2-map和switchMap的使用\" class=\"headerlink\" title=\"2.map和switchMap的使用\"></a>2.map和switchMap的使用</h3><ol>\n<li><p>定义一个User类</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> fistName<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span><span class=\"token keyword\">var</span> lastName<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span><span class=\"token keyword\">var</span> age<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span></code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>编写ViewModel</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span>countReserved<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> userLiveData<span class=\"token operator\">=</span>MytableLiveData<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">val</span> userName<span class=\"token operator\">:</span>LiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">>=</span>Transformations<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>userLiveData<span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>user<span class=\"token operator\">-></span>\n        <span class=\"token string\">\"$&amp;#123;user.firstName&amp;#125; $&amp;#123;user.lastName&amp;#125;\"</span>                                                            \n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<ol start=\"3\">\n<li><h2 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h2></li>\n</ol>\n<p><a href=\"https://developer.android.google.cn/training/data-storage/room\">Room</a> 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。</p>\n<p>Room 包含 3 个主要组件：</p>\n<ul>\n<li><p><a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><strong>数据库</strong></a>：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</p>\n<p>使用 <a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><code>@Database</code></a> 注释的类应满足以下条件：</p>\n<ul>\n<li>是扩展 <a href=\"https://developer.android.google.cn/reference/androidx/room/RoomDatabase\"><code>RoomDatabase</code></a> 的抽象类。</li>\n<li>在注释中添加与数据库关联的实体列表。</li>\n<li>包含具有 0 个参数且返回使用 <a href=\"https://developer.android.google.cn/reference/androidx/room/Dao\"><code>@Dao</code></a> 注释的类的抽象方法。</li>\n</ul>\n<p>在运行时，您可以通过调用 [<code>Room.databaseBuilder()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder\">https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder</a>(android.content.Context, java.lang.Class, java.lang.String)) 或 [<code>Room.inMemoryDatabaseBuilder()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder\">https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder</a>(android.content.Context, java.lang.Class)) 获取 <a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><code>Database</code></a> 的实例。</p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://developer.android.google.cn/training/data-storage/room/defining-data\"><strong>Entity</strong></a>：表示数据库中的表。</p>\n</li>\n<li><p><a href=\"https://developer.android.google.cn/training/data-storage/room/accessing-data\"><strong>DAO</strong></a>：包含用于访问数据库的方法。</p>\n</li>\n</ul>\n<p>应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。</p>\n<p><img src=\"images/Jetpack/image-20200722181709403.png\" alt=\"image-20200722181709403\"></p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>导入依赖</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">def room_version <span class=\"token operator\">=</span> <span class=\"token string\">\"2.2.5\"</span>\n\n    implementation <span class=\"token string\">\"androidx.room:room-runtime:<span class=\"token interpolation variable\">$room_version</span>\"</span>\n    <span class=\"token comment\" spellcheck=\"true\">//annotationProcessor \"androidx.room:room-compiler:$room_version\" // 对于Kotlin来说，使用kapt而不是annotationProcessor</span>\n    kapt <span class=\"token string\">\"androidx.room:room-compiler:<span class=\"token interpolation variable\">$room_version</span>\"</span> <span class=\"token comment\" spellcheck=\"true\">// 对于Kotlin来说，使用kapt而不是annotationProcessor</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 可选- Kotlin扩展和协同程序支持空间</span>\nimplementation <span class=\"token string\">\"androidx.room:room-ktx:<span class=\"token interpolation variable\">$room_version</span>\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 可选- RxJava支持房间</span>\nimplementation <span class=\"token string\">\"androidx.room:room-rxjava2:<span class=\"token interpolation variable\">$room_version</span>\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 可选-番石榴支持房间，包括可选和ListenableFuture</span>\nimplementation <span class=\"token string\">\"androidx.room:room-guava:<span class=\"token interpolation variable\">$room_version</span>\"</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 测试助手</span>\ntestImplementation <span class=\"token string\">\"androidx.room:room-testing:<span class=\"token interpolation variable\">$room_version</span>\"</span></code></pre>\n<p>User</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//数据库的表</span>\n<span class=\"token annotation builtin\">@Entity</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">User</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation builtin\">@ColumnInfo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"first_name\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">val</span> firstName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span>\n    <span class=\"token annotation builtin\">@ColumnInfo</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"last_name\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">val</span> lastName<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span>\n<span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> uid<span class=\"token operator\">:</span> Long<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>   </code></pre>\n<p>UserDao</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//数据访问对象</span>\n<span class=\"token annotation builtin\">@Dao</span>\n<span class=\"token keyword\">interface</span> UserDao &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM user\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span>\n\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM user WHERE uid IN (:userIds)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">loadAllByIds</span><span class=\"token punctuation\">(</span>userIds<span class=\"token operator\">:</span> IntArray<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span>\n\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SELECT * FROM user WHERE first_name LIKE :first AND \"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"last_name LIKE :last LIMIT 1\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User\n\n    <span class=\"token annotation builtin\">@Insert</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Long\n\n    <span class=\"token annotation builtin\">@Delete</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>user<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>AppDatabase</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">    <span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>entities <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserDao\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>创建上述文件后，您可以使用以下代码获取已创建的数据库的实例：</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//定义数据库对象，数据库版本，包含的实体类</span>\n<span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> version <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserDao\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> instance<span class=\"token operator\">:</span> AppDatabase<span class=\"token operator\">?</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n\n        <span class=\"token annotation builtin\">@Synchronized</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AppDatabase &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            instance<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>let &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> it\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span>\n                AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span><span class=\"token string\">\"app_database\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowMainThreadQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作</span>\n\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>apply &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    instance <span class=\"token operator\">=</span><span class=\"token keyword\">this</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> </code></pre>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>padding</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>20dp<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.room.RoomActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EditText</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/edText<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>hint</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name 用空格隔开<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>autofillHints</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>姓名<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>inputType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/addBtn<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/add<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/queryBtn<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/query_data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/updateBtn<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/update<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/deleteBtn<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@string/delete<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ScrollView</span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@+id/textView<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>fontFamily</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>@font/aldrich<span class=\"token punctuation\">\"</span></span>\n                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>textSize</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>20sp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ScrollView</span><span class=\"token punctuation\">></span></span>\n\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> RoomActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//获取数据库实例</span>\n    <span class=\"token keyword\">val</span> userDao<span class=\"token operator\">=</span> AppDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_room<span class=\"token punctuation\">)</span>\n\n        addBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            userDao<span class=\"token punctuation\">.</span><span class=\"token function\">insertUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span>edText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>edText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        updateBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            userDao<span class=\"token punctuation\">.</span><span class=\"token function\">upDateUser</span><span class=\"token punctuation\">(</span><span class=\"token function\">User</span><span class=\"token punctuation\">(</span>edText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>edText<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        deleteBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            userDao<span class=\"token punctuation\">.</span><span class=\"token function\">deleteUserByLastName</span><span class=\"token punctuation\">(</span>textView<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        queryBtn<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>user <span class=\"token keyword\">in</span> userDao<span class=\"token punctuation\">.</span><span class=\"token function\">getAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                str<span class=\"token operator\">+=</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"\\n\"</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            textView<span class=\"token punctuation\">.</span>text<span class=\"token operator\">=</span>str\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"Room的数据库升级\"><a href=\"#Room的数据库升级\" class=\"headerlink\" title=\"Room的数据库升级\"></a>Room的数据库升级</h3><p>添加数据库表Book</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Entity</span>\n<span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Book</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span><span class=\"token keyword\">var</span> pages<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation builtin\">@PrimaryKey</span><span class=\"token punctuation\">(</span>autoGenerate <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> id<span class=\"token operator\">:</span>Long<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>BookDao</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token annotation builtin\">@Dao</span>\n<span class=\"token keyword\">interface</span> BookDao &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation builtin\">@Insert</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">insertBook</span><span class=\"token punctuation\">(</span>book<span class=\"token operator\">:</span> Book<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Long\n\n    <span class=\"token annotation builtin\">@Query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from Book\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">loadAllBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>Book<span class=\"token operator\">></span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\" spellcheck=\"true\">//定义数据库对象，数据库版本，包含的实体类</span>\n<span class=\"token comment\" spellcheck=\"true\">//版本变成2 添加Book class</span>\n<span class=\"token annotation builtin\">@Database</span><span class=\"token punctuation\">(</span>version <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> entities <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>Book<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> AppDatabase <span class=\"token operator\">:</span> <span class=\"token function\">RoomDatabase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">userDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserDao\n    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">bookDao</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> BookDao\n\n    <span class=\"token keyword\">companion</span> <span class=\"token keyword\">object</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> instance<span class=\"token operator\">:</span> AppDatabase<span class=\"token operator\">?</span><span class=\"token operator\">=</span><span class=\"token keyword\">null</span>\n\n        <span class=\"token keyword\">val</span> MIGRATION_1_2<span class=\"token operator\">=</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> <span class=\"token function\">Migration</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">migrate</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> SupportSQLiteDatabase<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                database<span class=\"token punctuation\">.</span><span class=\"token function\">execSQL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"create table Book (\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"id integer primary key autoincrement not null,\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"name text not null,\"</span> <span class=\"token operator\">+</span>\n                        <span class=\"token string\">\"pages integer not null)\"</span><span class=\"token punctuation\">)</span>\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token annotation builtin\">@Synchronized</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">getDatabase</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> AppDatabase &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            instance<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>let &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> it\n            &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Room<span class=\"token punctuation\">.</span><span class=\"token function\">databaseBuilder</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">,</span>\n                AppDatabase<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">,</span><span class=\"token string\">\"app_database\"</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">allowMainThreadQueries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addMigrations</span><span class=\"token punctuation\">(</span>MIGRATION_1_2<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//添加数据表</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>apply &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    instance <span class=\"token operator\">=</span><span class=\"token keyword\">this</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"WorkManager-调度任务\"><a href=\"#WorkManager-调度任务\" class=\"headerlink\" title=\"WorkManager 调度任务\"></a>WorkManager 调度任务</h2><p>使用 WorkManager API 可以轻松地调度即使在应用退出或设备重启时仍应运行的可延迟异步任务。</p>\n<p><strong>主要功能</strong>：</p>\n<ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<p>WorkManager 旨在用于<strong>可延迟</strong>运行（即不需要立即运行）并且在应用退出或设备重启时必须能够<strong>可靠运行</strong>的任务。例如：</p>\n<ul>\n<li>向后端服务发送日志或分析数据</li>\n<li>定期将应用数据与服务器同步</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.google.cn/guide/background\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"WorkManger基本用法\"><a href=\"#WorkManger基本用法\" class=\"headerlink\" title=\"WorkManger基本用法\"></a>WorkManger基本用法</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">def</span> work_version <span class=\"token operator\">=</span> <span class=\"token string\">\"2.3.4\"</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// (Java only)</span>\n        implementation <span class=\"token string\">\"androidx.work:work-runtime:$work_version\"</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Kotlin + coroutines</span>\n        implementation <span class=\"token string\">\"androidx.work:work-runtime-ktx:$work_version\"</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// optional - RxJava2 support</span>\n        implementation <span class=\"token string\">\"androidx.work:work-rxjava2:$work_version\"</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// optional - GCMNetworkManager support</span>\n        implementation <span class=\"token string\">\"androidx.work:work-gcm:$work_version\"</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// optional - Test helpers</span>\n        androidTestImplementation <span class=\"token string\">\"androidx.work:work-testing:$work_version\"</span></code></pre>\n<h4 id=\"创建后台任务\"><a href=\"#创建后台任务\" class=\"headerlink\" title=\"创建后台任务\"></a>创建后台任务</h4><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">SimpleWorker</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span>params<span class=\"token operator\">:</span> WorkerParameters<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">Worker</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span>params<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Result &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//耗时操作</span>\n        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SimpleWorker\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"doWork: do work in SimpleWorker\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> Result<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">button<span class=\"token punctuation\">.</span>setOnClickListener &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">val</span> request<span class=\"token operator\">=</span>OneTimeWorkRequest<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span>SimpleWorker<span class=\"token operator\">::</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span>java<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">setInitialDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>TimeUnit<span class=\"token punctuation\">.</span>MINUTES<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//设置5分钟后运行</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"simple\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//添加请求标签，</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            WorkManager<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"Jetpack简介\"><a href=\"#Jetpack简介\" class=\"headerlink\" title=\"Jetpack简介\"></a>Jetpack简介</h1><p>Jetpack是一个开发组件工具集，官网：<a href=\"https://developer.android.google.cn/jetpack\">https://developer.android.google.cn/jetpack</a></p>\n<p>Jetpack 是一套库，可帮助开发人员遵循最佳实践，减少样板代码，并编写跨 Android 版本和设备一致工作的代码，以便开发人员可以专注于他们关心的代码。</p>\n<p>Jetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。</p>\n<ul>\n<li><a href=\"https://developer.android.google.cn/topic/libraries/architecture/workmanager\">WorkManager</a> - 满足您的后台调度需求。</li>\n<li><a href=\"https://developer.android.google.cn/topic/libraries/architecture/room\">Room</a> - 实现数据存储持久性。</li>\n<li><a href=\"https://developer.android.google.cn/guide/navigation/navigation-getting-started\">Navigation</a> - 管理应用导航流程。</li>\n<li><a href=\"https://developer.android.google.cn/training/camerax\">CameraX</a> - 满足相机应用需求。</li>\n<li>请参阅所有 Jetpack 库的<a href=\"https://developer.android.google.cn/jetpack/androidx/versions#version-table\">概览</a>。</li>\n</ul>\n<p><img src=\"images/Jetpack/image-20200721153616389.png\" alt=\"image-20200721153616389\"></p>\n<p><img src=\"images/Jetpack/image-20200722131636968.png\" alt=\"image-20200722131636968\"></p>\n<h2 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>ViewModel是Jetpack组件之一，在传统Activity中需要负责逻辑处理，又要控制UI展示，甚至还得处理网络回调，现在ViewModel将负责Activity的数据部分</p>\n<p>当手机旋转时Activity会被重新创建，但ViewModel生命周期是Activtity创建到销毁全过程，所以旋转不会导致数据丢失</p>\n<p><img src=\"images/Jetpack/image-20200721154242410.png\" alt=\"image-20200721154242410\"></p>\n<h3 id=\"简单的计时器\"><a href=\"#简单的计时器\" class=\"headerlink\" title=\"简单的计时器\"></a>简单的计时器</h3><ol>\n<li><h4 id=\"导入依赖\"><a href=\"#导入依赖\" class=\"headerlink\" title=\"导入依赖\"></a>导入依赖</h4><pre><code class=\"groovy\">def lifecycle_version = &quot;2.2.0&quot;\n    implementation &quot;androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version&quot;</code></pre>\n<p>​    </p>\n</li>\n<li><h4 id=\"创建ViewModel\"><a href=\"#创建ViewModel\" class=\"headerlink\" title=\"创建ViewModel\"></a>创建ViewModel</h4><pre><code class=\"kotlin\">import androidx.lifecycle.ViewModel\n\nclass MainModel:ViewModel() &amp;#123;\n    var counter=0\n&amp;#125;</code></pre>\n</li>\n<li><h4 id=\"编写Activity\"><a href=\"#编写Activity\" class=\"headerlink\" title=\"编写Activity\"></a>编写Activity</h4><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:orientation=&quot;vertical&quot;\n    tools:context=&quot;.MainActivity&quot;&gt;\n\n</code></pre>\n</li>\n</ol>\n<pre><code>   &lt;TextView\n       android:id=&quot;@+id/infoText&quot;\n       android:layout_width=&quot;wrap_content&quot;\n       android:layout_height=&quot;wrap_content&quot;\n       android:layout_gravity=&quot;center_horizontal&quot;\n       android:text=&quot;@string/jishi&quot; /&gt;\n\n   &lt;Button\n       android:id=&quot;@+id/plusOnBtn&quot;\n       android:layout_gravity=&quot;center_vertical&quot;\n       android:layout_width=&quot;match_parent&quot;\n       android:layout_height=&quot;wrap_content&quot;\n       android:text=&quot;@string/pulus_one&quot; /&gt;</code></pre>\n   </LinearLayout>\n   ```\n\n<pre><code class=\"kotlin\">\npackage com.kj.scoreviewmodel\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProviders\nimport kotlinx.android.synthetic.main.activity_main.*\n\nclass MainActivity : AppCompatActivity() &amp;#123;\n\n    //定义viewmodel\n    lateinit var viewModel: MainModel\n\n    override fun onCreate(savedInstanceState: Bundle?) &amp;#123;\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        //初始化viewmodel\n        viewModel= ViewModelProviders.of(this).get(MainModel::class.java)\n\n        //button点击事件\n        plusOnBtn.setOnClickListener &amp;#123;\n            viewModel.counter++\n            refreshCounter()\n        &amp;#125;\n        refreshCounter()\n\n    &amp;#125;\n    //更新视图\n    private fun refreshCounter() &amp;#123;\n        infoText.text=viewModel.counter.toString()\n    &amp;#125;\n&amp;#125;\n</code></pre>\n<h3 id=\"向ViewModel传递参数\"><a href=\"#向ViewModel传递参数\" class=\"headerlink\" title=\"向ViewModel传递参数\"></a>向ViewModel传递参数</h3><pre><code class=\"kotlin\">import androidx.lifecycle.ViewModel\n//添加构造参数\nclass MainModel2(counter:Int): ViewModel() &amp;#123;\n    var counter=counter\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">import androidx.lifecycle.ViewModel\nimport androidx.lifecycle.ViewModelProvider\n//利用ViewModelProvider.Factory 接口 实现构造函数\nclass MainViewModelFactory(private val counter: Int) : ViewModelProvider.Factory &amp;#123;\n    override fun &lt;T : ViewModel?&gt; create(modelClass: Class&lt;T&gt;): T &amp;#123;\n        return MainModel2(counter) as T\n    &amp;#125;\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">import android.content.Context\nimport android.content.SharedPreferences\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.lifecycle.ViewModelProviders\nimport kotlinx.android.synthetic.main.activity_main.*\n\n\nclass MainActivity2 : AppCompatActivity() &amp;#123;\n\n    lateinit var viewModel:MainModel2\n    lateinit var sp: SharedPreferences\n\n    override fun onCreate(savedInstanceState: Bundle?) &amp;#123;\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n\n        sp=getPreferences(Context.MODE_PRIVATE)\n        val countReserved=sp.getInt(&quot;count_reserved&quot;,0)\n\n        //初始化viewmodel（修改点）\n        viewModel= ViewModelProviders.of(this,MainViewModelFactory(countReserved)).get(MainModel2::class.java)\n\n        //button点击事件\n        plusOnBtn.setOnClickListener &amp;#123;\n            viewModel.counter++\n            refreshCounter()\n        &amp;#125;\n        refreshCounter()\n    &amp;#125;\n\n    override fun onPause() &amp;#123;\n        super.onPause()\n        sp.edit().putInt(&quot;count_reserved&quot;,viewModel.counter).apply()\n    &amp;#125;\n\n    //更新视图\n    private fun refreshCounter() &amp;#123;\n        infoText.text=viewModel.counter.toString()\n    &amp;#125;\n&amp;#125;</code></pre>\n<h3 id=\"更正由于ViewModel-设计理念是不依赖与Activity\"><a href=\"#更正由于ViewModel-设计理念是不依赖与Activity\" class=\"headerlink\" title=\"更正由于ViewModel 设计理念是不依赖与Activity\"></a>更正由于ViewModel 设计理念是不依赖与Activity</h3><h3 id=\"使用google推荐的写法\"><a href=\"#使用google推荐的写法\" class=\"headerlink\" title=\"使用google推荐的写法\"></a>使用google推荐的写法</h3><pre><code class=\"kotlin\">class UserProfileViewModel : ViewModel() &amp;#123;\n   val userId : String = TODO()\n   val user : User = TODO()\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">private val viewModel: UserProfileViewModel by viewModels()</code></pre>\n<h3 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h3><pre><code>Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target\n//解决\nandroid &amp;#123;\n    ...\n    compileOptions &amp;#123;\n        sourceCompatibility = 1.8\n        targetCompatibility = 1.8\n    &amp;#125;\n\n    kotlinOptions &amp;#123;\n        jvmTarget = &quot;1.8&quot;\n    &amp;#125;\n&amp;#125;\n</code></pre>\n<p><img src=\"images/Jetpack/image-20200722134519104.png\" alt=\"image-20200722134519104\"></p>\n<h2 id=\"Lifecycles\"><a href=\"#Lifecycles\" class=\"headerlink\" title=\"Lifecycles\"></a>Lifecycles</h2><h3 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p>在网络请求中，由于网络响应延迟，页面关闭情况，我们要对activity生命周期进行逻辑处理</p>\n<h3 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h3><pre><code>import android.util.Log\nimport androidx.lifecycle.Lifecycle\nimport androidx.lifecycle.LifecycleObserver\nimport androidx.lifecycle.OnLifecycleEvent\n\nclass MyObserver(val lifecycle: Lifecycle) : LifecycleObserver &amp;#123;\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    fun activityStart()&amp;#123;\n        Log.d(&quot;MyObserver&quot;, &quot;activityStart: &quot;)\n    &amp;#125;\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    fun activityStop()&amp;#123;\n        Log.d(&quot;MyObserver&quot;, &quot;activityStop: &quot;)\n    &amp;#125;\n&amp;#125;</code></pre>\n<pre><code>//activity监听生命周期\n        MyObserver(lifecycle)\n        val currentState = lifecycle.currentState\n        Toast.makeText(this, &quot;&quot;+currentState, Toast.LENGTH_SHORT).show()</code></pre>\n<h2 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h2><p><a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。</p>\n<p>您可以注册与实现 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner\"><code>LifecycleOwner</code></a> 接口的对象配对的观察者。有了这种关系，当相应的 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle\"><code>Lifecycle</code></a> 对象的状态变为 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.State#DESTROYED\"><code>DESTROYED</code></a> 时，便可移除此观察者。 这对于 Activity 和 Fragment 特别有用，因为它们可以放心地观察 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData\"><code>LiveData</code></a> 对象而不必担心泄露（当 Activity 和 Fragment 的生命周期被销毁时，系统会立即退订它们）。</p>\n<ul>\n<li>确保界面符合数据状态</li>\n<li>不会发生内存泄漏</li>\n<li>不会因Activity停止导致崩溃</li>\n<li>不需要手动处理生命周期</li>\n<li>数据保持最新状态</li>\n<li>适当的配置更改</li>\n<li>共享资源</li>\n</ul>\n<h3 id=\"1-使用LiveData对象\"><a href=\"#1-使用LiveData对象\" class=\"headerlink\" title=\"1.使用LiveData对象\"></a>1.使用LiveData对象</h3><ol>\n<li><p>创建 <code>LiveData</code> 实例以存储某种类型的数据。这通常在 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel\"><code>ViewModel</code></a> 类中完成。</p>\n</li>\n<li><p>创建可定义 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Observer#onChanged(T)\"><code>onChanged()</code></a> 方法的 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/Observer\"><code>Observer</code></a> 对象，该方法可以控制当 <code>LiveData</code> 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 <code>Observer</code> 对象。</p>\n</li>\n<li><p>使用 [<code>observe()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe\">https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe</a>(android.arch.lifecycle.LifecycleOwner, android.arch.lifecycle.Observer)) 方法将 <code>Observer</code> 对象附加到 <code>LiveData</code> 对象。<code>observe()</code> 方法会采用 <a href=\"https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner\"><code>LifecycleOwner</code></a> 对象。这样会使 <code>Observer</code> 对象订阅 <code>LiveData</code> 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 <code>Observer</code> 对象。</p>\n<pre><code class=\"kotlin\">import androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\n\nclass NameViewModel : ViewModel() &amp;#123;\n\n    // 用字符串创建一个LiveData\n    val currentName: MutableLiveData&lt;String&gt; by lazy &amp;#123;\n        MutableLiveData&lt;String&gt;()\n    &amp;#125;\n\n    // ViewModel的其余部分…\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">class NameActivity : AppCompatActivity() &amp;#123;\n\n    // 使用&#39;by viewModels()&#39; Kotlin属性委托\n    // 来自activity-ktx工件\n    private val model: NameViewModel by viewModels()\n\n    override fun onCreate(savedInstanceState: Bundle?) &amp;#123;\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_name)\n\n        // 创建用于更新UI的观察者。\n        val nameObserver = Observer&lt;String&gt; &amp;#123; newName -&gt;\n            // 更新UI，这里是TextView。\n            nameTextView.text = newName\n        &amp;#125;\n\n        // 观察LiveData，将此活动作为LifecycleOwner和observer传递进来。\n        model.currentName.observe(this, nameObserver)\n\n        // 修改参数\n        button.setOnClickListener &amp;#123;\n            model.currentName.setValue(edText.text.toString())\n            //model.currentName.postValue(edText.text.toString())\n        &amp;#125;\n\n    &amp;#125;\n&amp;#125;</code></pre>\n</li>\n</ol>\n<h3 id=\"2-map和switchMap的使用\"><a href=\"#2-map和switchMap的使用\" class=\"headerlink\" title=\"2.map和switchMap的使用\"></a>2.map和switchMap的使用</h3><ol>\n<li><p>定义一个User类</p>\n<pre><code class=\"kotlin\">data class User(var fistName:String,var lastName:String,var age:Int)</code></pre>\n</li>\n</ol>\n<ol start=\"2\">\n<li><p>编写ViewModel</p>\n<pre><code class=\"kotlin\">class MainViewModel(countReserved:Int):ViewModel()&amp;#123;\n    private val userLiveData=MytableLiveData&lt;User&gt;()\n\n    val userName:LiveData&lt;String&gt;=Transformations.map(userLiveData)&amp;#123;user-&gt;\n        &quot;$&amp;#123;user.firstName&amp;#125; $&amp;#123;user.lastName&amp;#125;&quot;                                                            \n    &amp;#125;\n&amp;#125;</code></pre>\n</li>\n</ol>\n<ol start=\"3\">\n<li><h2 id=\"Room\"><a href=\"#Room\" class=\"headerlink\" title=\"Room\"></a>Room</h2></li>\n</ol>\n<p><a href=\"https://developer.android.google.cn/training/data-storage/room\">Room</a> 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。</p>\n<p>Room 包含 3 个主要组件：</p>\n<ul>\n<li><p><a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><strong>数据库</strong></a>：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</p>\n<p>使用 <a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><code>@Database</code></a> 注释的类应满足以下条件：</p>\n<ul>\n<li>是扩展 <a href=\"https://developer.android.google.cn/reference/androidx/room/RoomDatabase\"><code>RoomDatabase</code></a> 的抽象类。</li>\n<li>在注释中添加与数据库关联的实体列表。</li>\n<li>包含具有 0 个参数且返回使用 <a href=\"https://developer.android.google.cn/reference/androidx/room/Dao\"><code>@Dao</code></a> 注释的类的抽象方法。</li>\n</ul>\n<p>在运行时，您可以通过调用 [<code>Room.databaseBuilder()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder\">https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder</a>(android.content.Context, java.lang.Class, java.lang.String)) 或 [<code>Room.inMemoryDatabaseBuilder()</code>](<a href=\"https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder\">https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder</a>(android.content.Context, java.lang.Class)) 获取 <a href=\"https://developer.android.google.cn/reference/androidx/room/Database\"><code>Database</code></a> 的实例。</p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"https://developer.android.google.cn/training/data-storage/room/defining-data\"><strong>Entity</strong></a>：表示数据库中的表。</p>\n</li>\n<li><p><a href=\"https://developer.android.google.cn/training/data-storage/room/accessing-data\"><strong>DAO</strong></a>：包含用于访问数据库的方法。</p>\n</li>\n</ul>\n<p>应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。</p>\n<p><img src=\"images/Jetpack/image-20200722181709403.png\" alt=\"image-20200722181709403\"></p>\n<h3 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h3><p>导入依赖</p>\n<pre><code class=\"kotlin\">def room_version = &quot;2.2.5&quot;\n\n    implementation &quot;androidx.room:room-runtime:$room_version&quot;\n    //annotationProcessor &quot;androidx.room:room-compiler:$room_version&quot; // 对于Kotlin来说，使用kapt而不是annotationProcessor\n    kapt &quot;androidx.room:room-compiler:$room_version&quot; // 对于Kotlin来说，使用kapt而不是annotationProcessor\n\n// 可选- Kotlin扩展和协同程序支持空间\nimplementation &quot;androidx.room:room-ktx:$room_version&quot;\n\n// 可选- RxJava支持房间\nimplementation &quot;androidx.room:room-rxjava2:$room_version&quot;\n\n// 可选-番石榴支持房间，包括可选和ListenableFuture\nimplementation &quot;androidx.room:room-guava:$room_version&quot;\n\n// 测试助手\ntestImplementation &quot;androidx.room:room-testing:$room_version&quot;</code></pre>\n<p>User</p>\n<pre><code class=\"kotlin\">//数据库的表\n@Entity\ndata class User(\n    @ColumnInfo(name = &quot;first_name&quot;) val firstName: String?,\n    @ColumnInfo(name = &quot;last_name&quot;) val lastName: String?\n)&amp;#123;\n    @PrimaryKey(autoGenerate = true)\n    var uid: Long=0\n&amp;#125;   </code></pre>\n<p>UserDao</p>\n<pre><code class=\"kotlin\">//数据访问对象\n@Dao\ninterface UserDao &amp;#123;\n    @Query(&quot;SELECT * FROM user&quot;)\n    fun getAll(): List&lt;User&gt;\n\n    @Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)\n    fun loadAllByIds(userIds: IntArray): List&lt;User&gt;\n\n    @Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot; +\n            &quot;last_name LIKE :last LIMIT 1&quot;)\n    fun findByName(first: String, last: String): User\n\n    @Insert\n    fun insertUser(user: User):Long\n\n    @Delete\n    fun delete(user: User)\n&amp;#125;</code></pre>\n<p>AppDatabase</p>\n<pre><code class=\"kotlin\">    @Database(entities = arrayOf(User::class), version = 1)\n    abstract class AppDatabase : RoomDatabase() &amp;#123;\n        abstract fun userDao(): UserDao\n    &amp;#125;\n</code></pre>\n<p>创建上述文件后，您可以使用以下代码获取已创建的数据库的实例：</p>\n<pre><code class=\"kotlin\">//定义数据库对象，数据库版本，包含的实体类\n@Database(entities = [User::class], version = 1)\nabstract class AppDatabase : RoomDatabase() &amp;#123;\n    abstract fun userDao(): UserDao\n\n    companion object&amp;#123;\n        private var instance: AppDatabase?=null\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase &amp;#123;\n            instance?.let &amp;#123;\n                return it\n            &amp;#125;\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,&quot;app_database&quot;)\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n\n                .build().apply &amp;#123;\n                    instance =this\n                &amp;#125;\n        &amp;#125;\n    &amp;#125;\n&amp;#125; </code></pre>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    android:padding=&quot;20dp&quot;\n    android:orientation=&quot;vertical&quot;\n    tools:context=&quot;.room.RoomActivity&quot;&gt;\n\n    &lt;EditText\n        android:id=&quot;@+id/edText&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:hint=&quot;name 用空格隔开&quot;\n        android:autofillHints=&quot;姓名&quot;\n        android:inputType=&quot;text&quot; /&gt;\n\n    &lt;Button\n        android:id=&quot;@+id/addBtn&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/add&quot; /&gt;\n\n    &lt;Button\n        android:id=&quot;@+id/queryBtn&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/query_data&quot;/&gt;\n\n    &lt;Button\n        android:id=&quot;@+id/updateBtn&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/update&quot; /&gt;\n\n    &lt;Button\n        android:id=&quot;@+id/deleteBtn&quot;\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;wrap_content&quot;\n        android:text=&quot;@string/delete&quot; /&gt;\n\n    &lt;ScrollView\n        android:layout_width=&quot;match_parent&quot;\n        android:layout_height=&quot;match_parent&quot;&gt;\n\n        &lt;LinearLayout\n            android:layout_width=&quot;match_parent&quot;\n            android:layout_height=&quot;wrap_content&quot;\n            android:orientation=&quot;vertical&quot;&gt;\n\n            &lt;TextView\n                android:id=&quot;@+id/textView&quot;\n                android:layout_width=&quot;match_parent&quot;\n                android:layout_height=&quot;wrap_content&quot;\n                android:fontFamily=&quot;@font/aldrich&quot;\n                android:textSize=&quot;20sp&quot; /&gt;\n        &lt;/LinearLayout&gt;\n    &lt;/ScrollView&gt;\n\n\n&lt;/LinearLayout&gt;</code></pre>\n<pre><code class=\"kotlin\">class RoomActivity : AppCompatActivity() &amp;#123;\n\n    //获取数据库实例\n    val userDao= AppDatabase.getDatabase(this).userDao()\n\n    override fun onCreate(savedInstanceState: Bundle?) &amp;#123;\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_room)\n\n        addBtn.setOnClickListener &amp;#123;\n            userDao.insertUser(User(edText.text.toString().split(&quot; &quot;)[0],edText.text.toString().split(&quot; &quot;)[1]))\n        &amp;#125;\n\n        updateBtn.setOnClickListener &amp;#123;\n            userDao.upDateUser(User(edText.text.toString().split(&quot; &quot;)[0],edText.text.toString().split(&quot; &quot;)[1]))\n        &amp;#125;\n\n        deleteBtn.setOnClickListener &amp;#123;\n            userDao.deleteUserByLastName(textView.text.toString())\n        &amp;#125;\n\n        queryBtn.setOnClickListener &amp;#123;\n            var str=&quot;&quot;\n            for (user in userDao.getAll())&amp;#123;\n                str+=user.toString()+&quot;\\n&quot;\n            &amp;#125;\n            textView.text=str\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<h3 id=\"Room的数据库升级\"><a href=\"#Room的数据库升级\" class=\"headerlink\" title=\"Room的数据库升级\"></a>Room的数据库升级</h3><p>添加数据库表Book</p>\n<pre><code class=\"kotlin\">@Entity\ndata class Book(var name:String,var pages: Int) &amp;#123;\n    @PrimaryKey(autoGenerate = true)\n    var id:Long=0\n&amp;#125;</code></pre>\n<p>BookDao</p>\n<pre><code class=\"kotlin\">@Dao\ninterface BookDao &amp;#123;\n    @Insert\n    fun insertBook(book: Book):Long\n\n    @Query(&quot;select * from Book&quot;)\n    fun loadAllBooks(): List&lt;Book&gt;\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">//定义数据库对象，数据库版本，包含的实体类\n//版本变成2 添加Book class\n@Database(version = 2, entities = [User::class,Book::class])\nabstract class AppDatabase : RoomDatabase() &amp;#123;\n    abstract fun userDao(): UserDao\n    abstract fun bookDao(): BookDao\n\n    companion object&amp;#123;\n        private var instance: AppDatabase?=null\n\n        val MIGRATION_1_2=object : Migration(1,2)&amp;#123;\n            override fun migrate(database: SupportSQLiteDatabase) &amp;#123;\n                database.execSQL(&quot;create table Book (&quot; +\n                        &quot;id integer primary key autoincrement not null,&quot; +\n                        &quot;name text not null,&quot; +\n                        &quot;pages integer not null)&quot;)\n            &amp;#125;\n        &amp;#125;\n\n        @Synchronized\n        fun getDatabase(context: Context): AppDatabase &amp;#123;\n            instance?.let &amp;#123;\n                return it\n            &amp;#125;\n            return Room.databaseBuilder(context.applicationContext,\n                AppDatabase::class.java,&quot;app_database&quot;)\n                .allowMainThreadQueries()//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作\n                .addMigrations(MIGRATION_1_2)//添加数据表\n                .build().apply &amp;#123;\n                    instance =this\n                &amp;#125;\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<h2 id=\"WorkManager-调度任务\"><a href=\"#WorkManager-调度任务\" class=\"headerlink\" title=\"WorkManager 调度任务\"></a>WorkManager 调度任务</h2><p>使用 WorkManager API 可以轻松地调度即使在应用退出或设备重启时仍应运行的可延迟异步任务。</p>\n<p><strong>主要功能</strong>：</p>\n<ul>\n<li>最高向后兼容到 API 14<ul>\n<li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li>\n<li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li>\n</ul>\n</li>\n<li>添加网络可用性或充电状态等工作约束</li>\n<li>调度一次性或周期性异步任务</li>\n<li>监控和管理计划任务</li>\n<li>将任务链接起来</li>\n<li>确保任务执行，即使应用或设备重启也同样执行任务</li>\n<li>遵循低电耗模式等省电功能</li>\n</ul>\n<p>WorkManager 旨在用于<strong>可延迟</strong>运行（即不需要立即运行）并且在应用退出或设备重启时必须能够<strong>可靠运行</strong>的任务。例如：</p>\n<ul>\n<li>向后端服务发送日志或分析数据</li>\n<li>定期将应用数据与服务器同步</li>\n</ul>\n<p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href=\"https://developer.android.google.cn/guide/background\">后台处理指南</a>，了解哪种解决方案符合您的需求。</p>\n<h3 id=\"WorkManger基本用法\"><a href=\"#WorkManger基本用法\" class=\"headerlink\" title=\"WorkManger基本用法\"></a>WorkManger基本用法</h3><h4 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h4><pre><code class=\"groovy\">def work_version = &quot;2.3.4&quot;\n\n        // (Java only)\n        implementation &quot;androidx.work:work-runtime:$work_version&quot;\n\n        // Kotlin + coroutines\n        implementation &quot;androidx.work:work-runtime-ktx:$work_version&quot;\n\n        // optional - RxJava2 support\n        implementation &quot;androidx.work:work-rxjava2:$work_version&quot;\n\n        // optional - GCMNetworkManager support\n        implementation &quot;androidx.work:work-gcm:$work_version&quot;\n\n        // optional - Test helpers\n        androidTestImplementation &quot;androidx.work:work-testing:$work_version&quot;</code></pre>\n<h4 id=\"创建后台任务\"><a href=\"#创建后台任务\" class=\"headerlink\" title=\"创建后台任务\"></a>创建后台任务</h4><pre><code class=\"kotlin\">class SimpleWorker(context: Context,params: WorkerParameters): Worker(context,params) &amp;#123;\n    override fun doWork(): Result &amp;#123;\n        //耗时操作\n        Log.d(&quot;SimpleWorker&quot;, &quot;doWork: do work in SimpleWorker&quot;)\n        return Result.success()\n    &amp;#125;\n&amp;#125;</code></pre>\n<pre><code class=\"kotlin\">button.setOnClickListener &amp;#123;\n            val request=OneTimeWorkRequest.Builder(SimpleWorker::class.java)\n                .setInitialDelay(5,TimeUnit.MINUTES)//设置5分钟后运行\n                .addTag(&quot;simple&quot;)//添加请求标签，\n                .build()\n            WorkManager.getInstance(this).enqueue(request)\n        &amp;#125;</code></pre>\n"},{"title":"使用 ViewModel 处理配置更改","auther":"ku jin","_content":"## 使用 ViewModel 处理配置更改\n\nViewModel 非常适合在用户积极使用应用程序时存储和管理与 UI 相关的数据。它允许快速访问 UI 数据，并帮助您避免通过旋转、窗口调整和其他常见发生的配置更改从网络或磁盘重新提取数据。若要了解如何实现视图模型，请参阅[视图模型指南](https://developer.android.com/topic/libraries/architecture/viewmodel.html)。\n\nViewModel 将数据保留在内存中，这意味着检索比从磁盘或网络中检索数据更便宜。ViewModel 与活动（或其他一些生命周期所有者）关联 - 它在配置更改期间保留在内存中，系统会自动将 ViewModel 与配置更改导致的新活动实例关联。\n\n当用户退出活动或片段时，或者当您调用 finish（）时，ViewModels 会自动被系统销毁，这意味着状态将按用户在这些方案中的期望进行清除。\n\n与保存的实例状态不同，ViewModels 在系统启动的进程死亡期间被销毁。这就是为什么您应该将 ViewModel 对象与 onSaveInstanceState（或其他一些磁盘持久性）结合使用，将标识符隐藏到保存的 InstanceState 中，以帮助查看模型在系统死亡后重新加载数据。\n\n如果您已经拥有用于跨配置更改存储 UI 状态的内存中解决方案，则可能不需要使用 ViewModel。\n\n### 博客\n\n- [视图模型 ：一个简单的示例](https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e)\n- [视图模型：持久性、在保存状态（）、还原 UI 状态和加载器](https://medium.com/androiddevelopers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090)\n- [Android 生命周期感知组件代码实验室](https://codelabs.developers.google.com/codelabs/android-lifecycles/)\n\n","source":"_posts/随心记/Android学习/使用 ViewModel 处理配置更改.md","raw":"---\ntitle: 使用 ViewModel 处理配置更改 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 使用 ViewModel 处理配置更改 \n---\n## 使用 ViewModel 处理配置更改\n\nViewModel 非常适合在用户积极使用应用程序时存储和管理与 UI 相关的数据。它允许快速访问 UI 数据，并帮助您避免通过旋转、窗口调整和其他常见发生的配置更改从网络或磁盘重新提取数据。若要了解如何实现视图模型，请参阅[视图模型指南](https://developer.android.com/topic/libraries/architecture/viewmodel.html)。\n\nViewModel 将数据保留在内存中，这意味着检索比从磁盘或网络中检索数据更便宜。ViewModel 与活动（或其他一些生命周期所有者）关联 - 它在配置更改期间保留在内存中，系统会自动将 ViewModel 与配置更改导致的新活动实例关联。\n\n当用户退出活动或片段时，或者当您调用 finish（）时，ViewModels 会自动被系统销毁，这意味着状态将按用户在这些方案中的期望进行清除。\n\n与保存的实例状态不同，ViewModels 在系统启动的进程死亡期间被销毁。这就是为什么您应该将 ViewModel 对象与 onSaveInstanceState（或其他一些磁盘持久性）结合使用，将标识符隐藏到保存的 InstanceState 中，以帮助查看模型在系统死亡后重新加载数据。\n\n如果您已经拥有用于跨配置更改存储 UI 状态的内存中解决方案，则可能不需要使用 ViewModel。\n\n### 博客\n\n- [视图模型 ：一个简单的示例](https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e)\n- [视图模型：持久性、在保存状态（）、还原 UI 状态和加载器](https://medium.com/androiddevelopers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090)\n- [Android 生命周期感知组件代码实验室](https://codelabs.developers.google.com/codelabs/android-lifecycles/)\n\n","slug":"随心记/Android学习/使用 ViewModel 处理配置更改","published":1,"date":"2020-08-02T23:42:42.105Z","updated":"2020-08-02T23:42:59.742Z","_id":"ckdcza4im002zrkambd6zd40p","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"使用-ViewModel-处理配置更改\"><a href=\"#使用-ViewModel-处理配置更改\" class=\"headerlink\" title=\"使用 ViewModel 处理配置更改\"></a>使用 ViewModel 处理配置更改</h2><p>ViewModel 非常适合在用户积极使用应用程序时存储和管理与 UI 相关的数据。它允许快速访问 UI 数据，并帮助您避免通过旋转、窗口调整和其他常见发生的配置更改从网络或磁盘重新提取数据。若要了解如何实现视图模型，请参阅<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html\">视图模型指南</a>。</p>\n<p>ViewModel 将数据保留在内存中，这意味着检索比从磁盘或网络中检索数据更便宜。ViewModel 与活动（或其他一些生命周期所有者）关联 - 它在配置更改期间保留在内存中，系统会自动将 ViewModel 与配置更改导致的新活动实例关联。</p>\n<p>当用户退出活动或片段时，或者当您调用 finish（）时，ViewModels 会自动被系统销毁，这意味着状态将按用户在这些方案中的期望进行清除。</p>\n<p>与保存的实例状态不同，ViewModels 在系统启动的进程死亡期间被销毁。这就是为什么您应该将 ViewModel 对象与 onSaveInstanceState（或其他一些磁盘持久性）结合使用，将标识符隐藏到保存的 InstanceState 中，以帮助查看模型在系统死亡后重新加载数据。</p>\n<p>如果您已经拥有用于跨配置更改存储 UI 状态的内存中解决方案，则可能不需要使用 ViewModel。</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e\">视图模型 ：一个简单的示例</a></li>\n<li><a href=\"https://medium.com/androiddevelopers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090\">视图模型：持久性、在保存状态（）、还原 UI 状态和加载器</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-lifecycles/\">Android 生命周期感知组件代码实验室</a></li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"使用-ViewModel-处理配置更改\"><a href=\"#使用-ViewModel-处理配置更改\" class=\"headerlink\" title=\"使用 ViewModel 处理配置更改\"></a>使用 ViewModel 处理配置更改</h2><p>ViewModel 非常适合在用户积极使用应用程序时存储和管理与 UI 相关的数据。它允许快速访问 UI 数据，并帮助您避免通过旋转、窗口调整和其他常见发生的配置更改从网络或磁盘重新提取数据。若要了解如何实现视图模型，请参阅<a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel.html\">视图模型指南</a>。</p>\n<p>ViewModel 将数据保留在内存中，这意味着检索比从磁盘或网络中检索数据更便宜。ViewModel 与活动（或其他一些生命周期所有者）关联 - 它在配置更改期间保留在内存中，系统会自动将 ViewModel 与配置更改导致的新活动实例关联。</p>\n<p>当用户退出活动或片段时，或者当您调用 finish（）时，ViewModels 会自动被系统销毁，这意味着状态将按用户在这些方案中的期望进行清除。</p>\n<p>与保存的实例状态不同，ViewModels 在系统启动的进程死亡期间被销毁。这就是为什么您应该将 ViewModel 对象与 onSaveInstanceState（或其他一些磁盘持久性）结合使用，将标识符隐藏到保存的 InstanceState 中，以帮助查看模型在系统死亡后重新加载数据。</p>\n<p>如果您已经拥有用于跨配置更改存储 UI 状态的内存中解决方案，则可能不需要使用 ViewModel。</p>\n<h3 id=\"博客\"><a href=\"#博客\" class=\"headerlink\" title=\"博客\"></a>博客</h3><ul>\n<li><a href=\"https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e\">视图模型 ：一个简单的示例</a></li>\n<li><a href=\"https://medium.com/androiddevelopers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090\">视图模型：持久性、在保存状态（）、还原 UI 状态和加载器</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/android-lifecycles/\">Android 生命周期感知组件代码实验室</a></li>\n</ul>\n"},{"title":"视图导航","auther":"ku jin","_content":"[TOC]\n\n# Navigation\n\n官方文档：https://developer.android.com/guide/navigation/\n\nyoutube教程视频：https://developer.android.com/guide/navigation/\n\n关键三部分\n\n| Navigation graph | : 一个 XML 资源，其中包含一个集中位置中的所有与导航相关的信息。这包括应用内的所有单个内容区域（*称为目标*）以及用户可以通过应用可走的路径。 |\n| ---------------- | :----------------------------------------------------------- |\n| NavHost Fragment | 显示导航图中的目的地的空容器。导航组件包含一个默认实现，[`即导航帧，`](https://developer.android.com/reference/androidx/navigation/fragment/NavHostFragment)显示片段目标。 |\n| NavController    | 管理中应用导航的对象。当用户在整个应用中移动时，协调中的目标内容的交换 |\n\n## 开始使用Navigation\n\n1. ### 配置环境\n\n   ```groovy\n   def nav_version = \"2.3.0\"\n   // Kotlin\n     implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n     implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n   ```\n\n   创建几个BlankFragment 用于页面跳转\n\n2. ### 创建导航图 activity_main.xml\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <androidx.constraintlayout.widget.ConstraintLayout\n       xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       xmlns:tools=\"http://schemas.android.com/tools\"\n       xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       tools:context=\".MainActivity\">\n   \n       <fragment\n           android:id=\"@+id/nav_host_fragment\"\n                 <!-- 关键代码 start-->\n           android:name=\"androidx.navigation.fragment.NavHostFragment\"\n           app:defaultNavHost=\"true\"\n           app:navGraph=\"@navigation/nav_graph\"\n        <!-- 关键代码 end-->\n           android:layout_width=\"0dp\"\n           android:layout_height=\"0dp\"\n           app:layout_constraintLeft_toLeftOf=\"parent\"\n           app:layout_constraintRight_toRightOf=\"parent\"\n           app:layout_constraintTop_toTopOf=\"parent\"\n           app:layout_constraintBottom_toBottomOf=\"parent\" />\n   \n   </androidx.constraintlayout.widget.ConstraintLayout>\n   ```\n\n3. ### 导航编辑器\n\n   ![image-20200721082952691](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082952691.png)\n\n   ![image-20200721082851327](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082851327.png)\n\n   ![image-20200721083022645](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721083022645.png)\n\n4. \n\n","source":"_posts/随心记/Android学习/视图导航.md","raw":"---\ntitle: 视图导航 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 视图导航 \n---\n[TOC]\n\n# Navigation\n\n官方文档：https://developer.android.com/guide/navigation/\n\nyoutube教程视频：https://developer.android.com/guide/navigation/\n\n关键三部分\n\n| Navigation graph | : 一个 XML 资源，其中包含一个集中位置中的所有与导航相关的信息。这包括应用内的所有单个内容区域（*称为目标*）以及用户可以通过应用可走的路径。 |\n| ---------------- | :----------------------------------------------------------- |\n| NavHost Fragment | 显示导航图中的目的地的空容器。导航组件包含一个默认实现，[`即导航帧，`](https://developer.android.com/reference/androidx/navigation/fragment/NavHostFragment)显示片段目标。 |\n| NavController    | 管理中应用导航的对象。当用户在整个应用中移动时，协调中的目标内容的交换 |\n\n## 开始使用Navigation\n\n1. ### 配置环境\n\n   ```groovy\n   def nav_version = \"2.3.0\"\n   // Kotlin\n     implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\n     implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\n   ```\n\n   创建几个BlankFragment 用于页面跳转\n\n2. ### 创建导航图 activity_main.xml\n\n   ```xml\n   <?xml version=\"1.0\" encoding=\"utf-8\"?>\n   <androidx.constraintlayout.widget.ConstraintLayout\n       xmlns:android=\"http://schemas.android.com/apk/res/android\"\n       xmlns:tools=\"http://schemas.android.com/tools\"\n       xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n       android:layout_width=\"match_parent\"\n       android:layout_height=\"match_parent\"\n       tools:context=\".MainActivity\">\n   \n       <fragment\n           android:id=\"@+id/nav_host_fragment\"\n                 <!-- 关键代码 start-->\n           android:name=\"androidx.navigation.fragment.NavHostFragment\"\n           app:defaultNavHost=\"true\"\n           app:navGraph=\"@navigation/nav_graph\"\n        <!-- 关键代码 end-->\n           android:layout_width=\"0dp\"\n           android:layout_height=\"0dp\"\n           app:layout_constraintLeft_toLeftOf=\"parent\"\n           app:layout_constraintRight_toRightOf=\"parent\"\n           app:layout_constraintTop_toTopOf=\"parent\"\n           app:layout_constraintBottom_toBottomOf=\"parent\" />\n   \n   </androidx.constraintlayout.widget.ConstraintLayout>\n   ```\n\n3. ### 导航编辑器\n\n   ![image-20200721082952691](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082952691.png)\n\n   ![image-20200721082851327](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082851327.png)\n\n   ![image-20200721083022645](images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721083022645.png)\n\n4. \n\n","slug":"随心记/Android学习/视图导航","published":1,"date":"2020-08-02T23:42:42.134Z","updated":"2020-08-02T23:42:59.743Z","_id":"ckdcza4jg0038rkamet5g03tn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h1><p>官方文档：<a href=\"https://developer.android.com/guide/navigation/\">https://developer.android.com/guide/navigation/</a></p>\n<p>youtube教程视频：<a href=\"https://developer.android.com/guide/navigation/\">https://developer.android.com/guide/navigation/</a></p>\n<p>关键三部分</p>\n<table>\n<thead>\n<tr>\n<th>Navigation graph</th>\n<th align=\"left\">: 一个 XML 资源，其中包含一个集中位置中的所有与导航相关的信息。这包括应用内的所有单个内容区域（<em>称为目标</em>）以及用户可以通过应用可走的路径。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NavHost Fragment</td>\n<td align=\"left\">显示导航图中的目的地的空容器。导航组件包含一个默认实现，<a href=\"https://developer.android.com/reference/androidx/navigation/fragment/NavHostFragment\"><code>即导航帧，</code></a>显示片段目标。</td>\n</tr>\n<tr>\n<td>NavController</td>\n<td align=\"left\">管理中应用导航的对象。当用户在整个应用中移动时，协调中的目标内容的交换</td>\n</tr>\n</tbody></table>\n<h2 id=\"开始使用Navigation\"><a href=\"#开始使用Navigation\" class=\"headerlink\" title=\"开始使用Navigation\"></a>开始使用Navigation</h2><ol>\n<li><h3 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h3><pre class=\" language-groovy\"><code class=\"language-groovy\"><span class=\"token keyword\">def</span> nav_version <span class=\"token operator\">=</span> <span class=\"token string\">\"2.3.0\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// Kotlin</span>\n  implementation <span class=\"token string\">\"androidx.navigation:navigation-fragment-ktx:$nav_version\"</span>\n  implementation <span class=\"token string\">\"androidx.navigation:navigation-ui-ktx:$nav_version\"</span></code></pre>\n<p>创建几个BlankFragment 用于页面跳转</p>\n</li>\n<li><h3 id=\"创建导航图-activity-main-xml\"><a href=\"#创建导航图-activity-main-xml\" class=\"headerlink\" title=\"创建导航图 activity_main.xml\"></a>创建导航图 activity_main.xml</h3><pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n    &lt;fragment\n        android:id=\"@+id/nav_host_fragment\"\n              <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 关键代码 start--></span>\n        android:name=\"androidx.navigation.fragment.NavHostFragment\"\n        app:defaultNavHost=\"true\"\n        app:navGraph=\"@navigation/nav_graph\"\n     <span class=\"token comment\" spellcheck=\"true\">&lt;!-- 关键代码 end--></span>\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintLeft_toLeftOf=\"parent\"\n        app:layout_constraintRight_toRightOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\" />\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n</li>\n<li><h3 id=\"导航编辑器\"><a href=\"#导航编辑器\" class=\"headerlink\" title=\"导航编辑器\"></a>导航编辑器</h3><p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082952691.png\" alt=\"image-20200721082952691\"></p>\n<p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082851327.png\" alt=\"image-20200721082851327\"></p>\n<p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721083022645.png\" alt=\"image-20200721083022645\"></p>\n</li>\n<li></li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"Navigation\"><a href=\"#Navigation\" class=\"headerlink\" title=\"Navigation\"></a>Navigation</h1><p>官方文档：<a href=\"https://developer.android.com/guide/navigation/\">https://developer.android.com/guide/navigation/</a></p>\n<p>youtube教程视频：<a href=\"https://developer.android.com/guide/navigation/\">https://developer.android.com/guide/navigation/</a></p>\n<p>关键三部分</p>\n<table>\n<thead>\n<tr>\n<th>Navigation graph</th>\n<th align=\"left\">: 一个 XML 资源，其中包含一个集中位置中的所有与导航相关的信息。这包括应用内的所有单个内容区域（<em>称为目标</em>）以及用户可以通过应用可走的路径。</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NavHost Fragment</td>\n<td align=\"left\">显示导航图中的目的地的空容器。导航组件包含一个默认实现，<a href=\"https://developer.android.com/reference/androidx/navigation/fragment/NavHostFragment\"><code>即导航帧，</code></a>显示片段目标。</td>\n</tr>\n<tr>\n<td>NavController</td>\n<td align=\"left\">管理中应用导航的对象。当用户在整个应用中移动时，协调中的目标内容的交换</td>\n</tr>\n</tbody></table>\n<h2 id=\"开始使用Navigation\"><a href=\"#开始使用Navigation\" class=\"headerlink\" title=\"开始使用Navigation\"></a>开始使用Navigation</h2><ol>\n<li><h3 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h3><pre><code class=\"groovy\">def nav_version = &quot;2.3.0&quot;\n// Kotlin\n  implementation &quot;androidx.navigation:navigation-fragment-ktx:$nav_version&quot;\n  implementation &quot;androidx.navigation:navigation-ui-ktx:$nav_version&quot;</code></pre>\n<p>创建几个BlankFragment 用于页面跳转</p>\n</li>\n<li><h3 id=\"创建导航图-activity-main-xml\"><a href=\"#创建导航图-activity-main-xml\" class=\"headerlink\" title=\"创建导航图 activity_main.xml\"></a>创建导航图 activity_main.xml</h3><pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;androidx.constraintlayout.widget.ConstraintLayout\n    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;\n    xmlns:tools=&quot;http://schemas.android.com/tools&quot;\n    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;\n    android:layout_width=&quot;match_parent&quot;\n    android:layout_height=&quot;match_parent&quot;\n    tools:context=&quot;.MainActivity&quot;&gt;\n\n    &lt;fragment\n        android:id=&quot;@+id/nav_host_fragment&quot;\n              &lt;!-- 关键代码 start--&gt;\n        android:name=&quot;androidx.navigation.fragment.NavHostFragment&quot;\n        app:defaultNavHost=&quot;true&quot;\n        app:navGraph=&quot;@navigation/nav_graph&quot;\n     &lt;!-- 关键代码 end--&gt;\n        android:layout_width=&quot;0dp&quot;\n        android:layout_height=&quot;0dp&quot;\n        app:layout_constraintLeft_toLeftOf=&quot;parent&quot;\n        app:layout_constraintRight_toRightOf=&quot;parent&quot;\n        app:layout_constraintTop_toTopOf=&quot;parent&quot;\n        app:layout_constraintBottom_toBottomOf=&quot;parent&quot; /&gt;\n\n&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre>\n</li>\n<li><h3 id=\"导航编辑器\"><a href=\"#导航编辑器\" class=\"headerlink\" title=\"导航编辑器\"></a>导航编辑器</h3><p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082952691.png\" alt=\"image-20200721082952691\"></p>\n<p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082851327.png\" alt=\"image-20200721082851327\"></p>\n<p><img src=\"images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721083022645.png\" alt=\"image-20200721083022645\"></p>\n</li>\n<li></li>\n</ol>\n"},{"title":"基础学习","auther":"ku jin","_content":"安卓科特林基础知识包括以下课程：\n\n## 第 1 课：构建第一个应用\n\n- 官方Android开发者文档[developer.android.com。](http://developer.android.com/index.html)\n- *材料设计*是一种概念设计理念，它概述了应用在移动设备上的外观和功能。材料设计不仅仅适用于 Android 应用程序。材料设计指南[material.io。](https://material.io/)\n- Android Studio 为常见和推荐的应用程序和活动设计提供模板。这些模板为常见用例提供工作代码。\n- 创建项目时，可以为第一个活动选择模板。\n- 在开发应用时，可以从内置模板创建活动和其他应用组件。\n- [Google 示例](https://github.com/googlesamples)包含您可以学习、复制和合并到项目中的代码示例。\n\n### **活动**\n\n- `MainActivity`是 的子类，而子类又是 。是负责绘制 Android 应用 UI 和接收输入事件的核心 Android 类。`AppCompatActivity``Activity``Activity`\n- 所有活动都有一个关联的布局文件，该文件是应用资源中的 XML 文件。布局文件为活动命名，例如 。`activity_main.xml`\n- 中的 方法将布局与活动关联，并在创建活动时膨胀该布局。`setContentView()``MainActivity`\n- 布局膨胀是将 XML 布局文件中定义的视图转换为（或\"膨胀\"成）Kotlin 在内存中的视图的过程。一旦布局膨胀发生，可以绘制这些对象到屏幕上，并动态修改它们。`Activity`\n\n### **视图**\n\n- 应用布局中的所有 UI 元素都是 View 类的子[`类`](http://developer.android.com/reference/android/view/View.html)，称为*视图*。 和意见的例子。`TextView``Button`\n- `View`元素可以分组在视图[`组中`](https://developer.android.com/reference/android/view/ViewGroup.html)。视图组充当视图或其他视图组的容器。 是线性排列其视图的视图组的示例。`LinearLayout`\n\n### **查看属性**\n\n- 和 属性指示视图的宽度和高度。该值将视图拉伸到其父视图的宽度或高度。该值将缩小视图以适合视图的内容。`android:layout_width``android:layout_height``match_parent``wrap_content`\n- 属性指示视图应显示的文本（如果该视图显示文本）。对于按钮，是按钮标签。`android:text``android:text`\n- 视图组中的属性排列它包含的视图元素。从左到右排列视图的值。从上到下排列视图的值。`android:orientation``LinearLayout``horizontal``vertical`\n- 属性确定视图的位置以及该视图的所有子元素。`android:layout_gravity`\n- 该属性定义文本视图中文本的大小。文本大小以 sp 单位（可伸*缩像素）指定*。通过使用 sp 单位，您可以独立于设备的显示质量调整文本的大小。`android:textSize`\n\n### **字符串**\n\n- 在布局中硬编码字符串，最好使用字符串资源。\n- 文件中包含字符串资源。`values/res/string.xml`\n- 要提取字符串，请使用 （在 Mac 上）。选择**从弹出式菜单**中提取字符串资源。`Alt+Enter``Option+Enter`\n\n### **使用视图**\n\n- 若要将 Kotlin 代码连接到布局中定义的视图，需要在视图膨胀后获取对视图对象的引用。将 ID （） 分配给布局中的视图，然后使用[`findViewById（）`](https://developer.android.com/reference/android/view/View#findViewById(int))方法获取关联的视图对象。`android:id`\n- 当您在 XML 布局文件中为视图创建 ID 时，Android Studio 会在生成的类中使用该 ID 的名称创建整数常量。然后可以在 方法中使用该引用。`R``R.id``findViewById()`\n- 您可以直接按属性名称在 Kotlin 代码中设置视图对象的属性。例如，文本视图中的文本由 XML 中的属性定义，并且由 Kotlin 中的属性定义。`android:text``text`\n- *单击处理程序*是当用户单击或点击 UI 元素时调用的方法。若要将单击处理程序方法附加到视图（如按钮），请使用 方法。`setOnClickListener()`\n\n### **使用烤面包**\n\nToast 是一种视图，在一个小的弹出窗口中向用户显示一条简单的消息。\n\n若要创建 Toast，请使用[`三个参数在`](https://developer.android.com/reference/android/widget/Toast.html#makeText(android.content.Context, int, int))Toast 类上调用[`makeText（）`](https://developer.android.com/reference/android/widget/Toast.html)工厂方法：\n\n- [应用](https://developer.android.com/reference/android/content/Context.html)的上下文`Activity`\n- 要显示的消息，例如字符串资源\n- 持续时间，例如[`Toast.LENGTH_SHORT`](https://developer.android.com/reference/android/widget/Toast.html#LENGTH_SHORT)\n\n要显示 Toast，请调用 。`show()`\n\n## 第 2 课：布局\n\nAndroid 开发人员文档：\n\n- [布局](https://developer.android.com/guide/topics/ui/declaring-layout)\n- [`ViewGroup`](https://developer.android.com/reference/android/view/ViewGroup)\n- [`View`](https://developer.android.com/reference/android/view/View)\n- [线性布局](https://developer.android.com/guide/topics/ui/layout/linear)\n- [`ScrollView`](https://developer.android.com/reference/android/widget/ScrollView)\n- [支持不同的像素密度](https://developer.android.com/training/multiscreen/screendensities)（dp）\n- [使用布局编辑器构建 UI](https://developer.android.com/studio/write/layout-editor.html)\n- [安卓工作室文档](http://developer.android.com/tools/studio/index.html)\n- [样式和主题](https://developer.android.com/guide/topics/ui/look-and-feel/themes)\n\n### 1. 输入框及事件监听\n\n- Android[工作室中的](https://developer.android.com/studio/write/layout-editor)布局编辑器工具是一个可视化设计编辑器。您可以使用布局编辑器通过将 UI 元素拖动到布局中来构建应用的布局。\n- [`EditText`](https://developer.android.com/reference/android/widget/EditText)是允许用户输入和修改文本的 UI 元素。\n- [`按钮`](https://developer.android.com/reference/android/widget/Button)是用户可以点击执行操作的 UI 元素。按钮可以由文本、图标或文本和图标组成。\n\n单击侦听器\n\n- 您可以通过向点击侦听器添加单击侦听器来对被点击做出任何响应。`View`\n- 定义单击侦听器的函数接收被单击的 。`View`\n\n可以通过两种方式之一将单击侦听器函数附加到 ：`View`\n\n- 在 XML 布局中，将[`android：onClick`](https://developer.android.com/reference/android/R.attr.html#onClick)属性添加到*`View`*元素。`<``>`\n- 以编程方式，在相应的 中使用[`setOnClickListener（View.OnClickListener）`](https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener))函数。`Activity`\n\n### 2. 使用布局编辑器约束布局 ConstraintLayout\n\n官方教程：https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3\n\n### 3. 数据绑定基础知识\n\n### Android studio 4.0实现了自动绑定 id 可以直接使用id\n\n```\napply plugin: 'kotlin-android-extensions'\n```\n\n使用数据绑定替换对 的调用的步骤：`findViewById()`\n\n1. 在文件的 Android 部分启用数据绑定：`build.gradle`\n   `dataBinding { enabled = true }`\n\n2. 用作 XML 布局中的根视图。`<layout>`\n\n3. 定义绑定变量：\n   `private lateinit var binding: ActivityMainBinding`\n\n4. 在 中创建绑定对象，替换 ：`MainActivity``setContentView`\n   `binding = DataBindingUtil.setContentView(this, R.layout.activity_main)`\n\n5. 将 的调用替换为对绑定对象中视图的引用。例如：\n   =\n\n   （在示例中，视图的名称从 XML 中的视图生成骆驼大小写。`findViewById()``findViewById<Button>(R.id.done_button)``binding.doneButton``id`\n\n将视图绑定到数据的步骤：\n\n1. 为数据创建数据类。\n2. 在标记内添加块。`<data>``<layout>`\n3. 定义 具有名称的类型，以及作为数据类的类型。`<variable>`\n\n```\n<data>\n   <variable\n       name=\"myName\"\n       type=\"com.example.android.aboutme.MyName\" />\n</data>\n```\n\n1. 在 中，使用数据类的实例创建一个变量。例如：`MainActivity`\n   `private val myName: MyName = MyName(\"Aleks Haecky\")`\n\n1. 在绑定对象中，将变量设置为刚刚创建的变量：\n   `binding.myName = myName`\n\n1. 在 XML 中，将视图的内容设置为在块中定义的变量。使用点符号访问数据类内的数据。`<data>`\n   `android:text=\"@={myName.name}\"`\n\n## 第 3 课：导航\n\n### 1. 创建片段(Fragment)\n\n![img](https://developer.android.com/images/fragment_lifecycle.png)fragment生命周期\n\n\n\n### 2. 定义导航路径\n\n\n\n### 3. 启动外部活动\n\n## 第 4 课：活动和片段生命周期\n\n### 4.1生命周期和日志记录\n\n![image-20200721131037492](images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131037492.png)\n\n\n\n![image-20200721130945421](images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131000138.png)\n\nAS快捷键ctrl+o（选择方法，重写）\n\n| 生命周期函数 | 说明                                                         | 注意                                                         |\n| ------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| onCreate()   | 活动执行任何一次初始化                                       | 该方法是重写，因此在它里面，必须立即调用 。其他生命周期方法也是如此。`onCreate()``super.onCreate()` |\n| onStart（）  | 生命周期方法在 刚刚调用。运行后，您的活动在屏幕上可见。与 不同，在活动的生命周期中，可以多次调用（仅调用一次以初始化活动） | 注意，它与相应的生命周期方法配对。如果用户启动应用，然后返回到设备主屏幕，则活动将停止，并且不再在屏幕上可见。`onStart()``onStop()` |\n| onResume()   | 为活动提供焦点，并准备好让用户与其进行交互。                 |                                                              |\n| onPause()    | 应用不再在屏幕上可见                                         |                                                              |\n| onRestart()  | 活动返回到前台                                               |                                                              |\n| onStop()     | 停止活动                                                     |                                                              |\n| onDestroy()  | 应用销毁                                                     |                                                              |\n\n#### 片段的整个启动生命周期，包括这些回调：\n\n- `onAttach()`：当片段与其所有者活动关联时调用。\n- `onCreate()`：与活动类似，对于片段，调用执行初始片段创建（布局除外）。`onCreate()``onCreate()`\n- `onCreateView()`：调用以膨胀片段的布局。\n- `onActivityCreated()`：当所有者活动完成时调用。在调用此方法之前，您的片段将无法访问该活动。`onCreate()`\n- `onStart()`：当片段变为可见时调用;与活动的平行。`onStart()`\n- `onResume()`：当片段获得用户焦点时调用;与活动的平行。`onResume()`\n\n#### [`Log 类`](https://developer.android.com/reference/kotlin/android/util/Log)将消息写入日志猫。\n\n此命令有三个部分：\n\n- *日志消息*的严重性，即消息的重要程度。在这种情况下[`，Log.i（） 方法`](https://developer.android.com/reference/kotlin/android/util/Log#i(kotlin.String, kotlin.String))写入信息消息。类中的其他方法包括[`用于错误的 Log.e（）`](https://developer.android.com/reference/kotlin/android/util/Log#e(kotlin.String, kotlin.String))或用于[`警告的 Log.w（）。` ](https://developer.android.com/reference/kotlin/android/util/Log#w(kotlin.String, kotlin.String))`Log`\n- 日志*标记*，在这种情况下。标记是一个字符串，可让您更轻松地在 Logcat 中查找日志消息。标记通常是类的名称。`\"MainActivity\"`\n- 实际日志*消息，*一个短字符串，在这种情况下是 。`\"onCreate called\"`\n\n1. 编译并运行甜品点击器应用程序。点击甜点时，不会看到应用程序中的任何行为差异。在 Android 工作室中， 在屏幕底部， 单击**Logcat**选项卡\n\n   ![img](https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/ff9c50376701877f.png)\n\n   。日志猫是记录消息的控制台。此处将显示来自 Android 的有关应用的消息，包括您用方法或其他类方法显式发送到日志的消息。`Log.i()``Log`\n\n2. 在**\"日志猫**\"窗格中，键入搜索字段。\n\n   ![img](https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/f5c091e2b480edf8.png)Logcat\n   可以包含许多消息，其中大多数对您没有用。\n\n   您可以通过多种方式筛选 Logcat 条目，但搜索是最容易的。由于您将用作代码中的日志标记，因此可以使用该标记筛选日志。在开始添加意味着这是一个信息性消息，由 创建。\n   日志消息包括日期和时间、包 （）、日志标记（在开始时使用）和实际\n   消息。由于此消息出现在日志中，因此您知道已执行。`I/MainActivity``MainActivity``I/``Log.i()``com.example.android.dessertclicker``I/``onCreate()`\n\n   #### 使用第三方库，显示时间日志\n\n   ```groovy\n   implementation 'com.jakewharton.timber:timber:4.7.1'\n   ```\n\n   简介：Timber`使用 类，因为整个应用将使用此日志记录库，并且在设置其他所有内容之前，需要先初始化一次库。在这种情况下，您可以对类进行子类，并使用您自己的自定义实现重写默认值。`Application``Application\n\n   ##### 在全局类里初始化\n\n   ```kotlin\n   Timber.plant(Timber.DebugTree())\n   ```\n\n   ##### 使用\n\n   ```kotlin\n   Timber.i(\"onCreate called\")\n   ```\n\n   \n\n### 4.2复杂的生命周期情况\n\n#### **生命周期提示**\n\n- 如果在生命周期回调中设置或启动某项内容，请停止或删除相应回调中的东西。通过停止它，你确保它不会继续运行时，它不再需要。例如，如果在 中设置计时器，则需要在 中暂停或停止计时器。`onStart()``onStop()`\n- 仅用于初始化应用首次启动时运行一次的应用部分。用于启动应用在应用启动时和每次应用返回前台时运行的应用部分。`onCreate()``onStart()`\n\n#### **生命周期库**\n\n- 使用 Android 生命周期库将生命周期控制从活动或片段转移到需要生命周期感知的实际组件。\n- 生命周期*所有者*是具有（因此具有\"拥有\"）生命周期（包括 和 ）的组件。生命周期所有者实现接口。`Activity``Fragment``LifecycleOwner`\n- 生命周期*观察者*会关注当前生命周期状态，并在生命周期更改时执行任务。生命周期观察者实现接口。`LifecycleObserver`\n- `Lifecycle`对象包含实际的生命周期状态，并在生命周期更改时触发事件。\n\n要创建生命周期感知类，请：\n\n- 在需要生命周期感知的类中实现接口。`LifecycleObserver`\n\n- 使用活动或片段中的生命周期对象初始化生命周期观察者类。\n\n- 在生命周期观察者类中，注释生命周期感知方法，并注明它们感兴趣的生命周期状态更改。\n\n  例如，注释指示该方法正在监视生命周期事件。`@OnLifecycleEvent(Lifecycle.Event.ON_START)``onStart`\n\n#### **进程关闭和保存活动状态**\n\n- Android 可调节在后台运行的应用，以便前台应用可以毫无问题地运行。此法规包括限制后台应用可以执行的处理量，有时甚至会关闭整个应用过程。\n- 用户无法判断系统是否在后台关闭了应用。应用仍显示在\"最近\"屏幕中，并且应以用户离开时的状态重新启动。\n- Android 调试桥 （） 是一个命令行工具，允许您向连接到计算机的模拟器和设备发送指令。您可以使用 模拟应用中的进程关闭。`adb``adb`\n- 当 Android 关闭应用进程时，不会调用生命周期方法。应用程序刚刚停止。`onDestroy()`\n\n#### **保留活动和片段状态**\n\n- 当你的应用进入后台时，在调用后，应用数据将保存到捆绑包中。某些应用数据（如 的内容）会自动保存。`onStop()``EditText`\n- 捆绑包是 的实例，它是键和值的集合。键始终为字符串。`Bundle`\n- 使用回调将其他数据保存到要保留的捆绑包，即使应用已自动关闭。若要将数据放入捆绑包中，请使用 以 开始的捆绑方法，例如 。`onSaveInstanceState()``put``putInt()`\n- 可以从方法中的捆绑包中恢复数据，或者更常见地在 中获取数据。该方法具有保存捆绑包的参数。`onRestoreInstanceState()``onCreate()``onCreate()``savedInstanceState`\n- 如果变量包含 ，则活动在没有状态包的情况下启动，并且没有要检索的状态数据。`savedInstanceState``null`\n- 若要使用键从捆绑包中检索数据，请使用 以 开始的方法，如 。`Bundle``get``getInt()`\n\n#### **配置更改**\n\n- *当设备*的状态发生如此急剧的变化，系统解决更改的最简单方法是关闭和重建活动时，就会发生配置更改。\n- 配置更改的最常见示例是当用户将设备从纵向旋转到横向模式或从横向模式旋转到纵向模式时。当设备语言更改或插入硬件键盘时，也可能发生配置更改。\n- 当发生配置更改时，Android 会调用所有活动生命周期的关闭回调。然后 Android 从头开始重新启动活动，运行所有生命周期启动回调。\n- 当 Android 由于配置更改而关闭应用时，它将使用 可用的状态捆绑包重新启动活动。`onCreate()`\n- 与进程关闭一样，将应用的状态保存到 中的捆绑包。`onSaveInstanceState()`\n\n## 第 5 课：体系结构组件\n\n## 第 6 课：房间数据库和密码\n\n## 第 7 课：回收器视图\n\n## 第8课：连接到互联网\n\n## 第 9 课：存储库\n\n## 第 10 课：为每个人设计","source":"_posts/随心记/Android学习/基础学习.md","raw":"---\ntitle: 基础学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Android学习\ntags: # 标签=目标文件夹\n - 基础学习 \n---\n安卓科特林基础知识包括以下课程：\n\n## 第 1 课：构建第一个应用\n\n- 官方Android开发者文档[developer.android.com。](http://developer.android.com/index.html)\n- *材料设计*是一种概念设计理念，它概述了应用在移动设备上的外观和功能。材料设计不仅仅适用于 Android 应用程序。材料设计指南[material.io。](https://material.io/)\n- Android Studio 为常见和推荐的应用程序和活动设计提供模板。这些模板为常见用例提供工作代码。\n- 创建项目时，可以为第一个活动选择模板。\n- 在开发应用时，可以从内置模板创建活动和其他应用组件。\n- [Google 示例](https://github.com/googlesamples)包含您可以学习、复制和合并到项目中的代码示例。\n\n### **活动**\n\n- `MainActivity`是 的子类，而子类又是 。是负责绘制 Android 应用 UI 和接收输入事件的核心 Android 类。`AppCompatActivity``Activity``Activity`\n- 所有活动都有一个关联的布局文件，该文件是应用资源中的 XML 文件。布局文件为活动命名，例如 。`activity_main.xml`\n- 中的 方法将布局与活动关联，并在创建活动时膨胀该布局。`setContentView()``MainActivity`\n- 布局膨胀是将 XML 布局文件中定义的视图转换为（或\"膨胀\"成）Kotlin 在内存中的视图的过程。一旦布局膨胀发生，可以绘制这些对象到屏幕上，并动态修改它们。`Activity`\n\n### **视图**\n\n- 应用布局中的所有 UI 元素都是 View 类的子[`类`](http://developer.android.com/reference/android/view/View.html)，称为*视图*。 和意见的例子。`TextView``Button`\n- `View`元素可以分组在视图[`组中`](https://developer.android.com/reference/android/view/ViewGroup.html)。视图组充当视图或其他视图组的容器。 是线性排列其视图的视图组的示例。`LinearLayout`\n\n### **查看属性**\n\n- 和 属性指示视图的宽度和高度。该值将视图拉伸到其父视图的宽度或高度。该值将缩小视图以适合视图的内容。`android:layout_width``android:layout_height``match_parent``wrap_content`\n- 属性指示视图应显示的文本（如果该视图显示文本）。对于按钮，是按钮标签。`android:text``android:text`\n- 视图组中的属性排列它包含的视图元素。从左到右排列视图的值。从上到下排列视图的值。`android:orientation``LinearLayout``horizontal``vertical`\n- 属性确定视图的位置以及该视图的所有子元素。`android:layout_gravity`\n- 该属性定义文本视图中文本的大小。文本大小以 sp 单位（可伸*缩像素）指定*。通过使用 sp 单位，您可以独立于设备的显示质量调整文本的大小。`android:textSize`\n\n### **字符串**\n\n- 在布局中硬编码字符串，最好使用字符串资源。\n- 文件中包含字符串资源。`values/res/string.xml`\n- 要提取字符串，请使用 （在 Mac 上）。选择**从弹出式菜单**中提取字符串资源。`Alt+Enter``Option+Enter`\n\n### **使用视图**\n\n- 若要将 Kotlin 代码连接到布局中定义的视图，需要在视图膨胀后获取对视图对象的引用。将 ID （） 分配给布局中的视图，然后使用[`findViewById（）`](https://developer.android.com/reference/android/view/View#findViewById(int))方法获取关联的视图对象。`android:id`\n- 当您在 XML 布局文件中为视图创建 ID 时，Android Studio 会在生成的类中使用该 ID 的名称创建整数常量。然后可以在 方法中使用该引用。`R``R.id``findViewById()`\n- 您可以直接按属性名称在 Kotlin 代码中设置视图对象的属性。例如，文本视图中的文本由 XML 中的属性定义，并且由 Kotlin 中的属性定义。`android:text``text`\n- *单击处理程序*是当用户单击或点击 UI 元素时调用的方法。若要将单击处理程序方法附加到视图（如按钮），请使用 方法。`setOnClickListener()`\n\n### **使用烤面包**\n\nToast 是一种视图，在一个小的弹出窗口中向用户显示一条简单的消息。\n\n若要创建 Toast，请使用[`三个参数在`](https://developer.android.com/reference/android/widget/Toast.html#makeText(android.content.Context, int, int))Toast 类上调用[`makeText（）`](https://developer.android.com/reference/android/widget/Toast.html)工厂方法：\n\n- [应用](https://developer.android.com/reference/android/content/Context.html)的上下文`Activity`\n- 要显示的消息，例如字符串资源\n- 持续时间，例如[`Toast.LENGTH_SHORT`](https://developer.android.com/reference/android/widget/Toast.html#LENGTH_SHORT)\n\n要显示 Toast，请调用 。`show()`\n\n## 第 2 课：布局\n\nAndroid 开发人员文档：\n\n- [布局](https://developer.android.com/guide/topics/ui/declaring-layout)\n- [`ViewGroup`](https://developer.android.com/reference/android/view/ViewGroup)\n- [`View`](https://developer.android.com/reference/android/view/View)\n- [线性布局](https://developer.android.com/guide/topics/ui/layout/linear)\n- [`ScrollView`](https://developer.android.com/reference/android/widget/ScrollView)\n- [支持不同的像素密度](https://developer.android.com/training/multiscreen/screendensities)（dp）\n- [使用布局编辑器构建 UI](https://developer.android.com/studio/write/layout-editor.html)\n- [安卓工作室文档](http://developer.android.com/tools/studio/index.html)\n- [样式和主题](https://developer.android.com/guide/topics/ui/look-and-feel/themes)\n\n### 1. 输入框及事件监听\n\n- Android[工作室中的](https://developer.android.com/studio/write/layout-editor)布局编辑器工具是一个可视化设计编辑器。您可以使用布局编辑器通过将 UI 元素拖动到布局中来构建应用的布局。\n- [`EditText`](https://developer.android.com/reference/android/widget/EditText)是允许用户输入和修改文本的 UI 元素。\n- [`按钮`](https://developer.android.com/reference/android/widget/Button)是用户可以点击执行操作的 UI 元素。按钮可以由文本、图标或文本和图标组成。\n\n单击侦听器\n\n- 您可以通过向点击侦听器添加单击侦听器来对被点击做出任何响应。`View`\n- 定义单击侦听器的函数接收被单击的 。`View`\n\n可以通过两种方式之一将单击侦听器函数附加到 ：`View`\n\n- 在 XML 布局中，将[`android：onClick`](https://developer.android.com/reference/android/R.attr.html#onClick)属性添加到*`View`*元素。`<``>`\n- 以编程方式，在相应的 中使用[`setOnClickListener（View.OnClickListener）`](https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener))函数。`Activity`\n\n### 2. 使用布局编辑器约束布局 ConstraintLayout\n\n官方教程：https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3\n\n### 3. 数据绑定基础知识\n\n### Android studio 4.0实现了自动绑定 id 可以直接使用id\n\n```\napply plugin: 'kotlin-android-extensions'\n```\n\n使用数据绑定替换对 的调用的步骤：`findViewById()`\n\n1. 在文件的 Android 部分启用数据绑定：`build.gradle`\n   `dataBinding { enabled = true }`\n\n2. 用作 XML 布局中的根视图。`<layout>`\n\n3. 定义绑定变量：\n   `private lateinit var binding: ActivityMainBinding`\n\n4. 在 中创建绑定对象，替换 ：`MainActivity``setContentView`\n   `binding = DataBindingUtil.setContentView(this, R.layout.activity_main)`\n\n5. 将 的调用替换为对绑定对象中视图的引用。例如：\n   =\n\n   （在示例中，视图的名称从 XML 中的视图生成骆驼大小写。`findViewById()``findViewById<Button>(R.id.done_button)``binding.doneButton``id`\n\n将视图绑定到数据的步骤：\n\n1. 为数据创建数据类。\n2. 在标记内添加块。`<data>``<layout>`\n3. 定义 具有名称的类型，以及作为数据类的类型。`<variable>`\n\n```\n<data>\n   <variable\n       name=\"myName\"\n       type=\"com.example.android.aboutme.MyName\" />\n</data>\n```\n\n1. 在 中，使用数据类的实例创建一个变量。例如：`MainActivity`\n   `private val myName: MyName = MyName(\"Aleks Haecky\")`\n\n1. 在绑定对象中，将变量设置为刚刚创建的变量：\n   `binding.myName = myName`\n\n1. 在 XML 中，将视图的内容设置为在块中定义的变量。使用点符号访问数据类内的数据。`<data>`\n   `android:text=\"@={myName.name}\"`\n\n## 第 3 课：导航\n\n### 1. 创建片段(Fragment)\n\n![img](https://developer.android.com/images/fragment_lifecycle.png)fragment生命周期\n\n\n\n### 2. 定义导航路径\n\n\n\n### 3. 启动外部活动\n\n## 第 4 课：活动和片段生命周期\n\n### 4.1生命周期和日志记录\n\n![image-20200721131037492](images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131037492.png)\n\n\n\n![image-20200721130945421](images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131000138.png)\n\nAS快捷键ctrl+o（选择方法，重写）\n\n| 生命周期函数 | 说明                                                         | 注意                                                         |\n| ------------ | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| onCreate()   | 活动执行任何一次初始化                                       | 该方法是重写，因此在它里面，必须立即调用 。其他生命周期方法也是如此。`onCreate()``super.onCreate()` |\n| onStart（）  | 生命周期方法在 刚刚调用。运行后，您的活动在屏幕上可见。与 不同，在活动的生命周期中，可以多次调用（仅调用一次以初始化活动） | 注意，它与相应的生命周期方法配对。如果用户启动应用，然后返回到设备主屏幕，则活动将停止，并且不再在屏幕上可见。`onStart()``onStop()` |\n| onResume()   | 为活动提供焦点，并准备好让用户与其进行交互。                 |                                                              |\n| onPause()    | 应用不再在屏幕上可见                                         |                                                              |\n| onRestart()  | 活动返回到前台                                               |                                                              |\n| onStop()     | 停止活动                                                     |                                                              |\n| onDestroy()  | 应用销毁                                                     |                                                              |\n\n#### 片段的整个启动生命周期，包括这些回调：\n\n- `onAttach()`：当片段与其所有者活动关联时调用。\n- `onCreate()`：与活动类似，对于片段，调用执行初始片段创建（布局除外）。`onCreate()``onCreate()`\n- `onCreateView()`：调用以膨胀片段的布局。\n- `onActivityCreated()`：当所有者活动完成时调用。在调用此方法之前，您的片段将无法访问该活动。`onCreate()`\n- `onStart()`：当片段变为可见时调用;与活动的平行。`onStart()`\n- `onResume()`：当片段获得用户焦点时调用;与活动的平行。`onResume()`\n\n#### [`Log 类`](https://developer.android.com/reference/kotlin/android/util/Log)将消息写入日志猫。\n\n此命令有三个部分：\n\n- *日志消息*的严重性，即消息的重要程度。在这种情况下[`，Log.i（） 方法`](https://developer.android.com/reference/kotlin/android/util/Log#i(kotlin.String, kotlin.String))写入信息消息。类中的其他方法包括[`用于错误的 Log.e（）`](https://developer.android.com/reference/kotlin/android/util/Log#e(kotlin.String, kotlin.String))或用于[`警告的 Log.w（）。` ](https://developer.android.com/reference/kotlin/android/util/Log#w(kotlin.String, kotlin.String))`Log`\n- 日志*标记*，在这种情况下。标记是一个字符串，可让您更轻松地在 Logcat 中查找日志消息。标记通常是类的名称。`\"MainActivity\"`\n- 实际日志*消息，*一个短字符串，在这种情况下是 。`\"onCreate called\"`\n\n1. 编译并运行甜品点击器应用程序。点击甜点时，不会看到应用程序中的任何行为差异。在 Android 工作室中， 在屏幕底部， 单击**Logcat**选项卡\n\n   ![img](https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/ff9c50376701877f.png)\n\n   。日志猫是记录消息的控制台。此处将显示来自 Android 的有关应用的消息，包括您用方法或其他类方法显式发送到日志的消息。`Log.i()``Log`\n\n2. 在**\"日志猫**\"窗格中，键入搜索字段。\n\n   ![img](https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/f5c091e2b480edf8.png)Logcat\n   可以包含许多消息，其中大多数对您没有用。\n\n   您可以通过多种方式筛选 Logcat 条目，但搜索是最容易的。由于您将用作代码中的日志标记，因此可以使用该标记筛选日志。在开始添加意味着这是一个信息性消息，由 创建。\n   日志消息包括日期和时间、包 （）、日志标记（在开始时使用）和实际\n   消息。由于此消息出现在日志中，因此您知道已执行。`I/MainActivity``MainActivity``I/``Log.i()``com.example.android.dessertclicker``I/``onCreate()`\n\n   #### 使用第三方库，显示时间日志\n\n   ```groovy\n   implementation 'com.jakewharton.timber:timber:4.7.1'\n   ```\n\n   简介：Timber`使用 类，因为整个应用将使用此日志记录库，并且在设置其他所有内容之前，需要先初始化一次库。在这种情况下，您可以对类进行子类，并使用您自己的自定义实现重写默认值。`Application``Application\n\n   ##### 在全局类里初始化\n\n   ```kotlin\n   Timber.plant(Timber.DebugTree())\n   ```\n\n   ##### 使用\n\n   ```kotlin\n   Timber.i(\"onCreate called\")\n   ```\n\n   \n\n### 4.2复杂的生命周期情况\n\n#### **生命周期提示**\n\n- 如果在生命周期回调中设置或启动某项内容，请停止或删除相应回调中的东西。通过停止它，你确保它不会继续运行时，它不再需要。例如，如果在 中设置计时器，则需要在 中暂停或停止计时器。`onStart()``onStop()`\n- 仅用于初始化应用首次启动时运行一次的应用部分。用于启动应用在应用启动时和每次应用返回前台时运行的应用部分。`onCreate()``onStart()`\n\n#### **生命周期库**\n\n- 使用 Android 生命周期库将生命周期控制从活动或片段转移到需要生命周期感知的实际组件。\n- 生命周期*所有者*是具有（因此具有\"拥有\"）生命周期（包括 和 ）的组件。生命周期所有者实现接口。`Activity``Fragment``LifecycleOwner`\n- 生命周期*观察者*会关注当前生命周期状态，并在生命周期更改时执行任务。生命周期观察者实现接口。`LifecycleObserver`\n- `Lifecycle`对象包含实际的生命周期状态，并在生命周期更改时触发事件。\n\n要创建生命周期感知类，请：\n\n- 在需要生命周期感知的类中实现接口。`LifecycleObserver`\n\n- 使用活动或片段中的生命周期对象初始化生命周期观察者类。\n\n- 在生命周期观察者类中，注释生命周期感知方法，并注明它们感兴趣的生命周期状态更改。\n\n  例如，注释指示该方法正在监视生命周期事件。`@OnLifecycleEvent(Lifecycle.Event.ON_START)``onStart`\n\n#### **进程关闭和保存活动状态**\n\n- Android 可调节在后台运行的应用，以便前台应用可以毫无问题地运行。此法规包括限制后台应用可以执行的处理量，有时甚至会关闭整个应用过程。\n- 用户无法判断系统是否在后台关闭了应用。应用仍显示在\"最近\"屏幕中，并且应以用户离开时的状态重新启动。\n- Android 调试桥 （） 是一个命令行工具，允许您向连接到计算机的模拟器和设备发送指令。您可以使用 模拟应用中的进程关闭。`adb``adb`\n- 当 Android 关闭应用进程时，不会调用生命周期方法。应用程序刚刚停止。`onDestroy()`\n\n#### **保留活动和片段状态**\n\n- 当你的应用进入后台时，在调用后，应用数据将保存到捆绑包中。某些应用数据（如 的内容）会自动保存。`onStop()``EditText`\n- 捆绑包是 的实例，它是键和值的集合。键始终为字符串。`Bundle`\n- 使用回调将其他数据保存到要保留的捆绑包，即使应用已自动关闭。若要将数据放入捆绑包中，请使用 以 开始的捆绑方法，例如 。`onSaveInstanceState()``put``putInt()`\n- 可以从方法中的捆绑包中恢复数据，或者更常见地在 中获取数据。该方法具有保存捆绑包的参数。`onRestoreInstanceState()``onCreate()``onCreate()``savedInstanceState`\n- 如果变量包含 ，则活动在没有状态包的情况下启动，并且没有要检索的状态数据。`savedInstanceState``null`\n- 若要使用键从捆绑包中检索数据，请使用 以 开始的方法，如 。`Bundle``get``getInt()`\n\n#### **配置更改**\n\n- *当设备*的状态发生如此急剧的变化，系统解决更改的最简单方法是关闭和重建活动时，就会发生配置更改。\n- 配置更改的最常见示例是当用户将设备从纵向旋转到横向模式或从横向模式旋转到纵向模式时。当设备语言更改或插入硬件键盘时，也可能发生配置更改。\n- 当发生配置更改时，Android 会调用所有活动生命周期的关闭回调。然后 Android 从头开始重新启动活动，运行所有生命周期启动回调。\n- 当 Android 由于配置更改而关闭应用时，它将使用 可用的状态捆绑包重新启动活动。`onCreate()`\n- 与进程关闭一样，将应用的状态保存到 中的捆绑包。`onSaveInstanceState()`\n\n## 第 5 课：体系结构组件\n\n## 第 6 课：房间数据库和密码\n\n## 第 7 课：回收器视图\n\n## 第8课：连接到互联网\n\n## 第 9 课：存储库\n\n## 第 10 课：为每个人设计","slug":"随心记/Android学习/基础学习","published":1,"date":"2020-08-02T23:42:42.120Z","updated":"2020-08-02T23:42:59.743Z","_id":"ckdcza4l3003drkam9rcj62k8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>安卓科特林基础知识包括以下课程：</p>\n<h2 id=\"第-1-课：构建第一个应用\"><a href=\"#第-1-课：构建第一个应用\" class=\"headerlink\" title=\"第 1 课：构建第一个应用\"></a>第 1 课：构建第一个应用</h2><ul>\n<li>官方Android开发者文档<a href=\"http://developer.android.com/index.html\">developer.android.com。</a></li>\n<li><em>材料设计</em>是一种概念设计理念，它概述了应用在移动设备上的外观和功能。材料设计不仅仅适用于 Android 应用程序。材料设计指南<a href=\"https://material.io/\">material.io。</a></li>\n<li>Android Studio 为常见和推荐的应用程序和活动设计提供模板。这些模板为常见用例提供工作代码。</li>\n<li>创建项目时，可以为第一个活动选择模板。</li>\n<li>在开发应用时，可以从内置模板创建活动和其他应用组件。</li>\n<li><a href=\"https://github.com/googlesamples\">Google 示例</a>包含您可以学习、复制和合并到项目中的代码示例。</li>\n</ul>\n<h3 id=\"活动\"><a href=\"#活动\" class=\"headerlink\" title=\"活动\"></a><strong>活动</strong></h3><ul>\n<li><code>MainActivity</code>是 的子类，而子类又是 。是负责绘制 Android 应用 UI 和接收输入事件的核心 Android 类。<code>AppCompatActivity``Activity``Activity</code></li>\n<li>所有活动都有一个关联的布局文件，该文件是应用资源中的 XML 文件。布局文件为活动命名，例如 。<code>activity_main.xml</code></li>\n<li>中的 方法将布局与活动关联，并在创建活动时膨胀该布局。<code>setContentView()``MainActivity</code></li>\n<li>布局膨胀是将 XML 布局文件中定义的视图转换为（或”膨胀”成）Kotlin 在内存中的视图的过程。一旦布局膨胀发生，可以绘制这些对象到屏幕上，并动态修改它们。<code>Activity</code></li>\n</ul>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a><strong>视图</strong></h3><ul>\n<li>应用布局中的所有 UI 元素都是 View 类的子<a href=\"http://developer.android.com/reference/android/view/View.html\"><code>类</code></a>，称为<em>视图</em>。 和意见的例子。<code>TextView``Button</code></li>\n<li><code>View</code>元素可以分组在视图<a href=\"https://developer.android.com/reference/android/view/ViewGroup.html\"><code>组中</code></a>。视图组充当视图或其他视图组的容器。 是线性排列其视图的视图组的示例。<code>LinearLayout</code></li>\n</ul>\n<h3 id=\"查看属性\"><a href=\"#查看属性\" class=\"headerlink\" title=\"查看属性\"></a><strong>查看属性</strong></h3><ul>\n<li>和 属性指示视图的宽度和高度。该值将视图拉伸到其父视图的宽度或高度。该值将缩小视图以适合视图的内容。<code>android:layout_width``android:layout_height``match_parent``wrap_content</code></li>\n<li>属性指示视图应显示的文本（如果该视图显示文本）。对于按钮，是按钮标签。<code>android:text``android:text</code></li>\n<li>视图组中的属性排列它包含的视图元素。从左到右排列视图的值。从上到下排列视图的值。<code>android:orientation``LinearLayout``horizontal``vertical</code></li>\n<li>属性确定视图的位置以及该视图的所有子元素。<code>android:layout_gravity</code></li>\n<li>该属性定义文本视图中文本的大小。文本大小以 sp 单位（可伸<em>缩像素）指定</em>。通过使用 sp 单位，您可以独立于设备的显示质量调整文本的大小。<code>android:textSize</code></li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h3><ul>\n<li>在布局中硬编码字符串，最好使用字符串资源。</li>\n<li>文件中包含字符串资源。<code>values/res/string.xml</code></li>\n<li>要提取字符串，请使用 （在 Mac 上）。选择<strong>从弹出式菜单</strong>中提取字符串资源。<code>Alt+Enter``Option+Enter</code></li>\n</ul>\n<h3 id=\"使用视图\"><a href=\"#使用视图\" class=\"headerlink\" title=\"使用视图\"></a><strong>使用视图</strong></h3><ul>\n<li>若要将 Kotlin 代码连接到布局中定义的视图，需要在视图膨胀后获取对视图对象的引用。将 ID （） 分配给布局中的视图，然后使用<a href=\"https://developer.android.com/reference/android/view/View#findViewById(int)\"><code>findViewById（）</code></a>方法获取关联的视图对象。<code>android:id</code></li>\n<li>当您在 XML 布局文件中为视图创建 ID 时，Android Studio 会在生成的类中使用该 ID 的名称创建整数常量。然后可以在 方法中使用该引用。<code>R``R.id``findViewById()</code></li>\n<li>您可以直接按属性名称在 Kotlin 代码中设置视图对象的属性。例如，文本视图中的文本由 XML 中的属性定义，并且由 Kotlin 中的属性定义。<code>android:text``text</code></li>\n<li><em>单击处理程序</em>是当用户单击或点击 UI 元素时调用的方法。若要将单击处理程序方法附加到视图（如按钮），请使用 方法。<code>setOnClickListener()</code></li>\n</ul>\n<h3 id=\"使用烤面包\"><a href=\"#使用烤面包\" class=\"headerlink\" title=\"使用烤面包\"></a><strong>使用烤面包</strong></h3><p>Toast 是一种视图，在一个小的弹出窗口中向用户显示一条简单的消息。</p>\n<p>若要创建 Toast，请使用[<code>三个参数在</code>](<a href=\"https://developer.android.com/reference/android/widget/Toast.html#makeText\">https://developer.android.com/reference/android/widget/Toast.html#makeText</a>(android.content.Context, int, int))Toast 类上调用<a href=\"https://developer.android.com/reference/android/widget/Toast.html\"><code>makeText（）</code></a>工厂方法：</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/content/Context.html\">应用</a>的上下文<code>Activity</code></li>\n<li>要显示的消息，例如字符串资源</li>\n<li>持续时间，例如<a href=\"https://developer.android.com/reference/android/widget/Toast.html#LENGTH_SHORT\"><code>Toast.LENGTH_SHORT</code></a></li>\n</ul>\n<p>要显示 Toast，请调用 。<code>show()</code></p>\n<h2 id=\"第-2-课：布局\"><a href=\"#第-2-课：布局\" class=\"headerlink\" title=\"第 2 课：布局\"></a>第 2 课：布局</h2><p>Android 开发人员文档：</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/ui/declaring-layout\">布局</a></li>\n<li><a href=\"https://developer.android.com/reference/android/view/ViewGroup\"><code>ViewGroup</code></a></li>\n<li><a href=\"https://developer.android.com/reference/android/view/View\"><code>View</code></a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/layout/linear\">线性布局</a></li>\n<li><a href=\"https://developer.android.com/reference/android/widget/ScrollView\"><code>ScrollView</code></a></li>\n<li><a href=\"https://developer.android.com/training/multiscreen/screendensities\">支持不同的像素密度</a>（dp）</li>\n<li><a href=\"https://developer.android.com/studio/write/layout-editor.html\">使用布局编辑器构建 UI</a></li>\n<li><a href=\"http://developer.android.com/tools/studio/index.html\">安卓工作室文档</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/look-and-feel/themes\">样式和主题</a></li>\n</ul>\n<h3 id=\"1-输入框及事件监听\"><a href=\"#1-输入框及事件监听\" class=\"headerlink\" title=\"1. 输入框及事件监听\"></a>1. 输入框及事件监听</h3><ul>\n<li>Android<a href=\"https://developer.android.com/studio/write/layout-editor\">工作室中的</a>布局编辑器工具是一个可视化设计编辑器。您可以使用布局编辑器通过将 UI 元素拖动到布局中来构建应用的布局。</li>\n<li><a href=\"https://developer.android.com/reference/android/widget/EditText\"><code>EditText</code></a>是允许用户输入和修改文本的 UI 元素。</li>\n<li><a href=\"https://developer.android.com/reference/android/widget/Button\"><code>按钮</code></a>是用户可以点击执行操作的 UI 元素。按钮可以由文本、图标或文本和图标组成。</li>\n</ul>\n<p>单击侦听器</p>\n<ul>\n<li>您可以通过向点击侦听器添加单击侦听器来对被点击做出任何响应。<code>View</code></li>\n<li>定义单击侦听器的函数接收被单击的 。<code>View</code></li>\n</ul>\n<p>可以通过两种方式之一将单击侦听器函数附加到 ：<code>View</code></p>\n<ul>\n<li>在 XML 布局中，将<a href=\"https://developer.android.com/reference/android/R.attr.html#onClick\"><code>android：onClick</code></a>属性添加到*<code>View</code>*元素。<code>&lt;``&gt;</code></li>\n<li>以编程方式，在相应的 中使用<a href=\"https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener)\"><code>setOnClickListener（View.OnClickListener）</code></a>函数。<code>Activity</code></li>\n</ul>\n<h3 id=\"2-使用布局编辑器约束布局-ConstraintLayout\"><a href=\"#2-使用布局编辑器约束布局-ConstraintLayout\" class=\"headerlink\" title=\"2. 使用布局编辑器约束布局 ConstraintLayout\"></a>2. 使用布局编辑器约束布局 ConstraintLayout</h3><p>官方教程：<a href=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3\">https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3</a></p>\n<h3 id=\"3-数据绑定基础知识\"><a href=\"#3-数据绑定基础知识\" class=\"headerlink\" title=\"3. 数据绑定基础知识\"></a>3. 数据绑定基础知识</h3><h3 id=\"Android-studio-4-0实现了自动绑定-id-可以直接使用id\"><a href=\"#Android-studio-4-0实现了自动绑定-id-可以直接使用id\" class=\"headerlink\" title=\"Android studio 4.0实现了自动绑定 id 可以直接使用id\"></a>Android studio 4.0实现了自动绑定 id 可以直接使用id</h3><pre><code>apply plugin: 'kotlin-android-extensions'</code></pre>\n<p>使用数据绑定替换对 的调用的步骤：<code>findViewById()</code></p>\n<ol>\n<li><p>在文件的 Android 部分启用数据绑定：<code>build.gradle</code><br><code>dataBinding { enabled = true }</code></p>\n</li>\n<li><p>用作 XML 布局中的根视图。<code>&lt;layout&gt;</code></p>\n</li>\n<li><p>定义绑定变量：<br><code>private lateinit var binding: ActivityMainBinding</code></p>\n</li>\n<li><p>在 中创建绑定对象，替换 ：<code>MainActivity``setContentView</code><br><code>binding = DataBindingUtil.setContentView(this, R.layout.activity_main)</code></p>\n</li>\n<li><h1 id=\"将-的调用替换为对绑定对象中视图的引用。例如：\"><a href=\"#将-的调用替换为对绑定对象中视图的引用。例如：\" class=\"headerlink\" title=\"将 的调用替换为对绑定对象中视图的引用。例如：\"></a>将 的调用替换为对绑定对象中视图的引用。例如：</h1><p>（在示例中，视图的名称从 XML 中的视图生成骆驼大小写。<code>findViewById()``findViewById&lt;Button&gt;(R.id.done_button)``binding.doneButton``id</code></p>\n</li>\n</ol>\n<p>将视图绑定到数据的步骤：</p>\n<ol>\n<li>为数据创建数据类。</li>\n<li>在标记内添加块。<code>&lt;data&gt;``&lt;layout&gt;</code></li>\n<li>定义 具有名称的类型，以及作为数据类的类型。<code>&lt;variable&gt;</code></li>\n</ol>\n<pre><code>&lt;data&gt;\n   &lt;variable\n       name=\"myName\"\n       type=\"com.example.android.aboutme.MyName\" /&gt;\n&lt;/data&gt;</code></pre>\n<ol>\n<li><p>在 中，使用数据类的实例创建一个变量。例如：<code>MainActivity</code><br><code>private val myName: MyName = MyName(\"Aleks Haecky\")</code></p>\n</li>\n<li><p>在绑定对象中，将变量设置为刚刚创建的变量：<br><code>binding.myName = myName</code></p>\n</li>\n<li><p>在 XML 中，将视图的内容设置为在块中定义的变量。使用点符号访问数据类内的数据。<code>&lt;data&gt;</code><br><code>android:text=\"@={myName.name}\"</code></p>\n</li>\n</ol>\n<h2 id=\"第-3-课：导航\"><a href=\"#第-3-课：导航\" class=\"headerlink\" title=\"第 3 课：导航\"></a>第 3 课：导航</h2><h3 id=\"1-创建片段-Fragment\"><a href=\"#1-创建片段-Fragment\" class=\"headerlink\" title=\"1. 创建片段(Fragment)\"></a>1. 创建片段(Fragment)</h3><p><img src=\"https://developer.android.com/images/fragment_lifecycle.png\" alt=\"img\">fragment生命周期</p>\n<h3 id=\"2-定义导航路径\"><a href=\"#2-定义导航路径\" class=\"headerlink\" title=\"2. 定义导航路径\"></a>2. 定义导航路径</h3><h3 id=\"3-启动外部活动\"><a href=\"#3-启动外部活动\" class=\"headerlink\" title=\"3. 启动外部活动\"></a>3. 启动外部活动</h3><h2 id=\"第-4-课：活动和片段生命周期\"><a href=\"#第-4-课：活动和片段生命周期\" class=\"headerlink\" title=\"第 4 课：活动和片段生命周期\"></a>第 4 课：活动和片段生命周期</h2><h3 id=\"4-1生命周期和日志记录\"><a href=\"#4-1生命周期和日志记录\" class=\"headerlink\" title=\"4.1生命周期和日志记录\"></a>4.1生命周期和日志记录</h3><p><img src=\"images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131037492.png\" alt=\"image-20200721131037492\"></p>\n<p><img src=\"images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131000138.png\" alt=\"image-20200721130945421\"></p>\n<p>AS快捷键ctrl+o（选择方法，重写）</p>\n<table>\n<thead>\n<tr>\n<th>生命周期函数</th>\n<th>说明</th>\n<th>注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onCreate()</td>\n<td>活动执行任何一次初始化</td>\n<td>该方法是重写，因此在它里面，必须立即调用 。其他生命周期方法也是如此。<code>onCreate()``super.onCreate()</code></td>\n</tr>\n<tr>\n<td>onStart（）</td>\n<td>生命周期方法在 刚刚调用。运行后，您的活动在屏幕上可见。与 不同，在活动的生命周期中，可以多次调用（仅调用一次以初始化活动）</td>\n<td>注意，它与相应的生命周期方法配对。如果用户启动应用，然后返回到设备主屏幕，则活动将停止，并且不再在屏幕上可见。<code>onStart()``onStop()</code></td>\n</tr>\n<tr>\n<td>onResume()</td>\n<td>为活动提供焦点，并准备好让用户与其进行交互。</td>\n<td></td>\n</tr>\n<tr>\n<td>onPause()</td>\n<td>应用不再在屏幕上可见</td>\n<td></td>\n</tr>\n<tr>\n<td>onRestart()</td>\n<td>活动返回到前台</td>\n<td></td>\n</tr>\n<tr>\n<td>onStop()</td>\n<td>停止活动</td>\n<td></td>\n</tr>\n<tr>\n<td>onDestroy()</td>\n<td>应用销毁</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"片段的整个启动生命周期，包括这些回调：\"><a href=\"#片段的整个启动生命周期，包括这些回调：\" class=\"headerlink\" title=\"片段的整个启动生命周期，包括这些回调：\"></a>片段的整个启动生命周期，包括这些回调：</h4><ul>\n<li><code>onAttach()</code>：当片段与其所有者活动关联时调用。</li>\n<li><code>onCreate()</code>：与活动类似，对于片段，调用执行初始片段创建（布局除外）。<code>onCreate()``onCreate()</code></li>\n<li><code>onCreateView()</code>：调用以膨胀片段的布局。</li>\n<li><code>onActivityCreated()</code>：当所有者活动完成时调用。在调用此方法之前，您的片段将无法访问该活动。<code>onCreate()</code></li>\n<li><code>onStart()</code>：当片段变为可见时调用;与活动的平行。<code>onStart()</code></li>\n<li><code>onResume()</code>：当片段获得用户焦点时调用;与活动的平行。<code>onResume()</code></li>\n</ul>\n<h4 id=\"Log-类将消息写入日志猫。\"><a href=\"#Log-类将消息写入日志猫。\" class=\"headerlink\" title=\"Log 类将消息写入日志猫。\"></a><a href=\"https://developer.android.com/reference/kotlin/android/util/Log\"><code>Log 类</code></a>将消息写入日志猫。</h4><p>此命令有三个部分：</p>\n<ul>\n<li><em>日志消息</em>的严重性，即消息的重要程度。在这种情况下[<code>，Log.i（） 方法</code>](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#i\">https://developer.android.com/reference/kotlin/android/util/Log#i</a>(kotlin.String, kotlin.String))写入信息消息。类中的其他方法包括[<code>用于错误的 Log.e（）</code>](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#e\">https://developer.android.com/reference/kotlin/android/util/Log#e</a>(kotlin.String, kotlin.String))或用于[<code>警告的 Log.w（）。</code> ](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#w\">https://developer.android.com/reference/kotlin/android/util/Log#w</a>(kotlin.String, kotlin.String))<code>Log</code></li>\n<li>日志<em>标记</em>，在这种情况下。标记是一个字符串，可让您更轻松地在 Logcat 中查找日志消息。标记通常是类的名称。<code>\"MainActivity\"</code></li>\n<li>实际日志<em>消息，</em>一个短字符串，在这种情况下是 。<code>\"onCreate called\"</code></li>\n</ul>\n<ol>\n<li><p>编译并运行甜品点击器应用程序。点击甜点时，不会看到应用程序中的任何行为差异。在 Android 工作室中， 在屏幕底部， 单击<strong>Logcat</strong>选项卡</p>\n<p><img src=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/ff9c50376701877f.png\" alt=\"img\"></p>\n<p>。日志猫是记录消息的控制台。此处将显示来自 Android 的有关应用的消息，包括您用方法或其他类方法显式发送到日志的消息。<code>Log.i()``Log</code></p>\n</li>\n<li><p>在**”日志猫**”窗格中，键入搜索字段。</p>\n<p><img src=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/f5c091e2b480edf8.png\" alt=\"img\">Logcat<br>可以包含许多消息，其中大多数对您没有用。</p>\n<p>您可以通过多种方式筛选 Logcat 条目，但搜索是最容易的。由于您将用作代码中的日志标记，因此可以使用该标记筛选日志。在开始添加意味着这是一个信息性消息，由 创建。<br>日志消息包括日期和时间、包 （）、日志标记（在开始时使用）和实际<br>消息。由于此消息出现在日志中，因此您知道已执行。<code>I/MainActivity``MainActivity``I/``Log.i()``com.example.android.dessertclicker``I/``onCreate()</code></p>\n<h4 id=\"使用第三方库，显示时间日志\"><a href=\"#使用第三方库，显示时间日志\" class=\"headerlink\" title=\"使用第三方库，显示时间日志\"></a>使用第三方库，显示时间日志</h4><pre class=\" language-groovy\"><code class=\"language-groovy\">implementation <span class=\"token string\">'com.jakewharton.timber:timber:4.7.1'</span></code></pre>\n<p>简介：Timber<code>使用 类，因为整个应用将使用此日志记录库，并且在设置其他所有内容之前，需要先初始化一次库。在这种情况下，您可以对类进行子类，并使用您自己的自定义实现重写默认值。</code>Application``Application</p>\n<h5 id=\"在全局类里初始化\"><a href=\"#在全局类里初始化\" class=\"headerlink\" title=\"在全局类里初始化\"></a>在全局类里初始化</h5><pre class=\" language-kotlin\"><code class=\"language-kotlin\">Timber<span class=\"token punctuation\">.</span><span class=\"token function\">plant</span><span class=\"token punctuation\">(</span>Timber<span class=\"token punctuation\">.</span><span class=\"token function\">DebugTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><pre class=\" language-kotlin\"><code class=\"language-kotlin\">Timber<span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onCreate called\"</span><span class=\"token punctuation\">)</span></code></pre>\n</li>\n</ol>\n<h3 id=\"4-2复杂的生命周期情况\"><a href=\"#4-2复杂的生命周期情况\" class=\"headerlink\" title=\"4.2复杂的生命周期情况\"></a>4.2复杂的生命周期情况</h3><h4 id=\"生命周期提示\"><a href=\"#生命周期提示\" class=\"headerlink\" title=\"生命周期提示\"></a><strong>生命周期提示</strong></h4><ul>\n<li>如果在生命周期回调中设置或启动某项内容，请停止或删除相应回调中的东西。通过停止它，你确保它不会继续运行时，它不再需要。例如，如果在 中设置计时器，则需要在 中暂停或停止计时器。<code>onStart()``onStop()</code></li>\n<li>仅用于初始化应用首次启动时运行一次的应用部分。用于启动应用在应用启动时和每次应用返回前台时运行的应用部分。<code>onCreate()``onStart()</code></li>\n</ul>\n<h4 id=\"生命周期库\"><a href=\"#生命周期库\" class=\"headerlink\" title=\"生命周期库\"></a><strong>生命周期库</strong></h4><ul>\n<li>使用 Android 生命周期库将生命周期控制从活动或片段转移到需要生命周期感知的实际组件。</li>\n<li>生命周期<em>所有者</em>是具有（因此具有”拥有”）生命周期（包括 和 ）的组件。生命周期所有者实现接口。<code>Activity``Fragment``LifecycleOwner</code></li>\n<li>生命周期<em>观察者</em>会关注当前生命周期状态，并在生命周期更改时执行任务。生命周期观察者实现接口。<code>LifecycleObserver</code></li>\n<li><code>Lifecycle</code>对象包含实际的生命周期状态，并在生命周期更改时触发事件。</li>\n</ul>\n<p>要创建生命周期感知类，请：</p>\n<ul>\n<li><p>在需要生命周期感知的类中实现接口。<code>LifecycleObserver</code></p>\n</li>\n<li><p>使用活动或片段中的生命周期对象初始化生命周期观察者类。</p>\n</li>\n<li><p>在生命周期观察者类中，注释生命周期感知方法，并注明它们感兴趣的生命周期状态更改。</p>\n<p>例如，注释指示该方法正在监视生命周期事件。<code>@OnLifecycleEvent(Lifecycle.Event.ON_START)``onStart</code></p>\n</li>\n</ul>\n<h4 id=\"进程关闭和保存活动状态\"><a href=\"#进程关闭和保存活动状态\" class=\"headerlink\" title=\"进程关闭和保存活动状态\"></a><strong>进程关闭和保存活动状态</strong></h4><ul>\n<li>Android 可调节在后台运行的应用，以便前台应用可以毫无问题地运行。此法规包括限制后台应用可以执行的处理量，有时甚至会关闭整个应用过程。</li>\n<li>用户无法判断系统是否在后台关闭了应用。应用仍显示在”最近”屏幕中，并且应以用户离开时的状态重新启动。</li>\n<li>Android 调试桥 （） 是一个命令行工具，允许您向连接到计算机的模拟器和设备发送指令。您可以使用 模拟应用中的进程关闭。<code>adb``adb</code></li>\n<li>当 Android 关闭应用进程时，不会调用生命周期方法。应用程序刚刚停止。<code>onDestroy()</code></li>\n</ul>\n<h4 id=\"保留活动和片段状态\"><a href=\"#保留活动和片段状态\" class=\"headerlink\" title=\"保留活动和片段状态\"></a><strong>保留活动和片段状态</strong></h4><ul>\n<li>当你的应用进入后台时，在调用后，应用数据将保存到捆绑包中。某些应用数据（如 的内容）会自动保存。<code>onStop()``EditText</code></li>\n<li>捆绑包是 的实例，它是键和值的集合。键始终为字符串。<code>Bundle</code></li>\n<li>使用回调将其他数据保存到要保留的捆绑包，即使应用已自动关闭。若要将数据放入捆绑包中，请使用 以 开始的捆绑方法，例如 。<code>onSaveInstanceState()``put``putInt()</code></li>\n<li>可以从方法中的捆绑包中恢复数据，或者更常见地在 中获取数据。该方法具有保存捆绑包的参数。<code>onRestoreInstanceState()``onCreate()``onCreate()``savedInstanceState</code></li>\n<li>如果变量包含 ，则活动在没有状态包的情况下启动，并且没有要检索的状态数据。<code>savedInstanceState``null</code></li>\n<li>若要使用键从捆绑包中检索数据，请使用 以 开始的方法，如 。<code>Bundle``get``getInt()</code></li>\n</ul>\n<h4 id=\"配置更改\"><a href=\"#配置更改\" class=\"headerlink\" title=\"配置更改\"></a><strong>配置更改</strong></h4><ul>\n<li><em>当设备</em>的状态发生如此急剧的变化，系统解决更改的最简单方法是关闭和重建活动时，就会发生配置更改。</li>\n<li>配置更改的最常见示例是当用户将设备从纵向旋转到横向模式或从横向模式旋转到纵向模式时。当设备语言更改或插入硬件键盘时，也可能发生配置更改。</li>\n<li>当发生配置更改时，Android 会调用所有活动生命周期的关闭回调。然后 Android 从头开始重新启动活动，运行所有生命周期启动回调。</li>\n<li>当 Android 由于配置更改而关闭应用时，它将使用 可用的状态捆绑包重新启动活动。<code>onCreate()</code></li>\n<li>与进程关闭一样，将应用的状态保存到 中的捆绑包。<code>onSaveInstanceState()</code></li>\n</ul>\n<h2 id=\"第-5-课：体系结构组件\"><a href=\"#第-5-课：体系结构组件\" class=\"headerlink\" title=\"第 5 课：体系结构组件\"></a>第 5 课：体系结构组件</h2><h2 id=\"第-6-课：房间数据库和密码\"><a href=\"#第-6-课：房间数据库和密码\" class=\"headerlink\" title=\"第 6 课：房间数据库和密码\"></a>第 6 课：房间数据库和密码</h2><h2 id=\"第-7-课：回收器视图\"><a href=\"#第-7-课：回收器视图\" class=\"headerlink\" title=\"第 7 课：回收器视图\"></a>第 7 课：回收器视图</h2><h2 id=\"第8课：连接到互联网\"><a href=\"#第8课：连接到互联网\" class=\"headerlink\" title=\"第8课：连接到互联网\"></a>第8课：连接到互联网</h2><h2 id=\"第-9-课：存储库\"><a href=\"#第-9-课：存储库\" class=\"headerlink\" title=\"第 9 课：存储库\"></a>第 9 课：存储库</h2><h2 id=\"第-10-课：为每个人设计\"><a href=\"#第-10-课：为每个人设计\" class=\"headerlink\" title=\"第 10 课：为每个人设计\"></a>第 10 课：为每个人设计</h2><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>安卓科特林基础知识包括以下课程：</p>\n<h2 id=\"第-1-课：构建第一个应用\"><a href=\"#第-1-课：构建第一个应用\" class=\"headerlink\" title=\"第 1 课：构建第一个应用\"></a>第 1 课：构建第一个应用</h2><ul>\n<li>官方Android开发者文档<a href=\"http://developer.android.com/index.html\">developer.android.com。</a></li>\n<li><em>材料设计</em>是一种概念设计理念，它概述了应用在移动设备上的外观和功能。材料设计不仅仅适用于 Android 应用程序。材料设计指南<a href=\"https://material.io/\">material.io。</a></li>\n<li>Android Studio 为常见和推荐的应用程序和活动设计提供模板。这些模板为常见用例提供工作代码。</li>\n<li>创建项目时，可以为第一个活动选择模板。</li>\n<li>在开发应用时，可以从内置模板创建活动和其他应用组件。</li>\n<li><a href=\"https://github.com/googlesamples\">Google 示例</a>包含您可以学习、复制和合并到项目中的代码示例。</li>\n</ul>\n<h3 id=\"活动\"><a href=\"#活动\" class=\"headerlink\" title=\"活动\"></a><strong>活动</strong></h3><ul>\n<li><code>MainActivity</code>是 的子类，而子类又是 。是负责绘制 Android 应用 UI 和接收输入事件的核心 Android 类。<code>AppCompatActivity``Activity``Activity</code></li>\n<li>所有活动都有一个关联的布局文件，该文件是应用资源中的 XML 文件。布局文件为活动命名，例如 。<code>activity_main.xml</code></li>\n<li>中的 方法将布局与活动关联，并在创建活动时膨胀该布局。<code>setContentView()``MainActivity</code></li>\n<li>布局膨胀是将 XML 布局文件中定义的视图转换为（或”膨胀”成）Kotlin 在内存中的视图的过程。一旦布局膨胀发生，可以绘制这些对象到屏幕上，并动态修改它们。<code>Activity</code></li>\n</ul>\n<h3 id=\"视图\"><a href=\"#视图\" class=\"headerlink\" title=\"视图\"></a><strong>视图</strong></h3><ul>\n<li>应用布局中的所有 UI 元素都是 View 类的子<a href=\"http://developer.android.com/reference/android/view/View.html\"><code>类</code></a>，称为<em>视图</em>。 和意见的例子。<code>TextView``Button</code></li>\n<li><code>View</code>元素可以分组在视图<a href=\"https://developer.android.com/reference/android/view/ViewGroup.html\"><code>组中</code></a>。视图组充当视图或其他视图组的容器。 是线性排列其视图的视图组的示例。<code>LinearLayout</code></li>\n</ul>\n<h3 id=\"查看属性\"><a href=\"#查看属性\" class=\"headerlink\" title=\"查看属性\"></a><strong>查看属性</strong></h3><ul>\n<li>和 属性指示视图的宽度和高度。该值将视图拉伸到其父视图的宽度或高度。该值将缩小视图以适合视图的内容。<code>android:layout_width``android:layout_height``match_parent``wrap_content</code></li>\n<li>属性指示视图应显示的文本（如果该视图显示文本）。对于按钮，是按钮标签。<code>android:text``android:text</code></li>\n<li>视图组中的属性排列它包含的视图元素。从左到右排列视图的值。从上到下排列视图的值。<code>android:orientation``LinearLayout``horizontal``vertical</code></li>\n<li>属性确定视图的位置以及该视图的所有子元素。<code>android:layout_gravity</code></li>\n<li>该属性定义文本视图中文本的大小。文本大小以 sp 单位（可伸<em>缩像素）指定</em>。通过使用 sp 单位，您可以独立于设备的显示质量调整文本的大小。<code>android:textSize</code></li>\n</ul>\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a><strong>字符串</strong></h3><ul>\n<li>在布局中硬编码字符串，最好使用字符串资源。</li>\n<li>文件中包含字符串资源。<code>values/res/string.xml</code></li>\n<li>要提取字符串，请使用 （在 Mac 上）。选择<strong>从弹出式菜单</strong>中提取字符串资源。<code>Alt+Enter``Option+Enter</code></li>\n</ul>\n<h3 id=\"使用视图\"><a href=\"#使用视图\" class=\"headerlink\" title=\"使用视图\"></a><strong>使用视图</strong></h3><ul>\n<li>若要将 Kotlin 代码连接到布局中定义的视图，需要在视图膨胀后获取对视图对象的引用。将 ID （） 分配给布局中的视图，然后使用<a href=\"https://developer.android.com/reference/android/view/View#findViewById(int)\"><code>findViewById（）</code></a>方法获取关联的视图对象。<code>android:id</code></li>\n<li>当您在 XML 布局文件中为视图创建 ID 时，Android Studio 会在生成的类中使用该 ID 的名称创建整数常量。然后可以在 方法中使用该引用。<code>R``R.id``findViewById()</code></li>\n<li>您可以直接按属性名称在 Kotlin 代码中设置视图对象的属性。例如，文本视图中的文本由 XML 中的属性定义，并且由 Kotlin 中的属性定义。<code>android:text``text</code></li>\n<li><em>单击处理程序</em>是当用户单击或点击 UI 元素时调用的方法。若要将单击处理程序方法附加到视图（如按钮），请使用 方法。<code>setOnClickListener()</code></li>\n</ul>\n<h3 id=\"使用烤面包\"><a href=\"#使用烤面包\" class=\"headerlink\" title=\"使用烤面包\"></a><strong>使用烤面包</strong></h3><p>Toast 是一种视图，在一个小的弹出窗口中向用户显示一条简单的消息。</p>\n<p>若要创建 Toast，请使用[<code>三个参数在</code>](<a href=\"https://developer.android.com/reference/android/widget/Toast.html#makeText\">https://developer.android.com/reference/android/widget/Toast.html#makeText</a>(android.content.Context, int, int))Toast 类上调用<a href=\"https://developer.android.com/reference/android/widget/Toast.html\"><code>makeText（）</code></a>工厂方法：</p>\n<ul>\n<li><a href=\"https://developer.android.com/reference/android/content/Context.html\">应用</a>的上下文<code>Activity</code></li>\n<li>要显示的消息，例如字符串资源</li>\n<li>持续时间，例如<a href=\"https://developer.android.com/reference/android/widget/Toast.html#LENGTH_SHORT\"><code>Toast.LENGTH_SHORT</code></a></li>\n</ul>\n<p>要显示 Toast，请调用 。<code>show()</code></p>\n<h2 id=\"第-2-课：布局\"><a href=\"#第-2-课：布局\" class=\"headerlink\" title=\"第 2 课：布局\"></a>第 2 课：布局</h2><p>Android 开发人员文档：</p>\n<ul>\n<li><a href=\"https://developer.android.com/guide/topics/ui/declaring-layout\">布局</a></li>\n<li><a href=\"https://developer.android.com/reference/android/view/ViewGroup\"><code>ViewGroup</code></a></li>\n<li><a href=\"https://developer.android.com/reference/android/view/View\"><code>View</code></a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/layout/linear\">线性布局</a></li>\n<li><a href=\"https://developer.android.com/reference/android/widget/ScrollView\"><code>ScrollView</code></a></li>\n<li><a href=\"https://developer.android.com/training/multiscreen/screendensities\">支持不同的像素密度</a>（dp）</li>\n<li><a href=\"https://developer.android.com/studio/write/layout-editor.html\">使用布局编辑器构建 UI</a></li>\n<li><a href=\"http://developer.android.com/tools/studio/index.html\">安卓工作室文档</a></li>\n<li><a href=\"https://developer.android.com/guide/topics/ui/look-and-feel/themes\">样式和主题</a></li>\n</ul>\n<h3 id=\"1-输入框及事件监听\"><a href=\"#1-输入框及事件监听\" class=\"headerlink\" title=\"1. 输入框及事件监听\"></a>1. 输入框及事件监听</h3><ul>\n<li>Android<a href=\"https://developer.android.com/studio/write/layout-editor\">工作室中的</a>布局编辑器工具是一个可视化设计编辑器。您可以使用布局编辑器通过将 UI 元素拖动到布局中来构建应用的布局。</li>\n<li><a href=\"https://developer.android.com/reference/android/widget/EditText\"><code>EditText</code></a>是允许用户输入和修改文本的 UI 元素。</li>\n<li><a href=\"https://developer.android.com/reference/android/widget/Button\"><code>按钮</code></a>是用户可以点击执行操作的 UI 元素。按钮可以由文本、图标或文本和图标组成。</li>\n</ul>\n<p>单击侦听器</p>\n<ul>\n<li>您可以通过向点击侦听器添加单击侦听器来对被点击做出任何响应。<code>View</code></li>\n<li>定义单击侦听器的函数接收被单击的 。<code>View</code></li>\n</ul>\n<p>可以通过两种方式之一将单击侦听器函数附加到 ：<code>View</code></p>\n<ul>\n<li>在 XML 布局中，将<a href=\"https://developer.android.com/reference/android/R.attr.html#onClick\"><code>android：onClick</code></a>属性添加到*<code>View</code>*元素。<code>&lt;``&gt;</code></li>\n<li>以编程方式，在相应的 中使用<a href=\"https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener)\"><code>setOnClickListener（View.OnClickListener）</code></a>函数。<code>Activity</code></li>\n</ul>\n<h3 id=\"2-使用布局编辑器约束布局-ConstraintLayout\"><a href=\"#2-使用布局编辑器约束布局-ConstraintLayout\" class=\"headerlink\" title=\"2. 使用布局编辑器约束布局 ConstraintLayout\"></a>2. 使用布局编辑器约束布局 ConstraintLayout</h3><p>官方教程：<a href=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3\">https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3</a></p>\n<h3 id=\"3-数据绑定基础知识\"><a href=\"#3-数据绑定基础知识\" class=\"headerlink\" title=\"3. 数据绑定基础知识\"></a>3. 数据绑定基础知识</h3><h3 id=\"Android-studio-4-0实现了自动绑定-id-可以直接使用id\"><a href=\"#Android-studio-4-0实现了自动绑定-id-可以直接使用id\" class=\"headerlink\" title=\"Android studio 4.0实现了自动绑定 id 可以直接使用id\"></a>Android studio 4.0实现了自动绑定 id 可以直接使用id</h3><pre><code>apply plugin: &#39;kotlin-android-extensions&#39;</code></pre>\n<p>使用数据绑定替换对 的调用的步骤：<code>findViewById()</code></p>\n<ol>\n<li><p>在文件的 Android 部分启用数据绑定：<code>build.gradle</code><br><code>dataBinding &#123; enabled = true &#125;</code></p>\n</li>\n<li><p>用作 XML 布局中的根视图。<code>&lt;layout&gt;</code></p>\n</li>\n<li><p>定义绑定变量：<br><code>private lateinit var binding: ActivityMainBinding</code></p>\n</li>\n<li><p>在 中创建绑定对象，替换 ：<code>MainActivity``setContentView</code><br><code>binding = DataBindingUtil.setContentView(this, R.layout.activity_main)</code></p>\n</li>\n<li><h1 id=\"将-的调用替换为对绑定对象中视图的引用。例如：\"><a href=\"#将-的调用替换为对绑定对象中视图的引用。例如：\" class=\"headerlink\" title=\"将 的调用替换为对绑定对象中视图的引用。例如：\"></a>将 的调用替换为对绑定对象中视图的引用。例如：</h1><p>（在示例中，视图的名称从 XML 中的视图生成骆驼大小写。<code>findViewById()``findViewById&lt;Button&gt;(R.id.done_button)``binding.doneButton``id</code></p>\n</li>\n</ol>\n<p>将视图绑定到数据的步骤：</p>\n<ol>\n<li>为数据创建数据类。</li>\n<li>在标记内添加块。<code>&lt;data&gt;``&lt;layout&gt;</code></li>\n<li>定义 具有名称的类型，以及作为数据类的类型。<code>&lt;variable&gt;</code></li>\n</ol>\n<pre><code>&lt;data&gt;\n   &lt;variable\n       name=&quot;myName&quot;\n       type=&quot;com.example.android.aboutme.MyName&quot; /&gt;\n&lt;/data&gt;</code></pre>\n<ol>\n<li><p>在 中，使用数据类的实例创建一个变量。例如：<code>MainActivity</code><br><code>private val myName: MyName = MyName(&quot;Aleks Haecky&quot;)</code></p>\n</li>\n<li><p>在绑定对象中，将变量设置为刚刚创建的变量：<br><code>binding.myName = myName</code></p>\n</li>\n<li><p>在 XML 中，将视图的内容设置为在块中定义的变量。使用点符号访问数据类内的数据。<code>&lt;data&gt;</code><br><code>android:text=&quot;@=&#123;myName.name&#125;&quot;</code></p>\n</li>\n</ol>\n<h2 id=\"第-3-课：导航\"><a href=\"#第-3-课：导航\" class=\"headerlink\" title=\"第 3 课：导航\"></a>第 3 课：导航</h2><h3 id=\"1-创建片段-Fragment\"><a href=\"#1-创建片段-Fragment\" class=\"headerlink\" title=\"1. 创建片段(Fragment)\"></a>1. 创建片段(Fragment)</h3><p><img src=\"https://developer.android.com/images/fragment_lifecycle.png\" alt=\"img\">fragment生命周期</p>\n<h3 id=\"2-定义导航路径\"><a href=\"#2-定义导航路径\" class=\"headerlink\" title=\"2. 定义导航路径\"></a>2. 定义导航路径</h3><h3 id=\"3-启动外部活动\"><a href=\"#3-启动外部活动\" class=\"headerlink\" title=\"3. 启动外部活动\"></a>3. 启动外部活动</h3><h2 id=\"第-4-课：活动和片段生命周期\"><a href=\"#第-4-课：活动和片段生命周期\" class=\"headerlink\" title=\"第 4 课：活动和片段生命周期\"></a>第 4 课：活动和片段生命周期</h2><h3 id=\"4-1生命周期和日志记录\"><a href=\"#4-1生命周期和日志记录\" class=\"headerlink\" title=\"4.1生命周期和日志记录\"></a>4.1生命周期和日志记录</h3><p><img src=\"images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131037492.png\" alt=\"image-20200721131037492\"></p>\n<p><img src=\"images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131000138.png\" alt=\"image-20200721130945421\"></p>\n<p>AS快捷键ctrl+o（选择方法，重写）</p>\n<table>\n<thead>\n<tr>\n<th>生命周期函数</th>\n<th>说明</th>\n<th>注意</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onCreate()</td>\n<td>活动执行任何一次初始化</td>\n<td>该方法是重写，因此在它里面，必须立即调用 。其他生命周期方法也是如此。<code>onCreate()``super.onCreate()</code></td>\n</tr>\n<tr>\n<td>onStart（）</td>\n<td>生命周期方法在 刚刚调用。运行后，您的活动在屏幕上可见。与 不同，在活动的生命周期中，可以多次调用（仅调用一次以初始化活动）</td>\n<td>注意，它与相应的生命周期方法配对。如果用户启动应用，然后返回到设备主屏幕，则活动将停止，并且不再在屏幕上可见。<code>onStart()``onStop()</code></td>\n</tr>\n<tr>\n<td>onResume()</td>\n<td>为活动提供焦点，并准备好让用户与其进行交互。</td>\n<td></td>\n</tr>\n<tr>\n<td>onPause()</td>\n<td>应用不再在屏幕上可见</td>\n<td></td>\n</tr>\n<tr>\n<td>onRestart()</td>\n<td>活动返回到前台</td>\n<td></td>\n</tr>\n<tr>\n<td>onStop()</td>\n<td>停止活动</td>\n<td></td>\n</tr>\n<tr>\n<td>onDestroy()</td>\n<td>应用销毁</td>\n<td></td>\n</tr>\n</tbody></table>\n<h4 id=\"片段的整个启动生命周期，包括这些回调：\"><a href=\"#片段的整个启动生命周期，包括这些回调：\" class=\"headerlink\" title=\"片段的整个启动生命周期，包括这些回调：\"></a>片段的整个启动生命周期，包括这些回调：</h4><ul>\n<li><code>onAttach()</code>：当片段与其所有者活动关联时调用。</li>\n<li><code>onCreate()</code>：与活动类似，对于片段，调用执行初始片段创建（布局除外）。<code>onCreate()``onCreate()</code></li>\n<li><code>onCreateView()</code>：调用以膨胀片段的布局。</li>\n<li><code>onActivityCreated()</code>：当所有者活动完成时调用。在调用此方法之前，您的片段将无法访问该活动。<code>onCreate()</code></li>\n<li><code>onStart()</code>：当片段变为可见时调用;与活动的平行。<code>onStart()</code></li>\n<li><code>onResume()</code>：当片段获得用户焦点时调用;与活动的平行。<code>onResume()</code></li>\n</ul>\n<h4 id=\"Log-类将消息写入日志猫。\"><a href=\"#Log-类将消息写入日志猫。\" class=\"headerlink\" title=\"Log 类将消息写入日志猫。\"></a><a href=\"https://developer.android.com/reference/kotlin/android/util/Log\"><code>Log 类</code></a>将消息写入日志猫。</h4><p>此命令有三个部分：</p>\n<ul>\n<li><em>日志消息</em>的严重性，即消息的重要程度。在这种情况下[<code>，Log.i（） 方法</code>](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#i\">https://developer.android.com/reference/kotlin/android/util/Log#i</a>(kotlin.String, kotlin.String))写入信息消息。类中的其他方法包括[<code>用于错误的 Log.e（）</code>](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#e\">https://developer.android.com/reference/kotlin/android/util/Log#e</a>(kotlin.String, kotlin.String))或用于[<code>警告的 Log.w（）。</code> ](<a href=\"https://developer.android.com/reference/kotlin/android/util/Log#w\">https://developer.android.com/reference/kotlin/android/util/Log#w</a>(kotlin.String, kotlin.String))<code>Log</code></li>\n<li>日志<em>标记</em>，在这种情况下。标记是一个字符串，可让您更轻松地在 Logcat 中查找日志消息。标记通常是类的名称。<code>&quot;MainActivity&quot;</code></li>\n<li>实际日志<em>消息，</em>一个短字符串，在这种情况下是 。<code>&quot;onCreate called&quot;</code></li>\n</ul>\n<ol>\n<li><p>编译并运行甜品点击器应用程序。点击甜点时，不会看到应用程序中的任何行为差异。在 Android 工作室中， 在屏幕底部， 单击<strong>Logcat</strong>选项卡</p>\n<p><img src=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/ff9c50376701877f.png\" alt=\"img\"></p>\n<p>。日志猫是记录消息的控制台。此处将显示来自 Android 的有关应用的消息，包括您用方法或其他类方法显式发送到日志的消息。<code>Log.i()``Log</code></p>\n</li>\n<li><p>在**”日志猫**”窗格中，键入搜索字段。</p>\n<p><img src=\"https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/f5c091e2b480edf8.png\" alt=\"img\">Logcat<br>可以包含许多消息，其中大多数对您没有用。</p>\n<p>您可以通过多种方式筛选 Logcat 条目，但搜索是最容易的。由于您将用作代码中的日志标记，因此可以使用该标记筛选日志。在开始添加意味着这是一个信息性消息，由 创建。<br>日志消息包括日期和时间、包 （）、日志标记（在开始时使用）和实际<br>消息。由于此消息出现在日志中，因此您知道已执行。<code>I/MainActivity``MainActivity``I/``Log.i()``com.example.android.dessertclicker``I/``onCreate()</code></p>\n<h4 id=\"使用第三方库，显示时间日志\"><a href=\"#使用第三方库，显示时间日志\" class=\"headerlink\" title=\"使用第三方库，显示时间日志\"></a>使用第三方库，显示时间日志</h4><pre><code class=\"groovy\">implementation &#39;com.jakewharton.timber:timber:4.7.1&#39;</code></pre>\n<p>简介：Timber<code>使用 类，因为整个应用将使用此日志记录库，并且在设置其他所有内容之前，需要先初始化一次库。在这种情况下，您可以对类进行子类，并使用您自己的自定义实现重写默认值。</code>Application``Application</p>\n<h5 id=\"在全局类里初始化\"><a href=\"#在全局类里初始化\" class=\"headerlink\" title=\"在全局类里初始化\"></a>在全局类里初始化</h5><pre><code class=\"kotlin\">Timber.plant(Timber.DebugTree())</code></pre>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><pre><code class=\"kotlin\">Timber.i(&quot;onCreate called&quot;)</code></pre>\n</li>\n</ol>\n<h3 id=\"4-2复杂的生命周期情况\"><a href=\"#4-2复杂的生命周期情况\" class=\"headerlink\" title=\"4.2复杂的生命周期情况\"></a>4.2复杂的生命周期情况</h3><h4 id=\"生命周期提示\"><a href=\"#生命周期提示\" class=\"headerlink\" title=\"生命周期提示\"></a><strong>生命周期提示</strong></h4><ul>\n<li>如果在生命周期回调中设置或启动某项内容，请停止或删除相应回调中的东西。通过停止它，你确保它不会继续运行时，它不再需要。例如，如果在 中设置计时器，则需要在 中暂停或停止计时器。<code>onStart()``onStop()</code></li>\n<li>仅用于初始化应用首次启动时运行一次的应用部分。用于启动应用在应用启动时和每次应用返回前台时运行的应用部分。<code>onCreate()``onStart()</code></li>\n</ul>\n<h4 id=\"生命周期库\"><a href=\"#生命周期库\" class=\"headerlink\" title=\"生命周期库\"></a><strong>生命周期库</strong></h4><ul>\n<li>使用 Android 生命周期库将生命周期控制从活动或片段转移到需要生命周期感知的实际组件。</li>\n<li>生命周期<em>所有者</em>是具有（因此具有”拥有”）生命周期（包括 和 ）的组件。生命周期所有者实现接口。<code>Activity``Fragment``LifecycleOwner</code></li>\n<li>生命周期<em>观察者</em>会关注当前生命周期状态，并在生命周期更改时执行任务。生命周期观察者实现接口。<code>LifecycleObserver</code></li>\n<li><code>Lifecycle</code>对象包含实际的生命周期状态，并在生命周期更改时触发事件。</li>\n</ul>\n<p>要创建生命周期感知类，请：</p>\n<ul>\n<li><p>在需要生命周期感知的类中实现接口。<code>LifecycleObserver</code></p>\n</li>\n<li><p>使用活动或片段中的生命周期对象初始化生命周期观察者类。</p>\n</li>\n<li><p>在生命周期观察者类中，注释生命周期感知方法，并注明它们感兴趣的生命周期状态更改。</p>\n<p>例如，注释指示该方法正在监视生命周期事件。<code>@OnLifecycleEvent(Lifecycle.Event.ON_START)``onStart</code></p>\n</li>\n</ul>\n<h4 id=\"进程关闭和保存活动状态\"><a href=\"#进程关闭和保存活动状态\" class=\"headerlink\" title=\"进程关闭和保存活动状态\"></a><strong>进程关闭和保存活动状态</strong></h4><ul>\n<li>Android 可调节在后台运行的应用，以便前台应用可以毫无问题地运行。此法规包括限制后台应用可以执行的处理量，有时甚至会关闭整个应用过程。</li>\n<li>用户无法判断系统是否在后台关闭了应用。应用仍显示在”最近”屏幕中，并且应以用户离开时的状态重新启动。</li>\n<li>Android 调试桥 （） 是一个命令行工具，允许您向连接到计算机的模拟器和设备发送指令。您可以使用 模拟应用中的进程关闭。<code>adb``adb</code></li>\n<li>当 Android 关闭应用进程时，不会调用生命周期方法。应用程序刚刚停止。<code>onDestroy()</code></li>\n</ul>\n<h4 id=\"保留活动和片段状态\"><a href=\"#保留活动和片段状态\" class=\"headerlink\" title=\"保留活动和片段状态\"></a><strong>保留活动和片段状态</strong></h4><ul>\n<li>当你的应用进入后台时，在调用后，应用数据将保存到捆绑包中。某些应用数据（如 的内容）会自动保存。<code>onStop()``EditText</code></li>\n<li>捆绑包是 的实例，它是键和值的集合。键始终为字符串。<code>Bundle</code></li>\n<li>使用回调将其他数据保存到要保留的捆绑包，即使应用已自动关闭。若要将数据放入捆绑包中，请使用 以 开始的捆绑方法，例如 。<code>onSaveInstanceState()``put``putInt()</code></li>\n<li>可以从方法中的捆绑包中恢复数据，或者更常见地在 中获取数据。该方法具有保存捆绑包的参数。<code>onRestoreInstanceState()``onCreate()``onCreate()``savedInstanceState</code></li>\n<li>如果变量包含 ，则活动在没有状态包的情况下启动，并且没有要检索的状态数据。<code>savedInstanceState``null</code></li>\n<li>若要使用键从捆绑包中检索数据，请使用 以 开始的方法，如 。<code>Bundle``get``getInt()</code></li>\n</ul>\n<h4 id=\"配置更改\"><a href=\"#配置更改\" class=\"headerlink\" title=\"配置更改\"></a><strong>配置更改</strong></h4><ul>\n<li><em>当设备</em>的状态发生如此急剧的变化，系统解决更改的最简单方法是关闭和重建活动时，就会发生配置更改。</li>\n<li>配置更改的最常见示例是当用户将设备从纵向旋转到横向模式或从横向模式旋转到纵向模式时。当设备语言更改或插入硬件键盘时，也可能发生配置更改。</li>\n<li>当发生配置更改时，Android 会调用所有活动生命周期的关闭回调。然后 Android 从头开始重新启动活动，运行所有生命周期启动回调。</li>\n<li>当 Android 由于配置更改而关闭应用时，它将使用 可用的状态捆绑包重新启动活动。<code>onCreate()</code></li>\n<li>与进程关闭一样，将应用的状态保存到 中的捆绑包。<code>onSaveInstanceState()</code></li>\n</ul>\n<h2 id=\"第-5-课：体系结构组件\"><a href=\"#第-5-课：体系结构组件\" class=\"headerlink\" title=\"第 5 课：体系结构组件\"></a>第 5 课：体系结构组件</h2><h2 id=\"第-6-课：房间数据库和密码\"><a href=\"#第-6-课：房间数据库和密码\" class=\"headerlink\" title=\"第 6 课：房间数据库和密码\"></a>第 6 课：房间数据库和密码</h2><h2 id=\"第-7-课：回收器视图\"><a href=\"#第-7-课：回收器视图\" class=\"headerlink\" title=\"第 7 课：回收器视图\"></a>第 7 课：回收器视图</h2><h2 id=\"第8课：连接到互联网\"><a href=\"#第8课：连接到互联网\" class=\"headerlink\" title=\"第8课：连接到互联网\"></a>第8课：连接到互联网</h2><h2 id=\"第-9-课：存储库\"><a href=\"#第-9-课：存储库\" class=\"headerlink\" title=\"第 9 课：存储库\"></a>第 9 课：存储库</h2><h2 id=\"第-10-课：为每个人设计\"><a href=\"#第-10-课：为每个人设计\" class=\"headerlink\" title=\"第 10 课：为每个人设计\"></a>第 10 课：为每个人设计</h2>"},{"title":"1-2 连接SSH","auther":"ku jin","_content":"[toc]\n\n# 1.首先修改密码\n\n**修改虚拟机的默认登录密码**\n\n虚拟机控制台的默认登录密码在启动时显示，如下所示：\n\n[![Server credentials](https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png)](https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png)\n\n首次登录时，系统会自动提示您更改此更改。若要以后更改它，请执行下面的命令在控制台：\n\n```\npasswd\n```\n\n# 2.启用 SSH 服务器\n\n> 默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。但是，某些应用程序（如 GitLab）需要 SSH 访问导入代码存储库。\n\n#### Debian\n\n```\nsudo rm -f /etc/ssh/sshd_not_to_be_run\nsudo systemctl enable ssh\nsudo systemctl start ssh\n```\n\n#### Ubuntu\n\n```\nsudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf\nsudo start ssh\n```\n\n### 禁用 SSH 服务器\n\n默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。如果已[按照此处所述启用它](https://docs.bitnami.com/virtual-machine/faq/get-started/enable-ssh/)，则可以按照相反的步骤禁用它：\n\n#### Debian\n\n```\nsudo systemctl stop ssh\nsudo systemctl disable ssh\n```\n\n#### Ubuntu\n\n```\nsudo stop ssh\nsudo mv /etc/init/ssh.conf /etc/init/ssh.conf.back\n```\n\n# 3.连接成功\n\n![image-20200731114408221](images/1-2%20%E8%BF%9E%E6%8E%A5SSH/image-20200731114408221.png)","source":"_posts/随心记/Bitnami虚拟机/1-2 连接SSH.md","raw":"---\ntitle: 1-2 连接SSH # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Bitnami虚拟机\ntags: # 标签=目标文件夹\n - 1-2 连接SSH \n---\n[toc]\n\n# 1.首先修改密码\n\n**修改虚拟机的默认登录密码**\n\n虚拟机控制台的默认登录密码在启动时显示，如下所示：\n\n[![Server credentials](https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png)](https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png)\n\n首次登录时，系统会自动提示您更改此更改。若要以后更改它，请执行下面的命令在控制台：\n\n```\npasswd\n```\n\n# 2.启用 SSH 服务器\n\n> 默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。但是，某些应用程序（如 GitLab）需要 SSH 访问导入代码存储库。\n\n#### Debian\n\n```\nsudo rm -f /etc/ssh/sshd_not_to_be_run\nsudo systemctl enable ssh\nsudo systemctl start ssh\n```\n\n#### Ubuntu\n\n```\nsudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf\nsudo start ssh\n```\n\n### 禁用 SSH 服务器\n\n默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。如果已[按照此处所述启用它](https://docs.bitnami.com/virtual-machine/faq/get-started/enable-ssh/)，则可以按照相反的步骤禁用它：\n\n#### Debian\n\n```\nsudo systemctl stop ssh\nsudo systemctl disable ssh\n```\n\n#### Ubuntu\n\n```\nsudo stop ssh\nsudo mv /etc/init/ssh.conf /etc/init/ssh.conf.back\n```\n\n# 3.连接成功\n\n![image-20200731114408221](images/1-2%20%E8%BF%9E%E6%8E%A5SSH/image-20200731114408221.png)","slug":"随心记/Bitnami虚拟机/1-2 连接SSH","published":1,"date":"2020-08-02T23:42:42.544Z","updated":"2020-08-02T23:42:59.746Z","_id":"ckdcza4ma003qrkam9ib0b7nn","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"1-首先修改密码\"><a href=\"#1-首先修改密码\" class=\"headerlink\" title=\"1.首先修改密码\"></a>1.首先修改密码</h1><p><strong>修改虚拟机的默认登录密码</strong></p>\n<p>虚拟机控制台的默认登录密码在启动时显示，如下所示：</p>\n<p><a href=\"https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png\"><img src=\"https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png\" alt=\"Server credentials\"></a></p>\n<p>首次登录时，系统会自动提示您更改此更改。若要以后更改它，请执行下面的命令在控制台：</p>\n<pre><code>passwd</code></pre>\n<h1 id=\"2-启用-SSH-服务器\"><a href=\"#2-启用-SSH-服务器\" class=\"headerlink\" title=\"2.启用 SSH 服务器\"></a>2.启用 SSH 服务器</h1><blockquote>\n<p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。但是，某些应用程序（如 GitLab）需要 SSH 访问导入代码存储库。</p>\n</blockquote>\n<h4 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian\"></a>Debian</h4><pre><code>sudo rm -f /etc/ssh/sshd_not_to_be_run\nsudo systemctl enable ssh\nsudo systemctl start ssh</code></pre>\n<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><pre><code>sudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf\nsudo start ssh</code></pre>\n<h3 id=\"禁用-SSH-服务器\"><a href=\"#禁用-SSH-服务器\" class=\"headerlink\" title=\"禁用 SSH 服务器\"></a>禁用 SSH 服务器</h3><p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。如果已<a href=\"https://docs.bitnami.com/virtual-machine/faq/get-started/enable-ssh/\">按照此处所述启用它</a>，则可以按照相反的步骤禁用它：</p>\n<h4 id=\"Debian-1\"><a href=\"#Debian-1\" class=\"headerlink\" title=\"Debian\"></a>Debian</h4><pre><code>sudo systemctl stop ssh\nsudo systemctl disable ssh</code></pre>\n<h4 id=\"Ubuntu-1\"><a href=\"#Ubuntu-1\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><pre><code>sudo stop ssh\nsudo mv /etc/init/ssh.conf /etc/init/ssh.conf.back</code></pre>\n<h1 id=\"3-连接成功\"><a href=\"#3-连接成功\" class=\"headerlink\" title=\"3.连接成功\"></a>3.连接成功</h1><p><img src=\"images/1-2%20%E8%BF%9E%E6%8E%A5SSH/image-20200731114408221.png\" alt=\"image-20200731114408221\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"1-首先修改密码\"><a href=\"#1-首先修改密码\" class=\"headerlink\" title=\"1.首先修改密码\"></a>1.首先修改密码</h1><p><strong>修改虚拟机的默认登录密码</strong></p>\n<p>虚拟机控制台的默认登录密码在启动时显示，如下所示：</p>\n<p><a href=\"https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png\"><img src=\"https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png\" alt=\"Server credentials\"></a></p>\n<p>首次登录时，系统会自动提示您更改此更改。若要以后更改它，请执行下面的命令在控制台：</p>\n<pre><code>passwd</code></pre>\n<h1 id=\"2-启用-SSH-服务器\"><a href=\"#2-启用-SSH-服务器\" class=\"headerlink\" title=\"2.启用 SSH 服务器\"></a>2.启用 SSH 服务器</h1><blockquote>\n<p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。但是，某些应用程序（如 GitLab）需要 SSH 访问导入代码存储库。</p>\n</blockquote>\n<h4 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian\"></a>Debian</h4><pre><code>sudo rm -f /etc/ssh/sshd_not_to_be_run\nsudo systemctl enable ssh\nsudo systemctl start ssh</code></pre>\n<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><pre><code>sudo mv /etc/init/ssh.conf.back /etc/init/ssh.conf\nsudo start ssh</code></pre>\n<h3 id=\"禁用-SSH-服务器\"><a href=\"#禁用-SSH-服务器\" class=\"headerlink\" title=\"禁用 SSH 服务器\"></a>禁用 SSH 服务器</h3><p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。如果已<a href=\"https://docs.bitnami.com/virtual-machine/faq/get-started/enable-ssh/\">按照此处所述启用它</a>，则可以按照相反的步骤禁用它：</p>\n<h4 id=\"Debian-1\"><a href=\"#Debian-1\" class=\"headerlink\" title=\"Debian\"></a>Debian</h4><pre><code>sudo systemctl stop ssh\nsudo systemctl disable ssh</code></pre>\n<h4 id=\"Ubuntu-1\"><a href=\"#Ubuntu-1\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><pre><code>sudo stop ssh\nsudo mv /etc/init/ssh.conf /etc/init/ssh.conf.back</code></pre>\n<h1 id=\"3-连接成功\"><a href=\"#3-连接成功\" class=\"headerlink\" title=\"3.连接成功\"></a>3.连接成功</h1><p><img src=\"images/1-2%20%E8%BF%9E%E6%8E%A5SSH/image-20200731114408221.png\" alt=\"image-20200731114408221\"></p>\n"},{"title":"1-3 安装桌面","auther":"ku jin","_content":"[toc]\n\n# 启用桌面访问\n\n文件下载很慢,(不推荐)\n\n若要允许位纳米用户的*桌面访问，*请按照以下步骤操作：\n\n### Debian\n\n- 安装*侏儒核心*包：\n\n  ```\n  sudo apt-get update\n  sudo apt-get install gnome-core\n  ```\n\n- 重新启动计算机。\n\n- 现在，您应该能够以*bitnami 用户位登录到桌面*。\n\n### Ubuntu\n\n- 安装*ubuntu 桌面*包：\n\n  ```\n  sudo apt-get update\n  sudo apt-get install ubuntu-desktop\n  ```\n\n- 创建一个名为*/usr/共享/光德姆/光德姆.conf.d/60-bitnami.conf 的新文件*，并添加如下行：\n\n  ```\n  [SeatDefaults]\n  default-user=bitnami\n  greeter-show-manual-login=true\n  ```\n\n您可以通过执行以下命令来创建该文件：\n\n```\nsudo sh -c 'echo \"[SeatDefaults]\\ndefault-user=bitnami\\ngreeter-show-manual-login=true\" > /usr/share/lightdm/lightdm.conf.d/50-bitnami.conf'\n```\n\n- 重新启动虚拟机。\n- 现在，您应该能够以*bitnami 用户位登录到桌面*。","source":"_posts/随心记/Bitnami虚拟机/1-3 安装桌面.md","raw":"---\ntitle: 1-3 安装桌面 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Bitnami虚拟机\ntags: # 标签=目标文件夹\n - 1-3 安装桌面 \n---\n[toc]\n\n# 启用桌面访问\n\n文件下载很慢,(不推荐)\n\n若要允许位纳米用户的*桌面访问，*请按照以下步骤操作：\n\n### Debian\n\n- 安装*侏儒核心*包：\n\n  ```\n  sudo apt-get update\n  sudo apt-get install gnome-core\n  ```\n\n- 重新启动计算机。\n\n- 现在，您应该能够以*bitnami 用户位登录到桌面*。\n\n### Ubuntu\n\n- 安装*ubuntu 桌面*包：\n\n  ```\n  sudo apt-get update\n  sudo apt-get install ubuntu-desktop\n  ```\n\n- 创建一个名为*/usr/共享/光德姆/光德姆.conf.d/60-bitnami.conf 的新文件*，并添加如下行：\n\n  ```\n  [SeatDefaults]\n  default-user=bitnami\n  greeter-show-manual-login=true\n  ```\n\n您可以通过执行以下命令来创建该文件：\n\n```\nsudo sh -c 'echo \"[SeatDefaults]\\ndefault-user=bitnami\\ngreeter-show-manual-login=true\" > /usr/share/lightdm/lightdm.conf.d/50-bitnami.conf'\n```\n\n- 重新启动虚拟机。\n- 现在，您应该能够以*bitnami 用户位登录到桌面*。","slug":"随心记/Bitnami虚拟机/1-3 安装桌面","published":1,"date":"2020-08-02T23:42:42.553Z","updated":"2020-08-02T23:42:59.746Z","_id":"ckdcza4mb003trkamc7etfji8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<h1 id=\"启用桌面访问\"><a href=\"#启用桌面访问\" class=\"headerlink\" title=\"启用桌面访问\"></a>启用桌面访问</h1><p>文件下载很慢,(不推荐)</p>\n<p>若要允许位纳米用户的<em>桌面访问，</em>请按照以下步骤操作：</p>\n<h3 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian\"></a>Debian</h3><ul>\n<li><p>安装<em>侏儒核心</em>包：</p>\n<pre><code>sudo apt-get update\nsudo apt-get install gnome-core</code></pre>\n</li>\n<li><p>重新启动计算机。</p>\n</li>\n<li><p>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</p>\n</li>\n</ul>\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><ul>\n<li><p>安装<em>ubuntu 桌面</em>包：</p>\n<pre><code>sudo apt-get update\nsudo apt-get install ubuntu-desktop</code></pre>\n</li>\n<li><p>创建一个名为*/usr/共享/光德姆/光德姆.conf.d/60-bitnami.conf 的新文件*，并添加如下行：</p>\n<pre><code>[SeatDefaults]\ndefault-user=bitnami\ngreeter-show-manual-login=true</code></pre>\n</li>\n</ul>\n<p>您可以通过执行以下命令来创建该文件：</p>\n<pre><code>sudo sh -c 'echo \"[SeatDefaults]\\ndefault-user=bitnami\\ngreeter-show-manual-login=true\" &gt; /usr/share/lightdm/lightdm.conf.d/50-bitnami.conf'</code></pre>\n<ul>\n<li>重新启动虚拟机。</li>\n<li>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</li>\n</ul>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"启用桌面访问\"><a href=\"#启用桌面访问\" class=\"headerlink\" title=\"启用桌面访问\"></a>启用桌面访问</h1><p>文件下载很慢,(不推荐)</p>\n<p>若要允许位纳米用户的<em>桌面访问，</em>请按照以下步骤操作：</p>\n<h3 id=\"Debian\"><a href=\"#Debian\" class=\"headerlink\" title=\"Debian\"></a>Debian</h3><ul>\n<li><p>安装<em>侏儒核心</em>包：</p>\n<pre><code>sudo apt-get update\nsudo apt-get install gnome-core</code></pre>\n</li>\n<li><p>重新启动计算机。</p>\n</li>\n<li><p>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</p>\n</li>\n</ul>\n<h3 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h3><ul>\n<li><p>安装<em>ubuntu 桌面</em>包：</p>\n<pre><code>sudo apt-get update\nsudo apt-get install ubuntu-desktop</code></pre>\n</li>\n<li><p>创建一个名为*/usr/共享/光德姆/光德姆.conf.d/60-bitnami.conf 的新文件*，并添加如下行：</p>\n<pre><code>[SeatDefaults]\ndefault-user=bitnami\ngreeter-show-manual-login=true</code></pre>\n</li>\n</ul>\n<p>您可以通过执行以下命令来创建该文件：</p>\n<pre><code>sudo sh -c &#39;echo &quot;[SeatDefaults]\\ndefault-user=bitnami\\ngreeter-show-manual-login=true&quot; &gt; /usr/share/lightdm/lightdm.conf.d/50-bitnami.conf&#39;</code></pre>\n<ul>\n<li>重新启动虚拟机。</li>\n<li>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</li>\n</ul>\n"},{"title":"2-1文档学习","auther":"ku jin","_content":"[toc]\n\n官方文档地址:https://docs.bitnami.com/virtual-machine/get-started-virtualbox/\n\n## 简介\n\n> 如果您曾经尝试过安装服务器应用程序（如 WordPress）或开发环境（如 Apache/PHP/MySQL 环境），您已经知道它比乍看起来要困难得多。有文件要下载和复制，配置设置要调整，和各种其他箍跳转之前，你可以真正得到一些富有成效的工作。\n\n**Bitnami 虚拟机**\n\n","source":"_posts/随心记/Bitnami虚拟机/2-1文档学习.md","raw":"---\ntitle: 2-1文档学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Bitnami虚拟机\ntags: # 标签=目标文件夹\n - 2-1文档学习 \n---\n[toc]\n\n官方文档地址:https://docs.bitnami.com/virtual-machine/get-started-virtualbox/\n\n## 简介\n\n> 如果您曾经尝试过安装服务器应用程序（如 WordPress）或开发环境（如 Apache/PHP/MySQL 环境），您已经知道它比乍看起来要困难得多。有文件要下载和复制，配置设置要调整，和各种其他箍跳转之前，你可以真正得到一些富有成效的工作。\n\n**Bitnami 虚拟机**\n\n","slug":"随心记/Bitnami虚拟机/2-1文档学习","published":1,"date":"2020-08-02T23:42:42.559Z","updated":"2020-08-02T23:42:59.747Z","_id":"ckdcza4mc003urkamg6x74ky5","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[toc]</p>\n<p>官方文档地址:<a href=\"https://docs.bitnami.com/virtual-machine/get-started-virtualbox/\">https://docs.bitnami.com/virtual-machine/get-started-virtualbox/</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>如果您曾经尝试过安装服务器应用程序（如 WordPress）或开发环境（如 Apache/PHP/MySQL 环境），您已经知道它比乍看起来要困难得多。有文件要下载和复制，配置设置要调整，和各种其他箍跳转之前，你可以真正得到一些富有成效的工作。</p>\n</blockquote>\n<p><strong>Bitnami 虚拟机</strong></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[toc]</p>\n<p>官方文档地址:<a href=\"https://docs.bitnami.com/virtual-machine/get-started-virtualbox/\">https://docs.bitnami.com/virtual-machine/get-started-virtualbox/</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><blockquote>\n<p>如果您曾经尝试过安装服务器应用程序（如 WordPress）或开发环境（如 Apache/PHP/MySQL 环境），您已经知道它比乍看起来要困难得多。有文件要下载和复制，配置设置要调整，和各种其他箍跳转之前，你可以真正得到一些富有成效的工作。</p>\n</blockquote>\n<p><strong>Bitnami 虚拟机</strong></p>\n"},{"title":"简介","auther":"ku jin","_content":"> BitNami 提供wordpress、joomla、drupal、bbpress等开源程序的傻瓜式安装包下载，所有的安装包内置了服务器环境，就是说，不需要在本地电脑上另外搭建服务器，就可以一次性傻瓜式安装完毕。BitNami开源PHP程序傻瓜集成安装包可选环境，包括WAMP，LAMP，MAMP和SAMP。","source":"_posts/随心记/Bitnami虚拟机/简介.md","raw":"---\ntitle: 简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Bitnami虚拟机\ntags: # 标签=目标文件夹\n - 简介 \n---\n> BitNami 提供wordpress、joomla、drupal、bbpress等开源程序的傻瓜式安装包下载，所有的安装包内置了服务器环境，就是说，不需要在本地电脑上另外搭建服务器，就可以一次性傻瓜式安装完毕。BitNami开源PHP程序傻瓜集成安装包可选环境，包括WAMP，LAMP，MAMP和SAMP。","slug":"随心记/Bitnami虚拟机/简介","published":1,"date":"2020-08-02T23:42:42.565Z","updated":"2020-08-02T23:42:59.747Z","_id":"ckdcza4md003vrkam2lip2ff1","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>BitNami 提供wordpress、joomla、drupal、bbpress等开源程序的傻瓜式安装包下载，所有的安装包内置了服务器环境，就是说，不需要在本地电脑上另外搭建服务器，就可以一次性傻瓜式安装完毕。BitNami开源PHP程序傻瓜集成安装包可选环境，包括WAMP，LAMP，MAMP和SAMP。</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>BitNami 提供wordpress、joomla、drupal、bbpress等开源程序的傻瓜式安装包下载，所有的安装包内置了服务器环境，就是说，不需要在本地电脑上另外搭建服务器，就可以一次性傻瓜式安装完毕。BitNami开源PHP程序傻瓜集成安装包可选环境，包括WAMP，LAMP，MAMP和SAMP。</p>\n</blockquote>\n"},{"title":"1-2-常用操作","auther":"ku jin","_content":"## 启动docker \n\n\n\n## 查看容器\n\n###### 查看当前运行的容器\n\n```shell\ndocker ps\n```\n\n###### 查看所有容器\n\n```dockerfile\ndocker ps -a\n```\n\n在查看容器时，涉及到几个查看参数，含义分别如下：\n\n- CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行\b标识一个容器。\n- IMAGE:IMAGE表示创建容器时使用的镜像。\n- COMMAND:COMMAND表示容器最后运行的命令。\n- CREATED:创建容器的时间。\n- STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。\n- PORTS:容器对外开放的端口。\n- NAMES:容器的名字，如果不设置，会有一个默认的名字。\n\n###### 查看最新创建的容器\n\n```shell\ndocker ps -l\n```\n\n查看最新创建的n个容器\n\n```docer\ndocker ps -n=xxx\n```\n\n## 创建容器\n\n容器创建\n\n```shell\ndocker create nginx\n```\n\n","source":"_posts/随心记/Docker学习/1-2-常用操作.md","raw":"---\ntitle: 1-2-常用操作 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Docker学习\ntags: # 标签=目标文件夹\n - 1-2-常用操作 \n---\n## 启动docker \n\n\n\n## 查看容器\n\n###### 查看当前运行的容器\n\n```shell\ndocker ps\n```\n\n###### 查看所有容器\n\n```dockerfile\ndocker ps -a\n```\n\n在查看容器时，涉及到几个查看参数，含义分别如下：\n\n- CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行\b标识一个容器。\n- IMAGE:IMAGE表示创建容器时使用的镜像。\n- COMMAND:COMMAND表示容器最后运行的命令。\n- CREATED:创建容器的时间。\n- STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。\n- PORTS:容器对外开放的端口。\n- NAMES:容器的名字，如果不设置，会有一个默认的名字。\n\n###### 查看最新创建的容器\n\n```shell\ndocker ps -l\n```\n\n查看最新创建的n个容器\n\n```docer\ndocker ps -n=xxx\n```\n\n## 创建容器\n\n容器创建\n\n```shell\ndocker create nginx\n```\n\n","slug":"随心记/Docker学习/1-2-常用操作","published":1,"date":"2020-08-02T23:42:42.663Z","updated":"2020-08-02T23:42:59.749Z","_id":"ckdcza4mg003zrkam41qmbx8q","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h2><h2 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h2><h6 id=\"查看当前运行的容器\"><a href=\"#查看当前运行的容器\" class=\"headerlink\" title=\"查看当前运行的容器\"></a>查看当前运行的容器</h6><pre class=\" language-shell\"><code class=\"language-shell\">docker ps</code></pre>\n<h6 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h6><pre class=\" language-dockerfile\"><code class=\"language-dockerfile\">docker ps -a</code></pre>\n<p>在查看容器时，涉及到几个查看参数，含义分别如下：</p>\n<ul>\n<li>CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行\b标识一个容器。</li>\n<li>IMAGE:IMAGE表示创建容器时使用的镜像。</li>\n<li>COMMAND:COMMAND表示容器最后运行的命令。</li>\n<li>CREATED:创建容器的时间。</li>\n<li>STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。</li>\n<li>PORTS:容器对外开放的端口。</li>\n<li>NAMES:容器的名字，如果不设置，会有一个默认的名字。</li>\n</ul>\n<h6 id=\"查看最新创建的容器\"><a href=\"#查看最新创建的容器\" class=\"headerlink\" title=\"查看最新创建的容器\"></a>查看最新创建的容器</h6><pre class=\" language-shell\"><code class=\"language-shell\">docker ps -l</code></pre>\n<p>查看最新创建的n个容器</p>\n<pre class=\" language-docer\"><code class=\"language-docer\">docker ps -n=xxx</code></pre>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>容器创建</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker create nginx</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"启动docker\"><a href=\"#启动docker\" class=\"headerlink\" title=\"启动docker\"></a>启动docker</h2><h2 id=\"查看容器\"><a href=\"#查看容器\" class=\"headerlink\" title=\"查看容器\"></a>查看容器</h2><h6 id=\"查看当前运行的容器\"><a href=\"#查看当前运行的容器\" class=\"headerlink\" title=\"查看当前运行的容器\"></a>查看当前运行的容器</h6><pre><code class=\"shell\">docker ps</code></pre>\n<h6 id=\"查看所有容器\"><a href=\"#查看所有容器\" class=\"headerlink\" title=\"查看所有容器\"></a>查看所有容器</h6><pre><code class=\"dockerfile\">docker ps -a</code></pre>\n<p>在查看容器时，涉及到几个查看参数，含义分别如下：</p>\n<ul>\n<li>CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行\b标识一个容器。</li>\n<li>IMAGE:IMAGE表示创建容器时使用的镜像。</li>\n<li>COMMAND:COMMAND表示容器最后运行的命令。</li>\n<li>CREATED:创建容器的时间。</li>\n<li>STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。</li>\n<li>PORTS:容器对外开放的端口。</li>\n<li>NAMES:容器的名字，如果不设置，会有一个默认的名字。</li>\n</ul>\n<h6 id=\"查看最新创建的容器\"><a href=\"#查看最新创建的容器\" class=\"headerlink\" title=\"查看最新创建的容器\"></a>查看最新创建的容器</h6><pre><code class=\"shell\">docker ps -l</code></pre>\n<p>查看最新创建的n个容器</p>\n<pre><code class=\"docer\">docker ps -n=xxx</code></pre>\n<h2 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h2><p>容器创建</p>\n<pre><code class=\"shell\">docker create nginx</code></pre>\n"},{"title":"1-2 使用教程","auther":"ku jin","_content":"## GitBook 简介\n\n[GitBook 官网](https://www.gitbook.com/)\n\n[GitBook 文档](https://github.com/GitbookIO/gitbook)\n\n## GitBook 准备工作\n\n### 安装 Node.js\n\nGitBook 是一个基于 Node.js 的命令行工具，下载安装 [Node.js](https://nodejs.org/en)，安装完成之后，你可以使用下面的命令来检验是否安装成功。\n\n```\n$ node -v\nv7.7.1\n```\n\n### 安装 GitBook\n\n输入下面的命令来安装 GitBook。\n\n```\n$ npm install gitbook-cli -g\n```\n\n安装完成之后，你可以使用下面的命令来检验是否安装成功。\n\n```\n$ gitbook -V\nCLI version: 2.3.2\nGitBook version: 3.2.3\n```\n\n更多详情请参照 [GitBook 安装文档](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md) 来安装 GitBook。\n\n### 安装 GitBook 编辑器\n\n去 [GitBook 官网](https://www.gitbook.com/) 下载 GitBook 编辑器；如果是 Mac 用户且安装过 `brew cask` 的话可以使用 `brew cask install gitbook-editor` 命令行来安装 GitBook 编辑器。\n\n## 先睹为快\n\nGitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。\n\n```\n$ gitbook init\nwarn: no summary file in this book\ninfo: create README.md\ninfo: create SUMMARY.md\ninfo: initialization is finished\n```\n\n可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：\n\n```\n# Summary\n\n* [Introduction](README.md)\n```\n\n接下来，我们输入 `$ gitbook serve` 命令，然后在浏览器地址栏中输入 `http://localhost:4000` 便可预览书籍。\n\n效果如下所示：\n\n![img](https://blankj.com/gitbook/gitbook/README/default_book.png)\n\n运行该命令后会在书籍的文件夹中生成一个 `_book` 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。\n\n```\ngitbook build\n```\n\n下面我们来详细介绍下 GitBook 目录结构及相关文件。\n\n## 目录结构\n\nGitBook 基本的目录结构如下所示：\n\n```\n.\n├── book.json\n├── README.md\n├── SUMMARY.md\n├── chapter-1/\n|   ├── README.md\n|   └── something.md\n└── chapter-2/\n    ├── README.md\n    └── something.md\n```\n\n下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。\n\n### book.json\n\n该文件主要用来存放配置信息，我先放出我的配置文件。\n\n```json\n{\n    \"title\": \"Blankj's Glory\",\n    \"author\": \"Blankj\",\n    \"description\": \"select * from learn\",\n    \"language\": \"zh-hans\",\n    \"gitbook\": \"3.2.3\",\n    \"styles\": {\n        \"website\": \"/styles/website.css\"\n    },\n    \"structure\": {\n        \"readme\": \"README.md\"\n    },\n    \"links\": {\n        \"sidebar\": {\n            \"我的狗窝\": \"https://blankj.com\"\n        }\n    },\n    \"plugins\": [\n        \"-sharing\",\n        \"splitter\",\n        \"expandable-chapters-small\",\n        \"anchors\",\n\n        \"github\",\n        \"github-buttons\",\n        \"donate\",\n        \"sharing-plus\",\n        \"anchor-navigation-ex\",\n        \"favicon\"\n    ],\n    \"pluginsConfig\": {\n        \"github\": {\n            \"url\": \"https://github.com/Blankj\"\n        },\n        \"github-buttons\": {\n            \"buttons\": [{\n                \"user\": \"Blankj\",\n                \"repo\": \"glory\",\n                \"type\": \"star\",\n                \"size\": \"small\",\n                \"count\": true\n                }\n            ]\n        },\n        \"donate\": {\n            \"alipay\": \"https://blankj.com/gitbook/source/images/donate.png\",\n            \"title\": \"\",\n            \"button\": \"赞赏\",\n            \"alipayText\": \" \"\n        },\n        \"sharing\": {\n            \"douban\": false,\n            \"facebook\": false,\n            \"google\": false,\n            \"hatenaBookmark\": false,\n            \"instapaper\": false,\n            \"line\": false,\n            \"linkedin\": false,\n            \"messenger\": false,\n            \"pocket\": false,\n            \"qq\": false,\n            \"qzone\": false,\n            \"stumbleupon\": false,\n            \"twitter\": false,\n            \"viber\": false,\n            \"vk\": false,\n            \"weibo\": false,\n            \"whatsapp\": false,\n            \"all\": [\n                \"google\", \"facebook\", \"weibo\", \"twitter\",\n                \"qq\", \"qzone\", \"linkedin\", \"pocket\"\n            ]\n        },\n        \"anchor-navigation-ex\": {\n            \"showLevel\": false\n        },\n        \"favicon\":{\n            \"shortcut\": \"./source/images/favicon-32x32.webp\",\n            \"bookmark\": \"./source/images/favicon-32x32.webp\",\n            \"appleTouch\": \"./source/images/apple-touch-icon.webp\"\n        }\n    }\n}\n```\n\n相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。\n\n#### title\n\n本书标题\n\n#### author\n\n本书作者\n\n#### description\n\n本书描述\n\n#### language\n\n本书语言，中文设置 \"zh-hans\" 即可\n\n#### gitbook\n\n指定使用的 GitBook 版本\n\n#### styles\n\n自定义页面样式\n\n#### structure\n\n指定 Readme、Summary、Glossary 和 Languages 对应的文件名\n\n#### links\n\n在左侧导航栏添加链接信息\n\n#### plugins\n\n配置使用的插件\n\n#### pluginsConfig\n\n配置插件的属性\n\n### SUMMARY.md\n\n这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：\n\n```\n# Summary\n\n* [Introduction](README.md)\n* [Part I](part1/README.md)\n    * [Writing is nice](part1/writing.md)\n    * [GitBook is nice](part1/gitbook.md)\n* [Part II](part2/README.md)\n    * [We love feedback](part2/feedback_please.md)\n    * [Better tools for authors](part2/better_tools.md)\n```\n\n这个配置对应的目录结构如下所示:\n\n![img](https://blankj.com/gitbook/gitbook/README/summary.png)\n\n我们通过使用 `标题` 或者 `水平分割线` 将 GitBook 分为几个不同的部分，如下所示：\n\n```\n# Summary\n\n### Part I\n\n* [Introduction](README.md)\n* [Writing is nice](part1/writing.md)\n* [GitBook is nice](part1/gitbook.md)\n\n### Part II\n\n* [We love feedback](part2/feedback_please.md)\n* [Better tools for authors](part2/better_tools.md)\n\n---\n\n* [Last part without title](part3/title.md)\n```\n\n这个配置对应的目录结构如下所示:\n\n![img](https://blankj.com/gitbook/gitbook/README/summary_part.png)\n\n## 插件\n\nGitBook 有 [插件官网](https://plugins.gitbook.com/)，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 `-`，比如：\n\n```\n\"plugins\": [\n    \"-search\"\n]\n```\n\n如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 [plugin-github](https://plugins.gitbook.com/plugin/github)，我们在 book.json 中加入配置如下即可：\n\n```\n{\n    \"plugins\": [ \"github\" ],\n    \"pluginsConfig\": {\n        \"github\": {\n            \"url\": \"https://github.com/your/repo\"\n        }\n    }\n}\n```\n\n然后在终端输入 `gitbook install ./` 即可。","source":"_posts/随心记/GitBook学习/1-2 使用教程.md","raw":"---\ntitle: 1-2 使用教程 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitBook学习\ntags: # 标签=目标文件夹\n - 1-2 使用教程 \n---\n## GitBook 简介\n\n[GitBook 官网](https://www.gitbook.com/)\n\n[GitBook 文档](https://github.com/GitbookIO/gitbook)\n\n## GitBook 准备工作\n\n### 安装 Node.js\n\nGitBook 是一个基于 Node.js 的命令行工具，下载安装 [Node.js](https://nodejs.org/en)，安装完成之后，你可以使用下面的命令来检验是否安装成功。\n\n```\n$ node -v\nv7.7.1\n```\n\n### 安装 GitBook\n\n输入下面的命令来安装 GitBook。\n\n```\n$ npm install gitbook-cli -g\n```\n\n安装完成之后，你可以使用下面的命令来检验是否安装成功。\n\n```\n$ gitbook -V\nCLI version: 2.3.2\nGitBook version: 3.2.3\n```\n\n更多详情请参照 [GitBook 安装文档](https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md) 来安装 GitBook。\n\n### 安装 GitBook 编辑器\n\n去 [GitBook 官网](https://www.gitbook.com/) 下载 GitBook 编辑器；如果是 Mac 用户且安装过 `brew cask` 的话可以使用 `brew cask install gitbook-editor` 命令行来安装 GitBook 编辑器。\n\n## 先睹为快\n\nGitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。\n\n```\n$ gitbook init\nwarn: no summary file in this book\ninfo: create README.md\ninfo: create SUMMARY.md\ninfo: initialization is finished\n```\n\n可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：\n\n```\n# Summary\n\n* [Introduction](README.md)\n```\n\n接下来，我们输入 `$ gitbook serve` 命令，然后在浏览器地址栏中输入 `http://localhost:4000` 便可预览书籍。\n\n效果如下所示：\n\n![img](https://blankj.com/gitbook/gitbook/README/default_book.png)\n\n运行该命令后会在书籍的文件夹中生成一个 `_book` 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。\n\n```\ngitbook build\n```\n\n下面我们来详细介绍下 GitBook 目录结构及相关文件。\n\n## 目录结构\n\nGitBook 基本的目录结构如下所示：\n\n```\n.\n├── book.json\n├── README.md\n├── SUMMARY.md\n├── chapter-1/\n|   ├── README.md\n|   └── something.md\n└── chapter-2/\n    ├── README.md\n    └── something.md\n```\n\n下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。\n\n### book.json\n\n该文件主要用来存放配置信息，我先放出我的配置文件。\n\n```json\n{\n    \"title\": \"Blankj's Glory\",\n    \"author\": \"Blankj\",\n    \"description\": \"select * from learn\",\n    \"language\": \"zh-hans\",\n    \"gitbook\": \"3.2.3\",\n    \"styles\": {\n        \"website\": \"/styles/website.css\"\n    },\n    \"structure\": {\n        \"readme\": \"README.md\"\n    },\n    \"links\": {\n        \"sidebar\": {\n            \"我的狗窝\": \"https://blankj.com\"\n        }\n    },\n    \"plugins\": [\n        \"-sharing\",\n        \"splitter\",\n        \"expandable-chapters-small\",\n        \"anchors\",\n\n        \"github\",\n        \"github-buttons\",\n        \"donate\",\n        \"sharing-plus\",\n        \"anchor-navigation-ex\",\n        \"favicon\"\n    ],\n    \"pluginsConfig\": {\n        \"github\": {\n            \"url\": \"https://github.com/Blankj\"\n        },\n        \"github-buttons\": {\n            \"buttons\": [{\n                \"user\": \"Blankj\",\n                \"repo\": \"glory\",\n                \"type\": \"star\",\n                \"size\": \"small\",\n                \"count\": true\n                }\n            ]\n        },\n        \"donate\": {\n            \"alipay\": \"https://blankj.com/gitbook/source/images/donate.png\",\n            \"title\": \"\",\n            \"button\": \"赞赏\",\n            \"alipayText\": \" \"\n        },\n        \"sharing\": {\n            \"douban\": false,\n            \"facebook\": false,\n            \"google\": false,\n            \"hatenaBookmark\": false,\n            \"instapaper\": false,\n            \"line\": false,\n            \"linkedin\": false,\n            \"messenger\": false,\n            \"pocket\": false,\n            \"qq\": false,\n            \"qzone\": false,\n            \"stumbleupon\": false,\n            \"twitter\": false,\n            \"viber\": false,\n            \"vk\": false,\n            \"weibo\": false,\n            \"whatsapp\": false,\n            \"all\": [\n                \"google\", \"facebook\", \"weibo\", \"twitter\",\n                \"qq\", \"qzone\", \"linkedin\", \"pocket\"\n            ]\n        },\n        \"anchor-navigation-ex\": {\n            \"showLevel\": false\n        },\n        \"favicon\":{\n            \"shortcut\": \"./source/images/favicon-32x32.webp\",\n            \"bookmark\": \"./source/images/favicon-32x32.webp\",\n            \"appleTouch\": \"./source/images/apple-touch-icon.webp\"\n        }\n    }\n}\n```\n\n相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。\n\n#### title\n\n本书标题\n\n#### author\n\n本书作者\n\n#### description\n\n本书描述\n\n#### language\n\n本书语言，中文设置 \"zh-hans\" 即可\n\n#### gitbook\n\n指定使用的 GitBook 版本\n\n#### styles\n\n自定义页面样式\n\n#### structure\n\n指定 Readme、Summary、Glossary 和 Languages 对应的文件名\n\n#### links\n\n在左侧导航栏添加链接信息\n\n#### plugins\n\n配置使用的插件\n\n#### pluginsConfig\n\n配置插件的属性\n\n### SUMMARY.md\n\n这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：\n\n```\n# Summary\n\n* [Introduction](README.md)\n* [Part I](part1/README.md)\n    * [Writing is nice](part1/writing.md)\n    * [GitBook is nice](part1/gitbook.md)\n* [Part II](part2/README.md)\n    * [We love feedback](part2/feedback_please.md)\n    * [Better tools for authors](part2/better_tools.md)\n```\n\n这个配置对应的目录结构如下所示:\n\n![img](https://blankj.com/gitbook/gitbook/README/summary.png)\n\n我们通过使用 `标题` 或者 `水平分割线` 将 GitBook 分为几个不同的部分，如下所示：\n\n```\n# Summary\n\n### Part I\n\n* [Introduction](README.md)\n* [Writing is nice](part1/writing.md)\n* [GitBook is nice](part1/gitbook.md)\n\n### Part II\n\n* [We love feedback](part2/feedback_please.md)\n* [Better tools for authors](part2/better_tools.md)\n\n---\n\n* [Last part without title](part3/title.md)\n```\n\n这个配置对应的目录结构如下所示:\n\n![img](https://blankj.com/gitbook/gitbook/README/summary_part.png)\n\n## 插件\n\nGitBook 有 [插件官网](https://plugins.gitbook.com/)，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 `-`，比如：\n\n```\n\"plugins\": [\n    \"-search\"\n]\n```\n\n如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 [plugin-github](https://plugins.gitbook.com/plugin/github)，我们在 book.json 中加入配置如下即可：\n\n```\n{\n    \"plugins\": [ \"github\" ],\n    \"pluginsConfig\": {\n        \"github\": {\n            \"url\": \"https://github.com/your/repo\"\n        }\n    }\n}\n```\n\n然后在终端输入 `gitbook install ./` 即可。","slug":"随心记/GitBook学习/1-2 使用教程","published":1,"date":"2020-08-02T23:42:42.770Z","updated":"2020-08-02T23:42:59.750Z","_id":"ckdcza4mx004nrkam9p1j47wh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"GitBook-简介\"><a href=\"#GitBook-简介\" class=\"headerlink\" title=\"GitBook 简介\"></a>GitBook 简介</h2><p><a href=\"https://www.gitbook.com/\">GitBook 官网</a></p>\n<p><a href=\"https://github.com/GitbookIO/gitbook\">GitBook 文档</a></p>\n<h2 id=\"GitBook-准备工作\"><a href=\"#GitBook-准备工作\" class=\"headerlink\" title=\"GitBook 准备工作\"></a>GitBook 准备工作</h2><h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>GitBook 是一个基于 Node.js 的命令行工具，下载安装 <a href=\"https://nodejs.org/en\">Node.js</a>，安装完成之后，你可以使用下面的命令来检验是否安装成功。</p>\n<pre><code>$ node -v\nv7.7.1</code></pre>\n<h3 id=\"安装-GitBook\"><a href=\"#安装-GitBook\" class=\"headerlink\" title=\"安装 GitBook\"></a>安装 GitBook</h3><p>输入下面的命令来安装 GitBook。</p>\n<pre><code>$ npm install gitbook-cli -g</code></pre>\n<p>安装完成之后，你可以使用下面的命令来检验是否安装成功。</p>\n<pre><code>$ gitbook -V\nCLI version: 2.3.2\nGitBook version: 3.2.3</code></pre>\n<p>更多详情请参照 <a href=\"https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md\">GitBook 安装文档</a> 来安装 GitBook。</p>\n<h3 id=\"安装-GitBook-编辑器\"><a href=\"#安装-GitBook-编辑器\" class=\"headerlink\" title=\"安装 GitBook 编辑器\"></a>安装 GitBook 编辑器</h3><p>去 <a href=\"https://www.gitbook.com/\">GitBook 官网</a> 下载 GitBook 编辑器；如果是 Mac 用户且安装过 <code>brew cask</code> 的话可以使用 <code>brew cask install gitbook-editor</code> 命令行来安装 GitBook 编辑器。</p>\n<h2 id=\"先睹为快\"><a href=\"#先睹为快\" class=\"headerlink\" title=\"先睹为快\"></a>先睹为快</h2><p>GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。</p>\n<pre><code>$ gitbook init\nwarn: no summary file in this book\ninfo: create README.md\ninfo: create SUMMARY.md\ninfo: initialization is finished</code></pre>\n<p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：</p>\n<pre><code># Summary\n\n* [Introduction](README.md)</code></pre>\n<p>接下来，我们输入 <code>$ gitbook serve</code> 命令，然后在浏览器地址栏中输入 <code>http://localhost:4000</code> 便可预览书籍。</p>\n<p>效果如下所示：</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/default_book.png\" alt=\"img\"></p>\n<p>运行该命令后会在书籍的文件夹中生成一个 <code>_book</code> 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。</p>\n<pre><code>gitbook build</code></pre>\n<p>下面我们来详细介绍下 GitBook 目录结构及相关文件。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>GitBook 基本的目录结构如下所示：</p>\n<pre><code>.\n├── book.json\n├── README.md\n├── SUMMARY.md\n├── chapter-1/\n|   ├── README.md\n|   └── something.md\n└── chapter-2/\n    ├── README.md\n    └── something.md</code></pre>\n<p>下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。</p>\n<h3 id=\"book-json\"><a href=\"#book-json\" class=\"headerlink\" title=\"book.json\"></a>book.json</h3><p>该文件主要用来存放配置信息，我先放出我的配置文件。</p>\n<pre class=\" language-json\"><code class=\"language-json\">&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Blankj's Glory\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Blankj\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"select * from learn\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"language\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zh-hans\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"gitbook\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3.2.3\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">\"website\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/styles/website.css\"</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"structure\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">\"readme\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"README.md\"</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"links\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">\"sidebar\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"我的狗窝\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://blankj.com\"</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"-sharing\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"splitter\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"expandable-chapters-small\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"anchors\"</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token string\">\"github\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"github-buttons\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"donate\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"sharing-plus\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"anchor-navigation-ex\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"favicon\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"pluginsConfig\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token property\">\"github\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/Blankj\"</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"github-buttons\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"buttons\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token property\">\"user\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Blankj\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"repo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"glory\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"star\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"small\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n                &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">]</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"donate\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"alipay\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://blankj.com/gitbook/source/images/donate.png\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"button\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"赞赏\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"alipayText\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\" \"</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"sharing\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"douban\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"facebook\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"google\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"hatenaBookmark\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"instapaper\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"line\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"linkedin\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"messenger\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"pocket\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"qq\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"qzone\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"stumbleupon\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"twitter\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"viber\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"vk\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"weibo\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"whatsapp\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"all\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n                <span class=\"token string\">\"google\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"facebook\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"weibo\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"twitter\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"qq\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"qzone\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"linkedin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pocket\"</span>\n            <span class=\"token punctuation\">]</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"anchor-navigation-ex\"</span><span class=\"token operator\">:</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"showLevel\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        <span class=\"token property\">\"favicon\"</span><span class=\"token operator\">:</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">\"shortcut\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./source/images/favicon-32x32.webp\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"bookmark\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./source/images/favicon-32x32.webp\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token property\">\"appleTouch\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./source/images/apple-touch-icon.webp\"</span>\n        &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。</p>\n<h4 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h4><p>本书标题</p>\n<h4 id=\"author\"><a href=\"#author\" class=\"headerlink\" title=\"author\"></a>author</h4><p>本书作者</p>\n<h4 id=\"description\"><a href=\"#description\" class=\"headerlink\" title=\"description\"></a>description</h4><p>本书描述</p>\n<h4 id=\"language\"><a href=\"#language\" class=\"headerlink\" title=\"language\"></a>language</h4><p>本书语言，中文设置 “zh-hans” 即可</p>\n<h4 id=\"gitbook\"><a href=\"#gitbook\" class=\"headerlink\" title=\"gitbook\"></a>gitbook</h4><p>指定使用的 GitBook 版本</p>\n<h4 id=\"styles\"><a href=\"#styles\" class=\"headerlink\" title=\"styles\"></a>styles</h4><p>自定义页面样式</p>\n<h4 id=\"structure\"><a href=\"#structure\" class=\"headerlink\" title=\"structure\"></a>structure</h4><p>指定 Readme、Summary、Glossary 和 Languages 对应的文件名</p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><p>在左侧导航栏添加链接信息</p>\n<h4 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h4><p>配置使用的插件</p>\n<h4 id=\"pluginsConfig\"><a href=\"#pluginsConfig\" class=\"headerlink\" title=\"pluginsConfig\"></a>pluginsConfig</h4><p>配置插件的属性</p>\n<h3 id=\"SUMMARY-md\"><a href=\"#SUMMARY-md\" class=\"headerlink\" title=\"SUMMARY.md\"></a>SUMMARY.md</h3><p>这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：</p>\n<pre><code># Summary\n\n* [Introduction](README.md)\n* [Part I](part1/README.md)\n    * [Writing is nice](part1/writing.md)\n    * [GitBook is nice](part1/gitbook.md)\n* [Part II](part2/README.md)\n    * [We love feedback](part2/feedback_please.md)\n    * [Better tools for authors](part2/better_tools.md)</code></pre>\n<p>这个配置对应的目录结构如下所示:</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/summary.png\" alt=\"img\"></p>\n<p>我们通过使用 <code>标题</code> 或者 <code>水平分割线</code> 将 GitBook 分为几个不同的部分，如下所示：</p>\n<pre><code># Summary\n\n### Part I\n\n* [Introduction](README.md)\n* [Writing is nice](part1/writing.md)\n* [GitBook is nice](part1/gitbook.md)\n\n### Part II\n\n* [We love feedback](part2/feedback_please.md)\n* [Better tools for authors](part2/better_tools.md)\n\n---\n\n* [Last part without title](part3/title.md)</code></pre>\n<p>这个配置对应的目录结构如下所示:</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/summary_part.png\" alt=\"img\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>GitBook 有 <a href=\"https://plugins.gitbook.com/\">插件官网</a>，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 <code>-</code>，比如：</p>\n<pre><code>\"plugins\": [\n    \"-search\"\n]</code></pre>\n<p>如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 <a href=\"https://plugins.gitbook.com/plugin/github\">plugin-github</a>，我们在 book.json 中加入配置如下即可：</p>\n<pre><code>&amp;#123;\n    \"plugins\": [ \"github\" ],\n    \"pluginsConfig\": &amp;#123;\n        \"github\": &amp;#123;\n            \"url\": \"https://github.com/your/repo\"\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<p>然后在终端输入 <code>gitbook install ./</code> 即可。</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"GitBook-简介\"><a href=\"#GitBook-简介\" class=\"headerlink\" title=\"GitBook 简介\"></a>GitBook 简介</h2><p><a href=\"https://www.gitbook.com/\">GitBook 官网</a></p>\n<p><a href=\"https://github.com/GitbookIO/gitbook\">GitBook 文档</a></p>\n<h2 id=\"GitBook-准备工作\"><a href=\"#GitBook-准备工作\" class=\"headerlink\" title=\"GitBook 准备工作\"></a>GitBook 准备工作</h2><h3 id=\"安装-Node-js\"><a href=\"#安装-Node-js\" class=\"headerlink\" title=\"安装 Node.js\"></a>安装 Node.js</h3><p>GitBook 是一个基于 Node.js 的命令行工具，下载安装 <a href=\"https://nodejs.org/en\">Node.js</a>，安装完成之后，你可以使用下面的命令来检验是否安装成功。</p>\n<pre><code>$ node -v\nv7.7.1</code></pre>\n<h3 id=\"安装-GitBook\"><a href=\"#安装-GitBook\" class=\"headerlink\" title=\"安装 GitBook\"></a>安装 GitBook</h3><p>输入下面的命令来安装 GitBook。</p>\n<pre><code>$ npm install gitbook-cli -g</code></pre>\n<p>安装完成之后，你可以使用下面的命令来检验是否安装成功。</p>\n<pre><code>$ gitbook -V\nCLI version: 2.3.2\nGitBook version: 3.2.3</code></pre>\n<p>更多详情请参照 <a href=\"https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md\">GitBook 安装文档</a> 来安装 GitBook。</p>\n<h3 id=\"安装-GitBook-编辑器\"><a href=\"#安装-GitBook-编辑器\" class=\"headerlink\" title=\"安装 GitBook 编辑器\"></a>安装 GitBook 编辑器</h3><p>去 <a href=\"https://www.gitbook.com/\">GitBook 官网</a> 下载 GitBook 编辑器；如果是 Mac 用户且安装过 <code>brew cask</code> 的话可以使用 <code>brew cask install gitbook-editor</code> 命令行来安装 GitBook 编辑器。</p>\n<h2 id=\"先睹为快\"><a href=\"#先睹为快\" class=\"headerlink\" title=\"先睹为快\"></a>先睹为快</h2><p>GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。</p>\n<pre><code>$ gitbook init\nwarn: no summary file in this book\ninfo: create README.md\ninfo: create SUMMARY.md\ninfo: initialization is finished</code></pre>\n<p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：</p>\n<pre><code># Summary\n\n* [Introduction](README.md)</code></pre>\n<p>接下来，我们输入 <code>$ gitbook serve</code> 命令，然后在浏览器地址栏中输入 <code>http://localhost:4000</code> 便可预览书籍。</p>\n<p>效果如下所示：</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/default_book.png\" alt=\"img\"></p>\n<p>运行该命令后会在书籍的文件夹中生成一个 <code>_book</code> 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。</p>\n<pre><code>gitbook build</code></pre>\n<p>下面我们来详细介绍下 GitBook 目录结构及相关文件。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>GitBook 基本的目录结构如下所示：</p>\n<pre><code>.\n├── book.json\n├── README.md\n├── SUMMARY.md\n├── chapter-1/\n|   ├── README.md\n|   └── something.md\n└── chapter-2/\n    ├── README.md\n    └── something.md</code></pre>\n<p>下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。</p>\n<h3 id=\"book-json\"><a href=\"#book-json\" class=\"headerlink\" title=\"book.json\"></a>book.json</h3><p>该文件主要用来存放配置信息，我先放出我的配置文件。</p>\n<pre><code class=\"json\">&amp;#123;\n    &quot;title&quot;: &quot;Blankj&#39;s Glory&quot;,\n    &quot;author&quot;: &quot;Blankj&quot;,\n    &quot;description&quot;: &quot;select * from learn&quot;,\n    &quot;language&quot;: &quot;zh-hans&quot;,\n    &quot;gitbook&quot;: &quot;3.2.3&quot;,\n    &quot;styles&quot;: &amp;#123;\n        &quot;website&quot;: &quot;/styles/website.css&quot;\n    &amp;#125;,\n    &quot;structure&quot;: &amp;#123;\n        &quot;readme&quot;: &quot;README.md&quot;\n    &amp;#125;,\n    &quot;links&quot;: &amp;#123;\n        &quot;sidebar&quot;: &amp;#123;\n            &quot;我的狗窝&quot;: &quot;https://blankj.com&quot;\n        &amp;#125;\n    &amp;#125;,\n    &quot;plugins&quot;: [\n        &quot;-sharing&quot;,\n        &quot;splitter&quot;,\n        &quot;expandable-chapters-small&quot;,\n        &quot;anchors&quot;,\n\n        &quot;github&quot;,\n        &quot;github-buttons&quot;,\n        &quot;donate&quot;,\n        &quot;sharing-plus&quot;,\n        &quot;anchor-navigation-ex&quot;,\n        &quot;favicon&quot;\n    ],\n    &quot;pluginsConfig&quot;: &amp;#123;\n        &quot;github&quot;: &amp;#123;\n            &quot;url&quot;: &quot;https://github.com/Blankj&quot;\n        &amp;#125;,\n        &quot;github-buttons&quot;: &amp;#123;\n            &quot;buttons&quot;: [&amp;#123;\n                &quot;user&quot;: &quot;Blankj&quot;,\n                &quot;repo&quot;: &quot;glory&quot;,\n                &quot;type&quot;: &quot;star&quot;,\n                &quot;size&quot;: &quot;small&quot;,\n                &quot;count&quot;: true\n                &amp;#125;\n            ]\n        &amp;#125;,\n        &quot;donate&quot;: &amp;#123;\n            &quot;alipay&quot;: &quot;https://blankj.com/gitbook/source/images/donate.png&quot;,\n            &quot;title&quot;: &quot;&quot;,\n            &quot;button&quot;: &quot;赞赏&quot;,\n            &quot;alipayText&quot;: &quot; &quot;\n        &amp;#125;,\n        &quot;sharing&quot;: &amp;#123;\n            &quot;douban&quot;: false,\n            &quot;facebook&quot;: false,\n            &quot;google&quot;: false,\n            &quot;hatenaBookmark&quot;: false,\n            &quot;instapaper&quot;: false,\n            &quot;line&quot;: false,\n            &quot;linkedin&quot;: false,\n            &quot;messenger&quot;: false,\n            &quot;pocket&quot;: false,\n            &quot;qq&quot;: false,\n            &quot;qzone&quot;: false,\n            &quot;stumbleupon&quot;: false,\n            &quot;twitter&quot;: false,\n            &quot;viber&quot;: false,\n            &quot;vk&quot;: false,\n            &quot;weibo&quot;: false,\n            &quot;whatsapp&quot;: false,\n            &quot;all&quot;: [\n                &quot;google&quot;, &quot;facebook&quot;, &quot;weibo&quot;, &quot;twitter&quot;,\n                &quot;qq&quot;, &quot;qzone&quot;, &quot;linkedin&quot;, &quot;pocket&quot;\n            ]\n        &amp;#125;,\n        &quot;anchor-navigation-ex&quot;: &amp;#123;\n            &quot;showLevel&quot;: false\n        &amp;#125;,\n        &quot;favicon&quot;:&amp;#123;\n            &quot;shortcut&quot;: &quot;./source/images/favicon-32x32.webp&quot;,\n            &quot;bookmark&quot;: &quot;./source/images/favicon-32x32.webp&quot;,\n            &quot;appleTouch&quot;: &quot;./source/images/apple-touch-icon.webp&quot;\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<p>相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。</p>\n<h4 id=\"title\"><a href=\"#title\" class=\"headerlink\" title=\"title\"></a>title</h4><p>本书标题</p>\n<h4 id=\"author\"><a href=\"#author\" class=\"headerlink\" title=\"author\"></a>author</h4><p>本书作者</p>\n<h4 id=\"description\"><a href=\"#description\" class=\"headerlink\" title=\"description\"></a>description</h4><p>本书描述</p>\n<h4 id=\"language\"><a href=\"#language\" class=\"headerlink\" title=\"language\"></a>language</h4><p>本书语言，中文设置 “zh-hans” 即可</p>\n<h4 id=\"gitbook\"><a href=\"#gitbook\" class=\"headerlink\" title=\"gitbook\"></a>gitbook</h4><p>指定使用的 GitBook 版本</p>\n<h4 id=\"styles\"><a href=\"#styles\" class=\"headerlink\" title=\"styles\"></a>styles</h4><p>自定义页面样式</p>\n<h4 id=\"structure\"><a href=\"#structure\" class=\"headerlink\" title=\"structure\"></a>structure</h4><p>指定 Readme、Summary、Glossary 和 Languages 对应的文件名</p>\n<h4 id=\"links\"><a href=\"#links\" class=\"headerlink\" title=\"links\"></a>links</h4><p>在左侧导航栏添加链接信息</p>\n<h4 id=\"plugins\"><a href=\"#plugins\" class=\"headerlink\" title=\"plugins\"></a>plugins</h4><p>配置使用的插件</p>\n<h4 id=\"pluginsConfig\"><a href=\"#pluginsConfig\" class=\"headerlink\" title=\"pluginsConfig\"></a>pluginsConfig</h4><p>配置插件的属性</p>\n<h3 id=\"SUMMARY-md\"><a href=\"#SUMMARY-md\" class=\"headerlink\" title=\"SUMMARY.md\"></a>SUMMARY.md</h3><p>这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：</p>\n<pre><code># Summary\n\n* [Introduction](README.md)\n* [Part I](part1/README.md)\n    * [Writing is nice](part1/writing.md)\n    * [GitBook is nice](part1/gitbook.md)\n* [Part II](part2/README.md)\n    * [We love feedback](part2/feedback_please.md)\n    * [Better tools for authors](part2/better_tools.md)</code></pre>\n<p>这个配置对应的目录结构如下所示:</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/summary.png\" alt=\"img\"></p>\n<p>我们通过使用 <code>标题</code> 或者 <code>水平分割线</code> 将 GitBook 分为几个不同的部分，如下所示：</p>\n<pre><code># Summary\n\n### Part I\n\n* [Introduction](README.md)\n* [Writing is nice](part1/writing.md)\n* [GitBook is nice](part1/gitbook.md)\n\n### Part II\n\n* [We love feedback](part2/feedback_please.md)\n* [Better tools for authors](part2/better_tools.md)\n\n---\n\n* [Last part without title](part3/title.md)</code></pre>\n<p>这个配置对应的目录结构如下所示:</p>\n<p><img src=\"https://blankj.com/gitbook/gitbook/README/summary_part.png\" alt=\"img\"></p>\n<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2><p>GitBook 有 <a href=\"https://plugins.gitbook.com/\">插件官网</a>，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 <code>-</code>，比如：</p>\n<pre><code>&quot;plugins&quot;: [\n    &quot;-search&quot;\n]</code></pre>\n<p>如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 <a href=\"https://plugins.gitbook.com/plugin/github\">plugin-github</a>，我们在 book.json 中加入配置如下即可：</p>\n<pre><code>&amp;#123;\n    &quot;plugins&quot;: [ &quot;github&quot; ],\n    &quot;pluginsConfig&quot;: &amp;#123;\n        &quot;github&quot;: &amp;#123;\n            &quot;url&quot;: &quot;https://github.com/your/repo&quot;\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<p>然后在终端输入 <code>gitbook install ./</code> 即可。</p>\n"},{"title":"2-1 配置主题","auther":"ku jin","_content":"# hexo-theme-matery\n\n> 这是一个采用 `Material Design` 和响应式设计的 Hexo 博客主题。\n\n![image-20200801181325409](images/2-1%20%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/image-20200801181325409.png)\n\n## 特性\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。\n- 支持 [DaoVoice](http://www.daovoice.io/)、[Tidio](https://www.tidio.com/) 在线聊天功能。\n\n## 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的 `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n\n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```hexo\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n### 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n### 新建留言板 contact 页（可选的）\n\n`contact` 页是用来展示**留言板**信息的页面，如果在你的博客 `source` 目录下还没有 `contact/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"contact\"\n```\n\n编辑你刚刚新建的页面文件 `/source/contact/index.md`，至少需要以下内容：\n\n```\n---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n```\n\n> **注**：本留言板功能依赖于第三方评论系统，请**激活**你的评论系统才有效果。并且在主题的 `_config.yml` 文件中，第 `19` 至 `21` 行的“**菜单**”配置，取消关于留言板的注释即可。\n\n### 新建友情链接 friends 页（可选的）\n\n`friends` 页是用来展示**友情链接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"https://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n### 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n编辑你刚刚新建的页面文件 `/source/404.md`，至少需要以下内容：\n\n```\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n### 菜单导航配置\n\n#### 配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) 2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找\n\n```\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n```\n\n#### 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作\n1.在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)\n2.在`children`下创建二级菜单的 名称name,路径url和图标icon.\n3.注意每个二级菜单模块前要加 `-`.\n4.注意缩进格式\n\n```\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n### 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n### 添加 [DaoVoice](http://www.daovoice.io/) 在线聊天功能（可选的）\n\n前往 [DaoVoice](http://www.daovoice.io/) 官网注册并且获取 `app_id`，并将 `app_id` 填入主题的 `_config.yml` 文件中。\n\n### 添加 [Tidio](https://www.tidio.com/) 在线聊天功能（可选的）\n\n前往 [Tidio](https://www.tidio.com/) 官网注册并且获取 `Public Key`，并将 `Public Key` 填入主题的 `_config.yml` 文件中。\n\n### 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```\n<% if (theme.socialLink.github) { %>\n    <a href=\"<%= theme.socialLink.github %>\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n        <i class=\"fab fa-github\"></i>\n    </a>\n<% } %>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fab fa-facebook`\n- Twitter: `fab fa-twitter`\n- Google-plus: `fab fa-google-plus`\n- Linkedin: `fab fa-linkedin`\n- Tumblr: `fab fa-tumblr`\n- Medium: `fab fa-medium`\n- Slack: `fab fa-slack`\n- Sina Weibo: `fab fa-weibo`\n- Wechat: `fab fa-weixin`\n- QQ: `fab fa-qq`\n- Zhihu: `fab fa-zhihu`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `5.11.0`。\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n### 配置音乐播放器（可选的）\n\n要支持音乐播放，在主题的 `_config.yml` 配置文件中激活music配置即可：\n\n```\n# 是否在首页显示音乐\nmusic:\n  enable: true\n  title:     \t    # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠\n```\n\n> `server`可选`netease`（网易云音乐），`tencent`（QQ音乐），`kugou`（酷狗音乐），`xiami`（虾米音乐），\n>\n> `baidu`（百度音乐）。\n>\n> `type`可选`song`（歌曲），`playlist`（歌单），`album`（专辑），`search`（搜索关键字），`artist`（歌手）\n>\n> ```\n> id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id\n> ```\n>\n> 即为这串数字。\n\n","source":"_posts/随心记/GitHub学习/创建个人博客/Hexo/2-1 配置主题.md","raw":"---\ntitle: 2-1 配置主题 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - GitHub学习\ntags: # 标签=目标文件夹\n - 2-1 配置主题 \n---\n# hexo-theme-matery\n\n> 这是一个采用 `Material Design` 和响应式设计的 Hexo 博客主题。\n\n![image-20200801181325409](images/2-1%20%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/image-20200801181325409.png)\n\n## 特性\n\n- 简单漂亮，文章内容美观易读\n- [Material Design](https://material.io/) 设计\n- 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现\n- 首页轮播文章及每天动态切换 `Banner` 图片\n- 瀑布流式的博客文章列表（文章无特色图片时会有 `24` 张漂亮的图片代替）\n- 时间轴式的归档页\n- **词云**的标签页和**雷达图**的分类页\n- 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）\n- 可自定义的数据的友情链接页面\n- 支持文章置顶和文章打赏\n- 支持 `MathJax`\n- `TOC` 目录\n- 可设置复制文章内容时追加版权信息\n- 可设置阅读文章时做密码验证\n- [Gitalk](https://gitalk.github.io/)、[Gitment](https://imsun.github.io/gitment/)、[Valine](https://valine.js.org/) 和 [Disqus](https://disqus.com/) 评论模块（推荐使用 `Gitalk`）\n- 集成了[不蒜子统计](http://busuanzi.ibruce.info/)、谷歌分析（`Google Analytics`）和文章字数统计等功能\n- 支持在首页的音乐播放和视频播放功能\n- 支持`emoji`表情，用`markdown emoji`语法书写直接生成对应的能**跳跃**的表情。\n- 支持 [DaoVoice](http://www.daovoice.io/)、[Tidio](https://www.tidio.com/) 在线聊天功能。\n\n## 下载\n\n当你看到这里的时候，应该已经有一个自己的 [Hexo](https://hexo.io/zh-cn/) 博客了。如果还没有的话，不妨使用 Hexo 和 [Markdown](https://www.appinn.com/markdown/) 来写博客和文章。\n\n点击 [这里](https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master) 下载 `master` 分支的最新稳定版的代码，解压缩后，将 `hexo-theme-matery` 的文件夹复制到你 Hexo 的 `themes` 文件夹中即可。\n\n当然你也可以在你的 `themes` 文件夹下使用 `Git clone` 命令来下载:\n\n```\ngit clone https://github.com/blinkfox/hexo-theme-matery.git\n```\n\n## 配置\n\n### 切换主题\n\n修改 Hexo 根目录下的 `_config.yml` 的 `theme` 的值：`theme: hexo-theme-matery`\n\n#### `_config.yml` 文件的其它修改建议:\n\n- 请修改 `_config.yml` 的 `url` 的值为你的网站主 `URL`（如：`http://xxx.github.io`）。\n- 建议修改两个 `per_page` 的分页条数值为 `6` 的倍数，如：`12`、`18` 等，这样文章列表在各个屏幕下都能较好的显示。\n- 如果你是中文用户，则建议修改 `language` 的值为 `zh-CN`。\n\n### 新建分类 categories 页\n\n`categories` 页是用来展示所有分类的页面，如果在你的博客 `source` 目录下还没有 `categories/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```hexo\nhexo new page \"categories\"\n```\n\n编辑你刚刚新建的页面文件 `/source/categories/index.md`，至少需要以下内容：\n\n```\n---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---\n```\n\n### 新建标签 tags 页\n\n`tags` 页是用来展示所有标签的页面，如果在你的博客 `source` 目录下还没有 `tags/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"tags\"\n```\n\n编辑你刚刚新建的页面文件 `/source/tags/index.md`，至少需要以下内容：\n\n```\n---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---\n```\n\n### 新建关于我 about 页\n\n`about` 页是用来展示**关于我和我的博客**信息的页面，如果在你的博客 `source` 目录下还没有 `about/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"about\"\n```\n\n编辑你刚刚新建的页面文件 `/source/about/index.md`，至少需要以下内容：\n\n```\n---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n```\n\n### 新建留言板 contact 页（可选的）\n\n`contact` 页是用来展示**留言板**信息的页面，如果在你的博客 `source` 目录下还没有 `contact/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"contact\"\n```\n\n编辑你刚刚新建的页面文件 `/source/contact/index.md`，至少需要以下内容：\n\n```\n---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---\n```\n\n> **注**：本留言板功能依赖于第三方评论系统，请**激活**你的评论系统才有效果。并且在主题的 `_config.yml` 文件中，第 `19` 至 `21` 行的“**菜单**”配置，取消关于留言板的注释即可。\n\n### 新建友情链接 friends 页（可选的）\n\n`friends` 页是用来展示**友情链接**信息的页面，如果在你的博客 `source` 目录下还没有 `friends/index.md` 文件，那么你就需要新建一个，命令如下：\n\n```\nhexo new page \"friends\"\n```\n\n编辑你刚刚新建的页面文件 `/source/friends/index.md`，至少需要以下内容：\n\n```\n---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---\n```\n\n同时，在你的博客 `source` 目录下新建 `_data` 目录，在 `_data` 目录中新建 `friends.json` 文件，文件内容如下所示：\n\n```json\n[{\n    \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\",\n    \"name\": \"码酱\",\n    \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\",\n    \"url\": \"http://luokangyuan.com/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\",\n    \"name\": \"闪烁之狐\",\n    \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\",\n    \"url\": \"https://blinkfox.github.io/\",\n    \"title\": \"前去学习\"\n}, {\n    \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\",\n    \"name\": \"ja_rome\",\n    \"introduction\": \"平凡的脚步也可以走出伟大的行程\",\n    \"url\": \"https://me.csdn.net/jlh912008548\",\n    \"title\": \"前去学习\"\n}]\n```\n\n### 新建 404 页\n\n如果在你的博客 `source` 目录下还没有 `404.md` 文件，那么你就需要新建一个\n\n编辑你刚刚新建的页面文件 `/source/404.md`，至少需要以下内容：\n\n```\n---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---\n```\n\n### 菜单导航配置\n\n#### 配置基本菜单导航的名称、路径url和图标icon.\n\n1.菜单导航名称可以是中文也可以是英文(如：`Index`或`主页`) 2.图标icon 可以在[Font Awesome](https://fontawesome.com/icons) 中查找\n\n```\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n```\n\n#### 二级菜单配置方法\n\n如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作\n1.在需要添加二级菜单的一级菜单下添加`children`关键字(如:`About`菜单下添加`children`)\n2.在`children`下创建二级菜单的 名称name,路径url和图标icon.\n3.注意每个二级菜单模块前要加 `-`.\n4.注意缩进格式\n\n```\nmenu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image\n```\n\n执行 `hexo clean && hexo g` 重新生成博客文件，然后就可以在文章中对应位置看到你用`emoji`语法写的表情了。\n\n### 代码高亮\n\n由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 [hexo-prism-plugin](https://github.com/ele828/hexo-prism-plugin) 的 Hexo 插件来做代码高亮，安装命令如下：\n\n```\nnpm i -S hexo-prism-plugin\n```\n\n然后，修改 Hexo 根目录下 `_config.yml` 文件中 `highlight.enable` 的值为 `false`，并新增 `prism` 插件相关的配置，主要配置如下：\n\n```\nhighlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:\n```\n\n### 搜索\n\n本主题中还使用到了 [hexo-generator-search](https://github.com/wzpan/hexo-generator-search) 的 Hexo 插件来做内容搜索，安装命令如下：\n\n```\nnpm install hexo-generator-search --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```\nsearch:\n  path: search.xml\n  field: post\n```\n\n### 中文链接转拼音（建议安装）\n\n如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 `SEO`，且 `gitment` 评论对中文链接也不支持。我们可以用 [hexo-permalink-pinyin](https://github.com/viko16/hexo-permalink-pinyin) Hexo 插件使在生成文章时生成中文拼音的永久链接。\n\n安装命令如下：\n\n```\nnpm i hexo-permalink-pinyin --save\n```\n\n在 Hexo 根目录下的 `_config.yml` 文件中，新增以下的配置项：\n\n```\npermalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'\n```\n\n> **注**：除了此插件外，[hexo-abbrlink](https://github.com/rozbo/hexo-abbrlink) 插件也可以生成非中文的链接。\n\n### 文章字数统计插件（建议安装）\n\n如果你想要在文章中显示文章字数、阅读时长信息，可以安装 [hexo-wordcount](https://github.com/willin/hexo-wordcount)插件。\n\n安装命令如下：\n\n```\nnpm i --save hexo-wordcount\n```\n\n然后只需在本主题下的 `_config.yml` 文件中，将各个文章字数相关的配置激活即可：\n\n```\npostInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.\n```\n\n### 添加 [DaoVoice](http://www.daovoice.io/) 在线聊天功能（可选的）\n\n前往 [DaoVoice](http://www.daovoice.io/) 官网注册并且获取 `app_id`，并将 `app_id` 填入主题的 `_config.yml` 文件中。\n\n### 添加 [Tidio](https://www.tidio.com/) 在线聊天功能（可选的）\n\n前往 [Tidio](https://www.tidio.com/) 官网注册并且获取 `Public Key`，并将 `Public Key` 填入主题的 `_config.yml` 文件中。\n\n### 修改页脚\n\n页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 `/layout/_partial/footer.ejs` 文件中，包括站点、使用的主题、访问量等。\n\n### 修改社交链接\n\n在主题的 `_config.yml` 文件中，默认支持 `QQ`、`GitHub` 和邮箱等的配置，你可以在主题文件的 `/layout/_partial/social-link.ejs` 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：\n\n```\n<% if (theme.socialLink.github) { %>\n    <a href=\"<%= theme.socialLink.github %>\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\">\n        <i class=\"fab fa-github\"></i>\n    </a>\n<% } %>\n```\n\n其中，社交图标（如：`fa-github`）你可以在 [Font Awesome](https://fontawesome.com/icons) 中搜索找到。以下是常用社交图标的标识，供你参考：\n\n- Facebook: `fab fa-facebook`\n- Twitter: `fab fa-twitter`\n- Google-plus: `fab fa-google-plus`\n- Linkedin: `fab fa-linkedin`\n- Tumblr: `fab fa-tumblr`\n- Medium: `fab fa-medium`\n- Slack: `fab fa-slack`\n- Sina Weibo: `fab fa-weibo`\n- Wechat: `fab fa-weixin`\n- QQ: `fab fa-qq`\n- Zhihu: `fab fa-zhihu`\n\n> **注意**: 本主题中使用的 `Font Awesome` 版本为 `5.11.0`。\n\n### 修改打赏的二维码图片\n\n在主题文件的 `source/medias/reward` 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。\n\n### 配置音乐播放器（可选的）\n\n要支持音乐播放，在主题的 `_config.yml` 配置文件中激活music配置即可：\n\n```\n# 是否在首页显示音乐\nmusic:\n  enable: true\n  title:     \t    # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠\n```\n\n> `server`可选`netease`（网易云音乐），`tencent`（QQ音乐），`kugou`（酷狗音乐），`xiami`（虾米音乐），\n>\n> `baidu`（百度音乐）。\n>\n> `type`可选`song`（歌曲），`playlist`（歌单），`album`（专辑），`search`（搜索关键字），`artist`（歌手）\n>\n> ```\n> id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id\n> ```\n>\n> 即为这串数字。\n\n","slug":"随心记/GitHub学习/创建个人博客/Hexo/2-1 配置主题","published":1,"date":"2020-08-02T23:42:42.813Z","updated":"2020-08-02T23:42:59.754Z","_id":"ckdcza4nc0058rkamfxw0elpi","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"hexo-theme-matery\"><a href=\"#hexo-theme-matery\" class=\"headerlink\" title=\"hexo-theme-matery\"></a>hexo-theme-matery</h1><blockquote>\n<p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>\n</blockquote>\n<p><img src=\"images/2-1%20%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/image-20200801181325409.png\" alt=\"image-20200801181325409\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\">Gitment</a>、<a href=\"https://valine.js.org/\">Valine</a> 和 <a href=\"https://disqus.com/\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n<li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li>\n<li>支持 <a href=\"http://www.daovoice.io/\">DaoVoice</a>、<a href=\"https://www.tidio.com/\">Tidio</a> 在线聊天功能。</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre class=\" language-hexo\"><code class=\"language-hexo\">hexo new page \"categories\"</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---</code></pre>\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page \"tags\"</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: \"tags\"\nlayout: \"tags\"\n---</code></pre>\n<h3 id=\"新建关于我-about-页\"><a href=\"#新建关于我-about-页\" class=\"headerlink\" title=\"新建关于我 about 页\"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page \"about\"</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---</code></pre>\n<h3 id=\"新建留言板-contact-页（可选的）\"><a href=\"#新建留言板-contact-页（可选的）\" class=\"headerlink\" title=\"新建留言板 contact 页（可选的）\"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page \"contact\"</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: \"contact\"\nlayout: \"contact\"\n---</code></pre>\n<blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p>\n</blockquote>\n<h3 id=\"新建友情链接-friends-页（可选的）\"><a href=\"#新建友情链接-friends-页（可选的）\" class=\"headerlink\" title=\"新建友情链接 friends 页（可选的）\"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page \"friends\"</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---</code></pre>\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre class=\" language-json\"><code class=\"language-json\"><span class=\"token punctuation\">[</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/1_qq_27922023.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"码酱\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"我不是大佬，只是在追寻大佬的脚步\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://luokangyuan.com/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/4027734.jpeg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"闪烁之狐\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://blinkfox.github.io/\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">\"avatar\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://image.luokangyuan.com/avatar.jpg\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ja_rome\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"introduction\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"平凡的脚步也可以走出伟大的行程\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://me.csdn.net/jlh912008548\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"前去学习\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span></code></pre>\n<h3 id=\"新建-404-页\"><a href=\"#新建-404-页\" class=\"headerlink\" title=\"新建 404 页\"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---</code></pre>\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><h4 id=\"配置基本菜单导航的名称、路径url和图标icon\"><a href=\"#配置基本菜单导航的名称、路径url和图标icon\" class=\"headerlink\" title=\"配置基本菜单导航的名称、路径url和图标icon.\"></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中查找</p>\n<pre><code>menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book</code></pre>\n<h4 id=\"二级菜单配置方法\"><a href=\"#二级菜单配置方法\" class=\"headerlink\" title=\"二级菜单配置方法\"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p>\n<pre><code>menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre><code>npm i -S hexo-prism-plugin</code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre><code>highlight:\n  enable: false\n\nprism_plugin:\n  mode: 'preprocess'    # realtime/preprocess\n  theme: 'tomorrow'\n  line_number: false    # default false\n  custom_css:</code></pre>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre><code>npm install hexo-generator-search --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code>search:\n  path: search.xml\n  field: post</code></pre>\n<h3 id=\"中文链接转拼音（建议安装）\"><a href=\"#中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"中文链接转拼音（建议安装）\"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre><code>npm i hexo-permalink-pinyin --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code>permalink_pinyin:\n  enable: true\n  separator: '-' # default: '-'</code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（建议安装）\"><a href=\"#文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"文章字数统计插件（建议安装）\"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre><code>npm i --save hexo-wordcount</code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre><code>postInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.</code></pre>\n<h3 id=\"添加-DaoVoice-在线聊天功能（可选的）\"><a href=\"#添加-DaoVoice-在线聊天功能（可选的）\" class=\"headerlink\" title=\"添加 DaoVoice 在线聊天功能（可选的）\"></a>添加 <a href=\"http://www.daovoice.io/\">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href=\"http://www.daovoice.io/\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"添加-Tidio-在线聊天功能（可选的）\"><a href=\"#添加-Tidio-在线聊天功能（可选的）\" class=\"headerlink\" title=\"添加 Tidio 在线聊天功能（可选的）\"></a>添加 <a href=\"https://www.tidio.com/\">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href=\"https://www.tidio.com/\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre><code>&lt;% if (theme.socialLink.github) &amp;#123; %&gt;\n    &lt;a href=\"&lt;%= theme.socialLink.github %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\"&gt;\n        &lt;i class=\"fab fa-github\"&gt;&lt;/i&gt;\n    &lt;/a&gt;\n&lt;% &amp;#125; %&gt;</code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"配置音乐播放器（可选的）\"><a href=\"#配置音乐播放器（可选的）\" class=\"headerlink\" title=\"配置音乐播放器（可选的）\"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre><code># 是否在首页显示音乐\nmusic:\n  enable: true\n  title:             # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: '#42b983'\n  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'\n  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'\n  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠</code></pre>\n<blockquote>\n<p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<pre><code>id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id</code></pre>\n<p>即为这串数字。</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"hexo-theme-matery\"><a href=\"#hexo-theme-matery\" class=\"headerlink\" title=\"hexo-theme-matery\"></a>hexo-theme-matery</h1><blockquote>\n<p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p>\n</blockquote>\n<p><img src=\"images/2-1%20%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/image-20200801181325409.png\" alt=\"image-20200801181325409\"></p>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>简单漂亮，文章内容美观易读</li>\n<li><a href=\"https://material.io/\">Material Design</a> 设计</li>\n<li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li>\n<li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li>\n<li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li>\n<li>时间轴式的归档页</li>\n<li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li>\n<li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li>\n<li>可自定义的数据的友情链接页面</li>\n<li>支持文章置顶和文章打赏</li>\n<li>支持 <code>MathJax</code></li>\n<li><code>TOC</code> 目录</li>\n<li>可设置复制文章内容时追加版权信息</li>\n<li>可设置阅读文章时做密码验证</li>\n<li><a href=\"https://gitalk.github.io/\">Gitalk</a>、<a href=\"https://imsun.github.io/gitment/\">Gitment</a>、<a href=\"https://valine.js.org/\">Valine</a> 和 <a href=\"https://disqus.com/\">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li>\n<li>集成了<a href=\"http://busuanzi.ibruce.info/\">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li>\n<li>支持在首页的音乐播放和视频播放功能</li>\n<li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li>\n<li>支持 <a href=\"http://www.daovoice.io/\">DaoVoice</a>、<a href=\"https://www.tidio.com/\">Tidio</a> 在线聊天功能。</li>\n</ul>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href=\"https://www.appinn.com/markdown/\">Markdown</a> 来写博客和文章。</p>\n<p>点击 <a href=\"https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master\">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p>\n<p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p>\n<pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"切换主题\"><a href=\"#切换主题\" class=\"headerlink\" title=\"切换主题\"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p>\n<h4 id=\"config-yml-文件的其它修改建议\"><a href=\"#config-yml-文件的其它修改建议\" class=\"headerlink\" title=\"_config.yml 文件的其它修改建议:\"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul>\n<li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li>\n<li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li>\n<li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li>\n</ul>\n<h3 id=\"新建分类-categories-页\"><a href=\"#新建分类-categories-页\" class=\"headerlink\" title=\"新建分类 categories 页\"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code class=\"hexo\">hexo new page &quot;categories&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: &quot;categories&quot;\nlayout: &quot;categories&quot;\n---</code></pre>\n<h3 id=\"新建标签-tags-页\"><a href=\"#新建标签-tags-页\" class=\"headerlink\" title=\"新建标签 tags 页\"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page &quot;tags&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: tags\ndate: 2018-09-30 18:23:38\ntype: &quot;tags&quot;\nlayout: &quot;tags&quot;\n---</code></pre>\n<h3 id=\"新建关于我-about-页\"><a href=\"#新建关于我-about-页\" class=\"headerlink\" title=\"新建关于我 about 页\"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page &quot;about&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: &quot;about&quot;\nlayout: &quot;about&quot;\n---</code></pre>\n<h3 id=\"新建留言板-contact-页（可选的）\"><a href=\"#新建留言板-contact-页（可选的）\" class=\"headerlink\" title=\"新建留言板 contact 页（可选的）\"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page &quot;contact&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: contact\ndate: 2018-09-30 17:25:30\ntype: &quot;contact&quot;\nlayout: &quot;contact&quot;\n---</code></pre>\n<blockquote>\n<p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p>\n</blockquote>\n<h3 id=\"新建友情链接-friends-页（可选的）\"><a href=\"#新建友情链接-friends-页（可选的）\" class=\"headerlink\" title=\"新建友情链接 friends 页（可选的）\"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p>\n<pre><code>hexo new page &quot;friends&quot;</code></pre>\n<p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: &quot;friends&quot;\nlayout: &quot;friends&quot;\n---</code></pre>\n<p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p>\n<pre><code class=\"json\">[&amp;#123;\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;,\n    &quot;name&quot;: &quot;码酱&quot;,\n    &quot;introduction&quot;: &quot;我不是大佬，只是在追寻大佬的脚步&quot;,\n    &quot;url&quot;: &quot;http://luokangyuan.com/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n&amp;#125;, &amp;#123;\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/4027734.jpeg&quot;,\n    &quot;name&quot;: &quot;闪烁之狐&quot;,\n    &quot;introduction&quot;: &quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;,\n    &quot;url&quot;: &quot;https://blinkfox.github.io/&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n&amp;#125;, &amp;#123;\n    &quot;avatar&quot;: &quot;http://image.luokangyuan.com/avatar.jpg&quot;,\n    &quot;name&quot;: &quot;ja_rome&quot;,\n    &quot;introduction&quot;: &quot;平凡的脚步也可以走出伟大的行程&quot;,\n    &quot;url&quot;: &quot;https://me.csdn.net/jlh912008548&quot;,\n    &quot;title&quot;: &quot;前去学习&quot;\n&amp;#125;]</code></pre>\n<h3 id=\"新建-404-页\"><a href=\"#新建-404-页\" class=\"headerlink\" title=\"新建 404 页\"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p>\n<p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p>\n<pre><code>---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: &quot;404&quot;\nlayout: &quot;404&quot;\ndescription: &quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;\n---</code></pre>\n<h3 id=\"菜单导航配置\"><a href=\"#菜单导航配置\" class=\"headerlink\" title=\"菜单导航配置\"></a>菜单导航配置</h3><h4 id=\"配置基本菜单导航的名称、路径url和图标icon\"><a href=\"#配置基本菜单导航的名称、路径url和图标icon\" class=\"headerlink\" title=\"配置基本菜单导航的名称、路径url和图标icon.\"></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中查找</p>\n<pre><code>menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle\n  Friends:\n    url: /friends\n    icon: fas fa-address-book</code></pre>\n<h4 id=\"二级菜单配置方法\"><a href=\"#二级菜单配置方法\" class=\"headerlink\" title=\"二级菜单配置方法\"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p>\n<pre><code>menu:\n  Index:\n    url: /\n    icon: fas fa-home\n  Tags:\n    url: /tags\n    icon: fas fa-tags\n  Categories:\n    url: /categories\n    icon: fas fa-bookmark\n  Archives:\n    url: /archives\n    icon: fas fa-archive\n  About:\n    url: /about\n    icon: fas fa-user-circle-o\n  Friends:\n    url: /friends\n    icon: fas fa-address-book\n  Medias:\n    icon: fas fa-list\n    children:\n      - name: Musics\n        url: /musics\n        icon: fas fa-music\n      - name: Movies\n        url: /movies\n        icon: fas fa-film\n      - name: Books\n        url: /books\n        icon: fas fa-book\n      - name: Galleries\n        url: /galleries\n        icon: fas fa-image</code></pre>\n<p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href=\"https://github.com/ele828/hexo-prism-plugin\">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p>\n<pre><code>npm i -S hexo-prism-plugin</code></pre>\n<p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p>\n<pre><code>highlight:\n  enable: false\n\nprism_plugin:\n  mode: &#39;preprocess&#39;    # realtime/preprocess\n  theme: &#39;tomorrow&#39;\n  line_number: false    # default false\n  custom_css:</code></pre>\n<h3 id=\"搜索\"><a href=\"#搜索\" class=\"headerlink\" title=\"搜索\"></a>搜索</h3><p>本主题中还使用到了 <a href=\"https://github.com/wzpan/hexo-generator-search\">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p>\n<pre><code>npm install hexo-generator-search --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code>search:\n  path: search.xml\n  field: post</code></pre>\n<h3 id=\"中文链接转拼音（建议安装）\"><a href=\"#中文链接转拼音（建议安装）\" class=\"headerlink\" title=\"中文链接转拼音（建议安装）\"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href=\"https://github.com/viko16/hexo-permalink-pinyin\">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p>\n<p>安装命令如下：</p>\n<pre><code>npm i hexo-permalink-pinyin --save</code></pre>\n<p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p>\n<pre><code>permalink_pinyin:\n  enable: true\n  separator: &#39;-&#39; # default: &#39;-&#39;</code></pre>\n<blockquote>\n<p><strong>注</strong>：除了此插件外，<a href=\"https://github.com/rozbo/hexo-abbrlink\">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p>\n</blockquote>\n<h3 id=\"文章字数统计插件（建议安装）\"><a href=\"#文章字数统计插件（建议安装）\" class=\"headerlink\" title=\"文章字数统计插件（建议安装）\"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href=\"https://github.com/willin/hexo-wordcount\">hexo-wordcount</a>插件。</p>\n<p>安装命令如下：</p>\n<pre><code>npm i --save hexo-wordcount</code></pre>\n<p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p>\n<pre><code>postInfo:\n  date: true\n  update: false\n  wordCount: false # 设置文章字数统计为 true.\n  totalCount: false # 设置站点文章总字数统计为 true.\n  min2read: false # 阅读时长.\n  readCount: false # 阅读次数.</code></pre>\n<h3 id=\"添加-DaoVoice-在线聊天功能（可选的）\"><a href=\"#添加-DaoVoice-在线聊天功能（可选的）\" class=\"headerlink\" title=\"添加 DaoVoice 在线聊天功能（可选的）\"></a>添加 <a href=\"http://www.daovoice.io/\">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href=\"http://www.daovoice.io/\">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"添加-Tidio-在线聊天功能（可选的）\"><a href=\"#添加-Tidio-在线聊天功能（可选的）\" class=\"headerlink\" title=\"添加 Tidio 在线聊天功能（可选的）\"></a>添加 <a href=\"https://www.tidio.com/\">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href=\"https://www.tidio.com/\">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p>\n<h3 id=\"修改页脚\"><a href=\"#修改页脚\" class=\"headerlink\" title=\"修改页脚\"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p>\n<h3 id=\"修改社交链接\"><a href=\"#修改社交链接\" class=\"headerlink\" title=\"修改社交链接\"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p>\n<pre><code>&lt;% if (theme.socialLink.github) &amp;#123; %&gt;\n    &lt;a href=&quot;&lt;%= theme.socialLink.github %&gt;&quot; class=&quot;tooltipped&quot; target=&quot;_blank&quot; data-tooltip=&quot;访问我的GitHub&quot; data-position=&quot;top&quot; data-delay=&quot;50&quot;&gt;\n        &lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt;\n    &lt;/a&gt;\n&lt;% &amp;#125; %&gt;</code></pre>\n<p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href=\"https://fontawesome.com/icons\">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p>\n<ul>\n<li>Facebook: <code>fab fa-facebook</code></li>\n<li>Twitter: <code>fab fa-twitter</code></li>\n<li>Google-plus: <code>fab fa-google-plus</code></li>\n<li>Linkedin: <code>fab fa-linkedin</code></li>\n<li>Tumblr: <code>fab fa-tumblr</code></li>\n<li>Medium: <code>fab fa-medium</code></li>\n<li>Slack: <code>fab fa-slack</code></li>\n<li>Sina Weibo: <code>fab fa-weibo</code></li>\n<li>Wechat: <code>fab fa-weixin</code></li>\n<li>QQ: <code>fab fa-qq</code></li>\n<li>Zhihu: <code>fab fa-zhihu</code></li>\n</ul>\n<blockquote>\n<p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p>\n</blockquote>\n<h3 id=\"修改打赏的二维码图片\"><a href=\"#修改打赏的二维码图片\" class=\"headerlink\" title=\"修改打赏的二维码图片\"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p>\n<h3 id=\"配置音乐播放器（可选的）\"><a href=\"#配置音乐播放器（可选的）\" class=\"headerlink\" title=\"配置音乐播放器（可选的）\"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p>\n<pre><code># 是否在首页显示音乐\nmusic:\n  enable: true\n  title:             # 非吸底模式有效\n    enable: true\n    show: 听听音乐\n  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu\n  type: playlist    # require song, playlist, album, search, artist\n  id: 503838841     # require song id / playlist id / album id / search keyword\n  fixed: false      # 开启吸底模式\n  autoplay: false   # 是否自动播放\n  theme: &#39;#42b983&#39;\n  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;\n  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;\n  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;\n  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效\n  listFolded: true  # 列表默认折叠</code></pre>\n<blockquote>\n<p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p>\n<p><code>baidu</code>（百度音乐）。</p>\n<p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p>\n<pre><code>id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id</code></pre>\n<p>即为这串数字。</p>\n</blockquote>\n"},{"title":"junit简介","auther":"ku jin","_content":"# 什么是 JUnit？\n\nJUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。\n\nJUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。\n\n##  什么是Junit5?\n\n与以前的JUnit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。\n\nJUnit 5 = JUnit平台 + JUnit Jupiter + JUnit Vintage\n\n### 特点：\n\nJUnit 是一个开放的资源框架，用于编写和运行测试。\n提供注释来识别测试方法。\n提供断言来测试预期结果。\n提供测试运行来运行测试。\nJUnit 测试允许你编写代码更快，并能提高质量。\nJUnit 优雅简洁。没那么复杂，花费时间较少。\nJUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。\nJUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。\nJUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。\n\n### 测试工具\n\n测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：\n\n在所有测试调用指令发起前的 setUp() 方法。\n在测试方法运行后的 tearDown() 方法。\n\n### 测试套件\n\n测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。\n\n###  注解\n\n| 注解                   | 描述                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| @Test                  | 表示方法是测试方法。与JUnit 4的@Test注释不同，此注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注释进行操作。除非重写这些方法，否则它们将被继承。 |\n| @ParameterizedTest     | 表示方法是参数化测试。除非重写这些方法，否则它们将被继承。   |\n| @RepeatedTest          | 表示方法是重复测试的测试模板。除非重写这些方法，否则它们将被继承。 |\n| @TestFactory           | 表示方法是动态测试的测试工厂。除非重写这些方法，否则它们将被继承。 |\n| @TestTemplate          | 表示方法是测试用例的模板，测试用例设计为根据已注册提供程序返回的调用上下文的数量被多次调用。除非重写这些方法，否则它们将被继承。 |\n| @TestMethodOrder       | 用于为带注释的测试类配置测试方法的执行顺序；类似于JUnit 4的@FixMethodOrder。这样的注释是继承的。 |\n| @TestInstance          | 用于为带注释的测试类配置测试实例生命周期。这样的注释是继承的。 |\n| @DisplayName           | 声明测试类或测试方法的自定义显示名称。这样的注释不是继承的。 |\n| @DisplayNameGeneration | 声明测试类的自定义显示名称生成器。这样的注释是继承的。       |\n| @BeforeEach            | 表示该注释的方法应该被执行之前 的每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@Before。除非重写这些方法，否则它们将被继承。 |\n| @AfterEach             | 表示该注释的方法应该被执行之后 每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@After。除非重写这些方法，否则它们将被继承。 |\n| @BeforeAll             | 表示该注释的方法应该被执行之前 所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@BeforeClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。 |\n| @AfterAll              | 表示该注释的方法应该被执行之后 的所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@AfterClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。 |\n| @Nested                | 表示带注释的类是一个非静态的嵌套测试类。@BeforeAll和@AfterAll方法不能直接在使用@Nested测试类除非“每级” 测试实例的生命周期被使用。这样的注释不是继承的。 |\n| @Tag                   | 用于在类或方法级别声明用于过滤测试的标签；类似于TestNG中的测试组或JUnit 4中的类别。此类注释在类级别继承，而不在方法级别继承。 |\n| @Disabled              | 用于禁用测试类或测试方法；类似于JUnit 4的@Ignore。这样的注释不是继承的。 |\n| @Timeout               | 如果执行超过给定的持续时间，则使测试，测试工厂，测试模板或生命周期方法失败。这样的注释是继承的。 |\n| @ExtendWith            | 用于声明性地注册扩展。这样的注释是继承的。                   |\n| @RegisterExtension     | 用于通过字段以编程方式注册扩展。除非被遮盖，否则这些字段将被继承。 |\n| @TempDir               | 用于通过生命周期方法或测试方法中的字段注入或参数注入来提供临时目录；位于org.junit.jupiter.api.io包装中。 |\n|                        |                                                              |\n|                        |                                                              |\n|                        |                                                              |\n|                        |                                                              |","source":"_posts/随心记/Junit/junit简介.md","raw":"---\ntitle: junit简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Junit\ntags: # 标签=目标文件夹\n - junit简介 \n---\n# 什么是 JUnit？\n\nJUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。\n\nJUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。\n\n##  什么是Junit5?\n\n与以前的JUnit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。\n\nJUnit 5 = JUnit平台 + JUnit Jupiter + JUnit Vintage\n\n### 特点：\n\nJUnit 是一个开放的资源框架，用于编写和运行测试。\n提供注释来识别测试方法。\n提供断言来测试预期结果。\n提供测试运行来运行测试。\nJUnit 测试允许你编写代码更快，并能提高质量。\nJUnit 优雅简洁。没那么复杂，花费时间较少。\nJUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。\nJUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。\nJUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。\n\n### 测试工具\n\n测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：\n\n在所有测试调用指令发起前的 setUp() 方法。\n在测试方法运行后的 tearDown() 方法。\n\n### 测试套件\n\n测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。\n\n###  注解\n\n| 注解                   | 描述                                                         |\n| ---------------------- | ------------------------------------------------------------ |\n| @Test                  | 表示方法是测试方法。与JUnit 4的@Test注释不同，此注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注释进行操作。除非重写这些方法，否则它们将被继承。 |\n| @ParameterizedTest     | 表示方法是参数化测试。除非重写这些方法，否则它们将被继承。   |\n| @RepeatedTest          | 表示方法是重复测试的测试模板。除非重写这些方法，否则它们将被继承。 |\n| @TestFactory           | 表示方法是动态测试的测试工厂。除非重写这些方法，否则它们将被继承。 |\n| @TestTemplate          | 表示方法是测试用例的模板，测试用例设计为根据已注册提供程序返回的调用上下文的数量被多次调用。除非重写这些方法，否则它们将被继承。 |\n| @TestMethodOrder       | 用于为带注释的测试类配置测试方法的执行顺序；类似于JUnit 4的@FixMethodOrder。这样的注释是继承的。 |\n| @TestInstance          | 用于为带注释的测试类配置测试实例生命周期。这样的注释是继承的。 |\n| @DisplayName           | 声明测试类或测试方法的自定义显示名称。这样的注释不是继承的。 |\n| @DisplayNameGeneration | 声明测试类的自定义显示名称生成器。这样的注释是继承的。       |\n| @BeforeEach            | 表示该注释的方法应该被执行之前 的每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@Before。除非重写这些方法，否则它们将被继承。 |\n| @AfterEach             | 表示该注释的方法应该被执行之后 每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@After。除非重写这些方法，否则它们将被继承。 |\n| @BeforeAll             | 表示该注释的方法应该被执行之前 所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@BeforeClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。 |\n| @AfterAll              | 表示该注释的方法应该被执行之后 的所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@AfterClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。 |\n| @Nested                | 表示带注释的类是一个非静态的嵌套测试类。@BeforeAll和@AfterAll方法不能直接在使用@Nested测试类除非“每级” 测试实例的生命周期被使用。这样的注释不是继承的。 |\n| @Tag                   | 用于在类或方法级别声明用于过滤测试的标签；类似于TestNG中的测试组或JUnit 4中的类别。此类注释在类级别继承，而不在方法级别继承。 |\n| @Disabled              | 用于禁用测试类或测试方法；类似于JUnit 4的@Ignore。这样的注释不是继承的。 |\n| @Timeout               | 如果执行超过给定的持续时间，则使测试，测试工厂，测试模板或生命周期方法失败。这样的注释是继承的。 |\n| @ExtendWith            | 用于声明性地注册扩展。这样的注释是继承的。                   |\n| @RegisterExtension     | 用于通过字段以编程方式注册扩展。除非被遮盖，否则这些字段将被继承。 |\n| @TempDir               | 用于通过生命周期方法或测试方法中的字段注入或参数注入来提供临时目录；位于org.junit.jupiter.api.io包装中。 |\n|                        |                                                              |\n|                        |                                                              |\n|                        |                                                              |\n|                        |                                                              |","slug":"随心记/Junit/junit简介","published":1,"date":"2020-08-02T23:42:43.605Z","updated":"2020-08-02T23:42:59.770Z","_id":"ckdcza4nu0065rkam1sgbfiyt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"什么是-JUnit？\"><a href=\"#什么是-JUnit？\" class=\"headerlink\" title=\"什么是 JUnit？\"></a>什么是 JUnit？</h1><p>JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。</p>\n<p>JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。</p>\n<h2 id=\"什么是Junit5\"><a href=\"#什么是Junit5\" class=\"headerlink\" title=\"什么是Junit5?\"></a>什么是Junit5?</h2><p>与以前的JUnit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。</p>\n<p>JUnit 5 = JUnit平台 + JUnit Jupiter + JUnit Vintage</p>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>JUnit 是一个开放的资源框架，用于编写和运行测试。<br>提供注释来识别测试方法。<br>提供断言来测试预期结果。<br>提供测试运行来运行测试。<br>JUnit 测试允许你编写代码更快，并能提高质量。<br>JUnit 优雅简洁。没那么复杂，花费时间较少。<br>JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。<br>JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。<br>JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。</p>\n<h3 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h3><p>测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：</p>\n<p>在所有测试调用指令发起前的 setUp() 方法。<br>在测试方法运行后的 tearDown() 方法。</p>\n<h3 id=\"测试套件\"><a href=\"#测试套件\" class=\"headerlink\" title=\"测试套件\"></a>测试套件</h3><p>测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Test</td>\n<td>表示方法是测试方法。与JUnit 4的@Test注释不同，此注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注释进行操作。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@ParameterizedTest</td>\n<td>表示方法是参数化测试。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@RepeatedTest</td>\n<td>表示方法是重复测试的测试模板。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestFactory</td>\n<td>表示方法是动态测试的测试工厂。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestTemplate</td>\n<td>表示方法是测试用例的模板，测试用例设计为根据已注册提供程序返回的调用上下文的数量被多次调用。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestMethodOrder</td>\n<td>用于为带注释的测试类配置测试方法的执行顺序；类似于JUnit 4的@FixMethodOrder。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@TestInstance</td>\n<td>用于为带注释的测试类配置测试实例生命周期。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@DisplayName</td>\n<td>声明测试类或测试方法的自定义显示名称。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@DisplayNameGeneration</td>\n<td>声明测试类的自定义显示名称生成器。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@BeforeEach</td>\n<td>表示该注释的方法应该被执行之前 的每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@Before。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@AfterEach</td>\n<td>表示该注释的方法应该被执行之后 每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@After。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@BeforeAll</td>\n<td>表示该注释的方法应该被执行之前 所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@BeforeClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td>\n</tr>\n<tr>\n<td>@AfterAll</td>\n<td>表示该注释的方法应该被执行之后 的所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@AfterClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td>\n</tr>\n<tr>\n<td>@Nested</td>\n<td>表示带注释的类是一个非静态的嵌套测试类。@BeforeAll和@AfterAll方法不能直接在使用@Nested测试类除非“每级” 测试实例的生命周期被使用。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@Tag</td>\n<td>用于在类或方法级别声明用于过滤测试的标签；类似于TestNG中的测试组或JUnit 4中的类别。此类注释在类级别继承，而不在方法级别继承。</td>\n</tr>\n<tr>\n<td>@Disabled</td>\n<td>用于禁用测试类或测试方法；类似于JUnit 4的@Ignore。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@Timeout</td>\n<td>如果执行超过给定的持续时间，则使测试，测试工厂，测试模板或生命周期方法失败。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@ExtendWith</td>\n<td>用于声明性地注册扩展。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@RegisterExtension</td>\n<td>用于通过字段以编程方式注册扩展。除非被遮盖，否则这些字段将被继承。</td>\n</tr>\n<tr>\n<td>@TempDir</td>\n<td>用于通过生命周期方法或测试方法中的字段注入或参数注入来提供临时目录；位于org.junit.jupiter.api.io包装中。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"什么是-JUnit？\"><a href=\"#什么是-JUnit？\" class=\"headerlink\" title=\"什么是 JUnit？\"></a>什么是 JUnit？</h1><p>JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。</p>\n<p>JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。</p>\n<h2 id=\"什么是Junit5\"><a href=\"#什么是Junit5\" class=\"headerlink\" title=\"什么是Junit5?\"></a>什么是Junit5?</h2><p>与以前的JUnit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。</p>\n<p>JUnit 5 = JUnit平台 + JUnit Jupiter + JUnit Vintage</p>\n<h3 id=\"特点：\"><a href=\"#特点：\" class=\"headerlink\" title=\"特点：\"></a>特点：</h3><p>JUnit 是一个开放的资源框架，用于编写和运行测试。<br>提供注释来识别测试方法。<br>提供断言来测试预期结果。<br>提供测试运行来运行测试。<br>JUnit 测试允许你编写代码更快，并能提高质量。<br>JUnit 优雅简洁。没那么复杂，花费时间较少。<br>JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。<br>JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。<br>JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。</p>\n<h3 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h3><p>测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：</p>\n<p>在所有测试调用指令发起前的 setUp() 方法。<br>在测试方法运行后的 tearDown() 方法。</p>\n<h3 id=\"测试套件\"><a href=\"#测试套件\" class=\"headerlink\" title=\"测试套件\"></a>测试套件</h3><p>测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。</p>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Test</td>\n<td>表示方法是测试方法。与JUnit 4的@Test注释不同，此注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注释进行操作。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@ParameterizedTest</td>\n<td>表示方法是参数化测试。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@RepeatedTest</td>\n<td>表示方法是重复测试的测试模板。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestFactory</td>\n<td>表示方法是动态测试的测试工厂。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestTemplate</td>\n<td>表示方法是测试用例的模板，测试用例设计为根据已注册提供程序返回的调用上下文的数量被多次调用。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@TestMethodOrder</td>\n<td>用于为带注释的测试类配置测试方法的执行顺序；类似于JUnit 4的@FixMethodOrder。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@TestInstance</td>\n<td>用于为带注释的测试类配置测试实例生命周期。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@DisplayName</td>\n<td>声明测试类或测试方法的自定义显示名称。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@DisplayNameGeneration</td>\n<td>声明测试类的自定义显示名称生成器。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@BeforeEach</td>\n<td>表示该注释的方法应该被执行之前 的每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@Before。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@AfterEach</td>\n<td>表示该注释的方法应该被执行之后 每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@After。除非重写这些方法，否则它们将被继承。</td>\n</tr>\n<tr>\n<td>@BeforeAll</td>\n<td>表示该注释的方法应该被执行之前 所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@BeforeClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td>\n</tr>\n<tr>\n<td>@AfterAll</td>\n<td>表示该注释的方法应该被执行之后 的所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@AfterClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td>\n</tr>\n<tr>\n<td>@Nested</td>\n<td>表示带注释的类是一个非静态的嵌套测试类。@BeforeAll和@AfterAll方法不能直接在使用@Nested测试类除非“每级” 测试实例的生命周期被使用。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@Tag</td>\n<td>用于在类或方法级别声明用于过滤测试的标签；类似于TestNG中的测试组或JUnit 4中的类别。此类注释在类级别继承，而不在方法级别继承。</td>\n</tr>\n<tr>\n<td>@Disabled</td>\n<td>用于禁用测试类或测试方法；类似于JUnit 4的@Ignore。这样的注释不是继承的。</td>\n</tr>\n<tr>\n<td>@Timeout</td>\n<td>如果执行超过给定的持续时间，则使测试，测试工厂，测试模板或生命周期方法失败。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@ExtendWith</td>\n<td>用于声明性地注册扩展。这样的注释是继承的。</td>\n</tr>\n<tr>\n<td>@RegisterExtension</td>\n<td>用于通过字段以编程方式注册扩展。除非被遮盖，否则这些字段将被继承。</td>\n</tr>\n<tr>\n<td>@TempDir</td>\n<td>用于通过生命周期方法或测试方法中的字段注入或参数注入来提供临时目录；位于org.junit.jupiter.api.io包装中。</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n"},{"title":"linux常用命令","auther":"ku jin","_content":"# linux常用命令\n\n## 软件操作命令\n\n### 软件包管理 yum\n\n### 安装软件 yum install xxx\n\n### 卸载软件 yum remove xxx\n\n### 搜索软件 yum serach xxx\n\n### 清理缓存 yum clean packages\n\n### 列出已安装 yum list\n\n### 软件包信息 yum info xxx\n\n## 服务器硬件资源和磁盘操作\n\n### 内存：free -m\n\n### 硬盘：df -h\n\n### 负载：w/top\n\n## 文件和文件夹操作命令\n\n### linux文件的目录结构\n\n- 根目录 /\n- 家目录 /home\n- 临时目录 /tmp\n- 配置目录 /etc\n- 用户程序目录 /usr \n\n### 文件基本操作\n\n- ls 查看目录下文件\n- touch 新建文件\n- mkdir 新建文件夹\n- cd 进入目录 \n- rm 删除文件或目录\n- cp 复制\n- mv 移动\n- pwd 显示路径\n\n### 文本编辑神器Vim\n\n- Vim安装 yum install vim\n\n### 文件权限 421\n\n- r=4 w=2 x=1  \n\n### 文件搜索 查找 读取\n\n- tail 尾部读取\n- head 头部读取\n- cat 读取整个文件\n- more 分页读取\n- less 可控分页\n- grep 搜索关键字\n- find 查找\n\n\t- 可以去菜鸟教程学习\n\n- wc 统计个数\n\n### 文件解压\n\n- 压缩\n\n\t- tar –cvf jpg.tar *.jpg       // 将目录里所有jpg文件打包成 tar.jpg \n\t- tar –czf jpg.tar.gz *.jpg    // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz \n\t- tar –cjf jpg.tar.bz2 *.jpg   // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，命名为jpg.tar.bz2 \n\t- tar –cZf jpg.tar.Z *.jpg     // 将目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 compress 压缩，生成一个 umcompress 压缩过的包，命名为jpg.tar.Z \n\t- rar a jpg.rar *.jpg          // rar格式的压缩，需要先下载 rar for linux \n\t- zip jpg.zip *.jpg            // zip格式的压缩，需要先下载 zip for linux\n\n- 解压\n\n\t- tar –xvf file.tar         // 解压 tar 包 \n\t- tar -xzvf file.tar.gz     // 解压 tar.gz \n\t- tar -xjvf file.tar.bz2    // 解压 tar.bz2 \n\t- tar –xZvf file.tar.Z      // 解压 tar.Z \n\t- unrar e file.rar          // 解压 rar \n\t- unzip file.zip            // 解压 zip \n\n- 总结\n\n\t- 1、*.tar 用 tar –xvf 解压 \n\t- 2、*.gz 用 gzip -d或者gunzip 解压 \n\t- 3、*.tar.gz和*.tgz 用 tar –xzf 解压 \n\t- 4、*.bz2 用 bzip2 -d或者用bunzip2 解压 \n\t- 5、*.tar.bz2用tar –xjf 解压 \n\t- 6、*.Z 用 uncompress 解压 \n\t- 7、*.tar.Z 用tar –xZf 解压 \n\t- 8、*.rar 用 unrar e解压 \n\t- 9、*.zip 用 unzip 解压\n\n## 系统用户操作命令\n\n### useradd 添加用户\n\n### adduser 添加用户\n\n### userdel 删除用户\n\n### passwd 设置密码\n\n## 防火墙相关设置\n\n### 简介\n\n- 作用：保护服务器安全\n- 设置防火墙\n\n\t- 开放80，22端口\n\n- 关闭防火墙\n- \n\n### 设置防火墙命令\n\n- 安装：yum install firewalld\n- 启动：service firewalld start\n- 状态：service firewalld status\n- 关闭或禁用：service firewalld stop/disable\n\n## 提权操作sudo 和文件传输操作\n\n### 提权：sudo\n\n- visudo：将普通用户添加到root信任列表中\n\n### 文件下载\n\n- wget ，curl\n\n### 文件上传\n\n- scp\n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/linux常用命令.md","raw":"---\ntitle: linux常用命令 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - linux常用命令 \n---\n# linux常用命令\n\n## 软件操作命令\n\n### 软件包管理 yum\n\n### 安装软件 yum install xxx\n\n### 卸载软件 yum remove xxx\n\n### 搜索软件 yum serach xxx\n\n### 清理缓存 yum clean packages\n\n### 列出已安装 yum list\n\n### 软件包信息 yum info xxx\n\n## 服务器硬件资源和磁盘操作\n\n### 内存：free -m\n\n### 硬盘：df -h\n\n### 负载：w/top\n\n## 文件和文件夹操作命令\n\n### linux文件的目录结构\n\n- 根目录 /\n- 家目录 /home\n- 临时目录 /tmp\n- 配置目录 /etc\n- 用户程序目录 /usr \n\n### 文件基本操作\n\n- ls 查看目录下文件\n- touch 新建文件\n- mkdir 新建文件夹\n- cd 进入目录 \n- rm 删除文件或目录\n- cp 复制\n- mv 移动\n- pwd 显示路径\n\n### 文本编辑神器Vim\n\n- Vim安装 yum install vim\n\n### 文件权限 421\n\n- r=4 w=2 x=1  \n\n### 文件搜索 查找 读取\n\n- tail 尾部读取\n- head 头部读取\n- cat 读取整个文件\n- more 分页读取\n- less 可控分页\n- grep 搜索关键字\n- find 查找\n\n\t- 可以去菜鸟教程学习\n\n- wc 统计个数\n\n### 文件解压\n\n- 压缩\n\n\t- tar –cvf jpg.tar *.jpg       // 将目录里所有jpg文件打包成 tar.jpg \n\t- tar –czf jpg.tar.gz *.jpg    // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz \n\t- tar –cjf jpg.tar.bz2 *.jpg   // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，命名为jpg.tar.bz2 \n\t- tar –cZf jpg.tar.Z *.jpg     // 将目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 compress 压缩，生成一个 umcompress 压缩过的包，命名为jpg.tar.Z \n\t- rar a jpg.rar *.jpg          // rar格式的压缩，需要先下载 rar for linux \n\t- zip jpg.zip *.jpg            // zip格式的压缩，需要先下载 zip for linux\n\n- 解压\n\n\t- tar –xvf file.tar         // 解压 tar 包 \n\t- tar -xzvf file.tar.gz     // 解压 tar.gz \n\t- tar -xjvf file.tar.bz2    // 解压 tar.bz2 \n\t- tar –xZvf file.tar.Z      // 解压 tar.Z \n\t- unrar e file.rar          // 解压 rar \n\t- unzip file.zip            // 解压 zip \n\n- 总结\n\n\t- 1、*.tar 用 tar –xvf 解压 \n\t- 2、*.gz 用 gzip -d或者gunzip 解压 \n\t- 3、*.tar.gz和*.tgz 用 tar –xzf 解压 \n\t- 4、*.bz2 用 bzip2 -d或者用bunzip2 解压 \n\t- 5、*.tar.bz2用tar –xjf 解压 \n\t- 6、*.Z 用 uncompress 解压 \n\t- 7、*.tar.Z 用tar –xZf 解压 \n\t- 8、*.rar 用 unrar e解压 \n\t- 9、*.zip 用 unzip 解压\n\n## 系统用户操作命令\n\n### useradd 添加用户\n\n### adduser 添加用户\n\n### userdel 删除用户\n\n### passwd 设置密码\n\n## 防火墙相关设置\n\n### 简介\n\n- 作用：保护服务器安全\n- 设置防火墙\n\n\t- 开放80，22端口\n\n- 关闭防火墙\n- \n\n### 设置防火墙命令\n\n- 安装：yum install firewalld\n- 启动：service firewalld start\n- 状态：service firewalld status\n- 关闭或禁用：service firewalld stop/disable\n\n## 提权操作sudo 和文件传输操作\n\n### 提权：sudo\n\n- visudo：将普通用户添加到root信任列表中\n\n### 文件下载\n\n- wget ，curl\n\n### 文件上传\n\n- scp\n\n*XMind - Trial Version*","slug":"随心记/java_web/linux常用命令","published":1,"date":"2020-08-02T23:42:43.440Z","updated":"2020-08-02T23:42:59.767Z","_id":"ckdcza4o6006mrkambzhge5hj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h1><h2 id=\"软件操作命令\"><a href=\"#软件操作命令\" class=\"headerlink\" title=\"软件操作命令\"></a>软件操作命令</h2><h3 id=\"软件包管理-yum\"><a href=\"#软件包管理-yum\" class=\"headerlink\" title=\"软件包管理 yum\"></a>软件包管理 yum</h3><h3 id=\"安装软件-yum-install-xxx\"><a href=\"#安装软件-yum-install-xxx\" class=\"headerlink\" title=\"安装软件 yum install xxx\"></a>安装软件 yum install xxx</h3><h3 id=\"卸载软件-yum-remove-xxx\"><a href=\"#卸载软件-yum-remove-xxx\" class=\"headerlink\" title=\"卸载软件 yum remove xxx\"></a>卸载软件 yum remove xxx</h3><h3 id=\"搜索软件-yum-serach-xxx\"><a href=\"#搜索软件-yum-serach-xxx\" class=\"headerlink\" title=\"搜索软件 yum serach xxx\"></a>搜索软件 yum serach xxx</h3><h3 id=\"清理缓存-yum-clean-packages\"><a href=\"#清理缓存-yum-clean-packages\" class=\"headerlink\" title=\"清理缓存 yum clean packages\"></a>清理缓存 yum clean packages</h3><h3 id=\"列出已安装-yum-list\"><a href=\"#列出已安装-yum-list\" class=\"headerlink\" title=\"列出已安装 yum list\"></a>列出已安装 yum list</h3><h3 id=\"软件包信息-yum-info-xxx\"><a href=\"#软件包信息-yum-info-xxx\" class=\"headerlink\" title=\"软件包信息 yum info xxx\"></a>软件包信息 yum info xxx</h3><h2 id=\"服务器硬件资源和磁盘操作\"><a href=\"#服务器硬件资源和磁盘操作\" class=\"headerlink\" title=\"服务器硬件资源和磁盘操作\"></a>服务器硬件资源和磁盘操作</h2><h3 id=\"内存：free-m\"><a href=\"#内存：free-m\" class=\"headerlink\" title=\"内存：free -m\"></a>内存：free -m</h3><h3 id=\"硬盘：df-h\"><a href=\"#硬盘：df-h\" class=\"headerlink\" title=\"硬盘：df -h\"></a>硬盘：df -h</h3><h3 id=\"负载：w-top\"><a href=\"#负载：w-top\" class=\"headerlink\" title=\"负载：w/top\"></a>负载：w/top</h3><h2 id=\"文件和文件夹操作命令\"><a href=\"#文件和文件夹操作命令\" class=\"headerlink\" title=\"文件和文件夹操作命令\"></a>文件和文件夹操作命令</h2><h3 id=\"linux文件的目录结构\"><a href=\"#linux文件的目录结构\" class=\"headerlink\" title=\"linux文件的目录结构\"></a>linux文件的目录结构</h3><ul>\n<li>根目录 /</li>\n<li>家目录 /home</li>\n<li>临时目录 /tmp</li>\n<li>配置目录 /etc</li>\n<li>用户程序目录 /usr </li>\n</ul>\n<h3 id=\"文件基本操作\"><a href=\"#文件基本操作\" class=\"headerlink\" title=\"文件基本操作\"></a>文件基本操作</h3><ul>\n<li>ls 查看目录下文件</li>\n<li>touch 新建文件</li>\n<li>mkdir 新建文件夹</li>\n<li>cd 进入目录 </li>\n<li>rm 删除文件或目录</li>\n<li>cp 复制</li>\n<li>mv 移动</li>\n<li>pwd 显示路径</li>\n</ul>\n<h3 id=\"文本编辑神器Vim\"><a href=\"#文本编辑神器Vim\" class=\"headerlink\" title=\"文本编辑神器Vim\"></a>文本编辑神器Vim</h3><ul>\n<li>Vim安装 yum install vim</li>\n</ul>\n<h3 id=\"文件权限-421\"><a href=\"#文件权限-421\" class=\"headerlink\" title=\"文件权限 421\"></a>文件权限 421</h3><ul>\n<li>r=4 w=2 x=1  </li>\n</ul>\n<h3 id=\"文件搜索-查找-读取\"><a href=\"#文件搜索-查找-读取\" class=\"headerlink\" title=\"文件搜索 查找 读取\"></a>文件搜索 查找 读取</h3><ul>\n<li><p>tail 尾部读取</p>\n</li>\n<li><p>head 头部读取</p>\n</li>\n<li><p>cat 读取整个文件</p>\n</li>\n<li><p>more 分页读取</p>\n</li>\n<li><p>less 可控分页</p>\n</li>\n<li><p>grep 搜索关键字</p>\n</li>\n<li><p>find 查找</p>\n<ul>\n<li>可以去菜鸟教程学习</li>\n</ul>\n</li>\n<li><p>wc 统计个数</p>\n</li>\n</ul>\n<h3 id=\"文件解压\"><a href=\"#文件解压\" class=\"headerlink\" title=\"文件解压\"></a>文件解压</h3><ul>\n<li><p>压缩</p>\n<ul>\n<li>tar –cvf jpg.tar *.jpg       // 将目录里所有jpg文件打包成 tar.jpg </li>\n<li>tar –czf jpg.tar.gz *.jpg    // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz </li>\n<li>tar –cjf jpg.tar.bz2 *.jpg   // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，命名为jpg.tar.bz2 </li>\n<li>tar –cZf jpg.tar.Z *.jpg     // 将目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 compress 压缩，生成一个 umcompress 压缩过的包，命名为jpg.tar.Z </li>\n<li>rar a jpg.rar *.jpg          // rar格式的压缩，需要先下载 rar for linux </li>\n<li>zip jpg.zip *.jpg            // zip格式的压缩，需要先下载 zip for linux</li>\n</ul>\n</li>\n<li><p>解压</p>\n<ul>\n<li>tar –xvf file.tar         // 解压 tar 包 </li>\n<li>tar -xzvf file.tar.gz     // 解压 tar.gz </li>\n<li>tar -xjvf file.tar.bz2    // 解压 tar.bz2 </li>\n<li>tar –xZvf file.tar.Z      // 解压 tar.Z </li>\n<li>unrar e file.rar          // 解压 rar </li>\n<li>unzip file.zip            // 解压 zip </li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>1、*.tar 用 tar –xvf 解压 </li>\n<li>2、*.gz 用 gzip -d或者gunzip 解压 </li>\n<li>3、*.tar.gz和*.tgz 用 tar –xzf 解压 </li>\n<li>4、*.bz2 用 bzip2 -d或者用bunzip2 解压 </li>\n<li>5、*.tar.bz2用tar –xjf 解压 </li>\n<li>6、*.Z 用 uncompress 解压 </li>\n<li>7、*.tar.Z 用tar –xZf 解压 </li>\n<li>8、*.rar 用 unrar e解压 </li>\n<li>9、*.zip 用 unzip 解压</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统用户操作命令\"><a href=\"#系统用户操作命令\" class=\"headerlink\" title=\"系统用户操作命令\"></a>系统用户操作命令</h2><h3 id=\"useradd-添加用户\"><a href=\"#useradd-添加用户\" class=\"headerlink\" title=\"useradd 添加用户\"></a>useradd 添加用户</h3><h3 id=\"adduser-添加用户\"><a href=\"#adduser-添加用户\" class=\"headerlink\" title=\"adduser 添加用户\"></a>adduser 添加用户</h3><h3 id=\"userdel-删除用户\"><a href=\"#userdel-删除用户\" class=\"headerlink\" title=\"userdel 删除用户\"></a>userdel 删除用户</h3><h3 id=\"passwd-设置密码\"><a href=\"#passwd-设置密码\" class=\"headerlink\" title=\"passwd 设置密码\"></a>passwd 设置密码</h3><h2 id=\"防火墙相关设置\"><a href=\"#防火墙相关设置\" class=\"headerlink\" title=\"防火墙相关设置\"></a>防火墙相关设置</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p>作用：保护服务器安全</p>\n</li>\n<li><p>设置防火墙</p>\n<ul>\n<li>开放80，22端口</li>\n</ul>\n</li>\n<li><p>关闭防火墙</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"设置防火墙命令\"><a href=\"#设置防火墙命令\" class=\"headerlink\" title=\"设置防火墙命令\"></a>设置防火墙命令</h3><ul>\n<li>安装：yum install firewalld</li>\n<li>启动：service firewalld start</li>\n<li>状态：service firewalld status</li>\n<li>关闭或禁用：service firewalld stop/disable</li>\n</ul>\n<h2 id=\"提权操作sudo-和文件传输操作\"><a href=\"#提权操作sudo-和文件传输操作\" class=\"headerlink\" title=\"提权操作sudo 和文件传输操作\"></a>提权操作sudo 和文件传输操作</h2><h3 id=\"提权：sudo\"><a href=\"#提权：sudo\" class=\"headerlink\" title=\"提权：sudo\"></a>提权：sudo</h3><ul>\n<li>visudo：将普通用户添加到root信任列表中</li>\n</ul>\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>wget ，curl</li>\n</ul>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>scp</li>\n</ul>\n<p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h1><h2 id=\"软件操作命令\"><a href=\"#软件操作命令\" class=\"headerlink\" title=\"软件操作命令\"></a>软件操作命令</h2><h3 id=\"软件包管理-yum\"><a href=\"#软件包管理-yum\" class=\"headerlink\" title=\"软件包管理 yum\"></a>软件包管理 yum</h3><h3 id=\"安装软件-yum-install-xxx\"><a href=\"#安装软件-yum-install-xxx\" class=\"headerlink\" title=\"安装软件 yum install xxx\"></a>安装软件 yum install xxx</h3><h3 id=\"卸载软件-yum-remove-xxx\"><a href=\"#卸载软件-yum-remove-xxx\" class=\"headerlink\" title=\"卸载软件 yum remove xxx\"></a>卸载软件 yum remove xxx</h3><h3 id=\"搜索软件-yum-serach-xxx\"><a href=\"#搜索软件-yum-serach-xxx\" class=\"headerlink\" title=\"搜索软件 yum serach xxx\"></a>搜索软件 yum serach xxx</h3><h3 id=\"清理缓存-yum-clean-packages\"><a href=\"#清理缓存-yum-clean-packages\" class=\"headerlink\" title=\"清理缓存 yum clean packages\"></a>清理缓存 yum clean packages</h3><h3 id=\"列出已安装-yum-list\"><a href=\"#列出已安装-yum-list\" class=\"headerlink\" title=\"列出已安装 yum list\"></a>列出已安装 yum list</h3><h3 id=\"软件包信息-yum-info-xxx\"><a href=\"#软件包信息-yum-info-xxx\" class=\"headerlink\" title=\"软件包信息 yum info xxx\"></a>软件包信息 yum info xxx</h3><h2 id=\"服务器硬件资源和磁盘操作\"><a href=\"#服务器硬件资源和磁盘操作\" class=\"headerlink\" title=\"服务器硬件资源和磁盘操作\"></a>服务器硬件资源和磁盘操作</h2><h3 id=\"内存：free-m\"><a href=\"#内存：free-m\" class=\"headerlink\" title=\"内存：free -m\"></a>内存：free -m</h3><h3 id=\"硬盘：df-h\"><a href=\"#硬盘：df-h\" class=\"headerlink\" title=\"硬盘：df -h\"></a>硬盘：df -h</h3><h3 id=\"负载：w-top\"><a href=\"#负载：w-top\" class=\"headerlink\" title=\"负载：w/top\"></a>负载：w/top</h3><h2 id=\"文件和文件夹操作命令\"><a href=\"#文件和文件夹操作命令\" class=\"headerlink\" title=\"文件和文件夹操作命令\"></a>文件和文件夹操作命令</h2><h3 id=\"linux文件的目录结构\"><a href=\"#linux文件的目录结构\" class=\"headerlink\" title=\"linux文件的目录结构\"></a>linux文件的目录结构</h3><ul>\n<li>根目录 /</li>\n<li>家目录 /home</li>\n<li>临时目录 /tmp</li>\n<li>配置目录 /etc</li>\n<li>用户程序目录 /usr </li>\n</ul>\n<h3 id=\"文件基本操作\"><a href=\"#文件基本操作\" class=\"headerlink\" title=\"文件基本操作\"></a>文件基本操作</h3><ul>\n<li>ls 查看目录下文件</li>\n<li>touch 新建文件</li>\n<li>mkdir 新建文件夹</li>\n<li>cd 进入目录 </li>\n<li>rm 删除文件或目录</li>\n<li>cp 复制</li>\n<li>mv 移动</li>\n<li>pwd 显示路径</li>\n</ul>\n<h3 id=\"文本编辑神器Vim\"><a href=\"#文本编辑神器Vim\" class=\"headerlink\" title=\"文本编辑神器Vim\"></a>文本编辑神器Vim</h3><ul>\n<li>Vim安装 yum install vim</li>\n</ul>\n<h3 id=\"文件权限-421\"><a href=\"#文件权限-421\" class=\"headerlink\" title=\"文件权限 421\"></a>文件权限 421</h3><ul>\n<li>r=4 w=2 x=1  </li>\n</ul>\n<h3 id=\"文件搜索-查找-读取\"><a href=\"#文件搜索-查找-读取\" class=\"headerlink\" title=\"文件搜索 查找 读取\"></a>文件搜索 查找 读取</h3><ul>\n<li><p>tail 尾部读取</p>\n</li>\n<li><p>head 头部读取</p>\n</li>\n<li><p>cat 读取整个文件</p>\n</li>\n<li><p>more 分页读取</p>\n</li>\n<li><p>less 可控分页</p>\n</li>\n<li><p>grep 搜索关键字</p>\n</li>\n<li><p>find 查找</p>\n<ul>\n<li>可以去菜鸟教程学习</li>\n</ul>\n</li>\n<li><p>wc 统计个数</p>\n</li>\n</ul>\n<h3 id=\"文件解压\"><a href=\"#文件解压\" class=\"headerlink\" title=\"文件解压\"></a>文件解压</h3><ul>\n<li><p>压缩</p>\n<ul>\n<li>tar –cvf jpg.tar *.jpg       // 将目录里所有jpg文件打包成 tar.jpg </li>\n<li>tar –czf jpg.tar.gz *.jpg    // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz </li>\n<li>tar –cjf jpg.tar.bz2 *.jpg   // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，命名为jpg.tar.bz2 </li>\n<li>tar –cZf jpg.tar.Z *.jpg     // 将目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 compress 压缩，生成一个 umcompress 压缩过的包，命名为jpg.tar.Z </li>\n<li>rar a jpg.rar *.jpg          // rar格式的压缩，需要先下载 rar for linux </li>\n<li>zip jpg.zip *.jpg            // zip格式的压缩，需要先下载 zip for linux</li>\n</ul>\n</li>\n<li><p>解压</p>\n<ul>\n<li>tar –xvf file.tar         // 解压 tar 包 </li>\n<li>tar -xzvf file.tar.gz     // 解压 tar.gz </li>\n<li>tar -xjvf file.tar.bz2    // 解压 tar.bz2 </li>\n<li>tar –xZvf file.tar.Z      // 解压 tar.Z </li>\n<li>unrar e file.rar          // 解压 rar </li>\n<li>unzip file.zip            // 解压 zip </li>\n</ul>\n</li>\n<li><p>总结</p>\n<ul>\n<li>1、*.tar 用 tar –xvf 解压 </li>\n<li>2、*.gz 用 gzip -d或者gunzip 解压 </li>\n<li>3、*.tar.gz和*.tgz 用 tar –xzf 解压 </li>\n<li>4、*.bz2 用 bzip2 -d或者用bunzip2 解压 </li>\n<li>5、*.tar.bz2用tar –xjf 解压 </li>\n<li>6、*.Z 用 uncompress 解压 </li>\n<li>7、*.tar.Z 用tar –xZf 解压 </li>\n<li>8、*.rar 用 unrar e解压 </li>\n<li>9、*.zip 用 unzip 解压</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"系统用户操作命令\"><a href=\"#系统用户操作命令\" class=\"headerlink\" title=\"系统用户操作命令\"></a>系统用户操作命令</h2><h3 id=\"useradd-添加用户\"><a href=\"#useradd-添加用户\" class=\"headerlink\" title=\"useradd 添加用户\"></a>useradd 添加用户</h3><h3 id=\"adduser-添加用户\"><a href=\"#adduser-添加用户\" class=\"headerlink\" title=\"adduser 添加用户\"></a>adduser 添加用户</h3><h3 id=\"userdel-删除用户\"><a href=\"#userdel-删除用户\" class=\"headerlink\" title=\"userdel 删除用户\"></a>userdel 删除用户</h3><h3 id=\"passwd-设置密码\"><a href=\"#passwd-设置密码\" class=\"headerlink\" title=\"passwd 设置密码\"></a>passwd 设置密码</h3><h2 id=\"防火墙相关设置\"><a href=\"#防火墙相关设置\" class=\"headerlink\" title=\"防火墙相关设置\"></a>防火墙相关设置</h2><h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><ul>\n<li><p>作用：保护服务器安全</p>\n</li>\n<li><p>设置防火墙</p>\n<ul>\n<li>开放80，22端口</li>\n</ul>\n</li>\n<li><p>关闭防火墙</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"设置防火墙命令\"><a href=\"#设置防火墙命令\" class=\"headerlink\" title=\"设置防火墙命令\"></a>设置防火墙命令</h3><ul>\n<li>安装：yum install firewalld</li>\n<li>启动：service firewalld start</li>\n<li>状态：service firewalld status</li>\n<li>关闭或禁用：service firewalld stop/disable</li>\n</ul>\n<h2 id=\"提权操作sudo-和文件传输操作\"><a href=\"#提权操作sudo-和文件传输操作\" class=\"headerlink\" title=\"提权操作sudo 和文件传输操作\"></a>提权操作sudo 和文件传输操作</h2><h3 id=\"提权：sudo\"><a href=\"#提权：sudo\" class=\"headerlink\" title=\"提权：sudo\"></a>提权：sudo</h3><ul>\n<li>visudo：将普通用户添加到root信任列表中</li>\n</ul>\n<h3 id=\"文件下载\"><a href=\"#文件下载\" class=\"headerlink\" title=\"文件下载\"></a>文件下载</h3><ul>\n<li>wget ，curl</li>\n</ul>\n<h3 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h3><ul>\n<li>scp</li>\n</ul>\n<p><em>XMind - Trial Version</em></p>\n"},{"title":"MyBatis框架","auther":"ku jin","_content":"# MyBatis框架\n\n## mybatis入门\n\n### mybatis的概述\n\n- java持久层框架 封装了jdbc 等复杂的数据库操作\n- 通过xml或注解的方式将要执行的statement配置\n- 通过java对象和statement中的sql动态参数进行映射生成sql语句，并将结果映射为java对象并返回\n- 采用ORM（Object Relational Mapping 对象关系映射）思想 实体--数据库--映射\n\n### 环境搭建\n\n- 第一步：创建maven工程并导入依赖pom.xml\n\n  <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.4.5</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>8.0.12</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.17</version>\n  </dependency>\n\n- 第二步：创建实体类和dao接口\n- 第三步：创建mybatis的主配置文件SqlMapConfig.xml\n- 第四步：创建映射配置文件IUserDao.xml\n- \n\n### 环境搭建注意事项\n\n- 第一个：创建IUserDao.xml和IUserDao.java时名称保持一致\n- 第二个：xml文件目录要逐个创建，进行分层\n- 第三个：mybatis的配置文件必须包接口一致\n- 第四个：映射文件的mapper标签namsespace属性值必须是dao接口的全类名\n- 第五个：映射配置文件的配置操作。id属性取值必须是dao接口的方法名\n\n### 入门案例\n\n//1.读取配置文件\nString resource = \"mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\n\n//2.创建SqlSessionFactory工厂\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n//3.使用工厂生产SqlSession对象\nSqlSession sqlSession=sqlSessionFactory.openSession();\n//4.使用SqlSession创建Dao接口代理对象\nIUserDao userDao=sqlSession.getMapper(IUserDao.class);\n//5.使用代理对象执行方法\nList<User> all = userDao.findAll();\nfor (User user : all) {\n    System.out.println(user.toString());\n}\n//6.释放资源\nsqlSession.close();\ninputStream.close();\n\n### mybatis基于注解的入门案例\n\n- 把IUserDao.xml移除，在dao接口上使用@Select注解，并指向SQL语句\n- SqlMapperConfig.xml中mapper配置时，使用class属性指定dao接口全类名 \n\n### 自定义mybatis框架分析\n\n- Mybatis 在使用代理dao的方式实现增删改查时做什么事呢\n\n\t- 第一：创建代理对象\n\t- 第二：在代理对象中调用selectList\n\n### \n\n## mybatis基本使用\n\n### mybatis的单表crud操作\n\n### mybatis的参数和返回值\n\n### mybatis的dao编写\n\n### mybatis配置的细节 几个标签的使用\n\n## mybatis深入和多表\n\n### mybatis的连接池\n\n### mybatis的事务控制及设计的方法\n\n### mybatis的多表查询\n\n- 一对多\n- 多\n- 对多\n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/MyBatis框架.md","raw":"---\ntitle: MyBatis框架 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - MyBatis框架 \n---\n# MyBatis框架\n\n## mybatis入门\n\n### mybatis的概述\n\n- java持久层框架 封装了jdbc 等复杂的数据库操作\n- 通过xml或注解的方式将要执行的statement配置\n- 通过java对象和statement中的sql动态参数进行映射生成sql语句，并将结果映射为java对象并返回\n- 采用ORM（Object Relational Mapping 对象关系映射）思想 实体--数据库--映射\n\n### 环境搭建\n\n- 第一步：创建maven工程并导入依赖pom.xml\n\n  <dependency>\n      <groupId>org.mybatis</groupId>\n      <artifactId>mybatis</artifactId>\n      <version>3.4.5</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>8.0.12</version>\n  </dependency>\n  \n  <dependency>\n      <groupId>log4j</groupId>\n      <artifactId>log4j</artifactId>\n      <version>1.2.17</version>\n  </dependency>\n\n- 第二步：创建实体类和dao接口\n- 第三步：创建mybatis的主配置文件SqlMapConfig.xml\n- 第四步：创建映射配置文件IUserDao.xml\n- \n\n### 环境搭建注意事项\n\n- 第一个：创建IUserDao.xml和IUserDao.java时名称保持一致\n- 第二个：xml文件目录要逐个创建，进行分层\n- 第三个：mybatis的配置文件必须包接口一致\n- 第四个：映射文件的mapper标签namsespace属性值必须是dao接口的全类名\n- 第五个：映射配置文件的配置操作。id属性取值必须是dao接口的方法名\n\n### 入门案例\n\n//1.读取配置文件\nString resource = \"mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\n\n//2.创建SqlSessionFactory工厂\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n\n//3.使用工厂生产SqlSession对象\nSqlSession sqlSession=sqlSessionFactory.openSession();\n//4.使用SqlSession创建Dao接口代理对象\nIUserDao userDao=sqlSession.getMapper(IUserDao.class);\n//5.使用代理对象执行方法\nList<User> all = userDao.findAll();\nfor (User user : all) {\n    System.out.println(user.toString());\n}\n//6.释放资源\nsqlSession.close();\ninputStream.close();\n\n### mybatis基于注解的入门案例\n\n- 把IUserDao.xml移除，在dao接口上使用@Select注解，并指向SQL语句\n- SqlMapperConfig.xml中mapper配置时，使用class属性指定dao接口全类名 \n\n### 自定义mybatis框架分析\n\n- Mybatis 在使用代理dao的方式实现增删改查时做什么事呢\n\n\t- 第一：创建代理对象\n\t- 第二：在代理对象中调用selectList\n\n### \n\n## mybatis基本使用\n\n### mybatis的单表crud操作\n\n### mybatis的参数和返回值\n\n### mybatis的dao编写\n\n### mybatis配置的细节 几个标签的使用\n\n## mybatis深入和多表\n\n### mybatis的连接池\n\n### mybatis的事务控制及设计的方法\n\n### mybatis的多表查询\n\n- 一对多\n- 多\n- 对多\n\n*XMind - Trial Version*","slug":"随心记/java_web/MyBatis框架","published":1,"date":"2020-08-02T23:42:43.497Z","updated":"2020-08-02T23:42:59.767Z","_id":"ckdcza4o8006orkamf10uel9v","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"MyBatis框架\"><a href=\"#MyBatis框架\" class=\"headerlink\" title=\"MyBatis框架\"></a>MyBatis框架</h1><h2 id=\"mybatis入门\"><a href=\"#mybatis入门\" class=\"headerlink\" title=\"mybatis入门\"></a>mybatis入门</h2><h3 id=\"mybatis的概述\"><a href=\"#mybatis的概述\" class=\"headerlink\" title=\"mybatis的概述\"></a>mybatis的概述</h3><ul>\n<li>java持久层框架 封装了jdbc 等复杂的数据库操作</li>\n<li>通过xml或注解的方式将要执行的statement配置</li>\n<li>通过java对象和statement中的sql动态参数进行映射生成sql语句，并将结果映射为java对象并返回</li>\n<li>采用ORM（Object Relational Mapping 对象关系映射）思想 实体–数据库–映射</li>\n</ul>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ul>\n<li><p>第一步：创建maven工程并导入依赖pom.xml</p>\n<dependency>\n    <groupid>org.mybatis</groupid>\n    <artifactid>mybatis</artifactid>\n    <version>3.4.5</version>\n</dependency>\n\n<dependency>\n    <groupid>mysql</groupid>\n    <artifactid>mysql-connector-java</artifactid>\n    <version>8.0.12</version>\n</dependency>\n\n<dependency>\n    <groupid>log4j</groupid>\n    <artifactid>log4j</artifactid>\n    <version>1.2.17</version>\n</dependency>\n</li>\n<li><p>第二步：创建实体类和dao接口</p>\n</li>\n<li><p>第三步：创建mybatis的主配置文件SqlMapConfig.xml</p>\n</li>\n<li><p>第四步：创建映射配置文件IUserDao.xml</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"环境搭建注意事项\"><a href=\"#环境搭建注意事项\" class=\"headerlink\" title=\"环境搭建注意事项\"></a>环境搭建注意事项</h3><ul>\n<li>第一个：创建IUserDao.xml和IUserDao.java时名称保持一致</li>\n<li>第二个：xml文件目录要逐个创建，进行分层</li>\n<li>第三个：mybatis的配置文件必须包接口一致</li>\n<li>第四个：映射文件的mapper标签namsespace属性值必须是dao接口的全类名</li>\n<li>第五个：映射配置文件的配置操作。id属性取值必须是dao接口的方法名</li>\n</ul>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><p>//1.读取配置文件<br>String resource = “mybatis-config.xml”;<br>InputStream inputStream = Resources.getResourceAsStream(resource);</p>\n<p>//2.创建SqlSessionFactory工厂<br>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</p>\n<p>//3.使用工厂生产SqlSession对象<br>SqlSession sqlSession=sqlSessionFactory.openSession();<br>//4.使用SqlSession创建Dao接口代理对象<br>IUserDao userDao=sqlSession.getMapper(IUserDao.class);<br>//5.使用代理对象执行方法<br>List<user> all = userDao.findAll();<br>for (User user : all) {<br>    System.out.println(user.toString());<br>}<br>//6.释放资源<br>sqlSession.close();<br>inputStream.close();</user></p>\n<h3 id=\"mybatis基于注解的入门案例\"><a href=\"#mybatis基于注解的入门案例\" class=\"headerlink\" title=\"mybatis基于注解的入门案例\"></a>mybatis基于注解的入门案例</h3><ul>\n<li>把IUserDao.xml移除，在dao接口上使用@Select注解，并指向SQL语句</li>\n<li>SqlMapperConfig.xml中mapper配置时，使用class属性指定dao接口全类名 </li>\n</ul>\n<h3 id=\"自定义mybatis框架分析\"><a href=\"#自定义mybatis框架分析\" class=\"headerlink\" title=\"自定义mybatis框架分析\"></a>自定义mybatis框架分析</h3><ul>\n<li><p>Mybatis 在使用代理dao的方式实现增删改查时做什么事呢</p>\n<ul>\n<li>第一：创建代理对象</li>\n<li>第二：在代理对象中调用selectList</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"mybatis基本使用\"><a href=\"#mybatis基本使用\" class=\"headerlink\" title=\"mybatis基本使用\"></a>mybatis基本使用</h2><h3 id=\"mybatis的单表crud操作\"><a href=\"#mybatis的单表crud操作\" class=\"headerlink\" title=\"mybatis的单表crud操作\"></a>mybatis的单表crud操作</h3><h3 id=\"mybatis的参数和返回值\"><a href=\"#mybatis的参数和返回值\" class=\"headerlink\" title=\"mybatis的参数和返回值\"></a>mybatis的参数和返回值</h3><h3 id=\"mybatis的dao编写\"><a href=\"#mybatis的dao编写\" class=\"headerlink\" title=\"mybatis的dao编写\"></a>mybatis的dao编写</h3><h3 id=\"mybatis配置的细节-几个标签的使用\"><a href=\"#mybatis配置的细节-几个标签的使用\" class=\"headerlink\" title=\"mybatis配置的细节 几个标签的使用\"></a>mybatis配置的细节 几个标签的使用</h3><h2 id=\"mybatis深入和多表\"><a href=\"#mybatis深入和多表\" class=\"headerlink\" title=\"mybatis深入和多表\"></a>mybatis深入和多表</h2><h3 id=\"mybatis的连接池\"><a href=\"#mybatis的连接池\" class=\"headerlink\" title=\"mybatis的连接池\"></a>mybatis的连接池</h3><h3 id=\"mybatis的事务控制及设计的方法\"><a href=\"#mybatis的事务控制及设计的方法\" class=\"headerlink\" title=\"mybatis的事务控制及设计的方法\"></a>mybatis的事务控制及设计的方法</h3><h3 id=\"mybatis的多表查询\"><a href=\"#mybatis的多表查询\" class=\"headerlink\" title=\"mybatis的多表查询\"></a>mybatis的多表查询</h3><ul>\n<li>一对多</li>\n<li>多</li>\n<li>对多</li>\n</ul>\n<p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"MyBatis框架\"><a href=\"#MyBatis框架\" class=\"headerlink\" title=\"MyBatis框架\"></a>MyBatis框架</h1><h2 id=\"mybatis入门\"><a href=\"#mybatis入门\" class=\"headerlink\" title=\"mybatis入门\"></a>mybatis入门</h2><h3 id=\"mybatis的概述\"><a href=\"#mybatis的概述\" class=\"headerlink\" title=\"mybatis的概述\"></a>mybatis的概述</h3><ul>\n<li>java持久层框架 封装了jdbc 等复杂的数据库操作</li>\n<li>通过xml或注解的方式将要执行的statement配置</li>\n<li>通过java对象和statement中的sql动态参数进行映射生成sql语句，并将结果映射为java对象并返回</li>\n<li>采用ORM（Object Relational Mapping 对象关系映射）思想 实体–数据库–映射</li>\n</ul>\n<h3 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h3><ul>\n<li><p>第一步：创建maven工程并导入依赖pom.xml</p>\n<dependency>\n    <groupId>org.mybatis</groupId>\n    <artifactId>mybatis</artifactId>\n    <version>3.4.5</version>\n</dependency>\n\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.12</version>\n</dependency>\n\n<dependency>\n    <groupId>log4j</groupId>\n    <artifactId>log4j</artifactId>\n    <version>1.2.17</version>\n</dependency>\n</li>\n<li><p>第二步：创建实体类和dao接口</p>\n</li>\n<li><p>第三步：创建mybatis的主配置文件SqlMapConfig.xml</p>\n</li>\n<li><p>第四步：创建映射配置文件IUserDao.xml</p>\n</li>\n<li></li>\n</ul>\n<h3 id=\"环境搭建注意事项\"><a href=\"#环境搭建注意事项\" class=\"headerlink\" title=\"环境搭建注意事项\"></a>环境搭建注意事项</h3><ul>\n<li>第一个：创建IUserDao.xml和IUserDao.java时名称保持一致</li>\n<li>第二个：xml文件目录要逐个创建，进行分层</li>\n<li>第三个：mybatis的配置文件必须包接口一致</li>\n<li>第四个：映射文件的mapper标签namsespace属性值必须是dao接口的全类名</li>\n<li>第五个：映射配置文件的配置操作。id属性取值必须是dao接口的方法名</li>\n</ul>\n<h3 id=\"入门案例\"><a href=\"#入门案例\" class=\"headerlink\" title=\"入门案例\"></a>入门案例</h3><p>//1.读取配置文件<br>String resource = “mybatis-config.xml”;<br>InputStream inputStream = Resources.getResourceAsStream(resource);</p>\n<p>//2.创建SqlSessionFactory工厂<br>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</p>\n<p>//3.使用工厂生产SqlSession对象<br>SqlSession sqlSession=sqlSessionFactory.openSession();<br>//4.使用SqlSession创建Dao接口代理对象<br>IUserDao userDao=sqlSession.getMapper(IUserDao.class);<br>//5.使用代理对象执行方法<br>List<User> all = userDao.findAll();<br>for (User user : all) {<br>    System.out.println(user.toString());<br>}<br>//6.释放资源<br>sqlSession.close();<br>inputStream.close();</p>\n<h3 id=\"mybatis基于注解的入门案例\"><a href=\"#mybatis基于注解的入门案例\" class=\"headerlink\" title=\"mybatis基于注解的入门案例\"></a>mybatis基于注解的入门案例</h3><ul>\n<li>把IUserDao.xml移除，在dao接口上使用@Select注解，并指向SQL语句</li>\n<li>SqlMapperConfig.xml中mapper配置时，使用class属性指定dao接口全类名 </li>\n</ul>\n<h3 id=\"自定义mybatis框架分析\"><a href=\"#自定义mybatis框架分析\" class=\"headerlink\" title=\"自定义mybatis框架分析\"></a>自定义mybatis框架分析</h3><ul>\n<li><p>Mybatis 在使用代理dao的方式实现增删改查时做什么事呢</p>\n<ul>\n<li>第一：创建代理对象</li>\n<li>第二：在代理对象中调用selectList</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"mybatis基本使用\"><a href=\"#mybatis基本使用\" class=\"headerlink\" title=\"mybatis基本使用\"></a>mybatis基本使用</h2><h3 id=\"mybatis的单表crud操作\"><a href=\"#mybatis的单表crud操作\" class=\"headerlink\" title=\"mybatis的单表crud操作\"></a>mybatis的单表crud操作</h3><h3 id=\"mybatis的参数和返回值\"><a href=\"#mybatis的参数和返回值\" class=\"headerlink\" title=\"mybatis的参数和返回值\"></a>mybatis的参数和返回值</h3><h3 id=\"mybatis的dao编写\"><a href=\"#mybatis的dao编写\" class=\"headerlink\" title=\"mybatis的dao编写\"></a>mybatis的dao编写</h3><h3 id=\"mybatis配置的细节-几个标签的使用\"><a href=\"#mybatis配置的细节-几个标签的使用\" class=\"headerlink\" title=\"mybatis配置的细节 几个标签的使用\"></a>mybatis配置的细节 几个标签的使用</h3><h2 id=\"mybatis深入和多表\"><a href=\"#mybatis深入和多表\" class=\"headerlink\" title=\"mybatis深入和多表\"></a>mybatis深入和多表</h2><h3 id=\"mybatis的连接池\"><a href=\"#mybatis的连接池\" class=\"headerlink\" title=\"mybatis的连接池\"></a>mybatis的连接池</h3><h3 id=\"mybatis的事务控制及设计的方法\"><a href=\"#mybatis的事务控制及设计的方法\" class=\"headerlink\" title=\"mybatis的事务控制及设计的方法\"></a>mybatis的事务控制及设计的方法</h3><h3 id=\"mybatis的多表查询\"><a href=\"#mybatis的多表查询\" class=\"headerlink\" title=\"mybatis的多表查询\"></a>mybatis的多表查询</h3><ul>\n<li>一对多</li>\n<li>多</li>\n<li>对多</li>\n</ul>\n<p><em>XMind - Trial Version</em></p>\n"},{"title":"Spring入门","auther":"ku jin","_content":"# Spring入门\n\n## 课程概述\n\n## IOC介绍\n\n### ioc概念介绍\n\n- 控制反转\n\n\t- 控制对象的创建及销毁（生命周期）\n\t- 将对象的控制权交给ioc容器\n\n## Springioc入门\n\n## Bean实例化和注入\n\n### 实例化Bean的方式介绍\n\n### 注入Bean的方式介绍\n\n## Bean的作用域\n\n### singleton\n\n### web相关作用域\n\n### 自定义作用域\n\n## Bean的懒加载\n\n## Bean的初始和销毁逻辑处理\n\n## Bean属性继承\n\n## SpringIoc注解\n\n### 注解的基本介绍使用\n\n### 通过注解注入Bean\n\n### 通过注解设定Bean的作用域\n\n### 通过注解开启Bean的懒加载\n\n### 通过注解编写Bean初始化及销毁逻辑处理\n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/Spring入门.md","raw":"---\ntitle: Spring入门 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - Spring入门 \n---\n# Spring入门\n\n## 课程概述\n\n## IOC介绍\n\n### ioc概念介绍\n\n- 控制反转\n\n\t- 控制对象的创建及销毁（生命周期）\n\t- 将对象的控制权交给ioc容器\n\n## Springioc入门\n\n## Bean实例化和注入\n\n### 实例化Bean的方式介绍\n\n### 注入Bean的方式介绍\n\n## Bean的作用域\n\n### singleton\n\n### web相关作用域\n\n### 自定义作用域\n\n## Bean的懒加载\n\n## Bean的初始和销毁逻辑处理\n\n## Bean属性继承\n\n## SpringIoc注解\n\n### 注解的基本介绍使用\n\n### 通过注解注入Bean\n\n### 通过注解设定Bean的作用域\n\n### 通过注解开启Bean的懒加载\n\n### 通过注解编写Bean初始化及销毁逻辑处理\n\n*XMind - Trial Version*","slug":"随心记/java_web/Spring入门","published":1,"date":"2020-08-02T23:42:43.563Z","updated":"2020-08-02T23:42:59.768Z","_id":"ckdcza4oa006qrkam0le4bi82","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Spring入门\"><a href=\"#Spring入门\" class=\"headerlink\" title=\"Spring入门\"></a>Spring入门</h1><h2 id=\"课程概述\"><a href=\"#课程概述\" class=\"headerlink\" title=\"课程概述\"></a>课程概述</h2><h2 id=\"IOC介绍\"><a href=\"#IOC介绍\" class=\"headerlink\" title=\"IOC介绍\"></a>IOC介绍</h2><h3 id=\"ioc概念介绍\"><a href=\"#ioc概念介绍\" class=\"headerlink\" title=\"ioc概念介绍\"></a>ioc概念介绍</h3><ul>\n<li><p>控制反转</p>\n<ul>\n<li>控制对象的创建及销毁（生命周期）</li>\n<li>将对象的控制权交给ioc容器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Springioc入门\"><a href=\"#Springioc入门\" class=\"headerlink\" title=\"Springioc入门\"></a>Springioc入门</h2><h2 id=\"Bean实例化和注入\"><a href=\"#Bean实例化和注入\" class=\"headerlink\" title=\"Bean实例化和注入\"></a>Bean实例化和注入</h2><h3 id=\"实例化Bean的方式介绍\"><a href=\"#实例化Bean的方式介绍\" class=\"headerlink\" title=\"实例化Bean的方式介绍\"></a>实例化Bean的方式介绍</h3><h3 id=\"注入Bean的方式介绍\"><a href=\"#注入Bean的方式介绍\" class=\"headerlink\" title=\"注入Bean的方式介绍\"></a>注入Bean的方式介绍</h3><h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><h3 id=\"singleton\"><a href=\"#singleton\" class=\"headerlink\" title=\"singleton\"></a>singleton</h3><h3 id=\"web相关作用域\"><a href=\"#web相关作用域\" class=\"headerlink\" title=\"web相关作用域\"></a>web相关作用域</h3><h3 id=\"自定义作用域\"><a href=\"#自定义作用域\" class=\"headerlink\" title=\"自定义作用域\"></a>自定义作用域</h3><h2 id=\"Bean的懒加载\"><a href=\"#Bean的懒加载\" class=\"headerlink\" title=\"Bean的懒加载\"></a>Bean的懒加载</h2><h2 id=\"Bean的初始和销毁逻辑处理\"><a href=\"#Bean的初始和销毁逻辑处理\" class=\"headerlink\" title=\"Bean的初始和销毁逻辑处理\"></a>Bean的初始和销毁逻辑处理</h2><h2 id=\"Bean属性继承\"><a href=\"#Bean属性继承\" class=\"headerlink\" title=\"Bean属性继承\"></a>Bean属性继承</h2><h2 id=\"SpringIoc注解\"><a href=\"#SpringIoc注解\" class=\"headerlink\" title=\"SpringIoc注解\"></a>SpringIoc注解</h2><h3 id=\"注解的基本介绍使用\"><a href=\"#注解的基本介绍使用\" class=\"headerlink\" title=\"注解的基本介绍使用\"></a>注解的基本介绍使用</h3><h3 id=\"通过注解注入Bean\"><a href=\"#通过注解注入Bean\" class=\"headerlink\" title=\"通过注解注入Bean\"></a>通过注解注入Bean</h3><h3 id=\"通过注解设定Bean的作用域\"><a href=\"#通过注解设定Bean的作用域\" class=\"headerlink\" title=\"通过注解设定Bean的作用域\"></a>通过注解设定Bean的作用域</h3><h3 id=\"通过注解开启Bean的懒加载\"><a href=\"#通过注解开启Bean的懒加载\" class=\"headerlink\" title=\"通过注解开启Bean的懒加载\"></a>通过注解开启Bean的懒加载</h3><h3 id=\"通过注解编写Bean初始化及销毁逻辑处理\"><a href=\"#通过注解编写Bean初始化及销毁逻辑处理\" class=\"headerlink\" title=\"通过注解编写Bean初始化及销毁逻辑处理\"></a>通过注解编写Bean初始化及销毁逻辑处理</h3><p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Spring入门\"><a href=\"#Spring入门\" class=\"headerlink\" title=\"Spring入门\"></a>Spring入门</h1><h2 id=\"课程概述\"><a href=\"#课程概述\" class=\"headerlink\" title=\"课程概述\"></a>课程概述</h2><h2 id=\"IOC介绍\"><a href=\"#IOC介绍\" class=\"headerlink\" title=\"IOC介绍\"></a>IOC介绍</h2><h3 id=\"ioc概念介绍\"><a href=\"#ioc概念介绍\" class=\"headerlink\" title=\"ioc概念介绍\"></a>ioc概念介绍</h3><ul>\n<li><p>控制反转</p>\n<ul>\n<li>控制对象的创建及销毁（生命周期）</li>\n<li>将对象的控制权交给ioc容器</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Springioc入门\"><a href=\"#Springioc入门\" class=\"headerlink\" title=\"Springioc入门\"></a>Springioc入门</h2><h2 id=\"Bean实例化和注入\"><a href=\"#Bean实例化和注入\" class=\"headerlink\" title=\"Bean实例化和注入\"></a>Bean实例化和注入</h2><h3 id=\"实例化Bean的方式介绍\"><a href=\"#实例化Bean的方式介绍\" class=\"headerlink\" title=\"实例化Bean的方式介绍\"></a>实例化Bean的方式介绍</h3><h3 id=\"注入Bean的方式介绍\"><a href=\"#注入Bean的方式介绍\" class=\"headerlink\" title=\"注入Bean的方式介绍\"></a>注入Bean的方式介绍</h3><h2 id=\"Bean的作用域\"><a href=\"#Bean的作用域\" class=\"headerlink\" title=\"Bean的作用域\"></a>Bean的作用域</h2><h3 id=\"singleton\"><a href=\"#singleton\" class=\"headerlink\" title=\"singleton\"></a>singleton</h3><h3 id=\"web相关作用域\"><a href=\"#web相关作用域\" class=\"headerlink\" title=\"web相关作用域\"></a>web相关作用域</h3><h3 id=\"自定义作用域\"><a href=\"#自定义作用域\" class=\"headerlink\" title=\"自定义作用域\"></a>自定义作用域</h3><h2 id=\"Bean的懒加载\"><a href=\"#Bean的懒加载\" class=\"headerlink\" title=\"Bean的懒加载\"></a>Bean的懒加载</h2><h2 id=\"Bean的初始和销毁逻辑处理\"><a href=\"#Bean的初始和销毁逻辑处理\" class=\"headerlink\" title=\"Bean的初始和销毁逻辑处理\"></a>Bean的初始和销毁逻辑处理</h2><h2 id=\"Bean属性继承\"><a href=\"#Bean属性继承\" class=\"headerlink\" title=\"Bean属性继承\"></a>Bean属性继承</h2><h2 id=\"SpringIoc注解\"><a href=\"#SpringIoc注解\" class=\"headerlink\" title=\"SpringIoc注解\"></a>SpringIoc注解</h2><h3 id=\"注解的基本介绍使用\"><a href=\"#注解的基本介绍使用\" class=\"headerlink\" title=\"注解的基本介绍使用\"></a>注解的基本介绍使用</h3><h3 id=\"通过注解注入Bean\"><a href=\"#通过注解注入Bean\" class=\"headerlink\" title=\"通过注解注入Bean\"></a>通过注解注入Bean</h3><h3 id=\"通过注解设定Bean的作用域\"><a href=\"#通过注解设定Bean的作用域\" class=\"headerlink\" title=\"通过注解设定Bean的作用域\"></a>通过注解设定Bean的作用域</h3><h3 id=\"通过注解开启Bean的懒加载\"><a href=\"#通过注解开启Bean的懒加载\" class=\"headerlink\" title=\"通过注解开启Bean的懒加载\"></a>通过注解开启Bean的懒加载</h3><h3 id=\"通过注解编写Bean初始化及销毁逻辑处理\"><a href=\"#通过注解编写Bean初始化及销毁逻辑处理\" class=\"headerlink\" title=\"通过注解编写Bean初始化及销毁逻辑处理\"></a>通过注解编写Bean初始化及销毁逻辑处理</h3><p><em>XMind - Trial Version</em></p>\n"},{"title":"多线程编程","auther":"ku jin","_content":"# 多线程编程\n\n## 进程与线程\n\n### \n\n## 多线程的两种实现方式\n\n## 线程的基本操作\n\n## 多线程同步与死锁\n\n## synchronized同步实现操作\n\n## Object类对多线程的支持\n\n## 线程生命周期\n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/多线程编程.md","raw":"---\ntitle: 多线程编程 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - 多线程编程 \n---\n# 多线程编程\n\n## 进程与线程\n\n### \n\n## 多线程的两种实现方式\n\n## 线程的基本操作\n\n## 多线程同步与死锁\n\n## synchronized同步实现操作\n\n## Object类对多线程的支持\n\n## 线程生命周期\n\n*XMind - Trial Version*","slug":"随心记/java_web/多线程编程","published":1,"date":"2020-08-02T23:42:43.583Z","updated":"2020-08-02T23:42:59.769Z","_id":"ckdcza4ob006urkam9mw15xub","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"多线程编程\"><a href=\"#多线程编程\" class=\"headerlink\" title=\"多线程编程\"></a>多线程编程</h1><h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"多线程的两种实现方式\"><a href=\"#多线程的两种实现方式\" class=\"headerlink\" title=\"多线程的两种实现方式\"></a>多线程的两种实现方式</h2><h2 id=\"线程的基本操作\"><a href=\"#线程的基本操作\" class=\"headerlink\" title=\"线程的基本操作\"></a>线程的基本操作</h2><h2 id=\"多线程同步与死锁\"><a href=\"#多线程同步与死锁\" class=\"headerlink\" title=\"多线程同步与死锁\"></a>多线程同步与死锁</h2><h2 id=\"synchronized同步实现操作\"><a href=\"#synchronized同步实现操作\" class=\"headerlink\" title=\"synchronized同步实现操作\"></a>synchronized同步实现操作</h2><h2 id=\"Object类对多线程的支持\"><a href=\"#Object类对多线程的支持\" class=\"headerlink\" title=\"Object类对多线程的支持\"></a>Object类对多线程的支持</h2><h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"多线程编程\"><a href=\"#多线程编程\" class=\"headerlink\" title=\"多线程编程\"></a>多线程编程</h1><h2 id=\"进程与线程\"><a href=\"#进程与线程\" class=\"headerlink\" title=\"进程与线程\"></a>进程与线程</h2><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"多线程的两种实现方式\"><a href=\"#多线程的两种实现方式\" class=\"headerlink\" title=\"多线程的两种实现方式\"></a>多线程的两种实现方式</h2><h2 id=\"线程的基本操作\"><a href=\"#线程的基本操作\" class=\"headerlink\" title=\"线程的基本操作\"></a>线程的基本操作</h2><h2 id=\"多线程同步与死锁\"><a href=\"#多线程同步与死锁\" class=\"headerlink\" title=\"多线程同步与死锁\"></a>多线程同步与死锁</h2><h2 id=\"synchronized同步实现操作\"><a href=\"#synchronized同步实现操作\" class=\"headerlink\" title=\"synchronized同步实现操作\"></a>synchronized同步实现操作</h2><h2 id=\"Object类对多线程的支持\"><a href=\"#Object类对多线程的支持\" class=\"headerlink\" title=\"Object类对多线程的支持\"></a>Object类对多线程的支持</h2><h2 id=\"线程生命周期\"><a href=\"#线程生命周期\" class=\"headerlink\" title=\"线程生命周期\"></a>线程生命周期</h2><p><em>XMind - Trial Version</em></p>\n"},{"title":"字节流与字符流","auther":"ku jin","_content":"# 字节流与字符流\n\n字节流与字符流区别\n\n## OutputStream字节输出流\n\n### 字节(byte)是进行i/o操作的基本数据单位\n\n### \n\n## Writer字符输出流\n\n## Reader字符输入流\n\n## 转换流\n\n## 案例\n\n## \n\n*XMind - Trial Version*","source":"_posts/随心记/java_web/字节流与字符流.md","raw":"---\ntitle: 字节流与字符流 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - java_web\ntags: # 标签=目标文件夹\n - 字节流与字符流 \n---\n# 字节流与字符流\n\n字节流与字符流区别\n\n## OutputStream字节输出流\n\n### 字节(byte)是进行i/o操作的基本数据单位\n\n### \n\n## Writer字符输出流\n\n## Reader字符输入流\n\n## 转换流\n\n## 案例\n\n## \n\n*XMind - Trial Version*","slug":"随心记/java_web/字节流与字符流","published":1,"date":"2020-08-02T23:42:43.593Z","updated":"2020-08-02T23:42:59.769Z","_id":"ckdcza4oc006vrkamcpeoedde","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"字节流与字符流\"><a href=\"#字节流与字符流\" class=\"headerlink\" title=\"字节流与字符流\"></a>字节流与字符流</h1><p>字节流与字符流区别</p>\n<h2 id=\"OutputStream字节输出流\"><a href=\"#OutputStream字节输出流\" class=\"headerlink\" title=\"OutputStream字节输出流\"></a>OutputStream字节输出流</h2><h3 id=\"字节-byte-是进行i-o操作的基本数据单位\"><a href=\"#字节-byte-是进行i-o操作的基本数据单位\" class=\"headerlink\" title=\"字节(byte)是进行i/o操作的基本数据单位\"></a>字节(byte)是进行i/o操作的基本数据单位</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"Writer字符输出流\"><a href=\"#Writer字符输出流\" class=\"headerlink\" title=\"Writer字符输出流\"></a>Writer字符输出流</h2><h2 id=\"Reader字符输入流\"><a href=\"#Reader字符输入流\" class=\"headerlink\" title=\"Reader字符输入流\"></a>Reader字符输入流</h2><h2 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><p><em>XMind - Trial Version</em></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"字节流与字符流\"><a href=\"#字节流与字符流\" class=\"headerlink\" title=\"字节流与字符流\"></a>字节流与字符流</h1><p>字节流与字符流区别</p>\n<h2 id=\"OutputStream字节输出流\"><a href=\"#OutputStream字节输出流\" class=\"headerlink\" title=\"OutputStream字节输出流\"></a>OutputStream字节输出流</h2><h3 id=\"字节-byte-是进行i-o操作的基本数据单位\"><a href=\"#字节-byte-是进行i-o操作的基本数据单位\" class=\"headerlink\" title=\"字节(byte)是进行i/o操作的基本数据单位\"></a>字节(byte)是进行i/o操作的基本数据单位</h3><h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h3><h2 id=\"Writer字符输出流\"><a href=\"#Writer字符输出流\" class=\"headerlink\" title=\"Writer字符输出流\"></a>Writer字符输出流</h2><h2 id=\"Reader字符输入流\"><a href=\"#Reader字符输入流\" class=\"headerlink\" title=\"Reader字符输入流\"></a>Reader字符输入流</h2><h2 id=\"转换流\"><a href=\"#转换流\" class=\"headerlink\" title=\"转换流\"></a>转换流</h2><h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a></h2><p><em>XMind - Trial Version</em></p>\n"},{"title":"1-1-安装","auther":"ku jin","_content":"# Redis安装方式\n\n官网：https://redis.io/\n\n官方文档：https://redis.io/documentation\n\n## 编译安装\n\n(直接，不过gcc环境太麻烦，还容易出错)\n\n### 准备好gcc环境\n\n```\nyum install -y cpp\nyum install -y binutils\nyum install -y glibc\nyum install -y glibc-kernheaders\nyum install -y glibc-common\nyum install -y glibc-devel\nyum install -y gcc\nyum install -y make\n# 升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash\n```\n\n### 下载， 解压，编译，安装\n\n<img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708114704238.png\" alt=\"image-20200708114704238\" style=\"zoom:50%;\" />\n\n```shell\nwget http://download.redis.io/releases/redis-6.0.5.tar.gz\ntar xzf redis-6.0.5.tar.gz\ncd redis-6.0.5\nmake\n# 注意 如果提示错误 In file included from adlist.c:34:0: zmalloc.h:50:31: fatal error: jemalloc/\n# 执行 make MALLOC=libc\nmake install\n```\n\n### 运行\n\n```shell\nredis-server redis.conf\n```\n\n![image-20200708121651755](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708121651755.png)\n\n\n\n## 使用Docker安装\n\n（提前安装运行docker）\n\n```shell\ndocker pull redis\n```\n\n![image-20200708113748295](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708113748295.png)\n\n## 创建配置文件\n\n当前目录下创建redis文件夹,redis目录下创建 redis.conf \n\n redis.conf 设置配置信息\n\n```groovy\n#修改为守护模式\ndaemonize yes\n#设置进程锁文件\npidfile redis/redis.pid\n#端口\nport 6379\n#客户端超时时间\ntimeout 300\n#日志级别\nloglevel debug\n#日志文件位置\nlogfile redis/log-redis.log\n#设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id\ndatabases 8\n##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n#save <seconds> <changes>\n#Redis默认配置文件中提供了三个条件：\nsave 900 1\nsave 300 10\nsave 60 10000\n#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，\n#可以关闭该#选项，但会导致数据库文件变的巨大\nrdbcompression yes\n#指定本地数据库文件名\ndbfilename dump.rdb\n#指定本地数据库路径\ndir redis/db/\n#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能\n#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有\n#的数据会在一段时间内只存在于内存中\nappendonly no\n#指定更新日志条件，共有3个可选值：\n#no：表示等操作系统进行数据缓存同步到磁盘（快）\n#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）\n#everysec：表示每秒同步一次（折衷，默认值）\nappendfsync everysec\n#redis配置外网访问：\nprotected-mode no\n#配置密码\nrequirepass root\n```\n\n## 运行容器\n\n```shell\ndocker run -p 6379:6379 --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server\n```\n\n## 进入容器并开启客户端查看redis信息\n\n```shell\ndocker exec -it myredis redis-cli\n```\n\n\n","source":"_posts/随心记/Redis学习/1-1-安装.md","raw":"---\ntitle: 1-1-安装 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 1-1-安装 \n---\n# Redis安装方式\n\n官网：https://redis.io/\n\n官方文档：https://redis.io/documentation\n\n## 编译安装\n\n(直接，不过gcc环境太麻烦，还容易出错)\n\n### 准备好gcc环境\n\n```\nyum install -y cpp\nyum install -y binutils\nyum install -y glibc\nyum install -y glibc-kernheaders\nyum install -y glibc-common\nyum install -y glibc-devel\nyum install -y gcc\nyum install -y make\n# 升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash\n```\n\n### 下载， 解压，编译，安装\n\n<img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708114704238.png\" alt=\"image-20200708114704238\" style=\"zoom:50%;\" />\n\n```shell\nwget http://download.redis.io/releases/redis-6.0.5.tar.gz\ntar xzf redis-6.0.5.tar.gz\ncd redis-6.0.5\nmake\n# 注意 如果提示错误 In file included from adlist.c:34:0: zmalloc.h:50:31: fatal error: jemalloc/\n# 执行 make MALLOC=libc\nmake install\n```\n\n### 运行\n\n```shell\nredis-server redis.conf\n```\n\n![image-20200708121651755](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708121651755.png)\n\n\n\n## 使用Docker安装\n\n（提前安装运行docker）\n\n```shell\ndocker pull redis\n```\n\n![image-20200708113748295](D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708113748295.png)\n\n## 创建配置文件\n\n当前目录下创建redis文件夹,redis目录下创建 redis.conf \n\n redis.conf 设置配置信息\n\n```groovy\n#修改为守护模式\ndaemonize yes\n#设置进程锁文件\npidfile redis/redis.pid\n#端口\nport 6379\n#客户端超时时间\ntimeout 300\n#日志级别\nloglevel debug\n#日志文件位置\nlogfile redis/log-redis.log\n#设置数据库的数量，默认数据库为0，可以使用SELECT <dbid>命令在连接上指定数据库id\ndatabases 8\n##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n#save <seconds> <changes>\n#Redis默认配置文件中提供了三个条件：\nsave 900 1\nsave 300 10\nsave 60 10000\n#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，\n#可以关闭该#选项，但会导致数据库文件变的巨大\nrdbcompression yes\n#指定本地数据库文件名\ndbfilename dump.rdb\n#指定本地数据库路径\ndir redis/db/\n#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能\n#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有\n#的数据会在一段时间内只存在于内存中\nappendonly no\n#指定更新日志条件，共有3个可选值：\n#no：表示等操作系统进行数据缓存同步到磁盘（快）\n#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）\n#everysec：表示每秒同步一次（折衷，默认值）\nappendfsync everysec\n#redis配置外网访问：\nprotected-mode no\n#配置密码\nrequirepass root\n```\n\n## 运行容器\n\n```shell\ndocker run -p 6379:6379 --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server\n```\n\n## 进入容器并开启客户端查看redis信息\n\n```shell\ndocker exec -it myredis redis-cli\n```\n\n\n","slug":"随心记/Redis学习/1-1-安装","published":1,"date":"2020-08-02T23:42:43.790Z","updated":"2020-08-02T23:42:59.786Z","_id":"ckdcza4ou0083rkam0xi868sj","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Redis安装方式\"><a href=\"#Redis安装方式\" class=\"headerlink\" title=\"Redis安装方式\"></a>Redis安装方式</h1><p>官网：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>官方文档：<a href=\"https://redis.io/documentation\">https://redis.io/documentation</a></p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>(直接，不过gcc环境太麻烦，还容易出错)</p>\n<h3 id=\"准备好gcc环境\"><a href=\"#准备好gcc环境\" class=\"headerlink\" title=\"准备好gcc环境\"></a>准备好gcc环境</h3><pre><code>yum install -y cpp\nyum install -y binutils\nyum install -y glibc\nyum install -y glibc-kernheaders\nyum install -y glibc-common\nyum install -y glibc-devel\nyum install -y gcc\nyum install -y make\n# 升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash</code></pre>\n<h3 id=\"下载，-解压，编译，安装\"><a href=\"#下载，-解压，编译，安装\" class=\"headerlink\" title=\"下载， 解压，编译，安装\"></a>下载， 解压，编译，安装</h3><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708114704238.png\" alt=\"image-20200708114704238\" style=\"zoom:50%;\">\n\n<pre class=\" language-shell\"><code class=\"language-shell\">wget http://download.redis.io/releases/redis-6.0.5.tar.gz\ntar xzf redis-6.0.5.tar.gz\ncd redis-6.0.5\nmake\n# 注意 如果提示错误 In file included from adlist.c:34:0: zmalloc.h:50:31: fatal error: jemalloc/\n# 执行 make MALLOC=libc\nmake install</code></pre>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><pre class=\" language-shell\"><code class=\"language-shell\">redis-server redis.conf</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708121651755.png\" alt=\"image-20200708121651755\"></p>\n<h2 id=\"使用Docker安装\"><a href=\"#使用Docker安装\" class=\"headerlink\" title=\"使用Docker安装\"></a>使用Docker安装</h2><p>（提前安装运行docker）</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">docker pull redis</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708113748295.png\" alt=\"image-20200708113748295\"></p>\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><p>当前目录下创建redis文件夹,redis目录下创建 redis.conf </p>\n<p> redis.conf 设置配置信息</p>\n<pre class=\" language-groovy\"><code class=\"language-groovy\">#修改为守护模式\ndaemonize yes\n#设置进程锁文件\npidfile redis<span class=\"token operator\">/</span>redis<span class=\"token operator\">.</span>pid\n#端口\nport <span class=\"token number\">6379</span>\n#客户端超时时间\ntimeout <span class=\"token number\">300</span>\n#日志级别\nloglevel debug\n#日志文件位置\nlogfile redis<span class=\"token operator\">/</span>log<span class=\"token operator\">-</span>redis<span class=\"token operator\">.</span>log\n#设置数据库的数量，默认数据库为<span class=\"token number\">0</span>，可以使用SELECT <span class=\"token operator\">&lt;</span>dbid<span class=\"token operator\">></span>命令在连接上指定数据库id\ndatabases <span class=\"token number\">8</span>\n##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n#save <span class=\"token operator\">&lt;</span>seconds<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>changes<span class=\"token operator\">></span>\n#Redis默认配置文件中提供了三个条件：\nsave <span class=\"token number\">900</span> <span class=\"token number\">1</span>\nsave <span class=\"token number\">300</span> <span class=\"token number\">10</span>\nsave <span class=\"token number\">60</span> <span class=\"token number\">10000</span>\n#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，\n#可以关闭该#选项，但会导致数据库文件变的巨大\nrdbcompression yes\n#指定本地数据库文件名\ndbfilename dump<span class=\"token operator\">.</span>rdb\n#指定本地数据库路径\ndir redis<span class=\"token string\">/db/</span>\n#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能\n#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有\n#的数据会在一段时间内只存在于内存中\nappendonly no\n#指定更新日志条件，共有<span class=\"token number\">3</span>个可选值：\n#no：表示等操作系统进行数据缓存同步到磁盘（快）\n#always：表示每次更新操作后手动调用<span class=\"token function\">fsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>将数据写到磁盘（慢，安全）\n#everysec：表示每秒同步一次（折衷，默认值）\nappendfsync everysec\n#redis配置外网访问：\n<span class=\"token keyword\">protected</span><span class=\"token operator\">-</span>mode no\n#配置密码\nrequirepass root</code></pre>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><pre class=\" language-shell\"><code class=\"language-shell\">docker run -p 6379:6379 --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server</code></pre>\n<h2 id=\"进入容器并开启客户端查看redis信息\"><a href=\"#进入容器并开启客户端查看redis信息\" class=\"headerlink\" title=\"进入容器并开启客户端查看redis信息\"></a>进入容器并开启客户端查看redis信息</h2><pre class=\" language-shell\"><code class=\"language-shell\">docker exec -it myredis redis-cli</code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Redis安装方式\"><a href=\"#Redis安装方式\" class=\"headerlink\" title=\"Redis安装方式\"></a>Redis安装方式</h1><p>官网：<a href=\"https://redis.io/\">https://redis.io/</a></p>\n<p>官方文档：<a href=\"https://redis.io/documentation\">https://redis.io/documentation</a></p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>(直接，不过gcc环境太麻烦，还容易出错)</p>\n<h3 id=\"准备好gcc环境\"><a href=\"#准备好gcc环境\" class=\"headerlink\" title=\"准备好gcc环境\"></a>准备好gcc环境</h3><pre><code>yum install -y cpp\nyum install -y binutils\nyum install -y glibc\nyum install -y glibc-kernheaders\nyum install -y glibc-common\nyum install -y glibc-devel\nyum install -y gcc\nyum install -y make\n# 升级gcc\nyum -y install centos-release-scl\nyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils\nscl enable devtoolset-9 bash</code></pre>\n<h3 id=\"下载，-解压，编译，安装\"><a href=\"#下载，-解压，编译，安装\" class=\"headerlink\" title=\"下载， 解压，编译，安装\"></a>下载， 解压，编译，安装</h3><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708114704238.png\" alt=\"image-20200708114704238\" style=\"zoom:50%;\" />\n\n<pre><code class=\"shell\">wget http://download.redis.io/releases/redis-6.0.5.tar.gz\ntar xzf redis-6.0.5.tar.gz\ncd redis-6.0.5\nmake\n# 注意 如果提示错误 In file included from adlist.c:34:0: zmalloc.h:50:31: fatal error: jemalloc/\n# 执行 make MALLOC=libc\nmake install</code></pre>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><pre><code class=\"shell\">redis-server redis.conf</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708121651755.png\" alt=\"image-20200708121651755\"></p>\n<h2 id=\"使用Docker安装\"><a href=\"#使用Docker安装\" class=\"headerlink\" title=\"使用Docker安装\"></a>使用Docker安装</h2><p>（提前安装运行docker）</p>\n<pre><code class=\"shell\">docker pull redis</code></pre>\n<p><img src=\"D:\\OneDrive\\随心记\\Docker学习\\image\\image-20200708113748295.png\" alt=\"image-20200708113748295\"></p>\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><p>当前目录下创建redis文件夹,redis目录下创建 redis.conf </p>\n<p> redis.conf 设置配置信息</p>\n<pre><code class=\"groovy\">#修改为守护模式\ndaemonize yes\n#设置进程锁文件\npidfile redis/redis.pid\n#端口\nport 6379\n#客户端超时时间\ntimeout 300\n#日志级别\nloglevel debug\n#日志文件位置\nlogfile redis/log-redis.log\n#设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id\ndatabases 8\n##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合\n#save &lt;seconds&gt; &lt;changes&gt;\n#Redis默认配置文件中提供了三个条件：\nsave 900 1\nsave 300 10\nsave 60 10000\n#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，\n#可以关闭该#选项，但会导致数据库文件变的巨大\nrdbcompression yes\n#指定本地数据库文件名\ndbfilename dump.rdb\n#指定本地数据库路径\ndir redis/db/\n#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能\n#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有\n#的数据会在一段时间内只存在于内存中\nappendonly no\n#指定更新日志条件，共有3个可选值：\n#no：表示等操作系统进行数据缓存同步到磁盘（快）\n#always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）\n#everysec：表示每秒同步一次（折衷，默认值）\nappendfsync everysec\n#redis配置外网访问：\nprotected-mode no\n#配置密码\nrequirepass root</code></pre>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><pre><code class=\"shell\">docker run -p 6379:6379 --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server</code></pre>\n<h2 id=\"进入容器并开启客户端查看redis信息\"><a href=\"#进入容器并开启客户端查看redis信息\" class=\"headerlink\" title=\"进入容器并开启客户端查看redis信息\"></a>进入容器并开启客户端查看redis信息</h2><pre><code class=\"shell\">docker exec -it myredis redis-cli</code></pre>\n"},{"title":"入门基础学习","auther":"ku jin","_content":"[TOC]\n\n# 1. 编程的基础知识\n\n## 1.1 Hello World\n\n```kotlin\nfun main() {\n  println(\"Hello, world!\")\n}\n```\n\n`println()`需要单个参数，即 。通过将字符放在引号内来定义 。显示光标的参数后，将光标移动到新行，因此后续输出将显示在下一行\n\n## 1.2 常量值定义var & val\n\nvar: 可变的值\n\nval:只能初始化，不能被重新分配\n\n## 1.3 函数 fun\n\n函数结合了一组活动，是组织程序和重新使用代码的最基本方法。\n\n将信息传递到函数中，该函数使用该信息来计算和生成结果。函数的基本形式是：\n\nfun 方法名（参数：类型，参数：类型）：返回类型{\n\n​\t代码\n\n​\tretrun 结果\n\n}\n\n```kotlin\nfun functionName(p1: Type1, p2: Type2, ...): ReturnType {\n  lines of code\n  return result\n}\n```\n\n## 1.4 if表达式\n\n关键字测试表达式以查看它是否是 或 以及根据结果执行操作。真假的表达叫做布尔\n\n```kotlin\nfun main() {\n  if (1 > 0)\n    println(\"It's true!\")\n  if (10 < 11) {\n    println(\"10 < 11\")\n    println(\"ten is less than eleven\")\n  }\n}\n/* Output:\nIt's true!\n10 < 11\nten is less than eleven\n*/\n```\n\n## 1.5 字符串模板\n\n模板会将该标识符的内容插入到 ：`$``String``String`\n\n```kotlin\nfun main() {\n  val answer = 42\n  println(\"Found $answer!\")     // [1]\n  println(\"printing a $1\")      // [2]\n}\n/* Output:\nFound 42!\nprinting a $1\n*/\n```\n\n将表达式放在内部将对其进行计算。返回值转换为 ，并插入到生成的 ：`${}``String``String`\n\n```kotlin\nfun main() {\n  val condition = true\n  println(\n    \"${if (condition) 'a' else 'b'}\")  // [1]\n  val x = 11\n  println(\"$x + 4 = ${x + 4}\")\n}\n/* Output:\na\n11 + 4 = 15\n*/\n```\n\n1.6 数字类型\n\n数字的基本数学运算符是大多数编程语言中可用的运算符：加法（）、减法（）、除法（）、乘法（）和模量（），它们从整数除法生成剩余数：`+``-``/``*``%`\n\n```kotlin\nfun main() {\n  val numerator: Int = 19\n  val denominator: Int = 10\n  println(numerator % denominator)\n}\n/* Output:\n9\n*/\n```\n\n计算*身体质量指数*（BMI），即重量（以公斤为单位）除以高度的平方（米）。如果你的体重指数低于 ，你体重不足。和 之间是正常的权重。体重指数越高，体重超标\n\n```kotlin\nfun bmiMetric(\n  weight: Double,\n  height: Double\n): String {\n  val bmi = weight / (height * height)  // [1]\n  return if (bmi < 18.5) \"体重不足\"\n    else if (bmi < 25) \"体重正常\"\n    else \"体重超重\"\n}\n\nfun main() {\n  val weight = 72.57 // 160 lbs\n  val height = 1.727 // 68 inches\n  val status = bmiMetric(weight, height)\n  println(status)\n}\n```\n\n## 1.6 boolean \n\n- `&&`（和）： 仅在运算符左侧的表达式和右侧的表达式都是 时生成 。`true``Boolean``true`\n- `||`（或）： 如果运算符的左侧或右侧的表达式为 ，或者两者都是 ，则生成 。`true``true``true`\n\n## 1.7 while\n\n最基本的重复形式使用关键字。只要控制布尔表达式为 ： `while``true`\n\n```\nwhile (Boolean-expression) {\n  // Code to be repeated\n}\n```\n\n还有一种方法使用 ，与 关键字一起使用：`while``do`\n\n```\ndo {\n  // Code to be repeated\n} while (Boolean-expression)\n```\n\n## 1.8 循环和范围\n\n值集可以是整数的范围,关键字指示您正在单步执行值：`String``in`\n\n```kotlin\nfor(v in values) { /* ... */ }\n```\n\n```kotlin\nfun main() {\n  for (i in 1..3) {\n    println(\"Hey $i!\")\n  }\n}\n/* Output:\nHey 1!\nHey 2!\nHey 3!\n*/\n```\n\n## 1.9 关键字`in`\n\n关键字测试值是否在一个范围内。`in`\n\n```kotlin\nun main() {\n  val percent = 35\n  println(percent in 1..100)\n}\n/* Output:\ntrue\n*/\n```\n\n\n\n### 问题：\n\n> 三引号字符串不仅对多行字符串有用，而且对于创建正则表达式模式也很有用，因为您不需要用反斜杠转义反斜杠。\n>\n> 以下模式匹配的日期格式为<u>13.06.1992</u>(两个数字，一个点，两个数字，一个点，四个数字):\n>\n> fun getPattern() = \"\"\"\\d{2}\\.\\d{2}\\.\\d{4}\"\"\"\n>\n> 使用month变量重写此模式，使其匹配1992年6月13日格式的日期(两个数字、一个空格、一个月的缩写、一个空格、四个数字)。\n\n### 代码\n\n```kotlin\nval month = \"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\"\n\nfun getPattern(): String = \"\"\"\\d{2} $month \\d{4}\"\"\"\n```\n\n## 1.10 可空类型?\n\n### 问题\n\n> 学习零安全和安全调用的Kotlin和重写以下Java代码，使它只有一个if表达式:\n\n### java写法\n\n```java\npublic void sendMessageToClient(\n    @Nullable Client client,\n    @Nullable String message,\n    @NotNull Mailer mailer\n) {\n    if (client == null || message == null) return;\n\n    PersonalInfo personalInfo = client.getPersonalInfo();\n    if (personalInfo == null) return;\n\n    String email = personalInfo.getEmail();\n    if (email == null) return;\n\n    mailer.sendMessage(email, message);\n}\n```\n\n### Kotlin写法\n\n```kotlin\nfun sendMessageToClient(\n        client: Client?, message: String?, mailer: Mailer\n) {\n    val email=client?.personalInfo?.email\n    if (email!=null&&message!=null)\n        mailer.sendMessage(email,message)\n}\n```\n\n## 1.11 类对象(class)\n\n*对象使用属性(val 和 var)存储数据，并使用函数对此数据执行操作。*\n\n- 类: 为本质上是新数据类型的东西定义属性和函数。类也称为用户定义类型。\n- 成员: 类的属性或函数。\n- 成员函数: 仅用于特定对象类的函数。\n- 创建对象: 创建类的 val 或 var。也称为创建该类的实例。\n\n```kotlin\nfun main() {\n  val r1 = IntRange(0, 10)\n  val r2 = IntRange(5, 7)\n  println(r1)\n  println(r2)\n}\n/* Output:\n0..10\n5..7\n*/\n```\n\n### 面向对象(class)\n\n#### 1.11.1 函数可见性\n\n| 修饰符    | kotlin               | java                              |\n| --------- | -------------------- | --------------------------------- |\n| private   | 当前类内部可见       | 当前类内部可见                    |\n| public    | (默认值)，所有类可见 | 所有类可见                        |\n| protected | 只对当前类,子类可见  | 只对当前类,子类可见，同一包下可见 |\n| internal  | 对同一模块的类可见   | 无                                |\n\n#### 1.11.2 创建类\n\n面向对象便需要创建类对象，类就是对事物的一种封装，类名通常是名词，类中可以拥有自己的字段和函数，字段是名称，函数是行为动词，面向对象还有继承，多态，等\n\n1. 创建类\n\n   ```kotlin\n   class Person}{}\n   ```\n\n2. 加入字段及函数\n\n   ```kotlin\n   class Person{\n   \tvar name=\"\"\n   \tvar age=0\n   \tfun eat(){\n   \t\tprintln(name+age)\n   \t}\n   }\n   ```\n\n3. 类实例化\n\n   ```kotlin\n   val p=person()\n   ```\n\n4. 类实例化操作\n\n   ```kotlin\n   fun man{\n   \tval p=person()\n   \tp.name=\"kotlin\"\n   \tp.age=19\n   \tp.eat()\n   }\n   ```\n\n##### （1）继承\n\n1. kotlin默认所有非抽象类都是不可以被继承的，想要被继承需要 open 关键字\n\n   ```kotlin\n   open class Person{\n   \t...\n   }\n   ```\n\n2. Kotlin继承用 ：替代extends，（）表示构造函数\n\n   ```kotlin\n   class Student:Person(){\n   \tvar name=\"\"\n   \tvar grade=0\n   }\n   ```\n\n##### （2）接口（interface）\n\n基本和java一样 interface\n\n接口是\"独立和往往不相关的系统相遇和操作或相互通信的地方。因此，接口是系统不同部分之间的通信手段。\n\n```kotlin\ninterface Study{\n\tfun readBooks()\n\t//默认自动实现逻辑\n\tfun doHomeworks(){\n\t\tprintln(\"do homework default implementation.\")\n\t}\n}\n```\n\n##### （3）构造函数\n\n构造函数是创建新对象的特殊函数，默认都会有一个空的构造函数\n\n```kotlin\nclass Student(val sno:String,val grade:Int):Person(){\n}\nval student=Student(\"a123\",5)\n```\n\n###### 主构造函数\n\n```kotlin\ninit{\n\t\n}\n```\n\n###### 次构造函数\n\n当没有主构造函数时，this 改为 super\n\n```kotlin\nconstructor(name:String,age:Int):this(\"\",0,name,age){}\nconstructor():this(\"\",0){}\n```\n\n#### 特定的class\n\n##### Data class 数据类\n\n##### object 单例类\n\njava写法\n\n```java\npublic class Singleton{\n\t//禁用外部创建实例\n\tprivate static Singleton(){};\n\t//单例模式\n\tprivate static Singleton instance;\n\tpublic synchronized static Singleton getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance=new Singleton();\n\t\t}\n\t\treturn instance;\n\t}\n\t//测试方法\n\tpublic void singletonTest(){\n\t\tSystem.out.println(\"singletonTest is called.\")\n\t}\n\t\n}\nmain{\n    Singleton singleton=Singleton.getInstance();\n    singleton.singletonTest();\n}\n```\n\nkotlin写法\n\n```kotlin\nobject Singleton{\n    fun singletonTest(){\n        println(\"singletonTest is called.\")\n    }\n}\nmain{\n    Singleton.singletonTest();\n}\n```\n\n##### sealed类 密封类（只有同一文件内才可使用）\n\n##### 嵌套类 内部类 匿名类\n\n类可以嵌套在其他类中：\n\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n#### 内部类\n\n标记为内部的嵌套*类*可以访问其外部类的成员。内部类包含对外部类对象的引用：\n\n```kot\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n#### 匿名内部类\n\n使用对象表达式创建匿名内部[类实例](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)：\n\n```kotlin\nwindow.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n```\n\n## 1.12 Lambda 编程\n\n核心思想（简化编程）,集合的函数式API是学习Lambda编程的绝佳示例\n\n接口 List  实现类  ArraList    \n\n​\t\tSet\t\t\t\tHasSet\n\n​\t\tMap\t\t\tHasMap\n\n1. 集合创建与遍历\n\n   \n\n2. 集合函数式API \n\n3. Java \n\n","source":"_posts/随心记/Kotlin学习/入门基础学习.md","raw":"---\ntitle: 入门基础学习 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Kotlin学习\ntags: # 标签=目标文件夹\n - 入门基础学习 \n---\n[TOC]\n\n# 1. 编程的基础知识\n\n## 1.1 Hello World\n\n```kotlin\nfun main() {\n  println(\"Hello, world!\")\n}\n```\n\n`println()`需要单个参数，即 。通过将字符放在引号内来定义 。显示光标的参数后，将光标移动到新行，因此后续输出将显示在下一行\n\n## 1.2 常量值定义var & val\n\nvar: 可变的值\n\nval:只能初始化，不能被重新分配\n\n## 1.3 函数 fun\n\n函数结合了一组活动，是组织程序和重新使用代码的最基本方法。\n\n将信息传递到函数中，该函数使用该信息来计算和生成结果。函数的基本形式是：\n\nfun 方法名（参数：类型，参数：类型）：返回类型{\n\n​\t代码\n\n​\tretrun 结果\n\n}\n\n```kotlin\nfun functionName(p1: Type1, p2: Type2, ...): ReturnType {\n  lines of code\n  return result\n}\n```\n\n## 1.4 if表达式\n\n关键字测试表达式以查看它是否是 或 以及根据结果执行操作。真假的表达叫做布尔\n\n```kotlin\nfun main() {\n  if (1 > 0)\n    println(\"It's true!\")\n  if (10 < 11) {\n    println(\"10 < 11\")\n    println(\"ten is less than eleven\")\n  }\n}\n/* Output:\nIt's true!\n10 < 11\nten is less than eleven\n*/\n```\n\n## 1.5 字符串模板\n\n模板会将该标识符的内容插入到 ：`$``String``String`\n\n```kotlin\nfun main() {\n  val answer = 42\n  println(\"Found $answer!\")     // [1]\n  println(\"printing a $1\")      // [2]\n}\n/* Output:\nFound 42!\nprinting a $1\n*/\n```\n\n将表达式放在内部将对其进行计算。返回值转换为 ，并插入到生成的 ：`${}``String``String`\n\n```kotlin\nfun main() {\n  val condition = true\n  println(\n    \"${if (condition) 'a' else 'b'}\")  // [1]\n  val x = 11\n  println(\"$x + 4 = ${x + 4}\")\n}\n/* Output:\na\n11 + 4 = 15\n*/\n```\n\n1.6 数字类型\n\n数字的基本数学运算符是大多数编程语言中可用的运算符：加法（）、减法（）、除法（）、乘法（）和模量（），它们从整数除法生成剩余数：`+``-``/``*``%`\n\n```kotlin\nfun main() {\n  val numerator: Int = 19\n  val denominator: Int = 10\n  println(numerator % denominator)\n}\n/* Output:\n9\n*/\n```\n\n计算*身体质量指数*（BMI），即重量（以公斤为单位）除以高度的平方（米）。如果你的体重指数低于 ，你体重不足。和 之间是正常的权重。体重指数越高，体重超标\n\n```kotlin\nfun bmiMetric(\n  weight: Double,\n  height: Double\n): String {\n  val bmi = weight / (height * height)  // [1]\n  return if (bmi < 18.5) \"体重不足\"\n    else if (bmi < 25) \"体重正常\"\n    else \"体重超重\"\n}\n\nfun main() {\n  val weight = 72.57 // 160 lbs\n  val height = 1.727 // 68 inches\n  val status = bmiMetric(weight, height)\n  println(status)\n}\n```\n\n## 1.6 boolean \n\n- `&&`（和）： 仅在运算符左侧的表达式和右侧的表达式都是 时生成 。`true``Boolean``true`\n- `||`（或）： 如果运算符的左侧或右侧的表达式为 ，或者两者都是 ，则生成 。`true``true``true`\n\n## 1.7 while\n\n最基本的重复形式使用关键字。只要控制布尔表达式为 ： `while``true`\n\n```\nwhile (Boolean-expression) {\n  // Code to be repeated\n}\n```\n\n还有一种方法使用 ，与 关键字一起使用：`while``do`\n\n```\ndo {\n  // Code to be repeated\n} while (Boolean-expression)\n```\n\n## 1.8 循环和范围\n\n值集可以是整数的范围,关键字指示您正在单步执行值：`String``in`\n\n```kotlin\nfor(v in values) { /* ... */ }\n```\n\n```kotlin\nfun main() {\n  for (i in 1..3) {\n    println(\"Hey $i!\")\n  }\n}\n/* Output:\nHey 1!\nHey 2!\nHey 3!\n*/\n```\n\n## 1.9 关键字`in`\n\n关键字测试值是否在一个范围内。`in`\n\n```kotlin\nun main() {\n  val percent = 35\n  println(percent in 1..100)\n}\n/* Output:\ntrue\n*/\n```\n\n\n\n### 问题：\n\n> 三引号字符串不仅对多行字符串有用，而且对于创建正则表达式模式也很有用，因为您不需要用反斜杠转义反斜杠。\n>\n> 以下模式匹配的日期格式为<u>13.06.1992</u>(两个数字，一个点，两个数字，一个点，四个数字):\n>\n> fun getPattern() = \"\"\"\\d{2}\\.\\d{2}\\.\\d{4}\"\"\"\n>\n> 使用month变量重写此模式，使其匹配1992年6月13日格式的日期(两个数字、一个空格、一个月的缩写、一个空格、四个数字)。\n\n### 代码\n\n```kotlin\nval month = \"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\"\n\nfun getPattern(): String = \"\"\"\\d{2} $month \\d{4}\"\"\"\n```\n\n## 1.10 可空类型?\n\n### 问题\n\n> 学习零安全和安全调用的Kotlin和重写以下Java代码，使它只有一个if表达式:\n\n### java写法\n\n```java\npublic void sendMessageToClient(\n    @Nullable Client client,\n    @Nullable String message,\n    @NotNull Mailer mailer\n) {\n    if (client == null || message == null) return;\n\n    PersonalInfo personalInfo = client.getPersonalInfo();\n    if (personalInfo == null) return;\n\n    String email = personalInfo.getEmail();\n    if (email == null) return;\n\n    mailer.sendMessage(email, message);\n}\n```\n\n### Kotlin写法\n\n```kotlin\nfun sendMessageToClient(\n        client: Client?, message: String?, mailer: Mailer\n) {\n    val email=client?.personalInfo?.email\n    if (email!=null&&message!=null)\n        mailer.sendMessage(email,message)\n}\n```\n\n## 1.11 类对象(class)\n\n*对象使用属性(val 和 var)存储数据，并使用函数对此数据执行操作。*\n\n- 类: 为本质上是新数据类型的东西定义属性和函数。类也称为用户定义类型。\n- 成员: 类的属性或函数。\n- 成员函数: 仅用于特定对象类的函数。\n- 创建对象: 创建类的 val 或 var。也称为创建该类的实例。\n\n```kotlin\nfun main() {\n  val r1 = IntRange(0, 10)\n  val r2 = IntRange(5, 7)\n  println(r1)\n  println(r2)\n}\n/* Output:\n0..10\n5..7\n*/\n```\n\n### 面向对象(class)\n\n#### 1.11.1 函数可见性\n\n| 修饰符    | kotlin               | java                              |\n| --------- | -------------------- | --------------------------------- |\n| private   | 当前类内部可见       | 当前类内部可见                    |\n| public    | (默认值)，所有类可见 | 所有类可见                        |\n| protected | 只对当前类,子类可见  | 只对当前类,子类可见，同一包下可见 |\n| internal  | 对同一模块的类可见   | 无                                |\n\n#### 1.11.2 创建类\n\n面向对象便需要创建类对象，类就是对事物的一种封装，类名通常是名词，类中可以拥有自己的字段和函数，字段是名称，函数是行为动词，面向对象还有继承，多态，等\n\n1. 创建类\n\n   ```kotlin\n   class Person}{}\n   ```\n\n2. 加入字段及函数\n\n   ```kotlin\n   class Person{\n   \tvar name=\"\"\n   \tvar age=0\n   \tfun eat(){\n   \t\tprintln(name+age)\n   \t}\n   }\n   ```\n\n3. 类实例化\n\n   ```kotlin\n   val p=person()\n   ```\n\n4. 类实例化操作\n\n   ```kotlin\n   fun man{\n   \tval p=person()\n   \tp.name=\"kotlin\"\n   \tp.age=19\n   \tp.eat()\n   }\n   ```\n\n##### （1）继承\n\n1. kotlin默认所有非抽象类都是不可以被继承的，想要被继承需要 open 关键字\n\n   ```kotlin\n   open class Person{\n   \t...\n   }\n   ```\n\n2. Kotlin继承用 ：替代extends，（）表示构造函数\n\n   ```kotlin\n   class Student:Person(){\n   \tvar name=\"\"\n   \tvar grade=0\n   }\n   ```\n\n##### （2）接口（interface）\n\n基本和java一样 interface\n\n接口是\"独立和往往不相关的系统相遇和操作或相互通信的地方。因此，接口是系统不同部分之间的通信手段。\n\n```kotlin\ninterface Study{\n\tfun readBooks()\n\t//默认自动实现逻辑\n\tfun doHomeworks(){\n\t\tprintln(\"do homework default implementation.\")\n\t}\n}\n```\n\n##### （3）构造函数\n\n构造函数是创建新对象的特殊函数，默认都会有一个空的构造函数\n\n```kotlin\nclass Student(val sno:String,val grade:Int):Person(){\n}\nval student=Student(\"a123\",5)\n```\n\n###### 主构造函数\n\n```kotlin\ninit{\n\t\n}\n```\n\n###### 次构造函数\n\n当没有主构造函数时，this 改为 super\n\n```kotlin\nconstructor(name:String,age:Int):this(\"\",0,name,age){}\nconstructor():this(\"\",0){}\n```\n\n#### 特定的class\n\n##### Data class 数据类\n\n##### object 单例类\n\njava写法\n\n```java\npublic class Singleton{\n\t//禁用外部创建实例\n\tprivate static Singleton(){};\n\t//单例模式\n\tprivate static Singleton instance;\n\tpublic synchronized static Singleton getInstance(){\n\t\tif(instance==null){\n\t\t\tinstance=new Singleton();\n\t\t}\n\t\treturn instance;\n\t}\n\t//测试方法\n\tpublic void singletonTest(){\n\t\tSystem.out.println(\"singletonTest is called.\")\n\t}\n\t\n}\nmain{\n    Singleton singleton=Singleton.getInstance();\n    singleton.singletonTest();\n}\n```\n\nkotlin写法\n\n```kotlin\nobject Singleton{\n    fun singletonTest(){\n        println(\"singletonTest is called.\")\n    }\n}\nmain{\n    Singleton.singletonTest();\n}\n```\n\n##### sealed类 密封类（只有同一文件内才可使用）\n\n##### 嵌套类 内部类 匿名类\n\n类可以嵌套在其他类中：\n\n```kotlin\nclass Outer {\n    private val bar: Int = 1\n    class Nested {\n        fun foo() = 2\n    }\n}\n\nval demo = Outer.Nested().foo() // == 2\n```\n\n#### 内部类\n\n标记为内部的嵌套*类*可以访问其外部类的成员。内部类包含对外部类对象的引用：\n\n```kot\nclass Outer {\n    private val bar: Int = 1\n    inner class Inner {\n        fun foo() = bar\n    }\n}\n\nval demo = Outer().Inner().foo() // == 1\n```\n\n#### 匿名内部类\n\n使用对象表达式创建匿名内部[类实例](https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions)：\n\n```kotlin\nwindow.addMouseListener(object : MouseAdapter() {\n\n    override fun mouseClicked(e: MouseEvent) { ... }\n\n    override fun mouseEntered(e: MouseEvent) { ... }\n})\n```\n\n## 1.12 Lambda 编程\n\n核心思想（简化编程）,集合的函数式API是学习Lambda编程的绝佳示例\n\n接口 List  实现类  ArraList    \n\n​\t\tSet\t\t\t\tHasSet\n\n​\t\tMap\t\t\tHasMap\n\n1. 集合创建与遍历\n\n   \n\n2. 集合函数式API \n\n3. Java \n\n","slug":"随心记/Kotlin学习/入门基础学习","published":1,"date":"2020-08-02T23:42:43.620Z","updated":"2020-08-02T23:42:59.772Z","_id":"ckdcza4oz008brkamdbt4dalq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"1-编程的基础知识\"><a href=\"#1-编程的基础知识\" class=\"headerlink\" title=\"1. 编程的基础知识\"></a>1. 编程的基础知识</h1><h2 id=\"1-1-Hello-World\"><a href=\"#1-1-Hello-World\" class=\"headerlink\" title=\"1.1 Hello World\"></a>1.1 Hello World</h2><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world!\"</span><span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>println()</code>需要单个参数，即 。通过将字符放在引号内来定义 。显示光标的参数后，将光标移动到新行，因此后续输出将显示在下一行</p>\n<h2 id=\"1-2-常量值定义var-amp-val\"><a href=\"#1-2-常量值定义var-amp-val\" class=\"headerlink\" title=\"1.2 常量值定义var &amp; val\"></a>1.2 常量值定义var &amp; val</h2><p>var: 可变的值</p>\n<p>val:只能初始化，不能被重新分配</p>\n<h2 id=\"1-3-函数-fun\"><a href=\"#1-3-函数-fun\" class=\"headerlink\" title=\"1.3 函数 fun\"></a>1.3 函数 fun</h2><p>函数结合了一组活动，是组织程序和重新使用代码的最基本方法。</p>\n<p>将信息传递到函数中，该函数使用该信息来计算和生成结果。函数的基本形式是：</p>\n<p>fun 方法名（参数：类型，参数：类型）：返回类型{</p>\n<p>​    代码</p>\n<p>​    retrun 结果</p>\n<p>}</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span>p1<span class=\"token operator\">:</span> Type1<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> Type2<span class=\"token punctuation\">,</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReturnType &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  lines of code\n  <span class=\"token keyword\">return</span> result\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"1-4-if表达式\"><a href=\"#1-4-if表达式\" class=\"headerlink\" title=\"1.4 if表达式\"></a>1.4 if表达式</h2><p>关键字测试表达式以查看它是否是 或 以及根据结果执行操作。真假的表达叫做布尔</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"It's true!\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10 &lt; 11\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ten is less than eleven\"</span><span class=\"token punctuation\">)</span>\n  &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\nIt's true!\n10 &lt; 11\nten is less than eleven\n*/</span></code></pre>\n<h2 id=\"1-5-字符串模板\"><a href=\"#1-5-字符串模板\" class=\"headerlink\" title=\"1.5 字符串模板\"></a>1.5 字符串模板</h2><p>模板会将该标识符的内容插入到 ：<code>$``String``String</code></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> answer <span class=\"token operator\">=</span> <span class=\"token number\">42</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Found <span class=\"token interpolation variable\">$answer</span>!\"</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\" spellcheck=\"true\">// [1]</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"printing a <span class=\"token interpolation variable\">$1</span>\"</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\" spellcheck=\"true\">// [2]</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\nFound 42!\nprinting a $1\n*/</span></code></pre>\n<p>将表达式放在内部将对其进行计算。返回值转换为 ，并插入到生成的 ：<code>${}``String``String</code></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> condition <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"$&amp;#123;if (condition) 'a' else 'b'&amp;#125;\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// [1]</span>\n  <span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> <span class=\"token number\">11</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"<span class=\"token interpolation variable\">$x</span> + 4 = $&amp;#123;x + 4&amp;#125;\"</span><span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\na\n11 + 4 = 15\n*/</span></code></pre>\n<p>1.6 数字类型</p>\n<p>数字的基本数学运算符是大多数编程语言中可用的运算符：加法（）、减法（）、除法（）、乘法（）和模量（），它们从整数除法生成剩余数：<code>+``-``/``*``%</code></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> numerator<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">19</span>\n  <span class=\"token keyword\">val</span> denominator<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numerator <span class=\"token operator\">%</span> denominator<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\n9\n*/</span></code></pre>\n<p>计算<em>身体质量指数</em>（BMI），即重量（以公斤为单位）除以高度的平方（米）。如果你的体重指数低于 ，你体重不足。和 之间是正常的权重。体重指数越高，体重超标</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">bmiMetric</span><span class=\"token punctuation\">(</span>\n  weight<span class=\"token operator\">:</span> Double<span class=\"token punctuation\">,</span>\n  height<span class=\"token operator\">:</span> Double\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> bmi <span class=\"token operator\">=</span> weight <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>height <span class=\"token operator\">*</span> height<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// [1]</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmi <span class=\"token operator\">&lt;</span> <span class=\"token number\">18.5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"体重不足\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bmi <span class=\"token operator\">&lt;</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"体重正常\"</span>\n    <span class=\"token keyword\">else</span> <span class=\"token string\">\"体重超重\"</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> weight <span class=\"token operator\">=</span> <span class=\"token number\">72.57</span> <span class=\"token comment\" spellcheck=\"true\">// 160 lbs</span>\n  <span class=\"token keyword\">val</span> height <span class=\"token operator\">=</span> <span class=\"token number\">1.727</span> <span class=\"token comment\" spellcheck=\"true\">// 68 inches</span>\n  <span class=\"token keyword\">val</span> status <span class=\"token operator\">=</span> <span class=\"token function\">bmiMetric</span><span class=\"token punctuation\">(</span>weight<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"1-6-boolean\"><a href=\"#1-6-boolean\" class=\"headerlink\" title=\"1.6 boolean\"></a>1.6 boolean</h2><ul>\n<li><code>&amp;&amp;</code>（和）： 仅在运算符左侧的表达式和右侧的表达式都是 时生成 。<code>true``Boolean``true</code></li>\n<li><code>||</code>（或）： 如果运算符的左侧或右侧的表达式为 ，或者两者都是 ，则生成 。<code>true``true``true</code></li>\n</ul>\n<h2 id=\"1-7-while\"><a href=\"#1-7-while\" class=\"headerlink\" title=\"1.7 while\"></a>1.7 while</h2><p>最基本的重复形式使用关键字。只要控制布尔表达式为 ： <code>while``true</code></p>\n<pre><code>while (Boolean-expression) &amp;#123;\n  // Code to be repeated\n&amp;#125;</code></pre>\n<p>还有一种方法使用 ，与 关键字一起使用：<code>while``do</code></p>\n<pre><code>do &amp;#123;\n  // Code to be repeated\n&amp;#125; while (Boolean-expression)</code></pre>\n<h2 id=\"1-8-循环和范围\"><a href=\"#1-8-循环和范围\" class=\"headerlink\" title=\"1.8 循环和范围\"></a>1.8 循环和范围</h2><p>值集可以是整数的范围,关键字指示您正在单步执行值：<code>String``in</code></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* ... */</span> &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hey <span class=\"token interpolation variable\">$i</span>!\"</span><span class=\"token punctuation\">)</span>\n  &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\nHey 1!\nHey 2!\nHey 3!\n*/</span></code></pre>\n<h2 id=\"1-9-关键字in\"><a href=\"#1-9-关键字in\" class=\"headerlink\" title=\"1.9 关键字in\"></a>1.9 关键字<code>in</code></h2><p>关键字测试值是否在一个范围内。<code>in</code></p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">un <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> percent <span class=\"token operator\">=</span> <span class=\"token number\">35</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>percent <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\ntrue\n*/</span></code></pre>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><blockquote>\n<p>三引号字符串不仅对多行字符串有用，而且对于创建正则表达式模式也很有用，因为您不需要用反斜杠转义反斜杠。</p>\n<p>以下模式匹配的日期格式为<u>13.06.1992</u>(两个数字，一个点，两个数字，一个点，四个数字):</p>\n<p>fun getPattern() = “””\\d{2}.\\d{2}.\\d{4}”””</p>\n<p>使用month变量重写此模式，使其匹配1992年6月13日格式的日期(两个数字、一个空格、一个月的缩写、一个空格、四个数字)。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> month <span class=\"token operator\">=</span> <span class=\"token string\">\"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)\"</span>\n\n<span class=\"token keyword\">fun</span> <span class=\"token function\">getPattern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token raw-string string\">\"\"\"\\d&amp;#123;2&amp;#125; <span class=\"token interpolation variable\">$month</span> \\d&amp;#123;4&amp;#125;\"\"\"</span></code></pre>\n<h2 id=\"1-10-可空类型\"><a href=\"#1-10-可空类型\" class=\"headerlink\" title=\"1.10 可空类型?\"></a>1.10 可空类型?</h2><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><blockquote>\n<p>学习零安全和安全调用的Kotlin和重写以下Java代码，使它只有一个if表达式:</p>\n</blockquote>\n<h3 id=\"java写法\"><a href=\"#java写法\" class=\"headerlink\" title=\"java写法\"></a>java写法</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sendMessageToClient</span><span class=\"token punctuation\">(</span>\n    <span class=\"token annotation punctuation\">@Nullable</span> Client client<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@Nullable</span> String message<span class=\"token punctuation\">,</span>\n    <span class=\"token annotation punctuation\">@NotNull</span> Mailer mailer\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>client <span class=\"token operator\">==</span> null <span class=\"token operator\">||</span> message <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    PersonalInfo personalInfo <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">getPersonalInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>personalInfo <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    String email <span class=\"token operator\">=</span> personalInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getEmail</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>email <span class=\"token operator\">==</span> null<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    mailer<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"Kotlin写法\"><a href=\"#Kotlin写法\" class=\"headerlink\" title=\"Kotlin写法\"></a>Kotlin写法</h3><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">sendMessageToClient</span><span class=\"token punctuation\">(</span>\n        client<span class=\"token operator\">:</span> Client<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> mailer<span class=\"token operator\">:</span> Mailer\n<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">val</span> email<span class=\"token operator\">=</span>client<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>personalInfo<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>email\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>email<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token operator\">&amp;&amp;</span>message<span class=\"token operator\">!=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        mailer<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"1-11-类对象-class\"><a href=\"#1-11-类对象-class\" class=\"headerlink\" title=\"1.11 类对象(class)\"></a>1.11 类对象(class)</h2><p><em>对象使用属性(val 和 var)存储数据，并使用函数对此数据执行操作。</em></p>\n<ul>\n<li>类: 为本质上是新数据类型的东西定义属性和函数。类也称为用户定义类型。</li>\n<li>成员: 类的属性或函数。</li>\n<li>成员函数: 仅用于特定对象类的函数。</li>\n<li>创建对象: 创建类的 val 或 var。也称为创建该类的实例。</li>\n</ul>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">val</span> r1 <span class=\"token operator\">=</span> <span class=\"token function\">IntRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> r2 <span class=\"token operator\">=</span> <span class=\"token function\">IntRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/* Output:\n0..10\n5..7\n*/</span></code></pre>\n<h3 id=\"面向对象-class\"><a href=\"#面向对象-class\" class=\"headerlink\" title=\"面向对象(class)\"></a>面向对象(class)</h3><h4 id=\"1-11-1-函数可见性\"><a href=\"#1-11-1-函数可见性\" class=\"headerlink\" title=\"1.11.1 函数可见性\"></a>1.11.1 函数可见性</h4><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>kotlin</th>\n<th>java</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>private</td>\n<td>当前类内部可见</td>\n<td>当前类内部可见</td>\n</tr>\n<tr>\n<td>public</td>\n<td>(默认值)，所有类可见</td>\n<td>所有类可见</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>只对当前类,子类可见</td>\n<td>只对当前类,子类可见，同一包下可见</td>\n</tr>\n<tr>\n<td>internal</td>\n<td>对同一模块的类可见</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-11-2-创建类\"><a href=\"#1-11-2-创建类\" class=\"headerlink\" title=\"1.11.2 创建类\"></a>1.11.2 创建类</h4><p>面向对象便需要创建类对象，类就是对事物的一种封装，类名通常是名词，类中可以拥有自己的字段和函数，字段是名称，函数是行为动词，面向对象还有继承，多态，等</p>\n<ol>\n<li><p>创建类</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Person&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>加入字段及函数</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Person&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>类实例化</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> p<span class=\"token operator\">=</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n</li>\n<li><p>类实例化操作</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> man&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">val</span> p<span class=\"token operator\">=</span><span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    p<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"kotlin\"</span>\n    p<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">19</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<h5 id=\"（1）继承\"><a href=\"#（1）继承\" class=\"headerlink\" title=\"（1）继承\"></a>（1）继承</h5><ol>\n<li><p>kotlin默认所有非抽象类都是不可以被继承的，想要被继承需要 open 关键字</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">open</span> <span class=\"token keyword\">class</span> Person&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>Kotlin继承用 ：替代extends，（）表示构造函数</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Student<span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">var</span> grade<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ol>\n<h5 id=\"（2）接口（interface）\"><a href=\"#（2）接口（interface）\" class=\"headerlink\" title=\"（2）接口（interface）\"></a>（2）接口（interface）</h5><p>基本和java一样 interface</p>\n<p>接口是”独立和往往不相关的系统相遇和操作或相互通信的地方。因此，接口是系统不同部分之间的通信手段。</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">interface</span> Study&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">readBooks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">//默认自动实现逻辑</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">doHomeworks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"do homework default implementation.\"</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h5 id=\"（3）构造函数\"><a href=\"#（3）构造函数\" class=\"headerlink\" title=\"（3）构造函数\"></a>（3）构造函数</h5><p>构造函数是创建新对象的特殊函数，默认都会有一个空的构造函数</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> sno<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span><span class=\"token keyword\">val</span> grade<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">val</span> student<span class=\"token operator\">=</span><span class=\"token function\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a123\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre>\n<h6 id=\"主构造函数\"><a href=\"#主构造函数\" class=\"headerlink\" title=\"主构造函数\"></a>主构造函数</h6><pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">init</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h6 id=\"次构造函数\"><a href=\"#次构造函数\" class=\"headerlink\" title=\"次构造函数\"></a>次构造函数</h6><p>当没有主构造函数时，this 改为 super</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"特定的class\"><a href=\"#特定的class\" class=\"headerlink\" title=\"特定的class\"></a>特定的class</h4><h5 id=\"Data-class-数据类\"><a href=\"#Data-class-数据类\" class=\"headerlink\" title=\"Data class 数据类\"></a>Data class 数据类</h5><h5 id=\"object-单例类\"><a href=\"#object-单例类\" class=\"headerlink\" title=\"object 单例类\"></a>object 单例类</h5><p>java写法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//禁用外部创建实例</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token function\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//单例模式</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Singleton instance<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">static</span> Singleton <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">==</span>null<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            instance<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//测试方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singletonTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singletonTest is called.\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nmain<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    Singleton singleton<span class=\"token operator\">=</span>Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    singleton<span class=\"token punctuation\">.</span><span class=\"token function\">singletonTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>kotlin写法</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">object</span> Singleton&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">fun</span> <span class=\"token function\">singletonTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"singletonTest is called.\"</span><span class=\"token punctuation\">)</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nmain&amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    Singleton<span class=\"token punctuation\">.</span><span class=\"token function\">singletonTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h5 id=\"sealed类-密封类（只有同一文件内才可使用）\"><a href=\"#sealed类-密封类（只有同一文件内才可使用）\" class=\"headerlink\" title=\"sealed类 密封类（只有同一文件内才可使用）\"></a>sealed类 密封类（只有同一文件内才可使用）</h5><h5 id=\"嵌套类-内部类-匿名类\"><a href=\"#嵌套类-内部类-匿名类\" class=\"headerlink\" title=\"嵌套类 内部类 匿名类\"></a>嵌套类 内部类 匿名类</h5><p>类可以嵌套在其他类中：</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> Outer &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> bar<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">class</span> Nested &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">fun</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">val</span> demo <span class=\"token operator\">=</span> Outer<span class=\"token punctuation\">.</span><span class=\"token function\">Nested</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// == 2</span></code></pre>\n<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4><p>标记为内部的嵌套<em>类</em>可以访问其外部类的成员。内部类包含对外部类对象的引用：</p>\n<pre class=\" language-kot\"><code class=\"language-kot\">class Outer &#123;\n    private val bar: Int = 1\n    inner class Inner &#123;\n        fun foo() = bar\n    &#125;\n&#125;\n\nval demo = Outer().Inner().foo() // == 1</code></pre>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>使用对象表达式创建匿名内部<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\">类实例</a>：</p>\n<pre class=\" language-kotlin\"><code class=\"language-kotlin\">window<span class=\"token punctuation\">.</span><span class=\"token function\">addMouseListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> <span class=\"token function\">MouseAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">mouseClicked</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> MouseEvent<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">mouseEntered</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> MouseEvent<span class=\"token punctuation\">)</span> &amp;#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">..</span><span class=\"token punctuation\">.</span> &amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n&amp;#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"1-12-Lambda-编程\"><a href=\"#1-12-Lambda-编程\" class=\"headerlink\" title=\"1.12 Lambda 编程\"></a>1.12 Lambda 编程</h2><p>核心思想（简化编程）,集合的函数式API是学习Lambda编程的绝佳示例</p>\n<p>接口 List  实现类  ArraList    </p>\n<p>​        Set                HasSet</p>\n<p>​        Map            HasMap</p>\n<ol>\n<li>集合创建与遍历</li>\n</ol>\n<ol start=\"2\">\n<li><p>集合函数式API </p>\n</li>\n<li><p>Java </p>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"1-编程的基础知识\"><a href=\"#1-编程的基础知识\" class=\"headerlink\" title=\"1. 编程的基础知识\"></a>1. 编程的基础知识</h1><h2 id=\"1-1-Hello-World\"><a href=\"#1-1-Hello-World\" class=\"headerlink\" title=\"1.1 Hello World\"></a>1.1 Hello World</h2><pre><code class=\"kotlin\">fun main() &amp;#123;\n  println(&quot;Hello, world!&quot;)\n&amp;#125;</code></pre>\n<p><code>println()</code>需要单个参数，即 。通过将字符放在引号内来定义 。显示光标的参数后，将光标移动到新行，因此后续输出将显示在下一行</p>\n<h2 id=\"1-2-常量值定义var-amp-val\"><a href=\"#1-2-常量值定义var-amp-val\" class=\"headerlink\" title=\"1.2 常量值定义var &amp; val\"></a>1.2 常量值定义var &amp; val</h2><p>var: 可变的值</p>\n<p>val:只能初始化，不能被重新分配</p>\n<h2 id=\"1-3-函数-fun\"><a href=\"#1-3-函数-fun\" class=\"headerlink\" title=\"1.3 函数 fun\"></a>1.3 函数 fun</h2><p>函数结合了一组活动，是组织程序和重新使用代码的最基本方法。</p>\n<p>将信息传递到函数中，该函数使用该信息来计算和生成结果。函数的基本形式是：</p>\n<p>fun 方法名（参数：类型，参数：类型）：返回类型{</p>\n<p>​    代码</p>\n<p>​    retrun 结果</p>\n<p>}</p>\n<pre><code class=\"kotlin\">fun functionName(p1: Type1, p2: Type2, ...): ReturnType &amp;#123;\n  lines of code\n  return result\n&amp;#125;</code></pre>\n<h2 id=\"1-4-if表达式\"><a href=\"#1-4-if表达式\" class=\"headerlink\" title=\"1.4 if表达式\"></a>1.4 if表达式</h2><p>关键字测试表达式以查看它是否是 或 以及根据结果执行操作。真假的表达叫做布尔</p>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  if (1 &gt; 0)\n    println(&quot;It&#39;s true!&quot;)\n  if (10 &lt; 11) &amp;#123;\n    println(&quot;10 &lt; 11&quot;)\n    println(&quot;ten is less than eleven&quot;)\n  &amp;#125;\n&amp;#125;\n/* Output:\nIt&#39;s true!\n10 &lt; 11\nten is less than eleven\n*/</code></pre>\n<h2 id=\"1-5-字符串模板\"><a href=\"#1-5-字符串模板\" class=\"headerlink\" title=\"1.5 字符串模板\"></a>1.5 字符串模板</h2><p>模板会将该标识符的内容插入到 ：<code>$``String``String</code></p>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  val answer = 42\n  println(&quot;Found $answer!&quot;)     // [1]\n  println(&quot;printing a $1&quot;)      // [2]\n&amp;#125;\n/* Output:\nFound 42!\nprinting a $1\n*/</code></pre>\n<p>将表达式放在内部将对其进行计算。返回值转换为 ，并插入到生成的 ：<code>$&#123;&#125;``String``String</code></p>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  val condition = true\n  println(\n    &quot;$&amp;#123;if (condition) &#39;a&#39; else &#39;b&#39;&amp;#125;&quot;)  // [1]\n  val x = 11\n  println(&quot;$x + 4 = $&amp;#123;x + 4&amp;#125;&quot;)\n&amp;#125;\n/* Output:\na\n11 + 4 = 15\n*/</code></pre>\n<p>1.6 数字类型</p>\n<p>数字的基本数学运算符是大多数编程语言中可用的运算符：加法（）、减法（）、除法（）、乘法（）和模量（），它们从整数除法生成剩余数：<code>+``-``/``*``%</code></p>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  val numerator: Int = 19\n  val denominator: Int = 10\n  println(numerator % denominator)\n&amp;#125;\n/* Output:\n9\n*/</code></pre>\n<p>计算<em>身体质量指数</em>（BMI），即重量（以公斤为单位）除以高度的平方（米）。如果你的体重指数低于 ，你体重不足。和 之间是正常的权重。体重指数越高，体重超标</p>\n<pre><code class=\"kotlin\">fun bmiMetric(\n  weight: Double,\n  height: Double\n): String &amp;#123;\n  val bmi = weight / (height * height)  // [1]\n  return if (bmi &lt; 18.5) &quot;体重不足&quot;\n    else if (bmi &lt; 25) &quot;体重正常&quot;\n    else &quot;体重超重&quot;\n&amp;#125;\n\nfun main() &amp;#123;\n  val weight = 72.57 // 160 lbs\n  val height = 1.727 // 68 inches\n  val status = bmiMetric(weight, height)\n  println(status)\n&amp;#125;</code></pre>\n<h2 id=\"1-6-boolean\"><a href=\"#1-6-boolean\" class=\"headerlink\" title=\"1.6 boolean\"></a>1.6 boolean</h2><ul>\n<li><code>&amp;&amp;</code>（和）： 仅在运算符左侧的表达式和右侧的表达式都是 时生成 。<code>true``Boolean``true</code></li>\n<li><code>||</code>（或）： 如果运算符的左侧或右侧的表达式为 ，或者两者都是 ，则生成 。<code>true``true``true</code></li>\n</ul>\n<h2 id=\"1-7-while\"><a href=\"#1-7-while\" class=\"headerlink\" title=\"1.7 while\"></a>1.7 while</h2><p>最基本的重复形式使用关键字。只要控制布尔表达式为 ： <code>while``true</code></p>\n<pre><code>while (Boolean-expression) &amp;#123;\n  // Code to be repeated\n&amp;#125;</code></pre>\n<p>还有一种方法使用 ，与 关键字一起使用：<code>while``do</code></p>\n<pre><code>do &amp;#123;\n  // Code to be repeated\n&amp;#125; while (Boolean-expression)</code></pre>\n<h2 id=\"1-8-循环和范围\"><a href=\"#1-8-循环和范围\" class=\"headerlink\" title=\"1.8 循环和范围\"></a>1.8 循环和范围</h2><p>值集可以是整数的范围,关键字指示您正在单步执行值：<code>String``in</code></p>\n<pre><code class=\"kotlin\">for(v in values) &amp;#123; /* ... */ &amp;#125;</code></pre>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  for (i in 1..3) &amp;#123;\n    println(&quot;Hey $i!&quot;)\n  &amp;#125;\n&amp;#125;\n/* Output:\nHey 1!\nHey 2!\nHey 3!\n*/</code></pre>\n<h2 id=\"1-9-关键字in\"><a href=\"#1-9-关键字in\" class=\"headerlink\" title=\"1.9 关键字in\"></a>1.9 关键字<code>in</code></h2><p>关键字测试值是否在一个范围内。<code>in</code></p>\n<pre><code class=\"kotlin\">un main() &amp;#123;\n  val percent = 35\n  println(percent in 1..100)\n&amp;#125;\n/* Output:\ntrue\n*/</code></pre>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><blockquote>\n<p>三引号字符串不仅对多行字符串有用，而且对于创建正则表达式模式也很有用，因为您不需要用反斜杠转义反斜杠。</p>\n<p>以下模式匹配的日期格式为<u>13.06.1992</u>(两个数字，一个点，两个数字，一个点，四个数字):</p>\n<p>fun getPattern() = “””\\d{2}.\\d{2}.\\d{4}”””</p>\n<p>使用month变量重写此模式，使其匹配1992年6月13日格式的日期(两个数字、一个空格、一个月的缩写、一个空格、四个数字)。</p>\n</blockquote>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><pre><code class=\"kotlin\">val month = &quot;(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)&quot;\n\nfun getPattern(): String = &quot;&quot;&quot;\\d&amp;#123;2&amp;#125; $month \\d&amp;#123;4&amp;#125;&quot;&quot;&quot;</code></pre>\n<h2 id=\"1-10-可空类型\"><a href=\"#1-10-可空类型\" class=\"headerlink\" title=\"1.10 可空类型?\"></a>1.10 可空类型?</h2><h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><blockquote>\n<p>学习零安全和安全调用的Kotlin和重写以下Java代码，使它只有一个if表达式:</p>\n</blockquote>\n<h3 id=\"java写法\"><a href=\"#java写法\" class=\"headerlink\" title=\"java写法\"></a>java写法</h3><pre><code class=\"java\">public void sendMessageToClient(\n    @Nullable Client client,\n    @Nullable String message,\n    @NotNull Mailer mailer\n) &amp;#123;\n    if (client == null || message == null) return;\n\n    PersonalInfo personalInfo = client.getPersonalInfo();\n    if (personalInfo == null) return;\n\n    String email = personalInfo.getEmail();\n    if (email == null) return;\n\n    mailer.sendMessage(email, message);\n&amp;#125;</code></pre>\n<h3 id=\"Kotlin写法\"><a href=\"#Kotlin写法\" class=\"headerlink\" title=\"Kotlin写法\"></a>Kotlin写法</h3><pre><code class=\"kotlin\">fun sendMessageToClient(\n        client: Client?, message: String?, mailer: Mailer\n) &amp;#123;\n    val email=client?.personalInfo?.email\n    if (email!=null&amp;&amp;message!=null)\n        mailer.sendMessage(email,message)\n&amp;#125;</code></pre>\n<h2 id=\"1-11-类对象-class\"><a href=\"#1-11-类对象-class\" class=\"headerlink\" title=\"1.11 类对象(class)\"></a>1.11 类对象(class)</h2><p><em>对象使用属性(val 和 var)存储数据，并使用函数对此数据执行操作。</em></p>\n<ul>\n<li>类: 为本质上是新数据类型的东西定义属性和函数。类也称为用户定义类型。</li>\n<li>成员: 类的属性或函数。</li>\n<li>成员函数: 仅用于特定对象类的函数。</li>\n<li>创建对象: 创建类的 val 或 var。也称为创建该类的实例。</li>\n</ul>\n<pre><code class=\"kotlin\">fun main() &amp;#123;\n  val r1 = IntRange(0, 10)\n  val r2 = IntRange(5, 7)\n  println(r1)\n  println(r2)\n&amp;#125;\n/* Output:\n0..10\n5..7\n*/</code></pre>\n<h3 id=\"面向对象-class\"><a href=\"#面向对象-class\" class=\"headerlink\" title=\"面向对象(class)\"></a>面向对象(class)</h3><h4 id=\"1-11-1-函数可见性\"><a href=\"#1-11-1-函数可见性\" class=\"headerlink\" title=\"1.11.1 函数可见性\"></a>1.11.1 函数可见性</h4><table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>kotlin</th>\n<th>java</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>private</td>\n<td>当前类内部可见</td>\n<td>当前类内部可见</td>\n</tr>\n<tr>\n<td>public</td>\n<td>(默认值)，所有类可见</td>\n<td>所有类可见</td>\n</tr>\n<tr>\n<td>protected</td>\n<td>只对当前类,子类可见</td>\n<td>只对当前类,子类可见，同一包下可见</td>\n</tr>\n<tr>\n<td>internal</td>\n<td>对同一模块的类可见</td>\n<td>无</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-11-2-创建类\"><a href=\"#1-11-2-创建类\" class=\"headerlink\" title=\"1.11.2 创建类\"></a>1.11.2 创建类</h4><p>面向对象便需要创建类对象，类就是对事物的一种封装，类名通常是名词，类中可以拥有自己的字段和函数，字段是名称，函数是行为动词，面向对象还有继承，多态，等</p>\n<ol>\n<li><p>创建类</p>\n<pre><code class=\"kotlin\">class Person&amp;#125;&amp;#123;&amp;#125;</code></pre>\n</li>\n<li><p>加入字段及函数</p>\n<pre><code class=\"kotlin\">class Person&amp;#123;\n    var name=&quot;&quot;\n    var age=0\n    fun eat()&amp;#123;\n        println(name+age)\n    &amp;#125;\n&amp;#125;</code></pre>\n</li>\n<li><p>类实例化</p>\n<pre><code class=\"kotlin\">val p=person()</code></pre>\n</li>\n<li><p>类实例化操作</p>\n<pre><code class=\"kotlin\">fun man&amp;#123;\n    val p=person()\n    p.name=&quot;kotlin&quot;\n    p.age=19\n    p.eat()\n&amp;#125;</code></pre>\n</li>\n</ol>\n<h5 id=\"（1）继承\"><a href=\"#（1）继承\" class=\"headerlink\" title=\"（1）继承\"></a>（1）继承</h5><ol>\n<li><p>kotlin默认所有非抽象类都是不可以被继承的，想要被继承需要 open 关键字</p>\n<pre><code class=\"kotlin\">open class Person&amp;#123;\n    ...\n&amp;#125;</code></pre>\n</li>\n<li><p>Kotlin继承用 ：替代extends，（）表示构造函数</p>\n<pre><code class=\"kotlin\">class Student:Person()&amp;#123;\n    var name=&quot;&quot;\n    var grade=0\n&amp;#125;</code></pre>\n</li>\n</ol>\n<h5 id=\"（2）接口（interface）\"><a href=\"#（2）接口（interface）\" class=\"headerlink\" title=\"（2）接口（interface）\"></a>（2）接口（interface）</h5><p>基本和java一样 interface</p>\n<p>接口是”独立和往往不相关的系统相遇和操作或相互通信的地方。因此，接口是系统不同部分之间的通信手段。</p>\n<pre><code class=\"kotlin\">interface Study&amp;#123;\n    fun readBooks()\n    //默认自动实现逻辑\n    fun doHomeworks()&amp;#123;\n        println(&quot;do homework default implementation.&quot;)\n    &amp;#125;\n&amp;#125;</code></pre>\n<h5 id=\"（3）构造函数\"><a href=\"#（3）构造函数\" class=\"headerlink\" title=\"（3）构造函数\"></a>（3）构造函数</h5><p>构造函数是创建新对象的特殊函数，默认都会有一个空的构造函数</p>\n<pre><code class=\"kotlin\">class Student(val sno:String,val grade:Int):Person()&amp;#123;\n&amp;#125;\nval student=Student(&quot;a123&quot;,5)</code></pre>\n<h6 id=\"主构造函数\"><a href=\"#主构造函数\" class=\"headerlink\" title=\"主构造函数\"></a>主构造函数</h6><pre><code class=\"kotlin\">init&amp;#123;\n\n&amp;#125;</code></pre>\n<h6 id=\"次构造函数\"><a href=\"#次构造函数\" class=\"headerlink\" title=\"次构造函数\"></a>次构造函数</h6><p>当没有主构造函数时，this 改为 super</p>\n<pre><code class=\"kotlin\">constructor(name:String,age:Int):this(&quot;&quot;,0,name,age)&amp;#123;&amp;#125;\nconstructor():this(&quot;&quot;,0)&amp;#123;&amp;#125;</code></pre>\n<h4 id=\"特定的class\"><a href=\"#特定的class\" class=\"headerlink\" title=\"特定的class\"></a>特定的class</h4><h5 id=\"Data-class-数据类\"><a href=\"#Data-class-数据类\" class=\"headerlink\" title=\"Data class 数据类\"></a>Data class 数据类</h5><h5 id=\"object-单例类\"><a href=\"#object-单例类\" class=\"headerlink\" title=\"object 单例类\"></a>object 单例类</h5><p>java写法</p>\n<pre><code class=\"java\">public class Singleton&amp;#123;\n    //禁用外部创建实例\n    private static Singleton()&amp;#123;&amp;#125;;\n    //单例模式\n    private static Singleton instance;\n    public synchronized static Singleton getInstance()&amp;#123;\n        if(instance==null)&amp;#123;\n            instance=new Singleton();\n        &amp;#125;\n        return instance;\n    &amp;#125;\n    //测试方法\n    public void singletonTest()&amp;#123;\n        System.out.println(&quot;singletonTest is called.&quot;)\n    &amp;#125;\n\n&amp;#125;\nmain&amp;#123;\n    Singleton singleton=Singleton.getInstance();\n    singleton.singletonTest();\n&amp;#125;</code></pre>\n<p>kotlin写法</p>\n<pre><code class=\"kotlin\">object Singleton&amp;#123;\n    fun singletonTest()&amp;#123;\n        println(&quot;singletonTest is called.&quot;)\n    &amp;#125;\n&amp;#125;\nmain&amp;#123;\n    Singleton.singletonTest();\n&amp;#125;</code></pre>\n<h5 id=\"sealed类-密封类（只有同一文件内才可使用）\"><a href=\"#sealed类-密封类（只有同一文件内才可使用）\" class=\"headerlink\" title=\"sealed类 密封类（只有同一文件内才可使用）\"></a>sealed类 密封类（只有同一文件内才可使用）</h5><h5 id=\"嵌套类-内部类-匿名类\"><a href=\"#嵌套类-内部类-匿名类\" class=\"headerlink\" title=\"嵌套类 内部类 匿名类\"></a>嵌套类 内部类 匿名类</h5><p>类可以嵌套在其他类中：</p>\n<pre><code class=\"kotlin\">class Outer &amp;#123;\n    private val bar: Int = 1\n    class Nested &amp;#123;\n        fun foo() = 2\n    &amp;#125;\n&amp;#125;\n\nval demo = Outer.Nested().foo() // == 2</code></pre>\n<h4 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h4><p>标记为内部的嵌套<em>类</em>可以访问其外部类的成员。内部类包含对外部类对象的引用：</p>\n<pre><code class=\"kot\">class Outer &amp;#123;\n    private val bar: Int = 1\n    inner class Inner &amp;#123;\n        fun foo() = bar\n    &amp;#125;\n&amp;#125;\n\nval demo = Outer().Inner().foo() // == 1</code></pre>\n<h4 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h4><p>使用对象表达式创建匿名内部<a href=\"https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions\">类实例</a>：</p>\n<pre><code class=\"kotlin\">window.addMouseListener(object : MouseAdapter() &amp;#123;\n\n    override fun mouseClicked(e: MouseEvent) &amp;#123; ... &amp;#125;\n\n    override fun mouseEntered(e: MouseEvent) &amp;#123; ... &amp;#125;\n&amp;#125;)</code></pre>\n<h2 id=\"1-12-Lambda-编程\"><a href=\"#1-12-Lambda-编程\" class=\"headerlink\" title=\"1.12 Lambda 编程\"></a>1.12 Lambda 编程</h2><p>核心思想（简化编程）,集合的函数式API是学习Lambda编程的绝佳示例</p>\n<p>接口 List  实现类  ArraList    </p>\n<p>​        Set                HasSet</p>\n<p>​        Map            HasMap</p>\n<ol>\n<li>集合创建与遍历</li>\n</ol>\n<ol start=\"2\">\n<li><p>集合函数式API </p>\n</li>\n<li><p>Java </p>\n</li>\n</ol>\n"},{"title":"入门简介","auther":"ku jin","_content":"[Toc]\n\n官方网站：https://kotlinlang.org/https://kotlinlang.org/\n\n标语：***一种让开发人员***\n***更快乐的现代编程语言。***\n***永远开源[github](https://github.com/JetBrains/kotlin)***\n\n> Kotlin的由来，就是因为java语言的缺点null 空指针，在学习android时经常发生空指针异常的情况，这是编译器无法在编写代码时给出提示，而Kotlin解决了这一问题。\n>\n> 我之前一直以为kotlin是Android团队开发的，不过现在才知道JetBrains公司才是大佬！\n\n> 编程语言大致分为**编译语言**和**解释型语言**\n>\n> 编译语言：将编写的源代码一次性编译成二进制文件，然后由系统直接执行，如C语言\n>\n> 解释性语言：需要一个解释器，在程序执行时解释器会一行行的读取我们的源代码，然后实时地将其解释为二进制数据再执行，如JAVAY\n\n> 官方推荐的 学习方式：使用idea 的插件 Edu Tools，不过里边都是英文的教程，可以用翻译插件\n>\n\n","source":"_posts/随心记/Kotlin学习/入门简介.md","raw":"---\ntitle: 入门简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Kotlin学习\ntags: # 标签=目标文件夹\n - 入门简介 \n---\n[Toc]\n\n官方网站：https://kotlinlang.org/https://kotlinlang.org/\n\n标语：***一种让开发人员***\n***更快乐的现代编程语言。***\n***永远开源[github](https://github.com/JetBrains/kotlin)***\n\n> Kotlin的由来，就是因为java语言的缺点null 空指针，在学习android时经常发生空指针异常的情况，这是编译器无法在编写代码时给出提示，而Kotlin解决了这一问题。\n>\n> 我之前一直以为kotlin是Android团队开发的，不过现在才知道JetBrains公司才是大佬！\n\n> 编程语言大致分为**编译语言**和**解释型语言**\n>\n> 编译语言：将编写的源代码一次性编译成二进制文件，然后由系统直接执行，如C语言\n>\n> 解释性语言：需要一个解释器，在程序执行时解释器会一行行的读取我们的源代码，然后实时地将其解释为二进制数据再执行，如JAVAY\n\n> 官方推荐的 学习方式：使用idea 的插件 Edu Tools，不过里边都是英文的教程，可以用翻译插件\n>\n\n","slug":"随心记/Kotlin学习/入门简介","published":1,"date":"2020-08-02T23:42:43.635Z","updated":"2020-08-02T23:42:59.773Z","_id":"ckdcza4p1008frkamfx35963t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[Toc]</p>\n<p>官方网站：<a href=\"https://kotlinlang.org/https://kotlinlang.org/\">https://kotlinlang.org/https://kotlinlang.org/</a></p>\n<p>标语：*<strong>一种让开发人员***<br>*</strong>更快乐的现代编程语言。***<br><strong><em>永远开源<a href=\"https://github.com/JetBrains/kotlin\">github</a></em></strong></p>\n<blockquote>\n<p>Kotlin的由来，就是因为java语言的缺点null 空指针，在学习android时经常发生空指针异常的情况，这是编译器无法在编写代码时给出提示，而Kotlin解决了这一问题。</p>\n<p>我之前一直以为kotlin是Android团队开发的，不过现在才知道JetBrains公司才是大佬！</p>\n</blockquote>\n<blockquote>\n<p>编程语言大致分为<strong>编译语言</strong>和<strong>解释型语言</strong></p>\n<p>编译语言：将编写的源代码一次性编译成二进制文件，然后由系统直接执行，如C语言</p>\n<p>解释性语言：需要一个解释器，在程序执行时解释器会一行行的读取我们的源代码，然后实时地将其解释为二进制数据再执行，如JAVAY</p>\n</blockquote>\n<blockquote>\n<p>官方推荐的 学习方式：使用idea 的插件 Edu Tools，不过里边都是英文的教程，可以用翻译插件</p>\n</blockquote>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[Toc]</p>\n<p>官方网站：<a href=\"https://kotlinlang.org/https://kotlinlang.org/\">https://kotlinlang.org/https://kotlinlang.org/</a></p>\n<p>标语：*<strong>一种让开发人员***<br>*</strong>更快乐的现代编程语言。***<br><strong><em>永远开源<a href=\"https://github.com/JetBrains/kotlin\">github</a></em></strong></p>\n<blockquote>\n<p>Kotlin的由来，就是因为java语言的缺点null 空指针，在学习android时经常发生空指针异常的情况，这是编译器无法在编写代码时给出提示，而Kotlin解决了这一问题。</p>\n<p>我之前一直以为kotlin是Android团队开发的，不过现在才知道JetBrains公司才是大佬！</p>\n</blockquote>\n<blockquote>\n<p>编程语言大致分为<strong>编译语言</strong>和<strong>解释型语言</strong></p>\n<p>编译语言：将编写的源代码一次性编译成二进制文件，然后由系统直接执行，如C语言</p>\n<p>解释性语言：需要一个解释器，在程序执行时解释器会一行行的读取我们的源代码，然后实时地将其解释为二进制数据再执行，如JAVAY</p>\n</blockquote>\n<blockquote>\n<p>官方推荐的 学习方式：使用idea 的插件 Edu Tools，不过里边都是英文的教程，可以用翻译插件</p>\n</blockquote>\n"},{"title":"mysql安装","auther":"ku jin","_content":"## Centos7安装mysql8.0\n[官方安装教程地址](https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html)\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <h2><a name=\"t0\"></a>CentOS 7 安装 MySQL</h2>\n<h3><a name=\"t1\"></a>首先检查 MySQL 是否已安装</h3>\n<p>yum list installed | <span class=\"hljs-keyword\">grep mysql</span></p>\n<p><span class=\"hljs-keyword\">如果有的话 就全部卸载</span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\">yum <span class=\"hljs-selector-tag\">-y <span class=\"hljs-selector-tag\">remove +数据库名称<span class=\"hljs-selector-tag\"><br></span></span></span></span></span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182138628-598984235.png\" alt=\"\"></span></span></span></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182146284-309574833.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182150753-216803501.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182156316-2043422646.png\" alt=\"\"></p>\n<h3><a name=\"t2\"></a>MySQL 依赖 libaio，所以先要安装 libaio</h3>\n<p><span class=\"hljs-attribute\">yum search libaio <span class=\"hljs-comment\"># 检索相关信息</span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"> yum install libaio <span class=\"hljs-comment\"># 安装依赖包</span></span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182309284-812797022.png\" alt=\"\"></span></span></span></p>\n<p>&nbsp;</p>\n<h3><a name=\"t3\"></a>下载 MySQL Yum Repository</h3>\n<p>地址为&nbsp;<a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" rel=\"nofollow\" data-token=\"24f8cc217d01a7b0b936d5447908644e\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a></p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-attribute\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></p>\n<p><span class=\"hljs-attribute\">然后</span></p>\n<h3><a name=\"t4\"></a>添加 MySQL Yum Repository</h3>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-selector-tag\">yum&nbsp;<span class=\"hljs-selector-tag\">localinstall&nbsp;<span class=\"hljs-selector-tag\">mysql-community-release-el7-5<span class=\"hljs-selector-class\">.noarch<span class=\"hljs-selector-class\">.rpm</span></span></span></span></span></p>\n<p><span class=\"hljs-attribute\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182521706-940146849.png\" alt=\"\"></span></p>\n<p>如果提示<code>-bash: wget: 未找到命令</code>，请先执行&nbsp;<code>yum install wget</code>&nbsp;安装 wget</p>\n<p>&nbsp;</p>\n<h3><a name=\"t5\"></a>验证下是否添加成功</h3>\n<pre><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"mysql.*-community.*\"</span></span></span></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t6\"></a>选择要启用 MySQL 版本</h3>\n<p>查看 MySQL 版本，执行</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist all | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>查看当前的启动的 MySQL 版本</p>\n<h3><a name=\"t7\"></a>通过 Yum 来安装 MySQL</h3>\n<p>执行</p>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">install</span> mysql-community-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">server</span> </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>Yum 会自动处理 MySQL 与其他组件的依赖关系：</p>\n<pre><br><br></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182927534-1130688424.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183118300-438733573.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183423206-1086888071.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>遇到上述提示，输入 y 继续，执行完成会提示“完毕！”。此时MySQL 安装完成，它包含了 mysql-community-server、mysql-community-client、mysql-community-common、mysql-community-libs 四个包。</p>\n<p>执行</p>\n<pre><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">rpm</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">-qi</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">mysql-community-server</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.x86_64</span> 0<span class=\"hljs-selector-pseudo\"><span class=\"hljs-selector-pseudo\">:5</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.6</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.24-3</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.el7</span></span></span></span></span></span></span></span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>执行</p>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">whereis mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 MySQL 的安装目录是 /usr/bin/</p>\n<p>&nbsp;</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183533222-843570707.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t8\"></a>启动和关闭 MySQL Server</h2>\n<h3><a name=\"t9\"></a>启动 MySQL Server</h3>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">start</span>  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t10\"></a>查看 MySQL Server 状态</h3>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">systemctl status  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t11\"></a>关闭 MySQL Server</h3>\n<pre><code class=\"hljs vbscript\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">stop</span> mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t12\"></a>测试是否安装成功</h2>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以进入 mysql 命令行界面</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183644956-232259366.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t13\"></a>防火墙设置</h2>\n<p>远程访问 MySQL， 需开放默认端口号 3306.</p>\n<p>执行</p>\n<pre><code class=\"hljs cs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/tcp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">firewall-cmd <span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/udp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"></span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>这样就开放了相应的端口。</p>\n<p>执行</p>\n<pre><code class=\"hljs sql\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--reload </span><br></span></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t14\"></a>MySQL 安全设置</h2>\n<p>服务器启动后，可以执行</p>\n<pre><code class=\"hljs\">mysql_secure_installation;</code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<pre><code class=\"hljs\"></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183851300-789943277.png\" alt=\"\"></p>\n<pre></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183854019-1241643422.png\" alt=\"\"></p>\n<p>此时输入 root 原始密码（初始化安装的话为空），接下来，为了安全，MySQL 会提示你重置 root 密码，移除其他用户账号，禁用 root 远程登录，移除 test 数据库，重新加载 privilege 表格等，你只需输入 y 继续执行即可。</p>\n<p>至此，整个 MySQL 安装完成。</p>\n<pre></pre>\n<p>下面可以看到都只能本机访问mysql，如果要外部可以访问mysql，那么host这里应该是显示%，所以这里我们可以选择重新创建一个用户并授予最高的权限，语句如下：</p>\n<pre>grant all privileges on *.* to 'root'@'%' &nbsp;identified by 'lam7' with grant option;</pre>\n<p>&nbsp;//这句话就是给root账户设置密码为lam7且host为%，即外部任何主机均可访问。*.*这个本意是数据库名.表名，我们这里没有写任何表名也没有写数据库名，就是意思所有的数据库都可以用这个root账户访问</p>\n<p>flush privileges;//让刚刚修改的权限生效</p>\n<p>然后接下来就是重启mysql服务，再次进入到mysql，用查询语句查看user表，如下所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184028753-388403540.png\" alt=\"\"></p>\n<p>如果需要使用外部工具链接mysql</p>\n<p>则需要关闭防火墙</p>\n<p>systemctl stop firewalld</p>\n<p>然后查看状态</p>\n<p>systemctl status firewalld</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184421206-1095288281.png\" alt=\"\"></p>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>参考<br></strong></span></pre>\n<h2><a name=\"t15\"></a><a href=\"http://www.centoscn.com/mysql/2016/0315/6844.html\" rel=\"nofollow\" data-token=\"14a059e7ea802d5e5b2ee92fe0f7a36f\">CentOS 7 安装 MySQL</a></h2>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>&nbsp;</strong></span></pre>\n</div>\n<p>转载于:https://www.cnblogs.com/Lam7/p/6253564.html</p>                                    </div>","source":"_posts/随心记/Linux入门/mysql安装.md","raw":"---\ntitle: mysql安装 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - mysql安装 \n---\n## Centos7安装mysql8.0\n[官方安装教程地址](https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html)\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <h2><a name=\"t0\"></a>CentOS 7 安装 MySQL</h2>\n<h3><a name=\"t1\"></a>首先检查 MySQL 是否已安装</h3>\n<p>yum list installed | <span class=\"hljs-keyword\">grep mysql</span></p>\n<p><span class=\"hljs-keyword\">如果有的话 就全部卸载</span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\">yum <span class=\"hljs-selector-tag\">-y <span class=\"hljs-selector-tag\">remove +数据库名称<span class=\"hljs-selector-tag\"><br></span></span></span></span></span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182138628-598984235.png\" alt=\"\"></span></span></span></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182146284-309574833.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182150753-216803501.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182156316-2043422646.png\" alt=\"\"></p>\n<h3><a name=\"t2\"></a>MySQL 依赖 libaio，所以先要安装 libaio</h3>\n<p><span class=\"hljs-attribute\">yum search libaio <span class=\"hljs-comment\"># 检索相关信息</span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"> yum install libaio <span class=\"hljs-comment\"># 安装依赖包</span></span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182309284-812797022.png\" alt=\"\"></span></span></span></p>\n<p>&nbsp;</p>\n<h3><a name=\"t3\"></a>下载 MySQL Yum Repository</h3>\n<p>地址为&nbsp;<a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" rel=\"nofollow\" data-token=\"24f8cc217d01a7b0b936d5447908644e\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a></p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-attribute\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></p>\n<p><span class=\"hljs-attribute\">然后</span></p>\n<h3><a name=\"t4\"></a>添加 MySQL Yum Repository</h3>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-selector-tag\">yum&nbsp;<span class=\"hljs-selector-tag\">localinstall&nbsp;<span class=\"hljs-selector-tag\">mysql-community-release-el7-5<span class=\"hljs-selector-class\">.noarch<span class=\"hljs-selector-class\">.rpm</span></span></span></span></span></p>\n<p><span class=\"hljs-attribute\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182521706-940146849.png\" alt=\"\"></span></p>\n<p>如果提示<code>-bash: wget: 未找到命令</code>，请先执行&nbsp;<code>yum install wget</code>&nbsp;安装 wget</p>\n<p>&nbsp;</p>\n<h3><a name=\"t5\"></a>验证下是否添加成功</h3>\n<pre><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"mysql.*-community.*\"</span></span></span></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t6\"></a>选择要启用 MySQL 版本</h3>\n<p>查看 MySQL 版本，执行</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist all | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>查看当前的启动的 MySQL 版本</p>\n<h3><a name=\"t7\"></a>通过 Yum 来安装 MySQL</h3>\n<p>执行</p>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">install</span> mysql-community-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">server</span> </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>Yum 会自动处理 MySQL 与其他组件的依赖关系：</p>\n<pre><br><br></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182927534-1130688424.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183118300-438733573.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183423206-1086888071.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>遇到上述提示，输入 y 继续，执行完成会提示“完毕！”。此时MySQL 安装完成，它包含了 mysql-community-server、mysql-community-client、mysql-community-common、mysql-community-libs 四个包。</p>\n<p>执行</p>\n<pre><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">rpm</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">-qi</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">mysql-community-server</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.x86_64</span> 0<span class=\"hljs-selector-pseudo\"><span class=\"hljs-selector-pseudo\">:5</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.6</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.24-3</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.el7</span></span></span></span></span></span></span></span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>执行</p>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">whereis mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 MySQL 的安装目录是 /usr/bin/</p>\n<p>&nbsp;</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183533222-843570707.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t8\"></a>启动和关闭 MySQL Server</h2>\n<h3><a name=\"t9\"></a>启动 MySQL Server</h3>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">start</span>  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t10\"></a>查看 MySQL Server 状态</h3>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">systemctl status  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t11\"></a>关闭 MySQL Server</h3>\n<pre><code class=\"hljs vbscript\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">stop</span> mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t12\"></a>测试是否安装成功</h2>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以进入 mysql 命令行界面</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183644956-232259366.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t13\"></a>防火墙设置</h2>\n<p>远程访问 MySQL， 需开放默认端口号 3306.</p>\n<p>执行</p>\n<pre><code class=\"hljs cs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/tcp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">firewall-cmd <span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/udp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"></span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>这样就开放了相应的端口。</p>\n<p>执行</p>\n<pre><code class=\"hljs sql\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--reload </span><br></span></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t14\"></a>MySQL 安全设置</h2>\n<p>服务器启动后，可以执行</p>\n<pre><code class=\"hljs\">mysql_secure_installation;</code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<pre><code class=\"hljs\"></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183851300-789943277.png\" alt=\"\"></p>\n<pre></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183854019-1241643422.png\" alt=\"\"></p>\n<p>此时输入 root 原始密码（初始化安装的话为空），接下来，为了安全，MySQL 会提示你重置 root 密码，移除其他用户账号，禁用 root 远程登录，移除 test 数据库，重新加载 privilege 表格等，你只需输入 y 继续执行即可。</p>\n<p>至此，整个 MySQL 安装完成。</p>\n<pre></pre>\n<p>下面可以看到都只能本机访问mysql，如果要外部可以访问mysql，那么host这里应该是显示%，所以这里我们可以选择重新创建一个用户并授予最高的权限，语句如下：</p>\n<pre>grant all privileges on *.* to 'root'@'%' &nbsp;identified by 'lam7' with grant option;</pre>\n<p>&nbsp;//这句话就是给root账户设置密码为lam7且host为%，即外部任何主机均可访问。*.*这个本意是数据库名.表名，我们这里没有写任何表名也没有写数据库名，就是意思所有的数据库都可以用这个root账户访问</p>\n<p>flush privileges;//让刚刚修改的权限生效</p>\n<p>然后接下来就是重启mysql服务，再次进入到mysql，用查询语句查看user表，如下所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184028753-388403540.png\" alt=\"\"></p>\n<p>如果需要使用外部工具链接mysql</p>\n<p>则需要关闭防火墙</p>\n<p>systemctl stop firewalld</p>\n<p>然后查看状态</p>\n<p>systemctl status firewalld</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184421206-1095288281.png\" alt=\"\"></p>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>参考<br></strong></span></pre>\n<h2><a name=\"t15\"></a><a href=\"http://www.centoscn.com/mysql/2016/0315/6844.html\" rel=\"nofollow\" data-token=\"14a059e7ea802d5e5b2ee92fe0f7a36f\">CentOS 7 安装 MySQL</a></h2>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>&nbsp;</strong></span></pre>\n</div>\n<p>转载于:https://www.cnblogs.com/Lam7/p/6253564.html</p>                                    </div>","slug":"随心记/Linux入门/mysql安装","published":1,"date":"2020-08-02T23:42:43.694Z","updated":"2020-08-02T23:42:59.778Z","_id":"ckdcza4pa008xrkam37je28z2","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Centos7安装mysql8-0\"><a href=\"#Centos7安装mysql8-0\" class=\"headerlink\" title=\"Centos7安装mysql8.0\"></a>Centos7安装mysql8.0</h2><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html\">官方安装教程地址</a></p>\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <h2><a name=\"t0\"></a>CentOS 7 安装 MySQL</h2>\n<h3><a name=\"t1\"></a>首先检查 MySQL 是否已安装</h3>\n<p>yum list installed | <span class=\"hljs-keyword\">grep mysql</span></p>\n<p><span class=\"hljs-keyword\">如果有的话 就全部卸载</span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\">yum <span class=\"hljs-selector-tag\">-y <span class=\"hljs-selector-tag\">remove +数据库名称<span class=\"hljs-selector-tag\"><br></span></span></span></span></span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182138628-598984235.png\" alt=\"\"></span></span></span></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182146284-309574833.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182150753-216803501.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182156316-2043422646.png\" alt=\"\"></p>\n<h3><a name=\"t2\"></a>MySQL 依赖 libaio，所以先要安装 libaio</h3>\n<p><span class=\"hljs-attribute\">yum search libaio <span class=\"hljs-comment\"># 检索相关信息</span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"> yum install libaio <span class=\"hljs-comment\"># 安装依赖包</span></span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182309284-812797022.png\" alt=\"\"></span></span></span></p>\n<p>&nbsp;</p>\n<h3><a name=\"t3\"></a>下载 MySQL Yum Repository</h3>\n<p>地址为&nbsp;<a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" rel=\"nofollow\" data-token=\"24f8cc217d01a7b0b936d5447908644e\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a></p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-attribute\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></p>\n<p><span class=\"hljs-attribute\">然后</span></p>\n<h3><a name=\"t4\"></a>添加 MySQL Yum Repository</h3>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-selector-tag\">yum&nbsp;<span class=\"hljs-selector-tag\">localinstall&nbsp;<span class=\"hljs-selector-tag\">mysql-community-release-el7-5<span class=\"hljs-selector-class\">.noarch<span class=\"hljs-selector-class\">.rpm</span></span></span></span></span></p>\n<p><span class=\"hljs-attribute\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182521706-940146849.png\" alt=\"\"></span></p>\n<p>如果提示<code>-bash: wget: 未找到命令</code>，请先执行&nbsp;<code>yum install wget</code>&nbsp;安装 wget</p>\n<p>&nbsp;</p>\n<h3><a name=\"t5\"></a>验证下是否添加成功</h3>\n<pre><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"mysql.*-community.*\"</span></span></span></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t6\"></a>选择要启用 MySQL 版本</h3>\n<p>查看 MySQL 版本，执行</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist all | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>查看当前的启动的 MySQL 版本</p>\n<h3><a name=\"t7\"></a>通过 Yum 来安装 MySQL</h3>\n<p>执行</p>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">install</span> mysql-community-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">server</span> </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>Yum 会自动处理 MySQL 与其他组件的依赖关系：</p>\n<pre><br><br></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182927534-1130688424.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183118300-438733573.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183423206-1086888071.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>遇到上述提示，输入 y 继续，执行完成会提示“完毕！”。此时MySQL 安装完成，它包含了 mysql-community-server、mysql-community-client、mysql-community-common、mysql-community-libs 四个包。</p>\n<p>执行</p>\n<pre><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">rpm</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">-qi</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">mysql-community-server</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.x86_64</span> 0<span class=\"hljs-selector-pseudo\"><span class=\"hljs-selector-pseudo\">:5</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.6</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.24-3</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.el7</span></span></span></span></span></span></span></span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>执行</p>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">whereis mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 MySQL 的安装目录是 /usr/bin/</p>\n<p>&nbsp;</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183533222-843570707.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t8\"></a>启动和关闭 MySQL Server</h2>\n<h3><a name=\"t9\"></a>启动 MySQL Server</h3>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">start</span>  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t10\"></a>查看 MySQL Server 状态</h3>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">systemctl status  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t11\"></a>关闭 MySQL Server</h3>\n<pre><code class=\"hljs vbscript\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">stop</span> mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t12\"></a>测试是否安装成功</h2>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以进入 mysql 命令行界面</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183644956-232259366.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t13\"></a>防火墙设置</h2>\n<p>远程访问 MySQL， 需开放默认端口号 3306.</p>\n<p>执行</p>\n<pre><code class=\"hljs cs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/tcp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">firewall-cmd <span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/udp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"></span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>这样就开放了相应的端口。</p>\n<p>执行</p>\n<pre><code class=\"hljs sql\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--reload </span><br></span></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t14\"></a>MySQL 安全设置</h2>\n<p>服务器启动后，可以执行</p>\n<pre><code class=\"hljs\">mysql_secure_installation;</code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<pre><code class=\"hljs\"></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183851300-789943277.png\" alt=\"\"></p>\n<pre></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183854019-1241643422.png\" alt=\"\"></p>\n<p>此时输入 root 原始密码（初始化安装的话为空），接下来，为了安全，MySQL 会提示你重置 root 密码，移除其他用户账号，禁用 root 远程登录，移除 test 数据库，重新加载 privilege 表格等，你只需输入 y 继续执行即可。</p>\n<p>至此，整个 MySQL 安装完成。</p>\n<pre></pre>\n<p>下面可以看到都只能本机访问mysql，如果要外部可以访问mysql，那么host这里应该是显示%，所以这里我们可以选择重新创建一个用户并授予最高的权限，语句如下：</p>\n<pre>grant all privileges on *.* to 'root'@'%' &nbsp;identified by 'lam7' with grant option;</pre>\n<p>&nbsp;//这句话就是给root账户设置密码为lam7且host为%，即外部任何主机均可访问。*.*这个本意是数据库名.表名，我们这里没有写任何表名也没有写数据库名，就是意思所有的数据库都可以用这个root账户访问</p>\n<p>flush privileges;//让刚刚修改的权限生效</p>\n<p>然后接下来就是重启mysql服务，再次进入到mysql，用查询语句查看user表，如下所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184028753-388403540.png\" alt=\"\"></p>\n<p>如果需要使用外部工具链接mysql</p>\n<p>则需要关闭防火墙</p>\n<p>systemctl stop firewalld</p>\n<p>然后查看状态</p>\n<p>systemctl status firewalld</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184421206-1095288281.png\" alt=\"\"></p>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>参考<br></strong></span></pre>\n<h2><a name=\"t15\"></a><a href=\"http://www.centoscn.com/mysql/2016/0315/6844.html\" rel=\"nofollow\" data-token=\"14a059e7ea802d5e5b2ee92fe0f7a36f\">CentOS 7 安装 MySQL</a></h2>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>&nbsp;</strong></span></pre>\n</div>\n<p>转载于:https://www.cnblogs.com/Lam7/p/6253564.html</p>                                    </div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Centos7安装mysql8-0\"><a href=\"#Centos7安装mysql8-0\" class=\"headerlink\" title=\"Centos7安装mysql8.0\"></a>Centos7安装mysql8.0</h2><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html\">官方安装教程地址</a></p>\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <div id=\"cnblogs_post_body\" class=\"blogpost-body\">\n    <h2><a name=\"t0\"></a>CentOS 7 安装 MySQL</h2>\n<h3><a name=\"t1\"></a>首先检查 MySQL 是否已安装</h3>\n<p>yum list installed | <span class=\"hljs-keyword\">grep mysql</span></p>\n<p><span class=\"hljs-keyword\">如果有的话 就全部卸载</span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\">yum <span class=\"hljs-selector-tag\">-y <span class=\"hljs-selector-tag\">remove +数据库名称<span class=\"hljs-selector-tag\"><br></span></span></span></span></span></p>\n<p><span class=\"hljs-keyword\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182138628-598984235.png\" alt=\"\"></span></span></span></span></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182146284-309574833.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182150753-216803501.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182156316-2043422646.png\" alt=\"\"></p>\n<h3><a name=\"t2\"></a>MySQL 依赖 libaio，所以先要安装 libaio</h3>\n<p><span class=\"hljs-attribute\">yum search libaio <span class=\"hljs-comment\"># 检索相关信息</span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"> yum install libaio <span class=\"hljs-comment\"># 安装依赖包</span></span></span></p>\n<p><span class=\"hljs-attribute\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182309284-812797022.png\" alt=\"\"></span></span></span></p>\n<p>&nbsp;</p>\n<h3><a name=\"t3\"></a>下载 MySQL Yum Repository</h3>\n<p>地址为&nbsp;<a href=\"http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\" rel=\"nofollow\" data-token=\"24f8cc217d01a7b0b936d5447908644e\">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a></p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-attribute\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></p>\n<p><span class=\"hljs-attribute\">然后</span></p>\n<h3><a name=\"t4\"></a>添加 MySQL Yum Repository</h3>\n<p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p>\n<p>&nbsp;</p>\n<p><span class=\"hljs-selector-tag\">yum&nbsp;<span class=\"hljs-selector-tag\">localinstall&nbsp;<span class=\"hljs-selector-tag\">mysql-community-release-el7-5<span class=\"hljs-selector-class\">.noarch<span class=\"hljs-selector-class\">.rpm</span></span></span></span></span></p>\n<p><span class=\"hljs-attribute\"><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182521706-940146849.png\" alt=\"\"></span></p>\n<p>如果提示<code>-bash: wget: 未找到命令</code>，请先执行&nbsp;<code>yum install wget</code>&nbsp;安装 wget</p>\n<p>&nbsp;</p>\n<h3><a name=\"t5\"></a>验证下是否添加成功</h3>\n<pre><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\"><span class=\"hljs-string\">\"mysql.*-community.*\"</span></span></span></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t6\"></a>选择要启用 MySQL 版本</h3>\n<p>查看 MySQL 版本，执行</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist all | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p>\n<pre><code class=\"hljs perl\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum repolist enabled | <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">grep</span> mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>查看当前的启动的 MySQL 版本</p>\n<h3><a name=\"t7\"></a>通过 Yum 来安装 MySQL</h3>\n<p>执行</p>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">yum <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">install</span> mysql-community-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">server</span> </span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>Yum 会自动处理 MySQL 与其他组件的依赖关系：</p>\n<pre><br><br></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182927534-1130688424.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183118300-438733573.png\" alt=\"\"></p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183423206-1086888071.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>遇到上述提示，输入 y 继续，执行完成会提示“完毕！”。此时MySQL 安装完成，它包含了 mysql-community-server、mysql-community-client、mysql-community-common、mysql-community-libs 四个包。</p>\n<p>执行</p>\n<pre><code class=\"hljs css\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">rpm</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">-qi</span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">mysql-community-server</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.x86_64</span> 0<span class=\"hljs-selector-pseudo\"><span class=\"hljs-selector-pseudo\">:5</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.6</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.24-3</span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-pseudo\">.el7</span></span></span></span></span></span></span></span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>执行</p>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">whereis mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以看到 MySQL 的安装目录是 /usr/bin/</p>\n<p>&nbsp;</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183533222-843570707.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t8\"></a>启动和关闭 MySQL Server</h2>\n<h3><a name=\"t9\"></a>启动 MySQL Server</h3>\n<pre><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">start</span>  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t10\"></a>查看 MySQL Server 状态</h3>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">systemctl status  mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h3><a name=\"t11\"></a>关闭 MySQL Server</h3>\n<pre><code class=\"hljs vbscript\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">stop</span> mysqld</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t12\"></a>测试是否安装成功</h2>\n<pre><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-attribute\">mysql</span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>可以进入 mysql 命令行界面</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183644956-232259366.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<h2><a name=\"t13\"></a>防火墙设置</h2>\n<p>远程访问 MySQL， 需开放默认端口号 3306.</p>\n<p>执行</p>\n<pre><code class=\"hljs cs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/tcp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\">firewall-cmd <span class=\"hljs-comment\">--permanent --zone=<span class=\"hljs-keyword\">public</span> --<span class=\"hljs-keyword\">add</span>-port=<span class=\"hljs-number\">3306</span>/udp</span></span></div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\"><span class=\"hljs-comment\"></span></div></div></li></ol></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p>这样就开放了相应的端口。</p>\n<p>执行</p>\n<pre><code class=\"hljs sql\">firewall-cmd <span class=\"hljs-comment\"><span class=\"hljs-comment\">--reload </span><br></span></code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<h2><a name=\"t14\"></a>MySQL 安全设置</h2>\n<p>服务器启动后，可以执行</p>\n<pre><code class=\"hljs\">mysql_secure_installation;</code><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<pre><code class=\"hljs\"></code><br><br><div class=\"hljs-button {2}\" data-title=\"复制\" onclick=\"hljs.copyCode(event)\"></div></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183851300-789943277.png\" alt=\"\"></p>\n<pre></pre>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183854019-1241643422.png\" alt=\"\"></p>\n<p>此时输入 root 原始密码（初始化安装的话为空），接下来，为了安全，MySQL 会提示你重置 root 密码，移除其他用户账号，禁用 root 远程登录，移除 test 数据库，重新加载 privilege 表格等，你只需输入 y 继续执行即可。</p>\n<p>至此，整个 MySQL 安装完成。</p>\n<pre></pre>\n<p>下面可以看到都只能本机访问mysql，如果要外部可以访问mysql，那么host这里应该是显示%，所以这里我们可以选择重新创建一个用户并授予最高的权限，语句如下：</p>\n<pre>grant all privileges on *.* to 'root'@'%' &nbsp;identified by 'lam7' with grant option;</pre>\n<p>&nbsp;//这句话就是给root账户设置密码为lam7且host为%，即外部任何主机均可访问。*.*这个本意是数据库名.表名，我们这里没有写任何表名也没有写数据库名，就是意思所有的数据库都可以用这个root账户访问</p>\n<p>flush privileges;//让刚刚修改的权限生效</p>\n<p>然后接下来就是重启mysql服务，再次进入到mysql，用查询语句查看user表，如下所示：</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184028753-388403540.png\" alt=\"\"></p>\n<p>如果需要使用外部工具链接mysql</p>\n<p>则需要关闭防火墙</p>\n<p>systemctl stop firewalld</p>\n<p>然后查看状态</p>\n<p>systemctl status firewalld</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184421206-1095288281.png\" alt=\"\"></p>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>参考<br></strong></span></pre>\n<h2><a name=\"t15\"></a><a href=\"http://www.centoscn.com/mysql/2016/0315/6844.html\" rel=\"nofollow\" data-token=\"14a059e7ea802d5e5b2ee92fe0f7a36f\">CentOS 7 安装 MySQL</a></h2>\n<pre><span style=\"font-family:'宋体';font-size:18pt;\"><strong>&nbsp;</strong></span></pre>\n</div>\n<p>转载于:https://www.cnblogs.com/Lam7/p/6253564.html</p>                                    </div>"},{"title":"Nginx简介","auther":"ku jin","_content":"[官方安装教程（网速会很慢）](http://nginx.org/en/linux_packages.html#RHEL-CentOS) \n\n[官方入门指南](http://nginx.org/en/docs/beginners_guide.html)\n## Nginx简介\n\tNginx是什么？能干什么？有什么特点？\n1. 轻量级web服务器，也是一款反向代理服务器\n2. 可直接支持Rails和PHP的程序\n3. 可作为http反向代理服务器\n4. 负债均衡服务器\n5. 邮件代理服务器\n6. 帮助前端动静分离\n## Nginx命令\n\t1. 启动systemctl start nginx\n\t2. 停止systemctl stop nginx\n\t3. 状态systemctl status nginx\n\t4. 重启systemctl reload nginx\n## nginx文件目录\n\n\t\n\t","source":"_posts/随心记/Linux入门/Nginx简介.md","raw":"---\ntitle: Nginx简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Nginx简介 \n---\n[官方安装教程（网速会很慢）](http://nginx.org/en/linux_packages.html#RHEL-CentOS) \n\n[官方入门指南](http://nginx.org/en/docs/beginners_guide.html)\n## Nginx简介\n\tNginx是什么？能干什么？有什么特点？\n1. 轻量级web服务器，也是一款反向代理服务器\n2. 可直接支持Rails和PHP的程序\n3. 可作为http反向代理服务器\n4. 负债均衡服务器\n5. 邮件代理服务器\n6. 帮助前端动静分离\n## Nginx命令\n\t1. 启动systemctl start nginx\n\t2. 停止systemctl stop nginx\n\t3. 状态systemctl status nginx\n\t4. 重启systemctl reload nginx\n## nginx文件目录\n\n\t\n\t","slug":"随心记/Linux入门/Nginx简介","published":1,"date":"2020-08-02T23:42:43.718Z","updated":"2020-08-02T23:42:59.780Z","_id":"ckdcza4pc0092rkamdt4y5rtu","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"http://nginx.org/en/linux_packages.html#RHEL-CentOS\">官方安装教程（网速会很慢）</a> </p>\n<p><a href=\"http://nginx.org/en/docs/beginners_guide.html\">官方入门指南</a></p>\n<h2 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h2><pre><code>Nginx是什么？能干什么？有什么特点？</code></pre>\n<ol>\n<li>轻量级web服务器，也是一款反向代理服务器</li>\n<li>可直接支持Rails和PHP的程序</li>\n<li>可作为http反向代理服务器</li>\n<li>负债均衡服务器</li>\n<li>邮件代理服务器</li>\n<li>帮助前端动静分离<h2 id=\"Nginx命令\"><a href=\"#Nginx命令\" class=\"headerlink\" title=\"Nginx命令\"></a>Nginx命令</h2><ol>\n<li>启动systemctl start nginx</li>\n<li>停止systemctl stop nginx</li>\n<li>状态systemctl status nginx</li>\n<li>重启systemctl reload nginx<h2 id=\"nginx文件目录\"><a href=\"#nginx文件目录\" class=\"headerlink\" title=\"nginx文件目录\"></a>nginx文件目录</h2></li>\n</ol>\n</li>\n</ol>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><a href=\"http://nginx.org/en/linux_packages.html#RHEL-CentOS\">官方安装教程（网速会很慢）</a> </p>\n<p><a href=\"http://nginx.org/en/docs/beginners_guide.html\">官方入门指南</a></p>\n<h2 id=\"Nginx简介\"><a href=\"#Nginx简介\" class=\"headerlink\" title=\"Nginx简介\"></a>Nginx简介</h2><pre><code>Nginx是什么？能干什么？有什么特点？</code></pre>\n<ol>\n<li>轻量级web服务器，也是一款反向代理服务器</li>\n<li>可直接支持Rails和PHP的程序</li>\n<li>可作为http反向代理服务器</li>\n<li>负债均衡服务器</li>\n<li>邮件代理服务器</li>\n<li>帮助前端动静分离<h2 id=\"Nginx命令\"><a href=\"#Nginx命令\" class=\"headerlink\" title=\"Nginx命令\"></a>Nginx命令</h2><ol>\n<li>启动systemctl start nginx</li>\n<li>停止systemctl stop nginx</li>\n<li>状态systemctl status nginx</li>\n<li>重启systemctl reload nginx<h2 id=\"nginx文件目录\"><a href=\"#nginx文件目录\" class=\"headerlink\" title=\"nginx文件目录\"></a>nginx文件目录</h2></li>\n</ol>\n</li>\n</ol>\n"},{"title":"Readis安装及配置","auther":"ku jin","_content":"## Readis安装\n[官方网址](https://redis.io/)","source":"_posts/随心记/Linux入门/Readis安装及配置.md","raw":"---\ntitle: Readis安装及配置 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Linux入门\ntags: # 标签=目标文件夹\n - Readis安装及配置 \n---\n## Readis安装\n[官方网址](https://redis.io/)","slug":"随心记/Linux入门/Readis安装及配置","published":1,"date":"2020-08-02T23:42:43.724Z","updated":"2020-08-02T23:42:59.780Z","_id":"ckdcza4pd0096rkam8vdy924h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Readis安装\"><a href=\"#Readis安装\" class=\"headerlink\" title=\"Readis安装\"></a>Readis安装</h2><p><a href=\"https://redis.io/\">官方网址</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Readis安装\"><a href=\"#Readis安装\" class=\"headerlink\" title=\"Readis安装\"></a>Readis安装</h2><p><a href=\"https://redis.io/\">官方网址</a></p>\n"},{"title":"从安装到卸载","auther":"ku jin","_content":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>根据搜集的资料安装测试并在安装测试过程中整理的文档，部分参考文档在相应位置有标记。如有不足希望不吝赐教。</p>\n\n<hr><p><strong>目录</strong></p>\n\n<p id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\" rel=\"nofollow\" data-token=\"d05dd36135c8110a3915b2b41de20705\" target=\"_self\">一、配置yum源</a></p>\n\n<p id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\" rel=\"nofollow\" data-token=\"417284a06befa9cee1452bdec45f4c0a\" target=\"_self\">1.下载mysql源安装包</a></p>\n\n<p id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\" rel=\"nofollow\" data-token=\"e9d32b2830496abafa4296f459aa7f3d\" target=\"_self\">2.安装mysql源</a></p>\n\n<p id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\" rel=\"nofollow\" data-token=\"1c1ae194bac23d13cc942f2d0d77dae3\" target=\"_self\">3.检查是否安装成功</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\" rel=\"nofollow\" data-token=\"4570ea7ce1108877c41a7f05927bec9d\" target=\"_self\">4.修改安装版本（非必须）</a></p>\n\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\" rel=\"nofollow\" data-token=\"c25db65e3c6ac36e7385821f60267da4\" target=\"_self\">二、安装mysql</a></p>\n\n<p id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\" rel=\"nofollow\" data-token=\"75e4e89348d079d41a14d494629e49b3\" target=\"_self\">三、启动mysql服务</a></p>\n\n<p id=\"1.%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"2906b6ab2ecf17d76553fa1eba572110\" target=\"_self\">1.启动</a></p>\n\n<p id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\" rel=\"nofollow\" data-token=\"1b0021eceb6545bf8afc494304fa610a\" target=\"_self\">2.查看启动状态</a></p>\n\n<p id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"a7d4243e46d226b4b81da270f0b9baa0\" target=\"_self\">3.设置开机启动</a></p>\n\n<p id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"e24e079f3438547c7c27b31ee6cbe027\" target=\"_self\">四、配置及部分命令</a></p>\n\n<p id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\" rel=\"nofollow\" data-token=\"c0049e3ef8e6b619a30b66e715f98485\" target=\"_self\">1.修改登录密码</a></p>\n\n<p id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\" rel=\"nofollow\" data-token=\"ab63e91dfe71542d4083e1df7f7209f6\" target=\"_self\">2.添加远程登录用户</a></p>\n\n<p id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8-toc\" style=\"margin-left:40px;\"><a href=\"#3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\" rel=\"nofollow\" data-token=\"096dee9405675b85ad261d9c2f1ca8e4\" target=\"_self\">3.sqlyog链接时出现2058异常</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\" rel=\"nofollow\" data-token=\"9c4db988b874d3a1e837ba0840a750ea\" target=\"_self\">4.修改默认编码方式</a></p>\n\n<p id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"1a9e85638177f3bd4a6535c5531819bb\" target=\"_self\">5.部分参数配置查询命令</a></p>\n\n<p id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\" rel=\"nofollow\" data-token=\"f8ea7589ce89f80e362642038fd5d95c\" target=\"_self\">五、彻底卸载mysql</a></p>\n\n<p id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\" rel=\"nofollow\" data-token=\"6d14d118678bee6ab8250f781c543b72\" target=\"_self\">1.卸载软件</a></p>\n\n<p id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\" rel=\"nofollow\" data-token=\"85f671d566679a24113ce779a10ae758\" target=\"_self\">2.删除文件</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\"><a name=\"t0\"></a>一、配置yum源</h1>\n\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\"><a name=\"t1\"></a>1.下载mysql源安装包</h2>\n\n<p style=\"margin-left:0cm;\">在MySQL官网中下载YUM源rpm安装包：<a href=\"http://dev.mysql.com/downloads/repo/yum/\" rel=\"nofollow\" data-token=\"db341c165501c5ffff8e6ed32f64bbbe\">http://dev.mysql.com/downloads/repo/yum/</a></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"238\" src=\"https://img-blog.csdn.net/20181007150611140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"196\" src=\"https://img-blog.csdn.net/20181007150615107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">复制下载链接：<a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\" rel=\"nofollow\" data-token=\"3a11cfb38f198a03eef9b7f7a069db2e\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a></p>\n\n<p style=\"margin-left:0cm;\">本次下载目录为：/home/目录，因此进入：<span style=\"color:#ff0000;\">cd /home</span></p>\n\n<p style=\"margin-left:0cm;\">执行下载命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs java\">wget https:<span class=\"hljs-comment\">//dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\"><a name=\"t2\"></a>2.安装mysql源</h2>\n\n<p style=\"margin-left:0cm;\">下载完成后使用下面命令安装源：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">localinstall</span> <span class=\"hljs-selector-tag\">mysql80-community-release-el7-1</span><span class=\"hljs-selector-class\">.noarch</span><span class=\"hljs-selector-class\">.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><a name=\"t3\"></a>3.检查是否安装成功</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"mysql.*-community.*\"</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"65\" src=\"https://img-blog.csdn.net/20181007150748219?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\"><a name=\"t4\"></a>4.修改安装版本（非必须）</h2>\n\n<p style=\"margin-left:0cm;\">如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。</p>\n\n<p style=\"margin-left:0cm;\">例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"202\" src=\"https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"507\"></p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\"><a name=\"t5\"></a>二、安装mysql</h1>\n\n<p>直接使用命令：<span style=\"color:#ff0000;\">yum install mysql-community-server</span>即可。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\"><a name=\"t6\"></a>三、启动mysql服务</h1>\n\n<h2 id=\"1.%E5%90%AF%E5%8A%A8\"><a name=\"t7\"></a>1.启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\">start</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld <span class=\"hljs-keyword\">start</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\"><a name=\"t8\"></a>2.查看启动状态</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl status mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld status</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"218\" src=\"https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\"><a name=\"t9\"></a>3.设置开机启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs bash\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-built_in\">enable</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl daemon-reload</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\"><a name=\"t10\"></a>四、配置及部分命令</h1>\n\n<h2 id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\"><a name=\"t11\"></a>1.修改登录密码</h2>\n\n<p style=\"margin-left:0cm;\">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'temporary password'</span> /var/<span class=\"hljs-keyword\">log</span>/mysqld.log</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"26\" src=\"https://img-blog.csdn.net/2018100715105966?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">本地MySQL客户端登录</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\">mysql -uroot -p</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">密码是上一步查询出来的。输入后回车。</p>\n\n<p style=\"margin-left:0cm;\">然后修改密码：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'TestBicon@123'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">或者</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span>=<span class=\"hljs-keyword\">password</span>(<span class=\"hljs-string\">'TestBicon@123'</span>);</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p><strong>注意</strong>：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"34\" src=\"https://img-blog.csdn.net/20181007151159829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'%password%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"406\" src=\"https://img-blog.csdn.net/20181007151229820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"488\"></p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">validate_password_policy：密码策略，默认为MEDIUM策略</p>\n\n<p style=\"margin-left:0cm;\">validate_password_dictionary_file：密码策略文件，策略为STRONG才需要</p>\n\n<p style=\"margin-left:0cm;\">validate_password_length：密码最少长度</p>\n\n<p style=\"margin-left:0cm;\">validate_password_mixed_case_count：大小写字符长度，至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_number_count ：数字至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_special_char_count：特殊字符至少1个</p>\n\n<p style=\"margin-left:0cm;\"><em>上述参数是默认策略</em><em>MEDIUM</em><em>的密码检查规则。</em></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">修改密码策略：</p>\n\n<p style=\"margin-left:0cm;\">在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：</p>\n\n<p style=\"margin-left:0cm;\">选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件。</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password_policy=0</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password = off</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">重新启动mysql服务使配置生效：<span style=\"color:#ff0000;\">systemctl restart mysqld</span></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\"><a name=\"t12\"></a>2.添加远程登录用户</h2>\n\n<p style=\"margin-left:0cm;\">默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户。</p>\n\n<p style=\"margin-left:0cm;\">修改root用户远程访问权限：</p>\n\n<p style=\"margin-left:0cm;\">选择 mysql 数据库：<span style=\"color:#ff0000;\">use mysql;</span></p>\n\n<p style=\"margin-left:0cm;\">在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> host, <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"160\" src=\"https://img-blog.csdn.net/20181007151435699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"269\"></p>\n\n<p style=\"margin-left:0cm;\">查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</p>\n\n<p style=\"margin-left:0cm;\">授权 root 用户的所有权限并设置远程访问</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"41\" src=\"https://img-blog.csdn.net/2018100715151769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"490\"></p>\n\n<p style=\"margin-left:0cm;\">则使用：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> host=<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span> =<span class=\"hljs-string\">'root'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">然后使用下面命令使修改生效：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><em>如有需要再执行之前授权报错的命令即可成功，最后同样使用</em><em><span style=\"color:#ff0000;\">flush privileges;</span></em><em>命令刷新。</em></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\"><a name=\"t13\"></a>3.sqlyog链接时出现2058异常</h2>\n\n<p style=\"margin-left:0cm;\">完成上面的配置使用sqlyog链接时会出现2058的异常，此时我们需要修改mysql，命令行登录mysql（与修改密码中登录相同，使用修改后的密码），然后执行下面的命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">其中password为自己修改的密码。然后SQLyog中重新连接，则可连接成功，OK。</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'则使用下面命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><a name=\"t14\"></a>4.修改默认编码方式</h2>\n\n<p style=\"margin-left:0cm;\">mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">VARIABLES</span> <span class=\"hljs-keyword\">WHERE</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'character_set_%'</span> <span class=\"hljs-keyword\">OR</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'collation%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"207\" src=\"https://img-blog.csdn.net/20181007151723711?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果需要修改其他编码方式，方法有很多，以下仅为举例。</p>\n\n<p style=\"margin-left:0cm;\">比如需要修改为utf8mb4，可以使用如下方式：</p>\n\n<p style=\"margin-left:0cm;\">修改mysql配置文件my.cnf（windows为my.ini）</p>\n\n<p style=\"margin-left:0cm;\">my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[client] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysql] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysqld] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-client-handshake = FALSE </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-server = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">collation-server = utf8mb4_unicode_ci </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">init_connect='SET NAMES utf8mb4'</span></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">重启mysql即可。</p>\n\n<p style=\"margin-left:0cm;\">collation_connection 、collation_database 、collation_server是什么没关系。但必须保证以下这几个变量必须是utf8mb4。：</p>\n\n<blockquote>\n<ul><li>character_set_client&nbsp; (客户端来源数据使用的字符集)</li>\n\t<li>character_set_connection&nbsp;&nbsp;&nbsp;&nbsp; (连接层字符集)</li>\n\t<li>character_set_database&nbsp;&nbsp; (当前选中数据库的默认字符集)</li>\n\t<li>character_set_results (查询结果字符集)</li>\n\t<li>character_set_server (默认的内部操作字符集)</li>\n</ul></blockquote>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">数据库连接参数中:</p>\n\n<p style=\"margin-left:0cm;\">characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。</p>\n\n<p style=\"margin-left:0cm;\">而autoReconnect=true是必须加上的。</p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\"><a name=\"t15\"></a>5.部分参数配置查询命令</h2>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">#查询mysql最大连接数设置</p>\n\n<p style=\"margin-left:0cm;\">show global variables like 'max_conn%';</p>\n\n<p style=\"margin-left:0cm;\">SELECT @@MAX_CONNECTIONS AS 'Max Connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看最大链接数</p>\n\n<p style=\"margin-left:0cm;\">show global status like 'Max_used_connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志是否开启以及日志位置</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'slow_query%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志超时记录时间</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'long_query_time';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看链接创建以及现在正在链接数</p>\n\n<p style=\"margin-left:0cm;\">show status like 'Threads%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库当前链接</p>\n\n<p style=\"margin-left:0cm;\">show processlist;</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库配置</p>\n\n<p style=\"margin-left:0cm;\">show variables like '%quer%';</p>\n</blockquote>\n\n<p>&nbsp;</p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\"><a name=\"t16\"></a>五、彻底卸载mysql</h1>\n\n<h2 id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\"><a name=\"t17\"></a>1.卸载软件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs vbscript\">yum remove mysql-community-<span class=\"hljs-built_in\">server</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">完成后使用<span style=\"color:#ff0000;\">rpm -qa|grep mysql</span>命令查看，如果有查询结果，则使用<span style=\"color:#ff0000;\">yum remove </span><span style=\"color:#ff0000;\">名称</span>清理掉。如图：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"119\" src=\"https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">再使用命令<span style=\"color:#ff0000;\">rpm -qa | grep -i mysql</span>查看，如果有结果使用<span style=\"color:#ff0000;\">rpm -e </span><span style=\"color:#ff0000;\">名称</span>卸载。例如：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"66\" src=\"https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><a name=\"t18\"></a>2.删除文件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /<span class=\"hljs-keyword\">var</span>/lib/mysql</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm /etc/my.cnf</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /usr/share/mysql<span class=\"hljs-number\">-8.0</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\">chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/lib/mysql</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<hr><p>END</p>\n                                    </div>","source":"_posts/随心记/MySQL8.0/从安装到卸载.md","raw":"---\ntitle: 从安装到卸载 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - MySQL8.0\ntags: # 标签=目标文件夹\n - 从安装到卸载 \n---\n<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>根据搜集的资料安装测试并在安装测试过程中整理的文档，部分参考文档在相应位置有标记。如有不足希望不吝赐教。</p>\n\n<hr><p><strong>目录</strong></p>\n\n<p id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\" rel=\"nofollow\" data-token=\"d05dd36135c8110a3915b2b41de20705\" target=\"_self\">一、配置yum源</a></p>\n\n<p id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\" rel=\"nofollow\" data-token=\"417284a06befa9cee1452bdec45f4c0a\" target=\"_self\">1.下载mysql源安装包</a></p>\n\n<p id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\" rel=\"nofollow\" data-token=\"e9d32b2830496abafa4296f459aa7f3d\" target=\"_self\">2.安装mysql源</a></p>\n\n<p id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\" rel=\"nofollow\" data-token=\"1c1ae194bac23d13cc942f2d0d77dae3\" target=\"_self\">3.检查是否安装成功</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\" rel=\"nofollow\" data-token=\"4570ea7ce1108877c41a7f05927bec9d\" target=\"_self\">4.修改安装版本（非必须）</a></p>\n\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\" rel=\"nofollow\" data-token=\"c25db65e3c6ac36e7385821f60267da4\" target=\"_self\">二、安装mysql</a></p>\n\n<p id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\" rel=\"nofollow\" data-token=\"75e4e89348d079d41a14d494629e49b3\" target=\"_self\">三、启动mysql服务</a></p>\n\n<p id=\"1.%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"2906b6ab2ecf17d76553fa1eba572110\" target=\"_self\">1.启动</a></p>\n\n<p id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\" rel=\"nofollow\" data-token=\"1b0021eceb6545bf8afc494304fa610a\" target=\"_self\">2.查看启动状态</a></p>\n\n<p id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"a7d4243e46d226b4b81da270f0b9baa0\" target=\"_self\">3.设置开机启动</a></p>\n\n<p id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"e24e079f3438547c7c27b31ee6cbe027\" target=\"_self\">四、配置及部分命令</a></p>\n\n<p id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\" rel=\"nofollow\" data-token=\"c0049e3ef8e6b619a30b66e715f98485\" target=\"_self\">1.修改登录密码</a></p>\n\n<p id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\" rel=\"nofollow\" data-token=\"ab63e91dfe71542d4083e1df7f7209f6\" target=\"_self\">2.添加远程登录用户</a></p>\n\n<p id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8-toc\" style=\"margin-left:40px;\"><a href=\"#3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\" rel=\"nofollow\" data-token=\"096dee9405675b85ad261d9c2f1ca8e4\" target=\"_self\">3.sqlyog链接时出现2058异常</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\" rel=\"nofollow\" data-token=\"9c4db988b874d3a1e837ba0840a750ea\" target=\"_self\">4.修改默认编码方式</a></p>\n\n<p id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"1a9e85638177f3bd4a6535c5531819bb\" target=\"_self\">5.部分参数配置查询命令</a></p>\n\n<p id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\" rel=\"nofollow\" data-token=\"f8ea7589ce89f80e362642038fd5d95c\" target=\"_self\">五、彻底卸载mysql</a></p>\n\n<p id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\" rel=\"nofollow\" data-token=\"6d14d118678bee6ab8250f781c543b72\" target=\"_self\">1.卸载软件</a></p>\n\n<p id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\" rel=\"nofollow\" data-token=\"85f671d566679a24113ce779a10ae758\" target=\"_self\">2.删除文件</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\"><a name=\"t0\"></a>一、配置yum源</h1>\n\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\"><a name=\"t1\"></a>1.下载mysql源安装包</h2>\n\n<p style=\"margin-left:0cm;\">在MySQL官网中下载YUM源rpm安装包：<a href=\"http://dev.mysql.com/downloads/repo/yum/\" rel=\"nofollow\" data-token=\"db341c165501c5ffff8e6ed32f64bbbe\">http://dev.mysql.com/downloads/repo/yum/</a></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"238\" src=\"https://img-blog.csdn.net/20181007150611140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"196\" src=\"https://img-blog.csdn.net/20181007150615107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">复制下载链接：<a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\" rel=\"nofollow\" data-token=\"3a11cfb38f198a03eef9b7f7a069db2e\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a></p>\n\n<p style=\"margin-left:0cm;\">本次下载目录为：/home/目录，因此进入：<span style=\"color:#ff0000;\">cd /home</span></p>\n\n<p style=\"margin-left:0cm;\">执行下载命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs java\">wget https:<span class=\"hljs-comment\">//dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\"><a name=\"t2\"></a>2.安装mysql源</h2>\n\n<p style=\"margin-left:0cm;\">下载完成后使用下面命令安装源：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">localinstall</span> <span class=\"hljs-selector-tag\">mysql80-community-release-el7-1</span><span class=\"hljs-selector-class\">.noarch</span><span class=\"hljs-selector-class\">.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><a name=\"t3\"></a>3.检查是否安装成功</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"mysql.*-community.*\"</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"65\" src=\"https://img-blog.csdn.net/20181007150748219?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\"><a name=\"t4\"></a>4.修改安装版本（非必须）</h2>\n\n<p style=\"margin-left:0cm;\">如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。</p>\n\n<p style=\"margin-left:0cm;\">例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"202\" src=\"https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"507\"></p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\"><a name=\"t5\"></a>二、安装mysql</h1>\n\n<p>直接使用命令：<span style=\"color:#ff0000;\">yum install mysql-community-server</span>即可。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\"><a name=\"t6\"></a>三、启动mysql服务</h1>\n\n<h2 id=\"1.%E5%90%AF%E5%8A%A8\"><a name=\"t7\"></a>1.启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\">start</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld <span class=\"hljs-keyword\">start</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\"><a name=\"t8\"></a>2.查看启动状态</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl status mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld status</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"218\" src=\"https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\"><a name=\"t9\"></a>3.设置开机启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs bash\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-built_in\">enable</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl daemon-reload</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\"><a name=\"t10\"></a>四、配置及部分命令</h1>\n\n<h2 id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\"><a name=\"t11\"></a>1.修改登录密码</h2>\n\n<p style=\"margin-left:0cm;\">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'temporary password'</span> /var/<span class=\"hljs-keyword\">log</span>/mysqld.log</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"26\" src=\"https://img-blog.csdn.net/2018100715105966?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">本地MySQL客户端登录</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\">mysql -uroot -p</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">密码是上一步查询出来的。输入后回车。</p>\n\n<p style=\"margin-left:0cm;\">然后修改密码：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'TestBicon@123'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">或者</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span>=<span class=\"hljs-keyword\">password</span>(<span class=\"hljs-string\">'TestBicon@123'</span>);</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p><strong>注意</strong>：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"34\" src=\"https://img-blog.csdn.net/20181007151159829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'%password%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"406\" src=\"https://img-blog.csdn.net/20181007151229820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"488\"></p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">validate_password_policy：密码策略，默认为MEDIUM策略</p>\n\n<p style=\"margin-left:0cm;\">validate_password_dictionary_file：密码策略文件，策略为STRONG才需要</p>\n\n<p style=\"margin-left:0cm;\">validate_password_length：密码最少长度</p>\n\n<p style=\"margin-left:0cm;\">validate_password_mixed_case_count：大小写字符长度，至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_number_count ：数字至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_special_char_count：特殊字符至少1个</p>\n\n<p style=\"margin-left:0cm;\"><em>上述参数是默认策略</em><em>MEDIUM</em><em>的密码检查规则。</em></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">修改密码策略：</p>\n\n<p style=\"margin-left:0cm;\">在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：</p>\n\n<p style=\"margin-left:0cm;\">选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件。</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password_policy=0</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password = off</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">重新启动mysql服务使配置生效：<span style=\"color:#ff0000;\">systemctl restart mysqld</span></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\"><a name=\"t12\"></a>2.添加远程登录用户</h2>\n\n<p style=\"margin-left:0cm;\">默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户。</p>\n\n<p style=\"margin-left:0cm;\">修改root用户远程访问权限：</p>\n\n<p style=\"margin-left:0cm;\">选择 mysql 数据库：<span style=\"color:#ff0000;\">use mysql;</span></p>\n\n<p style=\"margin-left:0cm;\">在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> host, <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"160\" src=\"https://img-blog.csdn.net/20181007151435699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"269\"></p>\n\n<p style=\"margin-left:0cm;\">查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</p>\n\n<p style=\"margin-left:0cm;\">授权 root 用户的所有权限并设置远程访问</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"41\" src=\"https://img-blog.csdn.net/2018100715151769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"490\"></p>\n\n<p style=\"margin-left:0cm;\">则使用：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> host=<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span> =<span class=\"hljs-string\">'root'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">然后使用下面命令使修改生效：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><em>如有需要再执行之前授权报错的命令即可成功，最后同样使用</em><em><span style=\"color:#ff0000;\">flush privileges;</span></em><em>命令刷新。</em></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\"><a name=\"t13\"></a>3.sqlyog链接时出现2058异常</h2>\n\n<p style=\"margin-left:0cm;\">完成上面的配置使用sqlyog链接时会出现2058的异常，此时我们需要修改mysql，命令行登录mysql（与修改密码中登录相同，使用修改后的密码），然后执行下面的命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">其中password为自己修改的密码。然后SQLyog中重新连接，则可连接成功，OK。</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'则使用下面命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><a name=\"t14\"></a>4.修改默认编码方式</h2>\n\n<p style=\"margin-left:0cm;\">mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">VARIABLES</span> <span class=\"hljs-keyword\">WHERE</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'character_set_%'</span> <span class=\"hljs-keyword\">OR</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'collation%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"207\" src=\"https://img-blog.csdn.net/20181007151723711?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果需要修改其他编码方式，方法有很多，以下仅为举例。</p>\n\n<p style=\"margin-left:0cm;\">比如需要修改为utf8mb4，可以使用如下方式：</p>\n\n<p style=\"margin-left:0cm;\">修改mysql配置文件my.cnf（windows为my.ini）</p>\n\n<p style=\"margin-left:0cm;\">my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[client] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysql] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysqld] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-client-handshake = FALSE </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-server = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">collation-server = utf8mb4_unicode_ci </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">init_connect='SET NAMES utf8mb4'</span></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">重启mysql即可。</p>\n\n<p style=\"margin-left:0cm;\">collation_connection 、collation_database 、collation_server是什么没关系。但必须保证以下这几个变量必须是utf8mb4。：</p>\n\n<blockquote>\n<ul><li>character_set_client&nbsp; (客户端来源数据使用的字符集)</li>\n\t<li>character_set_connection&nbsp;&nbsp;&nbsp;&nbsp; (连接层字符集)</li>\n\t<li>character_set_database&nbsp;&nbsp; (当前选中数据库的默认字符集)</li>\n\t<li>character_set_results (查询结果字符集)</li>\n\t<li>character_set_server (默认的内部操作字符集)</li>\n</ul></blockquote>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">数据库连接参数中:</p>\n\n<p style=\"margin-left:0cm;\">characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。</p>\n\n<p style=\"margin-left:0cm;\">而autoReconnect=true是必须加上的。</p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\"><a name=\"t15\"></a>5.部分参数配置查询命令</h2>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">#查询mysql最大连接数设置</p>\n\n<p style=\"margin-left:0cm;\">show global variables like 'max_conn%';</p>\n\n<p style=\"margin-left:0cm;\">SELECT @@MAX_CONNECTIONS AS 'Max Connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看最大链接数</p>\n\n<p style=\"margin-left:0cm;\">show global status like 'Max_used_connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志是否开启以及日志位置</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'slow_query%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志超时记录时间</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'long_query_time';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看链接创建以及现在正在链接数</p>\n\n<p style=\"margin-left:0cm;\">show status like 'Threads%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库当前链接</p>\n\n<p style=\"margin-left:0cm;\">show processlist;</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库配置</p>\n\n<p style=\"margin-left:0cm;\">show variables like '%quer%';</p>\n</blockquote>\n\n<p>&nbsp;</p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\"><a name=\"t16\"></a>五、彻底卸载mysql</h1>\n\n<h2 id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\"><a name=\"t17\"></a>1.卸载软件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs vbscript\">yum remove mysql-community-<span class=\"hljs-built_in\">server</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">完成后使用<span style=\"color:#ff0000;\">rpm -qa|grep mysql</span>命令查看，如果有查询结果，则使用<span style=\"color:#ff0000;\">yum remove </span><span style=\"color:#ff0000;\">名称</span>清理掉。如图：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"119\" src=\"https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">再使用命令<span style=\"color:#ff0000;\">rpm -qa | grep -i mysql</span>查看，如果有结果使用<span style=\"color:#ff0000;\">rpm -e </span><span style=\"color:#ff0000;\">名称</span>卸载。例如：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"66\" src=\"https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><a name=\"t18\"></a>2.删除文件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /<span class=\"hljs-keyword\">var</span>/lib/mysql</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm /etc/my.cnf</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /usr/share/mysql<span class=\"hljs-number\">-8.0</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\">chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/lib/mysql</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<hr><p>END</p>\n                                    </div>","slug":"随心记/MySQL8.0/从安装到卸载","published":1,"date":"2020-08-02T23:42:43.752Z","updated":"2020-08-02T23:42:59.784Z","_id":"ckdcza4q100bdrkameh7i65be","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>根据搜集的资料安装测试并在安装测试过程中整理的文档，部分参考文档在相应位置有标记。如有不足希望不吝赐教。</p>\n\n<hr><p><strong>目录</strong></p>\n\n<p id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\" rel=\"nofollow\" data-token=\"d05dd36135c8110a3915b2b41de20705\" target=\"_self\">一、配置yum源</a></p>\n\n<p id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\" rel=\"nofollow\" data-token=\"417284a06befa9cee1452bdec45f4c0a\" target=\"_self\">1.下载mysql源安装包</a></p>\n\n<p id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\" rel=\"nofollow\" data-token=\"e9d32b2830496abafa4296f459aa7f3d\" target=\"_self\">2.安装mysql源</a></p>\n\n<p id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\" rel=\"nofollow\" data-token=\"1c1ae194bac23d13cc942f2d0d77dae3\" target=\"_self\">3.检查是否安装成功</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\" rel=\"nofollow\" data-token=\"4570ea7ce1108877c41a7f05927bec9d\" target=\"_self\">4.修改安装版本（非必须）</a></p>\n\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\" rel=\"nofollow\" data-token=\"c25db65e3c6ac36e7385821f60267da4\" target=\"_self\">二、安装mysql</a></p>\n\n<p id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\" rel=\"nofollow\" data-token=\"75e4e89348d079d41a14d494629e49b3\" target=\"_self\">三、启动mysql服务</a></p>\n\n<p id=\"1.%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"2906b6ab2ecf17d76553fa1eba572110\" target=\"_self\">1.启动</a></p>\n\n<p id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\" rel=\"nofollow\" data-token=\"1b0021eceb6545bf8afc494304fa610a\" target=\"_self\">2.查看启动状态</a></p>\n\n<p id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"a7d4243e46d226b4b81da270f0b9baa0\" target=\"_self\">3.设置开机启动</a></p>\n\n<p id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"e24e079f3438547c7c27b31ee6cbe027\" target=\"_self\">四、配置及部分命令</a></p>\n\n<p id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\" rel=\"nofollow\" data-token=\"c0049e3ef8e6b619a30b66e715f98485\" target=\"_self\">1.修改登录密码</a></p>\n\n<p id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\" rel=\"nofollow\" data-token=\"ab63e91dfe71542d4083e1df7f7209f6\" target=\"_self\">2.添加远程登录用户</a></p>\n\n<p id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8-toc\" style=\"margin-left:40px;\"><a href=\"#3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\" rel=\"nofollow\" data-token=\"096dee9405675b85ad261d9c2f1ca8e4\" target=\"_self\">3.sqlyog链接时出现2058异常</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\" rel=\"nofollow\" data-token=\"9c4db988b874d3a1e837ba0840a750ea\" target=\"_self\">4.修改默认编码方式</a></p>\n\n<p id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"1a9e85638177f3bd4a6535c5531819bb\" target=\"_self\">5.部分参数配置查询命令</a></p>\n\n<p id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\" rel=\"nofollow\" data-token=\"f8ea7589ce89f80e362642038fd5d95c\" target=\"_self\">五、彻底卸载mysql</a></p>\n\n<p id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\" rel=\"nofollow\" data-token=\"6d14d118678bee6ab8250f781c543b72\" target=\"_self\">1.卸载软件</a></p>\n\n<p id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\" rel=\"nofollow\" data-token=\"85f671d566679a24113ce779a10ae758\" target=\"_self\">2.删除文件</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\"><a name=\"t0\"></a>一、配置yum源</h1>\n\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\"><a name=\"t1\"></a>1.下载mysql源安装包</h2>\n\n<p style=\"margin-left:0cm;\">在MySQL官网中下载YUM源rpm安装包：<a href=\"http://dev.mysql.com/downloads/repo/yum/\" rel=\"nofollow\" data-token=\"db341c165501c5ffff8e6ed32f64bbbe\">http://dev.mysql.com/downloads/repo/yum/</a></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"238\" src=\"https://img-blog.csdn.net/20181007150611140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"196\" src=\"https://img-blog.csdn.net/20181007150615107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">复制下载链接：<a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\" rel=\"nofollow\" data-token=\"3a11cfb38f198a03eef9b7f7a069db2e\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a></p>\n\n<p style=\"margin-left:0cm;\">本次下载目录为：/home/目录，因此进入：<span style=\"color:#ff0000;\">cd /home</span></p>\n\n<p style=\"margin-left:0cm;\">执行下载命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs java\">wget https:<span class=\"hljs-comment\">//dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\"><a name=\"t2\"></a>2.安装mysql源</h2>\n\n<p style=\"margin-left:0cm;\">下载完成后使用下面命令安装源：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">localinstall</span> <span class=\"hljs-selector-tag\">mysql80-community-release-el7-1</span><span class=\"hljs-selector-class\">.noarch</span><span class=\"hljs-selector-class\">.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><a name=\"t3\"></a>3.检查是否安装成功</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"mysql.*-community.*\"</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"65\" src=\"https://img-blog.csdn.net/20181007150748219?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\"><a name=\"t4\"></a>4.修改安装版本（非必须）</h2>\n\n<p style=\"margin-left:0cm;\">如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。</p>\n\n<p style=\"margin-left:0cm;\">例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"202\" src=\"https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"507\"></p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\"><a name=\"t5\"></a>二、安装mysql</h1>\n\n<p>直接使用命令：<span style=\"color:#ff0000;\">yum install mysql-community-server</span>即可。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\"><a name=\"t6\"></a>三、启动mysql服务</h1>\n\n<h2 id=\"1.%E5%90%AF%E5%8A%A8\"><a name=\"t7\"></a>1.启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\">start</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld <span class=\"hljs-keyword\">start</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\"><a name=\"t8\"></a>2.查看启动状态</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl status mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld status</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"218\" src=\"https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\"><a name=\"t9\"></a>3.设置开机启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs bash\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-built_in\">enable</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl daemon-reload</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\"><a name=\"t10\"></a>四、配置及部分命令</h1>\n\n<h2 id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\"><a name=\"t11\"></a>1.修改登录密码</h2>\n\n<p style=\"margin-left:0cm;\">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'temporary password'</span> /var/<span class=\"hljs-keyword\">log</span>/mysqld.log</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"26\" src=\"https://img-blog.csdn.net/2018100715105966?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">本地MySQL客户端登录</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\">mysql -uroot -p</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">密码是上一步查询出来的。输入后回车。</p>\n\n<p style=\"margin-left:0cm;\">然后修改密码：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'TestBicon@123'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">或者</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span>=<span class=\"hljs-keyword\">password</span>(<span class=\"hljs-string\">'TestBicon@123'</span>);</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p><strong>注意</strong>：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"34\" src=\"https://img-blog.csdn.net/20181007151159829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'%password%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"406\" src=\"https://img-blog.csdn.net/20181007151229820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"488\"></p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">validate_password_policy：密码策略，默认为MEDIUM策略</p>\n\n<p style=\"margin-left:0cm;\">validate_password_dictionary_file：密码策略文件，策略为STRONG才需要</p>\n\n<p style=\"margin-left:0cm;\">validate_password_length：密码最少长度</p>\n\n<p style=\"margin-left:0cm;\">validate_password_mixed_case_count：大小写字符长度，至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_number_count ：数字至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_special_char_count：特殊字符至少1个</p>\n\n<p style=\"margin-left:0cm;\"><em>上述参数是默认策略</em><em>MEDIUM</em><em>的密码检查规则。</em></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">修改密码策略：</p>\n\n<p style=\"margin-left:0cm;\">在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：</p>\n\n<p style=\"margin-left:0cm;\">选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件。</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password_policy=0</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password = off</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">重新启动mysql服务使配置生效：<span style=\"color:#ff0000;\">systemctl restart mysqld</span></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\"><a name=\"t12\"></a>2.添加远程登录用户</h2>\n\n<p style=\"margin-left:0cm;\">默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户。</p>\n\n<p style=\"margin-left:0cm;\">修改root用户远程访问权限：</p>\n\n<p style=\"margin-left:0cm;\">选择 mysql 数据库：<span style=\"color:#ff0000;\">use mysql;</span></p>\n\n<p style=\"margin-left:0cm;\">在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> host, <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"160\" src=\"https://img-blog.csdn.net/20181007151435699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"269\"></p>\n\n<p style=\"margin-left:0cm;\">查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</p>\n\n<p style=\"margin-left:0cm;\">授权 root 用户的所有权限并设置远程访问</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"41\" src=\"https://img-blog.csdn.net/2018100715151769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"490\"></p>\n\n<p style=\"margin-left:0cm;\">则使用：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> host=<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span> =<span class=\"hljs-string\">'root'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">然后使用下面命令使修改生效：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><em>如有需要再执行之前授权报错的命令即可成功，最后同样使用</em><em><span style=\"color:#ff0000;\">flush privileges;</span></em><em>命令刷新。</em></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\"><a name=\"t13\"></a>3.sqlyog链接时出现2058异常</h2>\n\n<p style=\"margin-left:0cm;\">完成上面的配置使用sqlyog链接时会出现2058的异常，此时我们需要修改mysql，命令行登录mysql（与修改密码中登录相同，使用修改后的密码），然后执行下面的命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">其中password为自己修改的密码。然后SQLyog中重新连接，则可连接成功，OK。</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'则使用下面命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><a name=\"t14\"></a>4.修改默认编码方式</h2>\n\n<p style=\"margin-left:0cm;\">mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">VARIABLES</span> <span class=\"hljs-keyword\">WHERE</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'character_set_%'</span> <span class=\"hljs-keyword\">OR</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'collation%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"207\" src=\"https://img-blog.csdn.net/20181007151723711?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果需要修改其他编码方式，方法有很多，以下仅为举例。</p>\n\n<p style=\"margin-left:0cm;\">比如需要修改为utf8mb4，可以使用如下方式：</p>\n\n<p style=\"margin-left:0cm;\">修改mysql配置文件my.cnf（windows为my.ini）</p>\n\n<p style=\"margin-left:0cm;\">my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[client] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysql] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysqld] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-client-handshake = FALSE </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-server = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">collation-server = utf8mb4_unicode_ci </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">init_connect='SET NAMES utf8mb4'</span></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">重启mysql即可。</p>\n\n<p style=\"margin-left:0cm;\">collation_connection 、collation_database 、collation_server是什么没关系。但必须保证以下这几个变量必须是utf8mb4。：</p>\n\n<blockquote>\n<ul><li>character_set_client&nbsp; (客户端来源数据使用的字符集)</li>\n    <li>character_set_connection&nbsp;&nbsp;&nbsp;&nbsp; (连接层字符集)</li>\n    <li>character_set_database&nbsp;&nbsp; (当前选中数据库的默认字符集)</li>\n    <li>character_set_results (查询结果字符集)</li>\n    <li>character_set_server (默认的内部操作字符集)</li>\n</ul></blockquote>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">数据库连接参数中:</p>\n\n<p style=\"margin-left:0cm;\">characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。</p>\n\n<p style=\"margin-left:0cm;\">而autoReconnect=true是必须加上的。</p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\"><a name=\"t15\"></a>5.部分参数配置查询命令</h2>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">#查询mysql最大连接数设置</p>\n\n<p style=\"margin-left:0cm;\">show global variables like 'max_conn%';</p>\n\n<p style=\"margin-left:0cm;\">SELECT @@MAX_CONNECTIONS AS 'Max Connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看最大链接数</p>\n\n<p style=\"margin-left:0cm;\">show global status like 'Max_used_connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志是否开启以及日志位置</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'slow_query%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志超时记录时间</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'long_query_time';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看链接创建以及现在正在链接数</p>\n\n<p style=\"margin-left:0cm;\">show status like 'Threads%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库当前链接</p>\n\n<p style=\"margin-left:0cm;\">show processlist;</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库配置</p>\n\n<p style=\"margin-left:0cm;\">show variables like '%quer%';</p>\n</blockquote>\n\n<p>&nbsp;</p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\"><a name=\"t16\"></a>五、彻底卸载mysql</h1>\n\n<h2 id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\"><a name=\"t17\"></a>1.卸载软件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs vbscript\">yum remove mysql-community-<span class=\"hljs-built_in\">server</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">完成后使用<span style=\"color:#ff0000;\">rpm -qa|grep mysql</span>命令查看，如果有查询结果，则使用<span style=\"color:#ff0000;\">yum remove </span><span style=\"color:#ff0000;\">名称</span>清理掉。如图：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"119\" src=\"https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">再使用命令<span style=\"color:#ff0000;\">rpm -qa | grep -i mysql</span>查看，如果有结果使用<span style=\"color:#ff0000;\">rpm -e </span><span style=\"color:#ff0000;\">名称</span>卸载。例如：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"66\" src=\"https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><a name=\"t18\"></a>2.删除文件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /<span class=\"hljs-keyword\">var</span>/lib/mysql</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm /etc/my.cnf</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /usr/share/mysql<span class=\"hljs-number\">-8.0</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\">chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/lib/mysql</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<hr><p>END</p>\n                                    </div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<div class=\"htmledit_views\" id=\"content_views\">\n                                            <p>根据搜集的资料安装测试并在安装测试过程中整理的文档，部分参考文档在相应位置有标记。如有不足希望不吝赐教。</p>\n\n<hr><p><strong>目录</strong></p>\n\n<p id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\" rel=\"nofollow\" data-token=\"d05dd36135c8110a3915b2b41de20705\" target=\"_self\">一、配置yum源</a></p>\n\n<p id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\" rel=\"nofollow\" data-token=\"417284a06befa9cee1452bdec45f4c0a\" target=\"_self\">1.下载mysql源安装包</a></p>\n\n<p id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\" rel=\"nofollow\" data-token=\"e9d32b2830496abafa4296f459aa7f3d\" target=\"_self\">2.安装mysql源</a></p>\n\n<p id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\" rel=\"nofollow\" data-token=\"1c1ae194bac23d13cc942f2d0d77dae3\" target=\"_self\">3.检查是否安装成功</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\" rel=\"nofollow\" data-token=\"4570ea7ce1108877c41a7f05927bec9d\" target=\"_self\">4.修改安装版本（非必须）</a></p>\n\n<p id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\" rel=\"nofollow\" data-token=\"c25db65e3c6ac36e7385821f60267da4\" target=\"_self\">二、安装mysql</a></p>\n\n<p id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\" rel=\"nofollow\" data-token=\"75e4e89348d079d41a14d494629e49b3\" target=\"_self\">三、启动mysql服务</a></p>\n\n<p id=\"1.%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"2906b6ab2ecf17d76553fa1eba572110\" target=\"_self\">1.启动</a></p>\n\n<p id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\" rel=\"nofollow\" data-token=\"1b0021eceb6545bf8afc494304fa610a\" target=\"_self\">2.查看启动状态</a></p>\n\n<p id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8-toc\" style=\"margin-left:40px;\"><a href=\"#3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\" rel=\"nofollow\" data-token=\"a7d4243e46d226b4b81da270f0b9baa0\" target=\"_self\">3.设置开机启动</a></p>\n\n<p id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:0px;\"><a href=\"#%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"e24e079f3438547c7c27b31ee6cbe027\" target=\"_self\">四、配置及部分命令</a></p>\n\n<p id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\" rel=\"nofollow\" data-token=\"c0049e3ef8e6b619a30b66e715f98485\" target=\"_self\">1.修改登录密码</a></p>\n\n<p id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\" rel=\"nofollow\" data-token=\"ab63e91dfe71542d4083e1df7f7209f6\" target=\"_self\">2.添加远程登录用户</a></p>\n\n<p id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8-toc\" style=\"margin-left:40px;\"><a href=\"#3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\" rel=\"nofollow\" data-token=\"096dee9405675b85ad261d9c2f1ca8e4\" target=\"_self\">3.sqlyog链接时出现2058异常</a></p>\n\n<p id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-toc\" style=\"margin-left:40px;\"><a href=\"#4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\" rel=\"nofollow\" data-token=\"9c4db988b874d3a1e837ba0840a750ea\" target=\"_self\">4.修改默认编码方式</a></p>\n\n<p id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4-toc\" style=\"margin-left:40px;\"><a href=\"#5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\" rel=\"nofollow\" data-token=\"1a9e85638177f3bd4a6535c5531819bb\" target=\"_self\">5.部分参数配置查询命令</a></p>\n\n<p id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql-toc\" style=\"margin-left:0px;\"><a href=\"#%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\" rel=\"nofollow\" data-token=\"f8ea7589ce89f80e362642038fd5d95c\" target=\"_self\">五、彻底卸载mysql</a></p>\n\n<p id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\" rel=\"nofollow\" data-token=\"6d14d118678bee6ab8250f781c543b72\" target=\"_self\">1.卸载软件</a></p>\n\n<p id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-toc\" style=\"margin-left:40px;\"><a href=\"#2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\" rel=\"nofollow\" data-token=\"85f671d566679a24113ce779a10ae758\" target=\"_self\">2.删除文件</a></p>\n\n<hr id=\"hr-toc\"><h1 id=\"%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90\"><a name=\"t0\"></a>一、配置yum源</h1>\n\n<h2 id=\"1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85\"><a name=\"t1\"></a>1.下载mysql源安装包</h2>\n\n<p style=\"margin-left:0cm;\">在MySQL官网中下载YUM源rpm安装包：<a href=\"http://dev.mysql.com/downloads/repo/yum/\" rel=\"nofollow\" data-token=\"db341c165501c5ffff8e6ed32f64bbbe\">http://dev.mysql.com/downloads/repo/yum/</a></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"238\" src=\"https://img-blog.csdn.net/20181007150611140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"196\" src=\"https://img-blog.csdn.net/20181007150615107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">复制下载链接：<a href=\"https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm\" rel=\"nofollow\" data-token=\"3a11cfb38f198a03eef9b7f7a069db2e\">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a></p>\n\n<p style=\"margin-left:0cm;\">本次下载目录为：/home/目录，因此进入：<span style=\"color:#ff0000;\">cd /home</span></p>\n\n<p style=\"margin-left:0cm;\">执行下载命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs java\">wget https:<span class=\"hljs-comment\">//dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%AE%89%E8%A3%85mysql%E6%BA%90\"><a name=\"t2\"></a>2.安装mysql源</h2>\n\n<p style=\"margin-left:0cm;\">下载完成后使用下面命令安装源：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs css\"><span class=\"hljs-selector-tag\">yum</span> <span class=\"hljs-selector-tag\">localinstall</span> <span class=\"hljs-selector-tag\">mysql80-community-release-el7-1</span><span class=\"hljs-selector-class\">.noarch</span><span class=\"hljs-selector-class\">.rpm</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F\"><a name=\"t3\"></a>3.检查是否安装成功</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\">yum repolist enabled | <span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">\"mysql.*-community.*\"</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"65\" src=\"https://img-blog.csdn.net/20181007150748219?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89\"><a name=\"t4\"></a>4.修改安装版本（非必须）</h2>\n\n<p style=\"margin-left:0cm;\">如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。</p>\n\n<p style=\"margin-left:0cm;\">例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"202\" src=\"https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"507\"></p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql\"><a name=\"t5\"></a>二、安装mysql</h1>\n\n<p>直接使用命令：<span style=\"color:#ff0000;\">yum install mysql-community-server</span>即可。</p>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1\"><a name=\"t6\"></a>三、启动mysql服务</h1>\n\n<h2 id=\"1.%E5%90%AF%E5%8A%A8\"><a name=\"t7\"></a>1.启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-keyword\">start</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld <span class=\"hljs-keyword\">start</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81\"><a name=\"t8\"></a>2.查看启动状态</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl status mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">或者</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">service mysqld status</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"218\" src=\"https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8\"><a name=\"t9\"></a>3.设置开机启动</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs bash\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl <span class=\"hljs-built_in\">enable</span> mysqld</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">systemctl daemon-reload</div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p>&nbsp;</p>\n\n<h1 id=\"%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4\"><a name=\"t10\"></a>四、配置及部分命令</h1>\n\n<h2 id=\"1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81\"><a name=\"t11\"></a>1.修改登录密码</h2>\n\n<p style=\"margin-left:0cm;\">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs perl\"><span class=\"hljs-keyword\">grep</span> <span class=\"hljs-string\">'temporary password'</span> /var/<span class=\"hljs-keyword\">log</span>/mysqld.log</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"26\" src=\"https://img-blog.csdn.net/2018100715105966?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p style=\"margin-left:0cm;\">本地MySQL客户端登录</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs\">mysql -uroot -p</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">密码是上一步查询出来的。输入后回车。</p>\n\n<p style=\"margin-left:0cm;\">然后修改密码：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'TestBicon@123'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">或者</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">set</span> <span class=\"hljs-keyword\">password</span> <span class=\"hljs-keyword\">for</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span>=<span class=\"hljs-keyword\">password</span>(<span class=\"hljs-string\">'TestBicon@123'</span>);</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p><strong>注意</strong>：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"34\" src=\"https://img-blog.csdn.net/20181007151159829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">show</span> <span class=\"hljs-keyword\">variables</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">'%password%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"406\" src=\"https://img-blog.csdn.net/20181007151229820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"488\"></p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">validate_password_policy：密码策略，默认为MEDIUM策略</p>\n\n<p style=\"margin-left:0cm;\">validate_password_dictionary_file：密码策略文件，策略为STRONG才需要</p>\n\n<p style=\"margin-left:0cm;\">validate_password_length：密码最少长度</p>\n\n<p style=\"margin-left:0cm;\">validate_password_mixed_case_count：大小写字符长度，至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_number_count ：数字至少1个</p>\n\n<p style=\"margin-left:0cm;\">validate_password_special_char_count：特殊字符至少1个</p>\n\n<p style=\"margin-left:0cm;\"><em>上述参数是默认策略</em><em>MEDIUM</em><em>的密码检查规则。</em></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">修改密码策略：</p>\n\n<p style=\"margin-left:0cm;\">在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：</p>\n\n<p style=\"margin-left:0cm;\">选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件。</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password_policy=0</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">validate_password = off</span></p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">重新启动mysql服务使配置生效：<span style=\"color:#ff0000;\">systemctl restart mysqld</span></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7\"><a name=\"t12\"></a>2.添加远程登录用户</h2>\n\n<p style=\"margin-left:0cm;\">默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户。</p>\n\n<p style=\"margin-left:0cm;\">修改root用户远程访问权限：</p>\n\n<p style=\"margin-left:0cm;\">选择 mysql 数据库：<span style=\"color:#ff0000;\">use mysql;</span></p>\n\n<p style=\"margin-left:0cm;\">在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">select</span> host, <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">user</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"160\" src=\"https://img-blog.csdn.net/20181007151435699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"269\"></p>\n\n<p style=\"margin-left:0cm;\">查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</p>\n\n<p style=\"margin-left:0cm;\">授权 root 用户的所有权限并设置远程访问</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">GRANT</span> ALL <span class=\"hljs-keyword\">ON</span> *.* <span class=\"hljs-keyword\">TO</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"41\" src=\"https://img-blog.csdn.net/2018100715151769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"490\"></p>\n\n<p style=\"margin-left:0cm;\">则使用：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">update</span> <span class=\"hljs-keyword\">user</span> <span class=\"hljs-keyword\">set</span> host=<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">user</span> =<span class=\"hljs-string\">'root'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">然后使用下面命令使修改生效：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">flush</span> <span class=\"hljs-keyword\">privileges</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><em>如有需要再执行之前授权报错的命令即可成功，最后同样使用</em><em><span style=\"color:#ff0000;\">flush privileges;</span></em><em>命令刷新。</em></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8\"><a name=\"t13\"></a>3.sqlyog链接时出现2058异常</h2>\n\n<p style=\"margin-left:0cm;\">完成上面的配置使用sqlyog链接时会出现2058的异常，此时我们需要修改mysql，命令行登录mysql（与修改密码中登录相同，使用修改后的密码），然后执行下面的命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'localhost'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">其中password为自己修改的密码。然后SQLyog中重新连接，则可连接成功，OK。</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'则使用下面命令：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">ALTER</span> <span class=\"hljs-keyword\">USER</span> <span class=\"hljs-string\">'root'</span>@<span class=\"hljs-string\">'%'</span> <span class=\"hljs-keyword\">IDENTIFIED</span> <span class=\"hljs-keyword\">WITH</span> mysql_native_password <span class=\"hljs-keyword\">BY</span> <span class=\"hljs-string\">'password'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<h2 id=\"4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F\"><a name=\"t14\"></a>4.修改默认编码方式</h2>\n\n<p style=\"margin-left:0cm;\">mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs sql\"><span class=\"hljs-keyword\">SHOW</span> <span class=\"hljs-keyword\">VARIABLES</span> <span class=\"hljs-keyword\">WHERE</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'character_set_%'</span> <span class=\"hljs-keyword\">OR</span> Variable_name <span class=\"hljs-keyword\">LIKE</span> <span class=\"hljs-string\">'collation%'</span>;</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"207\" src=\"https://img-blog.csdn.net/20181007151723711?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">如果需要修改其他编码方式，方法有很多，以下仅为举例。</p>\n\n<p style=\"margin-left:0cm;\">比如需要修改为utf8mb4，可以使用如下方式：</p>\n\n<p style=\"margin-left:0cm;\">修改mysql配置文件my.cnf（windows为my.ini）</p>\n\n<p style=\"margin-left:0cm;\">my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p>\n\n<blockquote>\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[client] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysql] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">default-character-set = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">[mysqld] </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-client-handshake = FALSE </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">character-set-server = utf8mb4 </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">collation-server = utf8mb4_unicode_ci </span></p>\n\n<p style=\"margin-left:0cm;\"><span style=\"color:#4472c4;\">init_connect='SET NAMES utf8mb4'</span></p>\n</blockquote>\n\n<p style=\"margin-left:0cm;\">重启mysql即可。</p>\n\n<p style=\"margin-left:0cm;\">collation_connection 、collation_database 、collation_server是什么没关系。但必须保证以下这几个变量必须是utf8mb4。：</p>\n\n<blockquote>\n<ul><li>character_set_client&nbsp; (客户端来源数据使用的字符集)</li>\n    <li>character_set_connection&nbsp;&nbsp;&nbsp;&nbsp; (连接层字符集)</li>\n    <li>character_set_database&nbsp;&nbsp; (当前选中数据库的默认字符集)</li>\n    <li>character_set_results (查询结果字符集)</li>\n    <li>character_set_server (默认的内部操作字符集)</li>\n</ul></blockquote>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">数据库连接参数中:</p>\n\n<p style=\"margin-left:0cm;\">characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。</p>\n\n<p style=\"margin-left:0cm;\">而autoReconnect=true是必须加上的。</p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4\"><a name=\"t15\"></a>5.部分参数配置查询命令</h2>\n\n<blockquote>\n<p style=\"margin-left:0cm;\">#查询mysql最大连接数设置</p>\n\n<p style=\"margin-left:0cm;\">show global variables like 'max_conn%';</p>\n\n<p style=\"margin-left:0cm;\">SELECT @@MAX_CONNECTIONS AS 'Max Connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看最大链接数</p>\n\n<p style=\"margin-left:0cm;\">show global status like 'Max_used_connections';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志是否开启以及日志位置</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'slow_query%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看慢查询日志超时记录时间</p>\n\n<p style=\"margin-left:0cm;\">show variables like 'long_query_time';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看链接创建以及现在正在链接数</p>\n\n<p style=\"margin-left:0cm;\">show status like 'Threads%';</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库当前链接</p>\n\n<p style=\"margin-left:0cm;\">show processlist;</p>\n\n<p style=\"margin-left:0cm;\">&nbsp;</p>\n\n<p style=\"margin-left:0cm;\"># 查看数据库配置</p>\n\n<p style=\"margin-left:0cm;\">show variables like '%quer%';</p>\n</blockquote>\n\n<p>&nbsp;</p>\n<h1 id=\"%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql\"><a name=\"t16\"></a>五、彻底卸载mysql</h1>\n\n<h2 id=\"1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6\"><a name=\"t17\"></a>1.卸载软件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs vbscript\">yum remove mysql-community-<span class=\"hljs-built_in\">server</span></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">完成后使用<span style=\"color:#ff0000;\">rpm -qa|grep mysql</span>命令查看，如果有查询结果，则使用<span style=\"color:#ff0000;\">yum remove </span><span style=\"color:#ff0000;\">名称</span>清理掉。如图：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"119\" src=\"https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<p style=\"margin-left:0cm;\">再使用命令<span style=\"color:#ff0000;\">rpm -qa | grep -i mysql</span>查看，如果有结果使用<span style=\"color:#ff0000;\">rpm -e </span><span style=\"color:#ff0000;\">名称</span>卸载。例如：</p>\n\n<p style=\"text-align:center;\"><img alt=\"\" class=\"has\" height=\"66\" src=\"https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" width=\"554\"></p>\n\n<p>&nbsp;</p>\n\n<h2 id=\"2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6\"><a name=\"t18\"></a>2.删除文件</h2>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\"><ol class=\"hljs-ln\"><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"1\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /<span class=\"hljs-keyword\">var</span>/lib/mysql</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"2\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm /etc/my.cnf</div></div></li><li><div class=\"hljs-ln-numbers\"><div class=\"hljs-ln-line hljs-ln-n\" data-line-number=\"3\"></div></div><div class=\"hljs-ln-code\"><div class=\"hljs-ln-line\">rm -rf /usr/share/mysql<span class=\"hljs-number\">-8.0</span></div></div></li></ol></code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<p style=\"margin-left:0cm;\">如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：</p>\n\n<pre class=\"has\" name=\"code\"><code class=\"hljs go\">chmod -R <span class=\"hljs-number\">777</span> /<span class=\"hljs-keyword\">var</span>/lib/mysql</code><div class=\"hljs-button signin\" data-title=\"登录后复制\" onclick=\"hljs.signin(event)\"></div></pre>\n\n<hr><p>END</p>\n                                    </div>"},{"title":"初始化密码","auther":"ku jin","_content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p><br>一、问题描述</p>\n<p>1、在安装MySQL8.0时，修改临时密码，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p>\n<p> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n<p><br>二、遇到问题</p>\n<p>1、解决办法调整MySQL密码验证规则，修改 policy 和 length 的值。</p>\n<p>2、MySQL 5.7 进行如下设置，即可解决问题：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>3、MySQL 8.0 执行代码：&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<br> <br>mysql&gt; set global validate_password_length=1;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_length'<br>&nbsp;</p>\n<p>三、问题解决</p>\n<p>1、分析： 可以看到，修改 policy 和 length 的值，在MySQL5.7中好使，在MySQL8.0中无效。'validate_password_policy' 变量不存在。</p>\n<p>2、解决： 先修改一个满足的密码 （如：Root_12root）</p>\n<p>3、密码修改后，可用命令查看 validate_password 密码验证插件是否安装。</p>\n<p>mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1119010/201904/1119010-20190414231708837-350259959.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>4、MySQL 8.0 调整密码验证规则：</p>\n<p>mysql&gt; set global validate_password.policy=0;</p>\n<p><em id=\"__mceDel\">mysql&gt; set global validate_password.length=1;</em></p>\n<p>&nbsp;</p>\n<p>5、重新设置密码：&nbsp;ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码';</p>\n<p>&nbsp;</p>\n<p>四、问题总结</p>\n<p>1、 通过查看 MySQL5.7 和 MySQL8.0 密码验证插件对比，可知两个版本中，变量名不一样。（*_password_policy 和 *_password.policy ） --- 问题原因所在。</p>\n<p><br><br></p>\n</div>","source":"_posts/随心记/MySQL8.0/初始化密码.md","raw":"---\ntitle: 初始化密码 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - MySQL8.0\ntags: # 标签=目标文件夹\n - 初始化密码 \n---\n<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p><br>一、问题描述</p>\n<p>1、在安装MySQL8.0时，修改临时密码，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p>\n<p> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n<p><br>二、遇到问题</p>\n<p>1、解决办法调整MySQL密码验证规则，修改 policy 和 length 的值。</p>\n<p>2、MySQL 5.7 进行如下设置，即可解决问题：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>3、MySQL 8.0 执行代码：&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<br> <br>mysql&gt; set global validate_password_length=1;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_length'<br>&nbsp;</p>\n<p>三、问题解决</p>\n<p>1、分析： 可以看到，修改 policy 和 length 的值，在MySQL5.7中好使，在MySQL8.0中无效。'validate_password_policy' 变量不存在。</p>\n<p>2、解决： 先修改一个满足的密码 （如：Root_12root）</p>\n<p>3、密码修改后，可用命令查看 validate_password 密码验证插件是否安装。</p>\n<p>mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1119010/201904/1119010-20190414231708837-350259959.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>4、MySQL 8.0 调整密码验证规则：</p>\n<p>mysql&gt; set global validate_password.policy=0;</p>\n<p><em id=\"__mceDel\">mysql&gt; set global validate_password.length=1;</em></p>\n<p>&nbsp;</p>\n<p>5、重新设置密码：&nbsp;ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码';</p>\n<p>&nbsp;</p>\n<p>四、问题总结</p>\n<p>1、 通过查看 MySQL5.7 和 MySQL8.0 密码验证插件对比，可知两个版本中，变量名不一样。（*_password_policy 和 *_password.policy ） --- 问题原因所在。</p>\n<p><br><br></p>\n</div>","slug":"随心记/MySQL8.0/初始化密码","published":1,"date":"2020-08-02T23:42:43.781Z","updated":"2020-08-02T23:42:59.785Z","_id":"ckdcza4q200berkam9ji1ef3b","comments":1,"layout":"post","photos":[],"link":"","content":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p><br>一、问题描述</p>\n<p>1、在安装MySQL8.0时，修改临时密码，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p>\n<p> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n<p><br>二、遇到问题</p>\n<p>1、解决办法调整MySQL密码验证规则，修改 policy 和 length 的值。</p>\n<p>2、MySQL 5.7 进行如下设置，即可解决问题：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>3、MySQL 8.0 执行代码：&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<br> <br>mysql&gt; set global validate_password_length=1;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_length'<br>&nbsp;</p>\n<p>三、问题解决</p>\n<p>1、分析： 可以看到，修改 policy 和 length 的值，在MySQL5.7中好使，在MySQL8.0中无效。'validate_password_policy' 变量不存在。</p>\n<p>2、解决： 先修改一个满足的密码 （如：Root_12root）</p>\n<p>3、密码修改后，可用命令查看 validate_password 密码验证插件是否安装。</p>\n<p>mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1119010/201904/1119010-20190414231708837-350259959.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>4、MySQL 8.0 调整密码验证规则：</p>\n<p>mysql&gt; set global validate_password.policy=0;</p>\n<p><em id=\"__mceDel\">mysql&gt; set global validate_password.length=1;</em></p>\n<p>&nbsp;</p>\n<p>5、重新设置密码：&nbsp;ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码';</p>\n<p>&nbsp;</p>\n<p>四、问题总结</p>\n<p>1、 通过查看 MySQL5.7 和 MySQL8.0 密码验证插件对比，可知两个版本中，变量名不一样。（*_password_policy 和 *_password.policy ） --- 问题原因所在。</p>\n<p><br><br></p>\n</div><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<div id=\"cnblogs_post_body\" class=\"blogpost-body \">\n    <p><br>一、问题描述</p>\n<p>1、在安装MySQL8.0时，修改临时密码，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p>\n<p> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p>\n<p><br>二、遇到问题</p>\n<p>1、解决办法调整MySQL密码验证规则，修改 policy 和 length 的值。</p>\n<p>2、MySQL 5.7 进行如下设置，即可解决问题：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>3、MySQL 8.0 执行代码：&nbsp;&nbsp;&nbsp;&nbsp;</p>\n<p>mysql&gt;  set global validate_password_policy=0;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<br> <br>mysql&gt; set global validate_password_length=1;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_length'<br>&nbsp;</p>\n<p>三、问题解决</p>\n<p>1、分析： 可以看到，修改 policy 和 length 的值，在MySQL5.7中好使，在MySQL8.0中无效。'validate_password_policy' 变量不存在。</p>\n<p>2、解决： 先修改一个满足的密码 （如：Root_12root）</p>\n<p>3、密码修改后，可用命令查看 validate_password 密码验证插件是否安装。</p>\n<p>mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</p>\n<p><img src=\"https://img2018.cnblogs.com/blog/1119010/201904/1119010-20190414231708837-350259959.png\" alt=\"\"></p>\n<p>&nbsp;</p>\n<p>4、MySQL 8.0 调整密码验证规则：</p>\n<p>mysql&gt; set global validate_password.policy=0;</p>\n<p><em id=\"__mceDel\">mysql&gt; set global validate_password.length=1;</em></p>\n<p>&nbsp;</p>\n<p>5、重新设置密码：&nbsp;ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码';</p>\n<p>&nbsp;</p>\n<p>四、问题总结</p>\n<p>1、 通过查看 MySQL5.7 和 MySQL8.0 密码验证插件对比，可知两个版本中，变量名不一样。（*_password_policy 和 *_password.policy ） --- 问题原因所在。</p>\n<p><br><br></p>\n</div>"},{"title":"1-2-Redis启动","auther":"ku jin","_content":"[TOC]\n\n# Redis启动配置\n\n## 修改redis.conf 配置文件 \n\n```\n# linux 命令\nvi redis.conf\n/dae 找到目标字符\ni:修改\nwq:保存退出\n```\n\ndaemonize  yes ：表示以守护进程的方式启动，后台启动\n\n## 开启远程连接\n\n### 开放端口6379\n\n```\nfirewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports\n```\n\n![image-20200723141553131](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141553131.png)\n\nRedis默认不支持远程连接，需要手动开启\n\n### 修改redis.conf文件\n\n1. 注释bind 127.0.0.1\n\n2. 开启密码校验 \n\n   ```\n   requirepass kujin\n   ```\n\n   ![image-20200723140632512](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723140632512.png)\n\n3. 保存退出，重启redis \n\n   ```shell\n   redis-server redis.conf\n   ```\n\n![image-20200723141850375](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141850375.png)","source":"_posts/随心记/Redis学习/1-2-Redis启动.md","raw":"---\ntitle: 1-2-Redis启动 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 1-2-Redis启动 \n---\n[TOC]\n\n# Redis启动配置\n\n## 修改redis.conf 配置文件 \n\n```\n# linux 命令\nvi redis.conf\n/dae 找到目标字符\ni:修改\nwq:保存退出\n```\n\ndaemonize  yes ：表示以守护进程的方式启动，后台启动\n\n## 开启远程连接\n\n### 开放端口6379\n\n```\nfirewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports\n```\n\n![image-20200723141553131](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141553131.png)\n\nRedis默认不支持远程连接，需要手动开启\n\n### 修改redis.conf文件\n\n1. 注释bind 127.0.0.1\n\n2. 开启密码校验 \n\n   ```\n   requirepass kujin\n   ```\n\n   ![image-20200723140632512](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723140632512.png)\n\n3. 保存退出，重启redis \n\n   ```shell\n   redis-server redis.conf\n   ```\n\n![image-20200723141850375](images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141850375.png)","slug":"随心记/Redis学习/1-2-Redis启动","published":1,"date":"2020-08-02T23:42:43.808Z","updated":"2020-08-02T23:42:59.787Z","_id":"ckdcza4q300bhrkam6pws7rcw","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"Redis启动配置\"><a href=\"#Redis启动配置\" class=\"headerlink\" title=\"Redis启动配置\"></a>Redis启动配置</h1><h2 id=\"修改redis-conf-配置文件\"><a href=\"#修改redis-conf-配置文件\" class=\"headerlink\" title=\"修改redis.conf 配置文件\"></a>修改redis.conf 配置文件</h2><pre><code># linux 命令\nvi redis.conf\n/dae 找到目标字符\ni:修改\nwq:保存退出</code></pre>\n<p>daemonize  yes ：表示以守护进程的方式启动，后台启动</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"开放端口6379\"><a href=\"#开放端口6379\" class=\"headerlink\" title=\"开放端口6379\"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports</code></pre>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141553131.png\" alt=\"image-20200723141553131\"></p>\n<p>Redis默认不支持远程连接，需要手动开启</p>\n<h3 id=\"修改redis-conf文件\"><a href=\"#修改redis-conf文件\" class=\"headerlink\" title=\"修改redis.conf文件\"></a>修改redis.conf文件</h3><ol>\n<li><p>注释bind 127.0.0.1</p>\n</li>\n<li><p>开启密码校验 </p>\n<pre><code>requirepass kujin</code></pre>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723140632512.png\" alt=\"image-20200723140632512\"></p>\n</li>\n<li><p>保存退出，重启redis </p>\n<pre class=\" language-shell\"><code class=\"language-shell\">redis-server redis.conf</code></pre>\n</li>\n</ol>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141850375.png\" alt=\"image-20200723141850375\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"Redis启动配置\"><a href=\"#Redis启动配置\" class=\"headerlink\" title=\"Redis启动配置\"></a>Redis启动配置</h1><h2 id=\"修改redis-conf-配置文件\"><a href=\"#修改redis-conf-配置文件\" class=\"headerlink\" title=\"修改redis.conf 配置文件\"></a>修改redis.conf 配置文件</h2><pre><code># linux 命令\nvi redis.conf\n/dae 找到目标字符\ni:修改\nwq:保存退出</code></pre>\n<p>daemonize  yes ：表示以守护进程的方式启动，后台启动</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"开放端口6379\"><a href=\"#开放端口6379\" class=\"headerlink\" title=\"开放端口6379\"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports</code></pre>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141553131.png\" alt=\"image-20200723141553131\"></p>\n<p>Redis默认不支持远程连接，需要手动开启</p>\n<h3 id=\"修改redis-conf文件\"><a href=\"#修改redis-conf文件\" class=\"headerlink\" title=\"修改redis.conf文件\"></a>修改redis.conf文件</h3><ol>\n<li><p>注释bind 127.0.0.1</p>\n</li>\n<li><p>开启密码校验 </p>\n<pre><code>requirepass kujin</code></pre>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723140632512.png\" alt=\"image-20200723140632512\"></p>\n</li>\n<li><p>保存退出，重启redis </p>\n<pre><code class=\"shell\">redis-server redis.conf</code></pre>\n</li>\n</ol>\n<p><img src=\"images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141850375.png\" alt=\"image-20200723141850375\"></p>\n"},{"title":"2-1-数据结构","auther":"ku jin","_content":"[TOC]\n\n# 六种基本类型\n\n| 数据类型         | 数据类型存储的值                                             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| String 字符串    | 保存字符串.整数, 浮点数                                      | 可以对字符串进行操作,增加字符串或求子串,如果时整数或者浮点数,可以计算,比如自增 |\n| List 列表        | 它是一个链表,每一个节点都包含字符串                          | Redis支持从链表的两端插入                                    |\n| set 集合         | 它是一个收集器, 但是是无序的,它里面每一个元素都是字符串,而且是独一无二的,各不相同 | 可以新增,读取,删除删除单个元素,检测一个元素是否在集合中,计算和其他集合的交集,并集,和差集等;随机从集合中读取元素 |\n| Hash 哈希散列表  | 它类似于java语言中map 是一个键值对应的无序列表               | 可以增删改查单个键值对,也可以获取所有的键值对                |\n| Zset 有序集合    | 可以包含字符串,整数,浮点数,分值(score),元素的排列是依据分值的大小决定的 | 可以增删改查元素,根据分值的范围或成员来获取键值对            |\n| HyperLogLog 基数 | 计算重复的值,以确定存储的数量                                | 只提供基数的运算,不提供返回的功能                            |\n\n","source":"_posts/随心记/Redis学习/2-1-数据结构.md","raw":"---\ntitle: 2-1-数据结构 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 2-1-数据结构 \n---\n[TOC]\n\n# 六种基本类型\n\n| 数据类型         | 数据类型存储的值                                             | 说明                                                         |\n| ---------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n| String 字符串    | 保存字符串.整数, 浮点数                                      | 可以对字符串进行操作,增加字符串或求子串,如果时整数或者浮点数,可以计算,比如自增 |\n| List 列表        | 它是一个链表,每一个节点都包含字符串                          | Redis支持从链表的两端插入                                    |\n| set 集合         | 它是一个收集器, 但是是无序的,它里面每一个元素都是字符串,而且是独一无二的,各不相同 | 可以新增,读取,删除删除单个元素,检测一个元素是否在集合中,计算和其他集合的交集,并集,和差集等;随机从集合中读取元素 |\n| Hash 哈希散列表  | 它类似于java语言中map 是一个键值对应的无序列表               | 可以增删改查单个键值对,也可以获取所有的键值对                |\n| Zset 有序集合    | 可以包含字符串,整数,浮点数,分值(score),元素的排列是依据分值的大小决定的 | 可以增删改查元素,根据分值的范围或成员来获取键值对            |\n| HyperLogLog 基数 | 计算重复的值,以确定存储的数量                                | 只提供基数的运算,不提供返回的功能                            |\n\n","slug":"随心记/Redis学习/2-1-数据结构","published":1,"date":"2020-08-02T23:42:43.817Z","updated":"2020-08-02T23:42:59.788Z","_id":"ckdcza4q400birkam5z692gao","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h1 id=\"六种基本类型\"><a href=\"#六种基本类型\" class=\"headerlink\" title=\"六种基本类型\"></a>六种基本类型</h1><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>数据类型存储的值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String 字符串</td>\n<td>保存字符串.整数, 浮点数</td>\n<td>可以对字符串进行操作,增加字符串或求子串,如果时整数或者浮点数,可以计算,比如自增</td>\n</tr>\n<tr>\n<td>List 列表</td>\n<td>它是一个链表,每一个节点都包含字符串</td>\n<td>Redis支持从链表的两端插入</td>\n</tr>\n<tr>\n<td>set 集合</td>\n<td>它是一个收集器, 但是是无序的,它里面每一个元素都是字符串,而且是独一无二的,各不相同</td>\n<td>可以新增,读取,删除删除单个元素,检测一个元素是否在集合中,计算和其他集合的交集,并集,和差集等;随机从集合中读取元素</td>\n</tr>\n<tr>\n<td>Hash 哈希散列表</td>\n<td>它类似于java语言中map 是一个键值对应的无序列表</td>\n<td>可以增删改查单个键值对,也可以获取所有的键值对</td>\n</tr>\n<tr>\n<td>Zset 有序集合</td>\n<td>可以包含字符串,整数,浮点数,分值(score),元素的排列是依据分值的大小决定的</td>\n<td>可以增删改查元素,根据分值的范围或成员来获取键值对</td>\n</tr>\n<tr>\n<td>HyperLogLog 基数</td>\n<td>计算重复的值,以确定存储的数量</td>\n<td>只提供基数的运算,不提供返回的功能</td>\n</tr>\n</tbody></table>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h1 id=\"六种基本类型\"><a href=\"#六种基本类型\" class=\"headerlink\" title=\"六种基本类型\"></a>六种基本类型</h1><table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>数据类型存储的值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String 字符串</td>\n<td>保存字符串.整数, 浮点数</td>\n<td>可以对字符串进行操作,增加字符串或求子串,如果时整数或者浮点数,可以计算,比如自增</td>\n</tr>\n<tr>\n<td>List 列表</td>\n<td>它是一个链表,每一个节点都包含字符串</td>\n<td>Redis支持从链表的两端插入</td>\n</tr>\n<tr>\n<td>set 集合</td>\n<td>它是一个收集器, 但是是无序的,它里面每一个元素都是字符串,而且是独一无二的,各不相同</td>\n<td>可以新增,读取,删除删除单个元素,检测一个元素是否在集合中,计算和其他集合的交集,并集,和差集等;随机从集合中读取元素</td>\n</tr>\n<tr>\n<td>Hash 哈希散列表</td>\n<td>它类似于java语言中map 是一个键值对应的无序列表</td>\n<td>可以增删改查单个键值对,也可以获取所有的键值对</td>\n</tr>\n<tr>\n<td>Zset 有序集合</td>\n<td>可以包含字符串,整数,浮点数,分值(score),元素的排列是依据分值的大小决定的</td>\n<td>可以增删改查元素,根据分值的范围或成员来获取键值对</td>\n</tr>\n<tr>\n<td>HyperLogLog 基数</td>\n<td>计算重复的值,以确定存储的数量</td>\n<td>只提供基数的运算,不提供返回的功能</td>\n</tr>\n</tbody></table>\n"},{"title":"2-2 数据结构的常用命令","auther":"ku jin","_content":"[Toc]\n\n# 前言\n\nRedis清空命令—flushdb\n\n# 1.字符串数据结构命令\n\n\n\n# 2.链表数据结构命令\n\n# 3.哈希数据结构命令\n\n# 4.集合数据结构命令\n\n# 5.有序集合串数据结构命令\n\n# 6.基数的含义和命令","source":"_posts/随心记/Redis学习/2-2 数据结构的常用命令.md","raw":"---\ntitle: 2-2 数据结构的常用命令 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 2-2 数据结构的常用命令 \n---\n[Toc]\n\n# 前言\n\nRedis清空命令—flushdb\n\n# 1.字符串数据结构命令\n\n\n\n# 2.链表数据结构命令\n\n# 3.哈希数据结构命令\n\n# 4.集合数据结构命令\n\n# 5.有序集合串数据结构命令\n\n# 6.基数的含义和命令","slug":"随心记/Redis学习/2-2 数据结构的常用命令","published":1,"date":"2020-08-02T23:42:43.831Z","updated":"2020-08-02T23:42:59.788Z","_id":"ckdcza4q500bjrkamcqve8pyq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[Toc]</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Redis清空命令—flushdb</p>\n<h1 id=\"1-字符串数据结构命令\"><a href=\"#1-字符串数据结构命令\" class=\"headerlink\" title=\"1.字符串数据结构命令\"></a>1.字符串数据结构命令</h1><h1 id=\"2-链表数据结构命令\"><a href=\"#2-链表数据结构命令\" class=\"headerlink\" title=\"2.链表数据结构命令\"></a>2.链表数据结构命令</h1><h1 id=\"3-哈希数据结构命令\"><a href=\"#3-哈希数据结构命令\" class=\"headerlink\" title=\"3.哈希数据结构命令\"></a>3.哈希数据结构命令</h1><h1 id=\"4-集合数据结构命令\"><a href=\"#4-集合数据结构命令\" class=\"headerlink\" title=\"4.集合数据结构命令\"></a>4.集合数据结构命令</h1><h1 id=\"5-有序集合串数据结构命令\"><a href=\"#5-有序集合串数据结构命令\" class=\"headerlink\" title=\"5.有序集合串数据结构命令\"></a>5.有序集合串数据结构命令</h1><h1 id=\"6-基数的含义和命令\"><a href=\"#6-基数的含义和命令\" class=\"headerlink\" title=\"6.基数的含义和命令\"></a>6.基数的含义和命令</h1><script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[Toc]</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Redis清空命令—flushdb</p>\n<h1 id=\"1-字符串数据结构命令\"><a href=\"#1-字符串数据结构命令\" class=\"headerlink\" title=\"1.字符串数据结构命令\"></a>1.字符串数据结构命令</h1><h1 id=\"2-链表数据结构命令\"><a href=\"#2-链表数据结构命令\" class=\"headerlink\" title=\"2.链表数据结构命令\"></a>2.链表数据结构命令</h1><h1 id=\"3-哈希数据结构命令\"><a href=\"#3-哈希数据结构命令\" class=\"headerlink\" title=\"3.哈希数据结构命令\"></a>3.哈希数据结构命令</h1><h1 id=\"4-集合数据结构命令\"><a href=\"#4-集合数据结构命令\" class=\"headerlink\" title=\"4.集合数据结构命令\"></a>4.集合数据结构命令</h1><h1 id=\"5-有序集合串数据结构命令\"><a href=\"#5-有序集合串数据结构命令\" class=\"headerlink\" title=\"5.有序集合串数据结构命令\"></a>5.有序集合串数据结构命令</h1><h1 id=\"6-基数的含义和命令\"><a href=\"#6-基数的含义和命令\" class=\"headerlink\" title=\"6.基数的含义和命令\"></a>6.基数的含义和命令</h1>"},{"title":"3-1分布式锁","auther":"ku jin","_content":"# 分布式锁场景\n\n## **1. 问题场景**\n\n> 例如一个简单的用户操作，\n>\n> 一个线程去修改用户状态，首先从数据库读出用户状态，然后再内存中修改，修改完成后再存储\n>\n> 在多线程中，由于读取，修改，存储，是三个操作，不是原子操作，可能会线程操作冲突\n\n可以使用分布式锁限制程序的并发操作\n\n**原理**\n\n> 分布式锁，通过进入线程占位，当别的线程操作时，发现已经有人占位了，就会放弃或稍后再试\n\n在Redis中，占位一般用setnx 指令，先进来的线程先占位，线程的操作执行完成后，再del指令释放位子\n\n```java\nRedis redis = new Redis();\n        redis.execute(jedis -> {\n            Long setnx = jedis.setnx(\"k1\", \"v1\");\n            if (setnx==1){\n                //没人占位\n                jedis.set(\"name\", \"kujin\");\n                System.out.println(jedis.get(\"name\"));\n                jedis.del(\"k1\");//删除k1，释放位置\n            }else {\n                //有人占位,停止\n            }\n        });\n```\n\n**上述代码存在问题，如果jedis在set get中出现异常导致del 指令没有运行，这样key1无法释放，后面的请求全部阻塞，形成死锁**\n\n> 解决方法，给锁一个过期时间，确保一定时间之后，能够得到释放\n\n```java\nRedis redis = new Redis();\n        redis.execute(jedis -> {\n            Long setnx = jedis.setnx(\"k1\", \"v1\");\n            if (setnx==1){\n                jedis.expire(\"k1\",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n                //没人占位\n                jedis.set(\"name\", \"kujin\");\n                System.out.println(jedis.get(\"name\"));\n                jedis.del(\"k1\");//删除k1，释放位置\n            }else {\n                //有人占位,停止\n            }\n        });\n```\n\n**这样改造之后还存在一个问题，就是在获取锁和设置过期时间服务器挂掉了，这个时候形成死锁**\n\n> 为了解决这个问题，Redis2.8开始，setnx和expire可以通过一个命令一起执行\n\n```java\nRedis redis = new Redis();\nredis.execute(jedis -> {\n    /*\n     Long setnx = jedis.setnx(\"k1\", \"v1\");\n    jedis.expire(\"k1\",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n     */\n    //两个指令合成一个\n    String set = jedis.set(\"k1\", \"v1\", new SetParams().ex(5));\n    if (\"OK\".equalsIgnoreCase(set)){\n        //没人占位\n        jedis.set(\"name\", \"kujin\");\n        System.out.println(jedis.get(\"name\"));\n        jedis.del(\"k1\");//删除k1，释放位置\n    }else {\n        //有人占位,停止\n    }\n});\n```\n\n## 2.解决超时时间\n\n> 为了防止业务代码，在执行的过程中抛出异常，我们给每一个锁添加一个超时时间，超时过后自动释放，\n>\n> 新的问题，如果执行业务非常耗时，可能会导致紊乱\n\n**举个栗子**\n\n> 第一个线程获取到锁，开始执行业务，业务执行8秒，这样会在第一个线程的任务还未执行成功，锁5秒以过期， 导致第二个线程会获取到锁执行，在第二了线程执行了3秒，第一个线程执行完成释放资源，第三个线程进来\n\n> 对于这个问题解决方式\n>\n> 1. 避免执行耗时操作\n> 2. 将锁的value设置为一个随机字符串，每次释放时检查字符串是否一致，一致释放，否则 不释放\n\n**第二种方式不具有原子性，为了解决这个问题，引入Lua脚本**\n\n[Lua脚本](3-2 Lua脚本.md)","source":"_posts/随心记/Redis学习/3-1分布式锁.md","raw":"---\ntitle: 3-1分布式锁 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 3-1分布式锁 \n---\n# 分布式锁场景\n\n## **1. 问题场景**\n\n> 例如一个简单的用户操作，\n>\n> 一个线程去修改用户状态，首先从数据库读出用户状态，然后再内存中修改，修改完成后再存储\n>\n> 在多线程中，由于读取，修改，存储，是三个操作，不是原子操作，可能会线程操作冲突\n\n可以使用分布式锁限制程序的并发操作\n\n**原理**\n\n> 分布式锁，通过进入线程占位，当别的线程操作时，发现已经有人占位了，就会放弃或稍后再试\n\n在Redis中，占位一般用setnx 指令，先进来的线程先占位，线程的操作执行完成后，再del指令释放位子\n\n```java\nRedis redis = new Redis();\n        redis.execute(jedis -> {\n            Long setnx = jedis.setnx(\"k1\", \"v1\");\n            if (setnx==1){\n                //没人占位\n                jedis.set(\"name\", \"kujin\");\n                System.out.println(jedis.get(\"name\"));\n                jedis.del(\"k1\");//删除k1，释放位置\n            }else {\n                //有人占位,停止\n            }\n        });\n```\n\n**上述代码存在问题，如果jedis在set get中出现异常导致del 指令没有运行，这样key1无法释放，后面的请求全部阻塞，形成死锁**\n\n> 解决方法，给锁一个过期时间，确保一定时间之后，能够得到释放\n\n```java\nRedis redis = new Redis();\n        redis.execute(jedis -> {\n            Long setnx = jedis.setnx(\"k1\", \"v1\");\n            if (setnx==1){\n                jedis.expire(\"k1\",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n                //没人占位\n                jedis.set(\"name\", \"kujin\");\n                System.out.println(jedis.get(\"name\"));\n                jedis.del(\"k1\");//删除k1，释放位置\n            }else {\n                //有人占位,停止\n            }\n        });\n```\n\n**这样改造之后还存在一个问题，就是在获取锁和设置过期时间服务器挂掉了，这个时候形成死锁**\n\n> 为了解决这个问题，Redis2.8开始，setnx和expire可以通过一个命令一起执行\n\n```java\nRedis redis = new Redis();\nredis.execute(jedis -> {\n    /*\n     Long setnx = jedis.setnx(\"k1\", \"v1\");\n    jedis.expire(\"k1\",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n     */\n    //两个指令合成一个\n    String set = jedis.set(\"k1\", \"v1\", new SetParams().ex(5));\n    if (\"OK\".equalsIgnoreCase(set)){\n        //没人占位\n        jedis.set(\"name\", \"kujin\");\n        System.out.println(jedis.get(\"name\"));\n        jedis.del(\"k1\");//删除k1，释放位置\n    }else {\n        //有人占位,停止\n    }\n});\n```\n\n## 2.解决超时时间\n\n> 为了防止业务代码，在执行的过程中抛出异常，我们给每一个锁添加一个超时时间，超时过后自动释放，\n>\n> 新的问题，如果执行业务非常耗时，可能会导致紊乱\n\n**举个栗子**\n\n> 第一个线程获取到锁，开始执行业务，业务执行8秒，这样会在第一个线程的任务还未执行成功，锁5秒以过期， 导致第二个线程会获取到锁执行，在第二了线程执行了3秒，第一个线程执行完成释放资源，第三个线程进来\n\n> 对于这个问题解决方式\n>\n> 1. 避免执行耗时操作\n> 2. 将锁的value设置为一个随机字符串，每次释放时检查字符串是否一致，一致释放，否则 不释放\n\n**第二种方式不具有原子性，为了解决这个问题，引入Lua脚本**\n\n[Lua脚本](3-2 Lua脚本.md)","slug":"随心记/Redis学习/3-1分布式锁","published":1,"date":"2020-08-02T23:42:43.833Z","updated":"2020-08-02T23:42:59.789Z","_id":"ckdcza4q700bnrkamekw3d9z8","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"分布式锁场景\"><a href=\"#分布式锁场景\" class=\"headerlink\" title=\"分布式锁场景\"></a>分布式锁场景</h1><h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1. 问题场景\"></a><strong>1. 问题场景</strong></h2><blockquote>\n<p>例如一个简单的用户操作，</p>\n<p>一个线程去修改用户状态，首先从数据库读出用户状态，然后再内存中修改，修改完成后再存储</p>\n<p>在多线程中，由于读取，修改，存储，是三个操作，不是原子操作，可能会线程操作冲突</p>\n</blockquote>\n<p>可以使用分布式锁限制程序的并发操作</p>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>分布式锁，通过进入线程占位，当别的线程操作时，发现已经有人占位了，就会放弃或稍后再试</p>\n</blockquote>\n<p>在Redis中，占位一般用setnx 指令，先进来的线程先占位，线程的操作执行完成后，再del指令释放位子</p>\n<pre class=\" language-java\"><code class=\"language-java\">Redis redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            Long setnx <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setnx</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setnx<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//没人占位</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kujin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//删除k1，释放位置</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//有人占位,停止</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>上述代码存在问题，如果jedis在set get中出现异常导致del 指令没有运行，这样key1无法释放，后面的请求全部阻塞，形成死锁</strong></p>\n<blockquote>\n<p>解决方法，给锁一个过期时间，确保一定时间之后，能够得到释放</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">Redis redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            Long setnx <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">setnx</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>setnx<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">expire</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题</span>\n                <span class=\"token comment\" spellcheck=\"true\">//没人占位</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kujin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//删除k1，释放位置</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//有人占位,停止</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>这样改造之后还存在一个问题，就是在获取锁和设置过期时间服务器挂掉了，这个时候形成死锁</strong></p>\n<blockquote>\n<p>为了解决这个问题，Redis2.8开始，setnx和expire可以通过一个命令一起执行</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">Redis redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nredis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/*\n     Long setnx = jedis.setnx(\"k1\", \"v1\");\n    jedis.expire(\"k1\",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n     */</span>\n    <span class=\"token comment\" spellcheck=\"true\">//两个指令合成一个</span>\n    String set <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>set<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//没人占位</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kujin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//删除k1，释放位置</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//有人占位,停止</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"2-解决超时时间\"><a href=\"#2-解决超时时间\" class=\"headerlink\" title=\"2.解决超时时间\"></a>2.解决超时时间</h2><blockquote>\n<p>为了防止业务代码，在执行的过程中抛出异常，我们给每一个锁添加一个超时时间，超时过后自动释放，</p>\n<p>新的问题，如果执行业务非常耗时，可能会导致紊乱</p>\n</blockquote>\n<p><strong>举个栗子</strong></p>\n<blockquote>\n<p>第一个线程获取到锁，开始执行业务，业务执行8秒，这样会在第一个线程的任务还未执行成功，锁5秒以过期， 导致第二个线程会获取到锁执行，在第二了线程执行了3秒，第一个线程执行完成释放资源，第三个线程进来</p>\n</blockquote>\n<blockquote>\n<p>对于这个问题解决方式</p>\n<ol>\n<li>避免执行耗时操作</li>\n<li>将锁的value设置为一个随机字符串，每次释放时检查字符串是否一致，一致释放，否则 不释放</li>\n</ol>\n</blockquote>\n<p><strong>第二种方式不具有原子性，为了解决这个问题，引入Lua脚本</strong></p>\n<p>[Lua脚本](3-2 Lua脚本.md)</p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"分布式锁场景\"><a href=\"#分布式锁场景\" class=\"headerlink\" title=\"分布式锁场景\"></a>分布式锁场景</h1><h2 id=\"1-问题场景\"><a href=\"#1-问题场景\" class=\"headerlink\" title=\"1. 问题场景\"></a><strong>1. 问题场景</strong></h2><blockquote>\n<p>例如一个简单的用户操作，</p>\n<p>一个线程去修改用户状态，首先从数据库读出用户状态，然后再内存中修改，修改完成后再存储</p>\n<p>在多线程中，由于读取，修改，存储，是三个操作，不是原子操作，可能会线程操作冲突</p>\n</blockquote>\n<p>可以使用分布式锁限制程序的并发操作</p>\n<p><strong>原理</strong></p>\n<blockquote>\n<p>分布式锁，通过进入线程占位，当别的线程操作时，发现已经有人占位了，就会放弃或稍后再试</p>\n</blockquote>\n<p>在Redis中，占位一般用setnx 指令，先进来的线程先占位，线程的操作执行完成后，再del指令释放位子</p>\n<pre><code class=\"java\">Redis redis = new Redis();\n        redis.execute(jedis -&gt; &amp;#123;\n            Long setnx = jedis.setnx(&quot;k1&quot;, &quot;v1&quot;);\n            if (setnx==1)&amp;#123;\n                //没人占位\n                jedis.set(&quot;name&quot;, &quot;kujin&quot;);\n                System.out.println(jedis.get(&quot;name&quot;));\n                jedis.del(&quot;k1&quot;);//删除k1，释放位置\n            &amp;#125;else &amp;#123;\n                //有人占位,停止\n            &amp;#125;\n        &amp;#125;);</code></pre>\n<p><strong>上述代码存在问题，如果jedis在set get中出现异常导致del 指令没有运行，这样key1无法释放，后面的请求全部阻塞，形成死锁</strong></p>\n<blockquote>\n<p>解决方法，给锁一个过期时间，确保一定时间之后，能够得到释放</p>\n</blockquote>\n<pre><code class=\"java\">Redis redis = new Redis();\n        redis.execute(jedis -&gt; &amp;#123;\n            Long setnx = jedis.setnx(&quot;k1&quot;, &quot;v1&quot;);\n            if (setnx==1)&amp;#123;\n                jedis.expire(&quot;k1&quot;,5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n                //没人占位\n                jedis.set(&quot;name&quot;, &quot;kujin&quot;);\n                System.out.println(jedis.get(&quot;name&quot;));\n                jedis.del(&quot;k1&quot;);//删除k1，释放位置\n            &amp;#125;else &amp;#123;\n                //有人占位,停止\n            &amp;#125;\n        &amp;#125;);</code></pre>\n<p><strong>这样改造之后还存在一个问题，就是在获取锁和设置过期时间服务器挂掉了，这个时候形成死锁</strong></p>\n<blockquote>\n<p>为了解决这个问题，Redis2.8开始，setnx和expire可以通过一个命令一起执行</p>\n</blockquote>\n<pre><code class=\"java\">Redis redis = new Redis();\nredis.execute(jedis -&gt; &amp;#123;\n    /*\n     Long setnx = jedis.setnx(&quot;k1&quot;, &quot;v1&quot;);\n    jedis.expire(&quot;k1&quot;,5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题\n     */\n    //两个指令合成一个\n    String set = jedis.set(&quot;k1&quot;, &quot;v1&quot;, new SetParams().ex(5));\n    if (&quot;OK&quot;.equalsIgnoreCase(set))&amp;#123;\n        //没人占位\n        jedis.set(&quot;name&quot;, &quot;kujin&quot;);\n        System.out.println(jedis.get(&quot;name&quot;));\n        jedis.del(&quot;k1&quot;);//删除k1，释放位置\n    &amp;#125;else &amp;#123;\n        //有人占位,停止\n    &amp;#125;\n&amp;#125;);</code></pre>\n<h2 id=\"2-解决超时时间\"><a href=\"#2-解决超时时间\" class=\"headerlink\" title=\"2.解决超时时间\"></a>2.解决超时时间</h2><blockquote>\n<p>为了防止业务代码，在执行的过程中抛出异常，我们给每一个锁添加一个超时时间，超时过后自动释放，</p>\n<p>新的问题，如果执行业务非常耗时，可能会导致紊乱</p>\n</blockquote>\n<p><strong>举个栗子</strong></p>\n<blockquote>\n<p>第一个线程获取到锁，开始执行业务，业务执行8秒，这样会在第一个线程的任务还未执行成功，锁5秒以过期， 导致第二个线程会获取到锁执行，在第二了线程执行了3秒，第一个线程执行完成释放资源，第三个线程进来</p>\n</blockquote>\n<blockquote>\n<p>对于这个问题解决方式</p>\n<ol>\n<li>避免执行耗时操作</li>\n<li>将锁的value设置为一个随机字符串，每次释放时检查字符串是否一致，一致释放，否则 不释放</li>\n</ol>\n</blockquote>\n<p><strong>第二种方式不具有原子性，为了解决这个问题，引入Lua脚本</strong></p>\n<p>[Lua脚本](3-2 Lua脚本.md)</p>\n"},{"title":"3-2 Lua脚本","auther":"ku jin","_content":"# Lua脚本\n\n> 在Redis的2.6以上版本中，可以使用Lua语言操作Redis\n>\n> Redis语言具有原子性，操作过程不会中断，有助于Redis对并发操作数据的一致性\n\n## 1.Redis支持两种方法运行脚本\n\n1. 直接输入Lua语言程序代码\n2. 将Lua语言编写成文件\n\n> Redis支持缓存脚本，它会使用SHA-1算法对脚本进行签名，然后通过把SHA-1标识返回回来，通过标识运行\n\n**命令格式**\n\n```shell\neval Lua-script key-num [key1 key2 ...][value1 value2 ...]\n```\n\n- eval 代表Lua语言命令\n- Lua-script 代表Lua语言脚本\n- key-num 代表有多少的key ，Redis中的key是从1开始的，如果key没有参数 那么写0\n- [key1 key2 …]作为参数传递给Lua语言 需要和key-num对应起来\n- [value1 value2 …]参数传递给Lua语言\n\n## 2.举个栗子\n\n这个脚本只是返回一个字符串，不需要任何参数\n\n```shell\neval \"return 'hello Lua'\" 0\n```\n\n![image-20200725105545715](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725105545715.png)\n\n设置一个键值对，可以在Lua语言中采用redis.call(command,key[parm1,parm2 …])\n\n- command是命令 set get del 等\n- Key是被操作的键\n- parm1，parm2 代表key的参数\n\n```shell\neval \"redis.call('set',KEYS[1],ARGV[1])\" 1 lua-key lua-value\n```\n\n![image-20200725110256564](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725110256564.png)\n\n> 脚本中的KEY[1]代表读取传递给Lua脚本的第一个key参数，\n>\n> 而ARGV[1]代表第一个非key参数。\n\n## 3.使用加密算法\n\n**有时候需要多次执行同样一段代码脚本，这时候可以使用Redis缓存脚本的功能，在Redis中脚本会通过SHA-1签名算法加密脚本，然后返回一个标识字符串**\n\n**通过这个字符串执行加密脚本，好处是如果脚本很长，客户端传输需要很长时间，使用标识符，则需要传递32位字符即可，从而提高传输效率，提高性能**\n\n```shell\nscript load script\n```\n\n```\nevalsha shastring keynum [key1 key2 ..] [parm1 parm2 ...]\n```\n\n### 1.举个栗子\n\n```shell\nscript load \"redis.call('set',KEYS[1],ARGV[1])\"\nevalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 sha-key val\nget sha-key\n```\n\n![image-20200725113303421](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725113303421.png)\n\n## 4.java代码使用Lua脚本\n\n```java\n\t\t//执行简单的脚本\n        String helloJava = (String) jedis.eval(\"return 'hello java'\");\n        System.out.println(helloJava);\n        \n        //执行带参数的脚本\n        jedis.eval(\"redis.call('set',KEYS[1],ARGV[1])\",1,\"lua-key\",\"lua-value\");\n        String luaKey = jedis.get(\"lua-key\");\n        System.out.println(luaKey);\n        \n        //缓存脚本，返回sha1签名标识\n        String sha1 = jedis.scriptLoad(\"redis.call('set',KEYS[1],ARGV[1])\");\n        //通过标识执行脚本\n        jedis.evalsha(sha1,1,new String[]{\"sha-key\",\"sha-val\"});\n        //获取执行脚本后的数据\n        String shaVal = jedis.get(\"sha-key\");\n        System.out.println(shaVal);\n```\n\n## 5.使用RedisScript接口对象通过Lua脚本操作对象\n\n```java\n/**\n     * 使用RedisScript接口对象通过Lua脚本操作对象\n     */\n    @Test\n    public void redisScript_Lua(){\n        //1.定义默认脚本封装类\n        DefaultRedisScript<Role> redisScript = new DefaultRedisScript<>();\n        //2. 设置脚本\n        redisScript.setScriptText(\"redis.call('set',KEYS[1],ARGV[1]) return redis.call('get',KEYS[1])\");\n        //3. 定义操作key的列表\n        ArrayList<String> keyList = new ArrayList<>();\n        keyList.add(\"role1\");\n        //4. 需要序列化保存和读取的对象\n        Role role = new Role();\n        role.setId(1L);\n        role.setRoleName(\"role_name_1\");\n        role.setNote(\"note_1\");\n        //5. 获取标识字符串\n        String sha1 = redisScript.getSha1();\n        System.out.println(sha1);\n        //6. 设置返回结果类型，如果没有这句话，返回结果为空\n        redisScript.setResultType(Role.class);\n        //7. 定义序列化器\n        JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();\n        //8. 执行脚本\n        RedisTemplate jedisTemlate = Utils.getJedisTemlate();\n        //第一个是redisScript接口对象，第二个是参数序列化器\n        //第三个是结果序列化器，第四个是Redis的key列表，最后是参数列表\n        Role obj = (Role) jedisTemlate.execute(redisScript, serializer, serializer, keyList, role);\n        System.out.println(obj.toString());\n    }\n```\n\n## 6.执行Lua文件\n\n### 6.1 在服务端编写Lua文件代码\n\n![image-20200727174113640](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727174113640.png)\n\ntest.lua\n\n```lua\nif redis.call(\"get\",KEYS[1])==ARGV[1] then\n    return redis.call(\"del\",KEY[1])\nelse\n    return 0\nend\n```\n\n执行如下命令\n\n```shell\ncat lua/test.lua | redis-cli -a kujin script load --pipe\n```\n\n> script load 这个命令会在redis服务器缓存lua脚本，并返回脚本内容的SHA1校验和\n>\n> java端调用时，传入CHA1校验和作为参数，redis服务端会知道调用哪个lua脚本\n\n```java\n/**\n     * 执行Lua文件\n     */\n    @Test\n    public void excuLuaFile(){\n        Redis redis = new Redis();\n        for (int i = 0; i < 2; i++) {\n            redis.execute(jedis -> {\n                //1.获取一个随机字符串\n                String value = UUID.randomUUID().toString();\n                //2. 获取锁\n                String k1 = jedis.set(\"k1\", value, new SetParams().nx().ex(5));\n                //3. 判断是否成功拿到锁\n                if (k1!=null&&\"ok\".equalsIgnoreCase(k1)){\n                    //4具体的业务操作\n                    jedis.set(\"site\",\"www.baidu.com\");\n                    System.out.println(jedis.get(\"site\"));\n                    //5 释放锁\n                    jedis.evalsha(\"b8059ba43af6ffe8bed3db65bac35d452f8115d8\", Collections.singletonList(\"k1\"), Collections.singletonList(value));\n                }else {\n                    System.out.println(\"没拿到锁\");\n                }\n            });\n        }\n\n    }\n```\n\n![image-20200727181837205](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727181837205.png)","source":"_posts/随心记/Redis学习/3-2 Lua脚本.md","raw":"---\ntitle: 3-2 Lua脚本 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 3-2 Lua脚本 \n---\n# Lua脚本\n\n> 在Redis的2.6以上版本中，可以使用Lua语言操作Redis\n>\n> Redis语言具有原子性，操作过程不会中断，有助于Redis对并发操作数据的一致性\n\n## 1.Redis支持两种方法运行脚本\n\n1. 直接输入Lua语言程序代码\n2. 将Lua语言编写成文件\n\n> Redis支持缓存脚本，它会使用SHA-1算法对脚本进行签名，然后通过把SHA-1标识返回回来，通过标识运行\n\n**命令格式**\n\n```shell\neval Lua-script key-num [key1 key2 ...][value1 value2 ...]\n```\n\n- eval 代表Lua语言命令\n- Lua-script 代表Lua语言脚本\n- key-num 代表有多少的key ，Redis中的key是从1开始的，如果key没有参数 那么写0\n- [key1 key2 …]作为参数传递给Lua语言 需要和key-num对应起来\n- [value1 value2 …]参数传递给Lua语言\n\n## 2.举个栗子\n\n这个脚本只是返回一个字符串，不需要任何参数\n\n```shell\neval \"return 'hello Lua'\" 0\n```\n\n![image-20200725105545715](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725105545715.png)\n\n设置一个键值对，可以在Lua语言中采用redis.call(command,key[parm1,parm2 …])\n\n- command是命令 set get del 等\n- Key是被操作的键\n- parm1，parm2 代表key的参数\n\n```shell\neval \"redis.call('set',KEYS[1],ARGV[1])\" 1 lua-key lua-value\n```\n\n![image-20200725110256564](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725110256564.png)\n\n> 脚本中的KEY[1]代表读取传递给Lua脚本的第一个key参数，\n>\n> 而ARGV[1]代表第一个非key参数。\n\n## 3.使用加密算法\n\n**有时候需要多次执行同样一段代码脚本，这时候可以使用Redis缓存脚本的功能，在Redis中脚本会通过SHA-1签名算法加密脚本，然后返回一个标识字符串**\n\n**通过这个字符串执行加密脚本，好处是如果脚本很长，客户端传输需要很长时间，使用标识符，则需要传递32位字符即可，从而提高传输效率，提高性能**\n\n```shell\nscript load script\n```\n\n```\nevalsha shastring keynum [key1 key2 ..] [parm1 parm2 ...]\n```\n\n### 1.举个栗子\n\n```shell\nscript load \"redis.call('set',KEYS[1],ARGV[1])\"\nevalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 sha-key val\nget sha-key\n```\n\n![image-20200725113303421](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725113303421.png)\n\n## 4.java代码使用Lua脚本\n\n```java\n\t\t//执行简单的脚本\n        String helloJava = (String) jedis.eval(\"return 'hello java'\");\n        System.out.println(helloJava);\n        \n        //执行带参数的脚本\n        jedis.eval(\"redis.call('set',KEYS[1],ARGV[1])\",1,\"lua-key\",\"lua-value\");\n        String luaKey = jedis.get(\"lua-key\");\n        System.out.println(luaKey);\n        \n        //缓存脚本，返回sha1签名标识\n        String sha1 = jedis.scriptLoad(\"redis.call('set',KEYS[1],ARGV[1])\");\n        //通过标识执行脚本\n        jedis.evalsha(sha1,1,new String[]{\"sha-key\",\"sha-val\"});\n        //获取执行脚本后的数据\n        String shaVal = jedis.get(\"sha-key\");\n        System.out.println(shaVal);\n```\n\n## 5.使用RedisScript接口对象通过Lua脚本操作对象\n\n```java\n/**\n     * 使用RedisScript接口对象通过Lua脚本操作对象\n     */\n    @Test\n    public void redisScript_Lua(){\n        //1.定义默认脚本封装类\n        DefaultRedisScript<Role> redisScript = new DefaultRedisScript<>();\n        //2. 设置脚本\n        redisScript.setScriptText(\"redis.call('set',KEYS[1],ARGV[1]) return redis.call('get',KEYS[1])\");\n        //3. 定义操作key的列表\n        ArrayList<String> keyList = new ArrayList<>();\n        keyList.add(\"role1\");\n        //4. 需要序列化保存和读取的对象\n        Role role = new Role();\n        role.setId(1L);\n        role.setRoleName(\"role_name_1\");\n        role.setNote(\"note_1\");\n        //5. 获取标识字符串\n        String sha1 = redisScript.getSha1();\n        System.out.println(sha1);\n        //6. 设置返回结果类型，如果没有这句话，返回结果为空\n        redisScript.setResultType(Role.class);\n        //7. 定义序列化器\n        JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();\n        //8. 执行脚本\n        RedisTemplate jedisTemlate = Utils.getJedisTemlate();\n        //第一个是redisScript接口对象，第二个是参数序列化器\n        //第三个是结果序列化器，第四个是Redis的key列表，最后是参数列表\n        Role obj = (Role) jedisTemlate.execute(redisScript, serializer, serializer, keyList, role);\n        System.out.println(obj.toString());\n    }\n```\n\n## 6.执行Lua文件\n\n### 6.1 在服务端编写Lua文件代码\n\n![image-20200727174113640](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727174113640.png)\n\ntest.lua\n\n```lua\nif redis.call(\"get\",KEYS[1])==ARGV[1] then\n    return redis.call(\"del\",KEY[1])\nelse\n    return 0\nend\n```\n\n执行如下命令\n\n```shell\ncat lua/test.lua | redis-cli -a kujin script load --pipe\n```\n\n> script load 这个命令会在redis服务器缓存lua脚本，并返回脚本内容的SHA1校验和\n>\n> java端调用时，传入CHA1校验和作为参数，redis服务端会知道调用哪个lua脚本\n\n```java\n/**\n     * 执行Lua文件\n     */\n    @Test\n    public void excuLuaFile(){\n        Redis redis = new Redis();\n        for (int i = 0; i < 2; i++) {\n            redis.execute(jedis -> {\n                //1.获取一个随机字符串\n                String value = UUID.randomUUID().toString();\n                //2. 获取锁\n                String k1 = jedis.set(\"k1\", value, new SetParams().nx().ex(5));\n                //3. 判断是否成功拿到锁\n                if (k1!=null&&\"ok\".equalsIgnoreCase(k1)){\n                    //4具体的业务操作\n                    jedis.set(\"site\",\"www.baidu.com\");\n                    System.out.println(jedis.get(\"site\"));\n                    //5 释放锁\n                    jedis.evalsha(\"b8059ba43af6ffe8bed3db65bac35d452f8115d8\", Collections.singletonList(\"k1\"), Collections.singletonList(value));\n                }else {\n                    System.out.println(\"没拿到锁\");\n                }\n            });\n        }\n\n    }\n```\n\n![image-20200727181837205](images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727181837205.png)","slug":"随心记/Redis学习/3-2 Lua脚本","published":1,"date":"2020-08-02T23:42:43.855Z","updated":"2020-08-02T23:42:59.790Z","_id":"ckdcza4q700borkamdcmccr0u","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h1><blockquote>\n<p>在Redis的2.6以上版本中，可以使用Lua语言操作Redis</p>\n<p>Redis语言具有原子性，操作过程不会中断，有助于Redis对并发操作数据的一致性</p>\n</blockquote>\n<h2 id=\"1-Redis支持两种方法运行脚本\"><a href=\"#1-Redis支持两种方法运行脚本\" class=\"headerlink\" title=\"1.Redis支持两种方法运行脚本\"></a>1.Redis支持两种方法运行脚本</h2><ol>\n<li>直接输入Lua语言程序代码</li>\n<li>将Lua语言编写成文件</li>\n</ol>\n<blockquote>\n<p>Redis支持缓存脚本，它会使用SHA-1算法对脚本进行签名，然后通过把SHA-1标识返回回来，通过标识运行</p>\n</blockquote>\n<p><strong>命令格式</strong></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">eval Lua-script key-num [key1 key2 ...][value1 value2 ...]</code></pre>\n<ul>\n<li>eval 代表Lua语言命令</li>\n<li>Lua-script 代表Lua语言脚本</li>\n<li>key-num 代表有多少的key ，Redis中的key是从1开始的，如果key没有参数 那么写0</li>\n<li>[key1 key2 …]作为参数传递给Lua语言 需要和key-num对应起来</li>\n<li>[value1 value2 …]参数传递给Lua语言</li>\n</ul>\n<h2 id=\"2-举个栗子\"><a href=\"#2-举个栗子\" class=\"headerlink\" title=\"2.举个栗子\"></a>2.举个栗子</h2><p>这个脚本只是返回一个字符串，不需要任何参数</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">eval \"return 'hello Lua'\" 0</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725105545715.png\" alt=\"image-20200725105545715\"></p>\n<p>设置一个键值对，可以在Lua语言中采用redis.call(command,key[parm1,parm2 …])</p>\n<ul>\n<li>command是命令 set get del 等</li>\n<li>Key是被操作的键</li>\n<li>parm1，parm2 代表key的参数</li>\n</ul>\n<pre class=\" language-shell\"><code class=\"language-shell\">eval \"redis.call('set',KEYS[1],ARGV[1])\" 1 lua-key lua-value</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725110256564.png\" alt=\"image-20200725110256564\"></p>\n<blockquote>\n<p>脚本中的KEY[1]代表读取传递给Lua脚本的第一个key参数，</p>\n<p>而ARGV[1]代表第一个非key参数。</p>\n</blockquote>\n<h2 id=\"3-使用加密算法\"><a href=\"#3-使用加密算法\" class=\"headerlink\" title=\"3.使用加密算法\"></a>3.使用加密算法</h2><p><strong>有时候需要多次执行同样一段代码脚本，这时候可以使用Redis缓存脚本的功能，在Redis中脚本会通过SHA-1签名算法加密脚本，然后返回一个标识字符串</strong></p>\n<p><strong>通过这个字符串执行加密脚本，好处是如果脚本很长，客户端传输需要很长时间，使用标识符，则需要传递32位字符即可，从而提高传输效率，提高性能</strong></p>\n<pre class=\" language-shell\"><code class=\"language-shell\">script load script</code></pre>\n<pre><code>evalsha shastring keynum [key1 key2 ..] [parm1 parm2 ...]</code></pre>\n<h3 id=\"1-举个栗子\"><a href=\"#1-举个栗子\" class=\"headerlink\" title=\"1.举个栗子\"></a>1.举个栗子</h3><pre class=\" language-shell\"><code class=\"language-shell\">script load \"redis.call('set',KEYS[1],ARGV[1])\"\nevalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 sha-key val\nget sha-key</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725113303421.png\" alt=\"image-20200725113303421\"></p>\n<h2 id=\"4-java代码使用Lua脚本\"><a href=\"#4-java代码使用Lua脚本\" class=\"headerlink\" title=\"4.java代码使用Lua脚本\"></a>4.java代码使用Lua脚本</h2><pre class=\" language-java\"><code class=\"language-java\">        <span class=\"token comment\" spellcheck=\"true\">//执行简单的脚本</span>\n        String helloJava <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"return 'hello java'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>helloJava<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//执行带参数的脚本</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis.call('set',KEYS[1],ARGV[1])\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua-key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"lua-value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String luaKey <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lua-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>luaKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//缓存脚本，返回sha1签名标识</span>\n        String sha1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">scriptLoad</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis.call('set',KEYS[1],ARGV[1])\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//通过标识执行脚本</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">evalsha</span><span class=\"token punctuation\">(</span>sha1<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token string\">\"sha-key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"sha-val\"</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取执行脚本后的数据</span>\n        String shaVal <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sha-key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>shaVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"5-使用RedisScript接口对象通过Lua脚本操作对象\"><a href=\"#5-使用RedisScript接口对象通过Lua脚本操作对象\" class=\"headerlink\" title=\"5.使用RedisScript接口对象通过Lua脚本操作对象\"></a>5.使用RedisScript接口对象通过Lua脚本操作对象</h2><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 使用RedisScript接口对象通过Lua脚本操作对象\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">redisScript_Lua</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//1.定义默认脚本封装类</span>\n        DefaultRedisScript<span class=\"token operator\">&lt;</span>Role<span class=\"token operator\">></span> redisScript <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultRedisScript</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//2. 设置脚本</span>\n        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setScriptText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis.call('set',KEYS[1],ARGV[1]) return redis.call('get',KEYS[1])\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//3. 定义操作key的列表</span>\n        ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> keyList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        keyList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//4. 需要序列化保存和读取的对象</span>\n        Role role <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setRoleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_name_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"note_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//5. 获取标识字符串</span>\n        String sha1 <span class=\"token operator\">=</span> redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">getSha1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sha1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//6. 设置返回结果类型，如果没有这句话，返回结果为空</span>\n        redisScript<span class=\"token punctuation\">.</span><span class=\"token function\">setResultType</span><span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//7. 定义序列化器</span>\n        JdkSerializationRedisSerializer serializer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdkSerializationRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//8. 执行脚本</span>\n        RedisTemplate jedisTemlate <span class=\"token operator\">=</span> Utils<span class=\"token punctuation\">.</span><span class=\"token function\">getJedisTemlate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//第一个是redisScript接口对象，第二个是参数序列化器</span>\n        <span class=\"token comment\" spellcheck=\"true\">//第三个是结果序列化器，第四个是Redis的key列表，最后是参数列表</span>\n        Role obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">)</span> jedisTemlate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>redisScript<span class=\"token punctuation\">,</span> serializer<span class=\"token punctuation\">,</span> serializer<span class=\"token punctuation\">,</span> keyList<span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"6-执行Lua文件\"><a href=\"#6-执行Lua文件\" class=\"headerlink\" title=\"6.执行Lua文件\"></a>6.执行Lua文件</h2><h3 id=\"6-1-在服务端编写Lua文件代码\"><a href=\"#6-1-在服务端编写Lua文件代码\" class=\"headerlink\" title=\"6.1 在服务端编写Lua文件代码\"></a>6.1 在服务端编写Lua文件代码</h3><p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727174113640.png\" alt=\"image-20200727174113640\"></p>\n<p>test.lua</p>\n<pre class=\" language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">if</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>KEYS<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>ARGV<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">then</span>\n    <span class=\"token keyword\">return</span> redis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"del\"</span><span class=\"token punctuation\">,</span>KEY<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">end</span></code></pre>\n<p>执行如下命令</p>\n<pre class=\" language-shell\"><code class=\"language-shell\">cat lua/test.lua | redis-cli -a kujin script load --pipe</code></pre>\n<blockquote>\n<p>script load 这个命令会在redis服务器缓存lua脚本，并返回脚本内容的SHA1校验和</p>\n<p>java端调用时，传入CHA1校验和作为参数，redis服务端会知道调用哪个lua脚本</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n     * 执行Lua文件\n     */</span>\n    <span class=\"token annotation punctuation\">@Test</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">excuLuaFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Redis redis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            redis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>jedis <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//1.获取一个随机字符串</span>\n                String value <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//2. 获取锁</span>\n                String k1 <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SetParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">nx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ex</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//3. 判断是否成功拿到锁</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k1<span class=\"token operator\">!=</span>null<span class=\"token operator\">&amp;&amp;</span><span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span>k1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//4具体的业务操作</span>\n                    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"site\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"site\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">//5 释放锁</span>\n                    jedis<span class=\"token punctuation\">.</span><span class=\"token function\">evalsha</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b8059ba43af6ffe8bed3db65bac35d452f8115d8\"</span><span class=\"token punctuation\">,</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"k1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">singletonList</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没拿到锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727181837205.png\" alt=\"image-20200727181837205\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Lua脚本\"><a href=\"#Lua脚本\" class=\"headerlink\" title=\"Lua脚本\"></a>Lua脚本</h1><blockquote>\n<p>在Redis的2.6以上版本中，可以使用Lua语言操作Redis</p>\n<p>Redis语言具有原子性，操作过程不会中断，有助于Redis对并发操作数据的一致性</p>\n</blockquote>\n<h2 id=\"1-Redis支持两种方法运行脚本\"><a href=\"#1-Redis支持两种方法运行脚本\" class=\"headerlink\" title=\"1.Redis支持两种方法运行脚本\"></a>1.Redis支持两种方法运行脚本</h2><ol>\n<li>直接输入Lua语言程序代码</li>\n<li>将Lua语言编写成文件</li>\n</ol>\n<blockquote>\n<p>Redis支持缓存脚本，它会使用SHA-1算法对脚本进行签名，然后通过把SHA-1标识返回回来，通过标识运行</p>\n</blockquote>\n<p><strong>命令格式</strong></p>\n<pre><code class=\"shell\">eval Lua-script key-num [key1 key2 ...][value1 value2 ...]</code></pre>\n<ul>\n<li>eval 代表Lua语言命令</li>\n<li>Lua-script 代表Lua语言脚本</li>\n<li>key-num 代表有多少的key ，Redis中的key是从1开始的，如果key没有参数 那么写0</li>\n<li>[key1 key2 …]作为参数传递给Lua语言 需要和key-num对应起来</li>\n<li>[value1 value2 …]参数传递给Lua语言</li>\n</ul>\n<h2 id=\"2-举个栗子\"><a href=\"#2-举个栗子\" class=\"headerlink\" title=\"2.举个栗子\"></a>2.举个栗子</h2><p>这个脚本只是返回一个字符串，不需要任何参数</p>\n<pre><code class=\"shell\">eval &quot;return &#39;hello Lua&#39;&quot; 0</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725105545715.png\" alt=\"image-20200725105545715\"></p>\n<p>设置一个键值对，可以在Lua语言中采用redis.call(command,key[parm1,parm2 …])</p>\n<ul>\n<li>command是命令 set get del 等</li>\n<li>Key是被操作的键</li>\n<li>parm1，parm2 代表key的参数</li>\n</ul>\n<pre><code class=\"shell\">eval &quot;redis.call(&#39;set&#39;,KEYS[1],ARGV[1])&quot; 1 lua-key lua-value</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725110256564.png\" alt=\"image-20200725110256564\"></p>\n<blockquote>\n<p>脚本中的KEY[1]代表读取传递给Lua脚本的第一个key参数，</p>\n<p>而ARGV[1]代表第一个非key参数。</p>\n</blockquote>\n<h2 id=\"3-使用加密算法\"><a href=\"#3-使用加密算法\" class=\"headerlink\" title=\"3.使用加密算法\"></a>3.使用加密算法</h2><p><strong>有时候需要多次执行同样一段代码脚本，这时候可以使用Redis缓存脚本的功能，在Redis中脚本会通过SHA-1签名算法加密脚本，然后返回一个标识字符串</strong></p>\n<p><strong>通过这个字符串执行加密脚本，好处是如果脚本很长，客户端传输需要很长时间，使用标识符，则需要传递32位字符即可，从而提高传输效率，提高性能</strong></p>\n<pre><code class=\"shell\">script load script</code></pre>\n<pre><code>evalsha shastring keynum [key1 key2 ..] [parm1 parm2 ...]</code></pre>\n<h3 id=\"1-举个栗子\"><a href=\"#1-举个栗子\" class=\"headerlink\" title=\"1.举个栗子\"></a>1.举个栗子</h3><pre><code class=\"shell\">script load &quot;redis.call(&#39;set&#39;,KEYS[1],ARGV[1])&quot;\nevalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 sha-key val\nget sha-key</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725113303421.png\" alt=\"image-20200725113303421\"></p>\n<h2 id=\"4-java代码使用Lua脚本\"><a href=\"#4-java代码使用Lua脚本\" class=\"headerlink\" title=\"4.java代码使用Lua脚本\"></a>4.java代码使用Lua脚本</h2><pre><code class=\"java\">        //执行简单的脚本\n        String helloJava = (String) jedis.eval(&quot;return &#39;hello java&#39;&quot;);\n        System.out.println(helloJava);\n\n        //执行带参数的脚本\n        jedis.eval(&quot;redis.call(&#39;set&#39;,KEYS[1],ARGV[1])&quot;,1,&quot;lua-key&quot;,&quot;lua-value&quot;);\n        String luaKey = jedis.get(&quot;lua-key&quot;);\n        System.out.println(luaKey);\n\n        //缓存脚本，返回sha1签名标识\n        String sha1 = jedis.scriptLoad(&quot;redis.call(&#39;set&#39;,KEYS[1],ARGV[1])&quot;);\n        //通过标识执行脚本\n        jedis.evalsha(sha1,1,new String[]&amp;#123;&quot;sha-key&quot;,&quot;sha-val&quot;&amp;#125;);\n        //获取执行脚本后的数据\n        String shaVal = jedis.get(&quot;sha-key&quot;);\n        System.out.println(shaVal);</code></pre>\n<h2 id=\"5-使用RedisScript接口对象通过Lua脚本操作对象\"><a href=\"#5-使用RedisScript接口对象通过Lua脚本操作对象\" class=\"headerlink\" title=\"5.使用RedisScript接口对象通过Lua脚本操作对象\"></a>5.使用RedisScript接口对象通过Lua脚本操作对象</h2><pre><code class=\"java\">/**\n     * 使用RedisScript接口对象通过Lua脚本操作对象\n     */\n    @Test\n    public void redisScript_Lua()&amp;#123;\n        //1.定义默认脚本封装类\n        DefaultRedisScript&lt;Role&gt; redisScript = new DefaultRedisScript&lt;&gt;();\n        //2. 设置脚本\n        redisScript.setScriptText(&quot;redis.call(&#39;set&#39;,KEYS[1],ARGV[1]) return redis.call(&#39;get&#39;,KEYS[1])&quot;);\n        //3. 定义操作key的列表\n        ArrayList&lt;String&gt; keyList = new ArrayList&lt;&gt;();\n        keyList.add(&quot;role1&quot;);\n        //4. 需要序列化保存和读取的对象\n        Role role = new Role();\n        role.setId(1L);\n        role.setRoleName(&quot;role_name_1&quot;);\n        role.setNote(&quot;note_1&quot;);\n        //5. 获取标识字符串\n        String sha1 = redisScript.getSha1();\n        System.out.println(sha1);\n        //6. 设置返回结果类型，如果没有这句话，返回结果为空\n        redisScript.setResultType(Role.class);\n        //7. 定义序列化器\n        JdkSerializationRedisSerializer serializer = new JdkSerializationRedisSerializer();\n        //8. 执行脚本\n        RedisTemplate jedisTemlate = Utils.getJedisTemlate();\n        //第一个是redisScript接口对象，第二个是参数序列化器\n        //第三个是结果序列化器，第四个是Redis的key列表，最后是参数列表\n        Role obj = (Role) jedisTemlate.execute(redisScript, serializer, serializer, keyList, role);\n        System.out.println(obj.toString());\n    &amp;#125;</code></pre>\n<h2 id=\"6-执行Lua文件\"><a href=\"#6-执行Lua文件\" class=\"headerlink\" title=\"6.执行Lua文件\"></a>6.执行Lua文件</h2><h3 id=\"6-1-在服务端编写Lua文件代码\"><a href=\"#6-1-在服务端编写Lua文件代码\" class=\"headerlink\" title=\"6.1 在服务端编写Lua文件代码\"></a>6.1 在服务端编写Lua文件代码</h3><p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727174113640.png\" alt=\"image-20200727174113640\"></p>\n<p>test.lua</p>\n<pre><code class=\"lua\">if redis.call(&quot;get&quot;,KEYS[1])==ARGV[1] then\n    return redis.call(&quot;del&quot;,KEY[1])\nelse\n    return 0\nend</code></pre>\n<p>执行如下命令</p>\n<pre><code class=\"shell\">cat lua/test.lua | redis-cli -a kujin script load --pipe</code></pre>\n<blockquote>\n<p>script load 这个命令会在redis服务器缓存lua脚本，并返回脚本内容的SHA1校验和</p>\n<p>java端调用时，传入CHA1校验和作为参数，redis服务端会知道调用哪个lua脚本</p>\n</blockquote>\n<pre><code class=\"java\">/**\n     * 执行Lua文件\n     */\n    @Test\n    public void excuLuaFile()&amp;#123;\n        Redis redis = new Redis();\n        for (int i = 0; i &lt; 2; i++) &amp;#123;\n            redis.execute(jedis -&gt; &amp;#123;\n                //1.获取一个随机字符串\n                String value = UUID.randomUUID().toString();\n                //2. 获取锁\n                String k1 = jedis.set(&quot;k1&quot;, value, new SetParams().nx().ex(5));\n                //3. 判断是否成功拿到锁\n                if (k1!=null&amp;&amp;&quot;ok&quot;.equalsIgnoreCase(k1))&amp;#123;\n                    //4具体的业务操作\n                    jedis.set(&quot;site&quot;,&quot;www.baidu.com&quot;);\n                    System.out.println(jedis.get(&quot;site&quot;));\n                    //5 释放锁\n                    jedis.evalsha(&quot;b8059ba43af6ffe8bed3db65bac35d452f8115d8&quot;, Collections.singletonList(&quot;k1&quot;), Collections.singletonList(value));\n                &amp;#125;else &amp;#123;\n                    System.out.println(&quot;没拿到锁&quot;);\n                &amp;#125;\n            &amp;#125;);\n        &amp;#125;\n\n    &amp;#125;</code></pre>\n<p><img src=\"images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727181837205.png\" alt=\"image-20200727181837205\"></p>\n"},{"title":"3-3 消息队列","auther":"ku jin","_content":"[Toc]\n\n## 简介\n\n平时说的消息队列，一般是指RbbitMQ, RocketMQ,ActiveMQ 以及大数据里边的Kafka，这些都是一些比较专业的消息中间件\n\nRedis中也有自己的消息队列\n\n## 1.消息队列\n\nRedis中做消息队列，使用他里边的List数据结构可以实现，我们可以 \n\n- lpush/rpush 操作来实现入队\n- lpop/rpop 实现出列\n\n详细操作\n\n![image-20200727184633610](images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200727184633610.png)\n\n### java端\n\n在客户端（java端）我们会维护一个死循环不停地从队列中读取数据，并处理，如果队列中有消息，则直接获取，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成大量资源浪费，使用blpop/brpopo\n\n## 2.延迟消息队列\n\n> 延迟队列可以通过zset来实现，因为zset中有一个score，我们可以把时间作为score，将value存到redis中，然后通过循环的方式不断地通过轮询的方式，去不断的读取出来\n\n- **如果消息是一个字符串，直接发送即可，如果是一个对象，则需要进行对象序列化，这里我们使用JSON来实现序列化与反序列化**\n\n1. 首先在项目中吗，添加Json依赖\n\n```xml\n<dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.10.3</version>\n        </dependency>\n```\n\n```java\n/**\n * 类：消息实体\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class Message {\n    private String id;\n    private Object data;\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"id='\" + id + '\\'' +\n                \", data=\" + data +\n                '}';\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n}\n```\n\n```java\npackage com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue {\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) {\n        this.jedis = jedis;\n        this.queue = queue;\n    }\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data){\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try {\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(\"msg publish: \"+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+50000,json);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 消息发送\n     */\n    public void loop(){\n        while (!Thread.interrupted()){\n            //读取score 到当前时间戳的消息\n            Set<String> zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty()){\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    break;\n                }\n                continue;\n            }\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)>0){\n                //消息取到,处理业务\n                try {\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(\"receive msg: \"+message);\n                } catch (JsonProcessingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n```java\npackage com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue {\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) {\n        this.jedis = jedis;\n        this.queue = queue;\n    }\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data){\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try {\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(\"msg publish: \"+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+5000,json);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 消息发送\n     */\n    public void loop(){\n        while (!Thread.interrupted()){\n            //读取score 到当前时间戳的消息\n            Set<String> zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty()){\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    break;\n                }\n                continue;\n            }\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)>0){\n                //消息取到,处理业务\n                try {\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(\"receive msg: \"+new Date()+\">>>>>\"+message);\n                } catch (JsonProcessingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n![image-20200728194536819](images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200728194536819.png)\n\n[github](https://github.com/kujin521/SpringRedisTest/tree/master/src/main/java/com/kujin/springredistest/redis/redis_queue)","source":"_posts/随心记/Redis学习/3-3 消息队列.md","raw":"---\ntitle: 3-3 消息队列 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 3-3 消息队列 \n---\n[Toc]\n\n## 简介\n\n平时说的消息队列，一般是指RbbitMQ, RocketMQ,ActiveMQ 以及大数据里边的Kafka，这些都是一些比较专业的消息中间件\n\nRedis中也有自己的消息队列\n\n## 1.消息队列\n\nRedis中做消息队列，使用他里边的List数据结构可以实现，我们可以 \n\n- lpush/rpush 操作来实现入队\n- lpop/rpop 实现出列\n\n详细操作\n\n![image-20200727184633610](images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200727184633610.png)\n\n### java端\n\n在客户端（java端）我们会维护一个死循环不停地从队列中读取数据，并处理，如果队列中有消息，则直接获取，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成大量资源浪费，使用blpop/brpopo\n\n## 2.延迟消息队列\n\n> 延迟队列可以通过zset来实现，因为zset中有一个score，我们可以把时间作为score，将value存到redis中，然后通过循环的方式不断地通过轮询的方式，去不断的读取出来\n\n- **如果消息是一个字符串，直接发送即可，如果是一个对象，则需要进行对象序列化，这里我们使用JSON来实现序列化与反序列化**\n\n1. 首先在项目中吗，添加Json依赖\n\n```xml\n<dependency>\n            <groupId>com.fasterxml.jackson.core</groupId>\n            <artifactId>jackson-databind</artifactId>\n            <version>2.10.3</version>\n        </dependency>\n```\n\n```java\n/**\n * 类：消息实体\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class Message {\n    private String id;\n    private Object data;\n\n    @Override\n    public String toString() {\n        return \"Message{\" +\n                \"id='\" + id + '\\'' +\n                \", data=\" + data +\n                '}';\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public Object getData() {\n        return data;\n    }\n\n    public void setData(Object data) {\n        this.data = data;\n    }\n}\n```\n\n```java\npackage com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue {\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) {\n        this.jedis = jedis;\n        this.queue = queue;\n    }\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data){\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try {\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(\"msg publish: \"+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+50000,json);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 消息发送\n     */\n    public void loop(){\n        while (!Thread.interrupted()){\n            //读取score 到当前时间戳的消息\n            Set<String> zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty()){\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    break;\n                }\n                continue;\n            }\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)>0){\n                //消息取到,处理业务\n                try {\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(\"receive msg: \"+message);\n                } catch (JsonProcessingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n```java\npackage com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue {\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) {\n        this.jedis = jedis;\n        this.queue = queue;\n    }\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data){\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try {\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(\"msg publish: \"+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+5000,json);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 消息发送\n     */\n    public void loop(){\n        while (!Thread.interrupted()){\n            //读取score 到当前时间戳的消息\n            Set<String> zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty()){\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    break;\n                }\n                continue;\n            }\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)>0){\n                //消息取到,处理业务\n                try {\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(\"receive msg: \"+new Date()+\">>>>>\"+message);\n                } catch (JsonProcessingException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n}\n\n```\n\n![image-20200728194536819](images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200728194536819.png)\n\n[github](https://github.com/kujin521/SpringRedisTest/tree/master/src/main/java/com/kujin/springredistest/redis/redis_queue)","slug":"随心记/Redis学习/3-3 消息队列","published":1,"date":"2020-08-02T23:42:43.870Z","updated":"2020-08-02T23:42:59.791Z","_id":"ckdcza4q900bsrkambso90ev4","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[Toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>平时说的消息队列，一般是指RbbitMQ, RocketMQ,ActiveMQ 以及大数据里边的Kafka，这些都是一些比较专业的消息中间件</p>\n<p>Redis中也有自己的消息队列</p>\n<h2 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h2><p>Redis中做消息队列，使用他里边的List数据结构可以实现，我们可以 </p>\n<ul>\n<li>lpush/rpush 操作来实现入队</li>\n<li>lpop/rpop 实现出列</li>\n</ul>\n<p>详细操作</p>\n<p><img src=\"images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200727184633610.png\" alt=\"image-20200727184633610\"></p>\n<h3 id=\"java端\"><a href=\"#java端\" class=\"headerlink\" title=\"java端\"></a>java端</h3><p>在客户端（java端）我们会维护一个死循环不停地从队列中读取数据，并处理，如果队列中有消息，则直接获取，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成大量资源浪费，使用blpop/brpopo</p>\n<h2 id=\"2-延迟消息队列\"><a href=\"#2-延迟消息队列\" class=\"headerlink\" title=\"2.延迟消息队列\"></a>2.延迟消息队列</h2><blockquote>\n<p>延迟队列可以通过zset来实现，因为zset中有一个score，我们可以把时间作为score，将value存到redis中，然后通过循环的方式不断地通过轮询的方式，去不断的读取出来</p>\n</blockquote>\n<ul>\n<li><strong>如果消息是一个字符串，直接发送即可，如果是一个对象，则需要进行对象序列化，这里我们使用JSON来实现序列化与反序列化</strong></li>\n</ul>\n<ol>\n<li>首先在项目中吗，添加Json依赖</li>\n</ol>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.fasterxml.jackson.core<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>jackson-databind<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.10.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">/**\n * 类：消息实体\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Message</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Object data<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"Message&amp;#123;\"</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\"id='\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n                <span class=\"token string\">\", data=\"</span> <span class=\"token operator\">+</span> data <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&amp;#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>String id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> Object <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>Object data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>kujin<span class=\"token punctuation\">.</span>springredistest<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>redis_queue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>JsonProcessingException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>ObjectMapper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span>Jedis<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayMsgQueue</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Jedis jedis<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String queue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DelayMsgQueue</span><span class=\"token punctuation\">(</span>Jedis jedis<span class=\"token punctuation\">,</span> String queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jedis <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 消息入列\n     * @param data 要发送的消息\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span>Object data<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//构造一个消息</span>\n        Message message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//序列化</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            String json <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//消息发送,延迟5秒</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg publish: \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">50000</span><span class=\"token punctuation\">,</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 消息发送\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//读取score 到当前时间戳的消息</span>\n            Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrangeByScore</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果消息为空,则休息500毫秒</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zrange<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果读取到消息,则将消息读取出来</span>\n            String next <span class=\"token operator\">=</span> zrange<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrem</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//消息取到,处理业务</span>\n                <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    Message message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive msg: \"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>kujin<span class=\"token punctuation\">.</span>springredistest<span class=\"token punctuation\">.</span>redis<span class=\"token punctuation\">.</span>redis_queue<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span>JsonProcessingException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>ObjectMapper<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span>Jedis<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> javax<span class=\"token punctuation\">.</span>xml<span class=\"token punctuation\">.</span>crypto<span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Date<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Set<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>UUID<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DelayMsgQueue</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> Jedis jedis<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String queue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DelayMsgQueue</span><span class=\"token punctuation\">(</span>Jedis jedis<span class=\"token punctuation\">,</span> String queue<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>jedis <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>queue <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 消息入列\n     * @param data 要发送的消息\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">queue</span><span class=\"token punctuation\">(</span>Object data<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//构造一个消息</span>\n        Message message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        message<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//序列化</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            String json <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//消息发送,延迟5秒</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"msg publish: \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zadd</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 消息发送\n     */</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">loop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//读取score 到当前时间戳的消息</span>\n            Set<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> zrange <span class=\"token operator\">=</span> jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrangeByScore</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果消息为空,则休息500毫秒</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zrange<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    Thread<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//如果读取到消息,则将消息读取出来</span>\n            String next <span class=\"token operator\">=</span> zrange<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">.</span><span class=\"token function\">zrem</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span>next<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">//消息取到,处理业务</span>\n                <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    Message message <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">,</span> Message<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive msg: \"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\">>>>>\"</span><span class=\"token operator\">+</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200728194536819.png\" alt=\"image-20200728194536819\"></p>\n<p><a href=\"https://github.com/kujin521/SpringRedisTest/tree/master/src/main/java/com/kujin/springredistest/redis/redis_queue\">github</a></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[Toc]</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>平时说的消息队列，一般是指RbbitMQ, RocketMQ,ActiveMQ 以及大数据里边的Kafka，这些都是一些比较专业的消息中间件</p>\n<p>Redis中也有自己的消息队列</p>\n<h2 id=\"1-消息队列\"><a href=\"#1-消息队列\" class=\"headerlink\" title=\"1.消息队列\"></a>1.消息队列</h2><p>Redis中做消息队列，使用他里边的List数据结构可以实现，我们可以 </p>\n<ul>\n<li>lpush/rpush 操作来实现入队</li>\n<li>lpop/rpop 实现出列</li>\n</ul>\n<p>详细操作</p>\n<p><img src=\"images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200727184633610.png\" alt=\"image-20200727184633610\"></p>\n<h3 id=\"java端\"><a href=\"#java端\" class=\"headerlink\" title=\"java端\"></a>java端</h3><p>在客户端（java端）我们会维护一个死循环不停地从队列中读取数据，并处理，如果队列中有消息，则直接获取，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成大量资源浪费，使用blpop/brpopo</p>\n<h2 id=\"2-延迟消息队列\"><a href=\"#2-延迟消息队列\" class=\"headerlink\" title=\"2.延迟消息队列\"></a>2.延迟消息队列</h2><blockquote>\n<p>延迟队列可以通过zset来实现，因为zset中有一个score，我们可以把时间作为score，将value存到redis中，然后通过循环的方式不断地通过轮询的方式，去不断的读取出来</p>\n</blockquote>\n<ul>\n<li><strong>如果消息是一个字符串，直接发送即可，如果是一个对象，则需要进行对象序列化，这里我们使用JSON来实现序列化与反序列化</strong></li>\n</ul>\n<ol>\n<li>首先在项目中吗，添加Json依赖</li>\n</ol>\n<pre><code class=\"xml\">&lt;dependency&gt;\n            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;\n            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;\n            &lt;version&gt;2.10.3&lt;/version&gt;\n        &lt;/dependency&gt;</code></pre>\n<pre><code class=\"java\">/**\n * 类：消息实体\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class Message &amp;#123;\n    private String id;\n    private Object data;\n\n    @Override\n    public String toString() &amp;#123;\n        return &quot;Message&amp;#123;&quot; +\n                &quot;id=&#39;&quot; + id + &#39;\\&#39;&#39; +\n                &quot;, data=&quot; + data +\n                &#39;&amp;#125;&#39;;\n    &amp;#125;\n\n    public String getId() &amp;#123;\n        return id;\n    &amp;#125;\n\n    public void setId(String id) &amp;#123;\n        this.id = id;\n    &amp;#125;\n\n    public Object getData() &amp;#123;\n        return data;\n    &amp;#125;\n\n    public void setData(Object data) &amp;#123;\n        this.data = data;\n    &amp;#125;\n&amp;#125;</code></pre>\n<pre><code class=\"java\">package com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue &amp;#123;\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) &amp;#123;\n        this.jedis = jedis;\n        this.queue = queue;\n    &amp;#125;\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data)&amp;#123;\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try &amp;#123;\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(&quot;msg publish: &quot;+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+50000,json);\n        &amp;#125; catch (JsonProcessingException e) &amp;#123;\n            e.printStackTrace();\n        &amp;#125;\n    &amp;#125;\n\n    /**\n     * 消息发送\n     */\n    public void loop()&amp;#123;\n        while (!Thread.interrupted())&amp;#123;\n            //读取score 到当前时间戳的消息\n            Set&lt;String&gt; zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty())&amp;#123;\n                try &amp;#123;\n                    Thread.sleep(500);\n                &amp;#125; catch (InterruptedException e) &amp;#123;\n                    e.printStackTrace();\n                    break;\n                &amp;#125;\n                continue;\n            &amp;#125;\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)&gt;0)&amp;#123;\n                //消息取到,处理业务\n                try &amp;#123;\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(&quot;receive msg: &quot;+message);\n                &amp;#125; catch (JsonProcessingException e) &amp;#123;\n                    e.printStackTrace();\n                &amp;#125;\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;\n\n&amp;#125;\n</code></pre>\n<pre><code class=\"java\">package com.kujin.springredistest.redis.redis_queue;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport redis.clients.jedis.Jedis;\n\nimport javax.xml.crypto.Data;\nimport java.util.Date;\nimport java.util.Set;\nimport java.util.UUID;\n\n/**\n * 类：延迟消息队列\n * 编写人：kujin\n * 创建时间：2020/7/28\n * 修改时间：2020/7/28\n */\npublic class DelayMsgQueue &amp;#123;\n    private Jedis jedis;\n    private String queue;\n    public DelayMsgQueue(Jedis jedis, String queue) &amp;#123;\n        this.jedis = jedis;\n        this.queue = queue;\n    &amp;#125;\n\n    /**\n     * 消息入列\n     * @param data 要发送的消息\n     */\n    public void queue(Object data)&amp;#123;\n        //构造一个消息\n        Message message = new Message();\n        message.setId(UUID.randomUUID().toString());\n        message.setData(data);\n        //序列化\n        try &amp;#123;\n            String json = new ObjectMapper().writeValueAsString(message);\n            //消息发送,延迟5秒\n            System.out.println(&quot;msg publish: &quot;+new Date());\n            jedis.zadd(queue,System.currentTimeMillis()+5000,json);\n        &amp;#125; catch (JsonProcessingException e) &amp;#123;\n            e.printStackTrace();\n        &amp;#125;\n    &amp;#125;\n\n    /**\n     * 消息发送\n     */\n    public void loop()&amp;#123;\n        while (!Thread.interrupted())&amp;#123;\n            //读取score 到当前时间戳的消息\n            Set&lt;String&gt; zrange = jedis.zrangeByScore(queue, 0, System.currentTimeMillis(), 0, 1);\n            //如果消息为空,则休息500毫秒\n            if (zrange.isEmpty())&amp;#123;\n                try &amp;#123;\n                    Thread.sleep(500);\n                &amp;#125; catch (InterruptedException e) &amp;#123;\n                    e.printStackTrace();\n                    break;\n                &amp;#125;\n                continue;\n            &amp;#125;\n            //如果读取到消息,则将消息读取出来\n            String next = zrange.iterator().next();\n            if (jedis.zrem(queue,next)&gt;0)&amp;#123;\n                //消息取到,处理业务\n                try &amp;#123;\n                    Message message = new ObjectMapper().readValue(next, Message.class);\n                    System.out.println(&quot;receive msg: &quot;+new Date()+&quot;&gt;&gt;&gt;&gt;&gt;&quot;+message);\n                &amp;#125; catch (JsonProcessingException e) &amp;#123;\n                    e.printStackTrace();\n                &amp;#125;\n            &amp;#125;\n        &amp;#125;\n    &amp;#125;\n\n&amp;#125;\n</code></pre>\n<p><img src=\"images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200728194536819.png\" alt=\"image-20200728194536819\"></p>\n<p><a href=\"https://github.com/kujin521/SpringRedisTest/tree/master/src/main/java/com/kujin/springredistest/redis/redis_queue\">github</a></p>\n"},{"title":"Java客户端","auther":"ku jin","_content":"[TOC]\n\n## 开启远程连接\n\n### 开放端口6379\n\n```\nfirewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports\n```\n\n![image-20200723141553131](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141553131.png)\n\nRedis默认不支持远程连接，需要手动开启\n\n### 修改redis.conf文件\n\n1. 注释bind 127.0.0.1\n\n2. 开启密码校验 \n\n   ```\n   requirepass kujin\n   ```\n\n   ![image-20200723140632512](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723140632512.png)\n\n3. 保存退出，重启redis \n\n   ```shell\n   redis-server redis.conf\n   ```\n\n![image-20200723141850375](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141850375.png)\n\n## Jedis\n\nmaven仓库：https://mvnrepository.com/artifact/redis.clients/jedis\n\n### 1. 添加依赖\n\n```groovy\ncompile group: 'redis.clients', name: 'jedis', version: '3.3.0'\n```\n\n### 2. java代码测试\n\n```java\npackage com.kujin.springredis;\n\nimport redis.clients.jedis.Jedis;\n\n/**\n * 类：在java中使用Redis\n * 编写人：kujin\n * 创建时间：2020/7/23\n * 修改时间：2020/7/23\n */\npublic class Java_Redis_Text {\n    public static void main(String[] args) {\n        Jedis jedis=new Jedis(\"192.168.2.168\",6379);//连接redis\n        jedis.auth(\"kujin\");//输入密码\n\n        int i=0;//记录操作次数\n        try {\n            long start = System.currentTimeMillis();//开始时间\n            while (true){\n                long end = System.currentTimeMillis();//结束时间\n                if (end-start>=1000){//时间大于1秒，退出\n                    break;\n                }\n                i++;\n                jedis.set(\"test\"+i,i+\"\");\n            }\n        }finally {//关闭连接\n            jedis.close();\n        }\n        System.out.println(\"redis每秒操作 \"+ i+ \"次\");\n\n    }\n}\n\n```\n\n![image-20200723143421382](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723143421382.png)\n\n### 3. 连接池\n\n#### 1. 定义接口约束\n\n```java\npublic interface CllWithJedis {\n    void call(Jedis jedis);\n}\n```\n\n#### 2. 规范redis连接创建\n\n```java\npublic class Redis {\n    //定义redis连接池\n    private JedisPool pool;\n    public Redis() {\n        //配置连接参数\n        GenericObjectPoolConfig config=new GenericObjectPoolConfig();\n        config.setMaxIdle(50);//最大空闲数\n        config.setMaxTotal(100);//最大连接数\n        config.setTestOnBorrow(true);//在空闲时检查有效性\n        //配置参数，地址，端口，超时时间，密码\n        pool=new JedisPool(config,\"192.168.2.168\",6379,20000,\"kujin\");\n    }\n    public void execute(CllWithJedis cllWithJedis){\n        //在try里获取单个连接\n        try (Jedis jedis=pool.getResource()){\n            cllWithJedis.call(jedis);\n        }\n    }\n}\n```\n\n#### 3. 使用redis\n\n```java\npublic static void main(String[] args) {\n        Redis redis=new Redis();\n        redis.execute(jedis1 -> {\n            System.out.println(jedis1.ping());\n        });\n    }\n```\n\n## Lettuce（简单了解）\n\nGithub[官方地址](https://github.com/lettuce-io/lettuce-core)\n\n###  1. 添加依赖\n\n```groovy\ncompile group: 'io.lettuce', name: 'lettuce-core', version: '6.0.0.M1'\n```\n\n### 2. 简单测试案例\n\n```java\npublic class LettuceTest {\n    static RedisClient client = RedisClient.create(\"redis://kujin@192.168.2.168\");//获取redis实例\n    public static void main(String[] args) {\n        baseUsage();//基本用法\n    }\n\n    private static void baseUsage() {\n        StatefulRedisConnection<String, String> connection = client.connect();\n        RedisStringCommands sync = connection.sync();//同步对象\n        sync.set(\"ku\",\"jin\");//设置值\n        String ku = (String) sync.get(\"ku\");//获取值\n        System.out.println(ku);\n    }\n}\n```\n\n## Jedis和Lettuce比较\n\n1. Jedis在实现过程中是直接连接Redis的，在多个线程之间共享一个Jedis实例，这是线程不安全的，如果在多线程创建下使用需要创建连接池，这样每个jedis都有redis实例\n2. Lettuce基于Netty NIO框架构建，所以克服了jedis中线程不安全的问题，Lettuce支持同步，异步，以及响应调用，多个线程可以共享一个实例\n\n## Spring中使用Redis\n\n### 1.添加依赖\n\n```groovy\ncompile group: 'org.springframework.data', name: 'spring-data-redis', version: '2.3.2.RELEASE'\n```\n\n### 2.配置文件\n\nappcationContext.xml\n\n```xml\n<!--\tSpring配置JedisPoolConfig对象-->\n\t<bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!--最大空闲数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!--最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"100\" />\n\t\t<!--最大等待时间 -->\n\t\t<property name=\"maxWaitMillis\" value=\"20000\" />\n\t</bean>\n\n<!--spring配置JedisConnectionFactory-->\n\t<bean id=\"connectionFactory\"\n\t\tclass=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\">\n\t\t<property name=\"hostName\" value=\"192.168.2.168\" />\n\t\t<property name=\"port\" value=\"6379\" />\n\t\t<property name=\"password\" value=\"kujin\"/>\n\t\t<property name=\"poolConfig\" ref=\"poolConfig\" />\n\t</bean>\n\n<!--Spring配置RedisTemplate-->\n\t<bean id=\"jdkSerializationRedisSerializer\"\n\t\tclass=\"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer\" />\n\t\t\n\t<bean id=\"stringRedisSerializer\"\n\t\tclass=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t\n\t<bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\">\n\t\t<property name=\"connectionFactory\" ref=\"connectionFactory\" />\n\t\t<property name=\"keySerializer\" ref=\"stringRedisSerializer\" />\n\t\t<property name=\"valueSerializer\" ref=\"jdkSerializationRedisSerializer\" />\n\t</bean>\n```\n\n### 3.关键代码\n\npojo\n\n```java\npublic class Role implements Serializable {\n\t\n\tprivate static final long serialVersionUID = 6977402643848374753L;\n\n\tprivate long id;\n\tprivate String roleName;\n\tprivate String note;\n\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getRoleName() {\n\t\treturn roleName;\n\t}\n\n\tpublic void setRoleName(String roleName) {\n\t\tthis.roleName = roleName;\n\t}\n\n\tpublic String getNote() {\n\t\treturn note;\n\t}\n\n\tpublic void setNote(String note) {\n\t\tthis.note = note;\n\t}\n\n}\n```\n\nmain.java\n\n```java\nprivate static void testSpring() {\n\t\t//spring配置\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取redis\n\t\tRedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n\t\t//角色实体\n\t\tRole role = new Role();\n\t\trole.setId(1L);\n\t\trole.setRoleName(\"role_name_1\");\n\t\trole.setNote(\"note_1\");\n\t\t//redsi操作\n\t\tredisTemplate.opsForValue().set(\"role_1\", role);\n\t\tRole role1 = (Role) redisTemplate.opsForValue().get(\"role_1\");\n\n\t\tSystem.out.println(role1.getRoleName());\n\t}\n```\n\n### 4. 优化\n\nSessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行\n\n```java\nprivate static void testSessionCallback() {\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\tRedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n\t\tRole role = new Role();\n\t\trole.setId(1);\n\t\trole.setRoleName(\"role_name_1\");\n\t\trole.setNote(\"role_note_1\");\n\t\t//SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行\n\t\tSessionCallback callBack = new SessionCallback<Role>() {\n\t\t\t@Override\n\t\t\tpublic Role execute(RedisOperations ops) throws DataAccessException {\n\t\t\t\tops.boundValueOps(\"role_1\").set(role);\n\t\t\t\treturn (Role) ops.boundValueOps(\"role_1\").get();\n\t\t\t}\n\t\t};\n\t\tRole savedRole = (Role) redisTemplate.execute(callBack);\n\t\tSystem.out.println(savedRole.getId());\n\t}\n```\n\n","source":"_posts/随心记/Redis学习/Java客户端.md","raw":"---\ntitle: Java客户端 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - Java客户端 \n---\n[TOC]\n\n## 开启远程连接\n\n### 开放端口6379\n\n```\nfirewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports\n```\n\n![image-20200723141553131](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141553131.png)\n\nRedis默认不支持远程连接，需要手动开启\n\n### 修改redis.conf文件\n\n1. 注释bind 127.0.0.1\n\n2. 开启密码校验 \n\n   ```\n   requirepass kujin\n   ```\n\n   ![image-20200723140632512](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723140632512.png)\n\n3. 保存退出，重启redis \n\n   ```shell\n   redis-server redis.conf\n   ```\n\n![image-20200723141850375](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141850375.png)\n\n## Jedis\n\nmaven仓库：https://mvnrepository.com/artifact/redis.clients/jedis\n\n### 1. 添加依赖\n\n```groovy\ncompile group: 'redis.clients', name: 'jedis', version: '3.3.0'\n```\n\n### 2. java代码测试\n\n```java\npackage com.kujin.springredis;\n\nimport redis.clients.jedis.Jedis;\n\n/**\n * 类：在java中使用Redis\n * 编写人：kujin\n * 创建时间：2020/7/23\n * 修改时间：2020/7/23\n */\npublic class Java_Redis_Text {\n    public static void main(String[] args) {\n        Jedis jedis=new Jedis(\"192.168.2.168\",6379);//连接redis\n        jedis.auth(\"kujin\");//输入密码\n\n        int i=0;//记录操作次数\n        try {\n            long start = System.currentTimeMillis();//开始时间\n            while (true){\n                long end = System.currentTimeMillis();//结束时间\n                if (end-start>=1000){//时间大于1秒，退出\n                    break;\n                }\n                i++;\n                jedis.set(\"test\"+i,i+\"\");\n            }\n        }finally {//关闭连接\n            jedis.close();\n        }\n        System.out.println(\"redis每秒操作 \"+ i+ \"次\");\n\n    }\n}\n\n```\n\n![image-20200723143421382](images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723143421382.png)\n\n### 3. 连接池\n\n#### 1. 定义接口约束\n\n```java\npublic interface CllWithJedis {\n    void call(Jedis jedis);\n}\n```\n\n#### 2. 规范redis连接创建\n\n```java\npublic class Redis {\n    //定义redis连接池\n    private JedisPool pool;\n    public Redis() {\n        //配置连接参数\n        GenericObjectPoolConfig config=new GenericObjectPoolConfig();\n        config.setMaxIdle(50);//最大空闲数\n        config.setMaxTotal(100);//最大连接数\n        config.setTestOnBorrow(true);//在空闲时检查有效性\n        //配置参数，地址，端口，超时时间，密码\n        pool=new JedisPool(config,\"192.168.2.168\",6379,20000,\"kujin\");\n    }\n    public void execute(CllWithJedis cllWithJedis){\n        //在try里获取单个连接\n        try (Jedis jedis=pool.getResource()){\n            cllWithJedis.call(jedis);\n        }\n    }\n}\n```\n\n#### 3. 使用redis\n\n```java\npublic static void main(String[] args) {\n        Redis redis=new Redis();\n        redis.execute(jedis1 -> {\n            System.out.println(jedis1.ping());\n        });\n    }\n```\n\n## Lettuce（简单了解）\n\nGithub[官方地址](https://github.com/lettuce-io/lettuce-core)\n\n###  1. 添加依赖\n\n```groovy\ncompile group: 'io.lettuce', name: 'lettuce-core', version: '6.0.0.M1'\n```\n\n### 2. 简单测试案例\n\n```java\npublic class LettuceTest {\n    static RedisClient client = RedisClient.create(\"redis://kujin@192.168.2.168\");//获取redis实例\n    public static void main(String[] args) {\n        baseUsage();//基本用法\n    }\n\n    private static void baseUsage() {\n        StatefulRedisConnection<String, String> connection = client.connect();\n        RedisStringCommands sync = connection.sync();//同步对象\n        sync.set(\"ku\",\"jin\");//设置值\n        String ku = (String) sync.get(\"ku\");//获取值\n        System.out.println(ku);\n    }\n}\n```\n\n## Jedis和Lettuce比较\n\n1. Jedis在实现过程中是直接连接Redis的，在多个线程之间共享一个Jedis实例，这是线程不安全的，如果在多线程创建下使用需要创建连接池，这样每个jedis都有redis实例\n2. Lettuce基于Netty NIO框架构建，所以克服了jedis中线程不安全的问题，Lettuce支持同步，异步，以及响应调用，多个线程可以共享一个实例\n\n## Spring中使用Redis\n\n### 1.添加依赖\n\n```groovy\ncompile group: 'org.springframework.data', name: 'spring-data-redis', version: '2.3.2.RELEASE'\n```\n\n### 2.配置文件\n\nappcationContext.xml\n\n```xml\n<!--\tSpring配置JedisPoolConfig对象-->\n\t<bean id=\"poolConfig\" class=\"redis.clients.jedis.JedisPoolConfig\">\n\t\t<!--最大空闲数 -->\n\t\t<property name=\"maxIdle\" value=\"50\" />\n\t\t<!--最大连接数 -->\n\t\t<property name=\"maxTotal\" value=\"100\" />\n\t\t<!--最大等待时间 -->\n\t\t<property name=\"maxWaitMillis\" value=\"20000\" />\n\t</bean>\n\n<!--spring配置JedisConnectionFactory-->\n\t<bean id=\"connectionFactory\"\n\t\tclass=\"org.springframework.data.redis.connection.jedis.JedisConnectionFactory\">\n\t\t<property name=\"hostName\" value=\"192.168.2.168\" />\n\t\t<property name=\"port\" value=\"6379\" />\n\t\t<property name=\"password\" value=\"kujin\"/>\n\t\t<property name=\"poolConfig\" ref=\"poolConfig\" />\n\t</bean>\n\n<!--Spring配置RedisTemplate-->\n\t<bean id=\"jdkSerializationRedisSerializer\"\n\t\tclass=\"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer\" />\n\t\t\n\t<bean id=\"stringRedisSerializer\"\n\t\tclass=\"org.springframework.data.redis.serializer.StringRedisSerializer\" />\n\t\t\n\t<bean id=\"redisTemplate\" class=\"org.springframework.data.redis.core.RedisTemplate\">\n\t\t<property name=\"connectionFactory\" ref=\"connectionFactory\" />\n\t\t<property name=\"keySerializer\" ref=\"stringRedisSerializer\" />\n\t\t<property name=\"valueSerializer\" ref=\"jdkSerializationRedisSerializer\" />\n\t</bean>\n```\n\n### 3.关键代码\n\npojo\n\n```java\npublic class Role implements Serializable {\n\t\n\tprivate static final long serialVersionUID = 6977402643848374753L;\n\n\tprivate long id;\n\tprivate String roleName;\n\tprivate String note;\n\n\tpublic long getId() {\n\t\treturn id;\n\t}\n\n\tpublic void setId(long id) {\n\t\tthis.id = id;\n\t}\n\n\tpublic String getRoleName() {\n\t\treturn roleName;\n\t}\n\n\tpublic void setRoleName(String roleName) {\n\t\tthis.roleName = roleName;\n\t}\n\n\tpublic String getNote() {\n\t\treturn note;\n\t}\n\n\tpublic void setNote(String note) {\n\t\tthis.note = note;\n\t}\n\n}\n```\n\nmain.java\n\n```java\nprivate static void testSpring() {\n\t\t//spring配置\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\t//获取redis\n\t\tRedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n\t\t//角色实体\n\t\tRole role = new Role();\n\t\trole.setId(1L);\n\t\trole.setRoleName(\"role_name_1\");\n\t\trole.setNote(\"note_1\");\n\t\t//redsi操作\n\t\tredisTemplate.opsForValue().set(\"role_1\", role);\n\t\tRole role1 = (Role) redisTemplate.opsForValue().get(\"role_1\");\n\n\t\tSystem.out.println(role1.getRoleName());\n\t}\n```\n\n### 4. 优化\n\nSessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行\n\n```java\nprivate static void testSessionCallback() {\n\t\tApplicationContext applicationContext = new ClassPathXmlApplicationContext(\"applicationContext.xml\");\n\t\tRedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n\t\tRole role = new Role();\n\t\trole.setId(1);\n\t\trole.setRoleName(\"role_name_1\");\n\t\trole.setNote(\"role_note_1\");\n\t\t//SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行\n\t\tSessionCallback callBack = new SessionCallback<Role>() {\n\t\t\t@Override\n\t\t\tpublic Role execute(RedisOperations ops) throws DataAccessException {\n\t\t\t\tops.boundValueOps(\"role_1\").set(role);\n\t\t\t\treturn (Role) ops.boundValueOps(\"role_1\").get();\n\t\t\t}\n\t\t};\n\t\tRole savedRole = (Role) redisTemplate.execute(callBack);\n\t\tSystem.out.println(savedRole.getId());\n\t}\n```\n\n","slug":"随心记/Redis学习/Java客户端","published":1,"date":"2020-08-02T23:42:43.890Z","updated":"2020-08-02T23:42:59.791Z","_id":"ckdcza4qa00burkamgi9n8pw2","comments":1,"layout":"post","photos":[],"link":"","content":"<p>[TOC]</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"开放端口6379\"><a href=\"#开放端口6379\" class=\"headerlink\" title=\"开放端口6379\"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141553131.png\" alt=\"image-20200723141553131\"></p>\n<p>Redis默认不支持远程连接，需要手动开启</p>\n<h3 id=\"修改redis-conf文件\"><a href=\"#修改redis-conf文件\" class=\"headerlink\" title=\"修改redis.conf文件\"></a>修改redis.conf文件</h3><ol>\n<li><p>注释bind 127.0.0.1</p>\n</li>\n<li><p>开启密码校验 </p>\n<pre><code>requirepass kujin</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723140632512.png\" alt=\"image-20200723140632512\"></p>\n</li>\n<li><p>保存退出，重启redis </p>\n<pre class=\" language-shell\"><code class=\"language-shell\">redis-server redis.conf</code></pre>\n</li>\n</ol>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141850375.png\" alt=\"image-20200723141850375\"></p>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><p>maven仓库：<a href=\"https://mvnrepository.com/artifact/redis.clients/jedis\">https://mvnrepository.com/artifact/redis.clients/jedis</a></p>\n<h3 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">compile group<span class=\"token punctuation\">:</span> <span class=\"token string\">'redis.clients'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'jedis'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'3.3.0'</span></code></pre>\n<h3 id=\"2-java代码测试\"><a href=\"#2-java代码测试\" class=\"headerlink\" title=\"2. java代码测试\"></a>2. java代码测试</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>kujin<span class=\"token punctuation\">.</span>springredis<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> redis<span class=\"token punctuation\">.</span>clients<span class=\"token punctuation\">.</span>jedis<span class=\"token punctuation\">.</span>Jedis<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * 类：在java中使用Redis\n * 编写人：kujin\n * 创建时间：2020/7/23\n * 修改时间：2020/7/23\n */</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Java_Redis_Text</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Jedis jedis<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Jedis</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"192.168.2.168\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//连接redis</span>\n        jedis<span class=\"token punctuation\">.</span><span class=\"token function\">auth</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kujin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输入密码</span>\n\n        <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//记录操作次数</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//开始时间</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">long</span> end <span class=\"token operator\">=</span> System<span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//结束时间</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>end<span class=\"token operator\">-</span>start<span class=\"token operator\">>=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//时间大于1秒，退出</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                jedis<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>i<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//关闭连接</span>\n            jedis<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis每秒操作 \"</span><span class=\"token operator\">+</span> i<span class=\"token operator\">+</span> <span class=\"token string\">\"次\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723143421382.png\" alt=\"image-20200723143421382\"></p>\n<h3 id=\"3-连接池\"><a href=\"#3-连接池\" class=\"headerlink\" title=\"3. 连接池\"></a>3. 连接池</h3><h4 id=\"1-定义接口约束\"><a href=\"#1-定义接口约束\" class=\"headerlink\" title=\"1. 定义接口约束\"></a>1. 定义接口约束</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">CllWithJedis</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Jedis jedis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"2-规范redis连接创建\"><a href=\"#2-规范redis连接创建\" class=\"headerlink\" title=\"2. 规范redis连接创建\"></a>2. 规范redis连接创建</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Redis</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//定义redis连接池</span>\n    <span class=\"token keyword\">private</span> JedisPool pool<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//配置连接参数</span>\n        GenericObjectPoolConfig config<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericObjectPoolConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxIdle</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//最大空闲数</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxTotal</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//最大连接数</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token function\">setTestOnBorrow</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//在空闲时检查有效性</span>\n        <span class=\"token comment\" spellcheck=\"true\">//配置参数，地址，端口，超时时间，密码</span>\n        pool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">JedisPool</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span><span class=\"token string\">\"192.168.2.168\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">6379</span><span class=\"token punctuation\">,</span><span class=\"token number\">20000</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kujin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>CllWithJedis cllWithJedis<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//在try里获取单个连接</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span>Jedis jedis<span class=\"token operator\">=</span>pool<span class=\"token punctuation\">.</span><span class=\"token function\">getResource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            cllWithJedis<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>jedis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"3-使用redis\"><a href=\"#3-使用redis\" class=\"headerlink\" title=\"3. 使用redis\"></a>3. 使用redis</h4><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Redis redis<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Redis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        redis<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>jedis1 <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>jedis1<span class=\"token punctuation\">.</span><span class=\"token function\">ping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"Lettuce（简单了解）\"><a href=\"#Lettuce（简单了解）\" class=\"headerlink\" title=\"Lettuce（简单了解）\"></a>Lettuce（简单了解）</h2><p>Github<a href=\"https://github.com/lettuce-io/lettuce-core\">官方地址</a></p>\n<h3 id=\"1-添加依赖-1\"><a href=\"#1-添加依赖-1\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">compile group<span class=\"token punctuation\">:</span> <span class=\"token string\">'io.lettuce'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'lettuce-core'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'6.0.0.M1'</span></code></pre>\n<h3 id=\"2-简单测试案例\"><a href=\"#2-简单测试案例\" class=\"headerlink\" title=\"2. 简单测试案例\"></a>2. 简单测试案例</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettuceTest</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> RedisClient client <span class=\"token operator\">=</span> RedisClient<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"redis://kujin@192.168.2.168\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取redis实例</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">baseUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//基本用法</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">baseUsage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        StatefulRedisConnection<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span> connection <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        RedisStringCommands sync <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//同步对象</span>\n        sync<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ku\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//设置值</span>\n        String ku <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ku\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取值</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ku<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"Jedis和Lettuce比较\"><a href=\"#Jedis和Lettuce比较\" class=\"headerlink\" title=\"Jedis和Lettuce比较\"></a>Jedis和Lettuce比较</h2><ol>\n<li>Jedis在实现过程中是直接连接Redis的，在多个线程之间共享一个Jedis实例，这是线程不安全的，如果在多线程创建下使用需要创建连接池，这样每个jedis都有redis实例</li>\n<li>Lettuce基于Netty NIO框架构建，所以克服了jedis中线程不安全的问题，Lettuce支持同步，异步，以及响应调用，多个线程可以共享一个实例</li>\n</ol>\n<h2 id=\"Spring中使用Redis\"><a href=\"#Spring中使用Redis\" class=\"headerlink\" title=\"Spring中使用Redis\"></a>Spring中使用Redis</h2><h3 id=\"1-添加依赖-2\"><a href=\"#1-添加依赖-2\" class=\"headerlink\" title=\"1.添加依赖\"></a>1.添加依赖</h3><pre class=\" language-groovy\"><code class=\"language-groovy\">compile group<span class=\"token punctuation\">:</span> <span class=\"token string\">'org.springframework.data'</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'spring-data-redis'</span><span class=\"token punctuation\">,</span> version<span class=\"token punctuation\">:</span> <span class=\"token string\">'2.3.2.RELEASE'</span></code></pre>\n<h3 id=\"2-配置文件\"><a href=\"#2-配置文件\" class=\"headerlink\" title=\"2.配置文件\"></a>2.配置文件</h3><p>appcationContext.xml</p>\n<pre class=\" language-xml\"><code class=\"language-xml\"><span class=\"token comment\" spellcheck=\"true\">&lt;!--    Spring配置JedisPoolConfig对象--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>poolConfig<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redis.clients.jedis.JedisPoolConfig<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--最大空闲数 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>maxIdle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--最大连接数 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>maxTotal<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>100<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token comment\" spellcheck=\"true\">&lt;!--最大等待时间 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>maxWaitMillis<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>20000<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--spring配置JedisConnectionFactory--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>connectionFactory<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.data.redis.connection.jedis.JedisConnectionFactory<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>hostName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>192.168.2.168<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>port<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>6379<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>kujin<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>poolConfig<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>poolConfig<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--Spring配置RedisTemplate--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jdkSerializationRedisSerializer<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.data.redis.serializer.JdkSerializationRedisSerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stringRedisSerializer<span class=\"token punctuation\">\"</span></span>\n        <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>redisTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>org.springframework.data.redis.core.RedisTemplate<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>connectionFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>connectionFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>keySerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stringRedisSerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>valueSerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jdkSerializationRedisSerializer<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>bean</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"3-关键代码\"><a href=\"#3-关键代码\" class=\"headerlink\" title=\"3.关键代码\"></a>3.关键代码</h3><p>pojo</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Role</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> 6977402643848374753L<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String roleName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String note<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getRoleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> roleName<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setRoleName</span><span class=\"token punctuation\">(</span>String roleName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>roleName <span class=\"token operator\">=</span> roleName<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> String <span class=\"token function\">getNote</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> note<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setNote</span><span class=\"token punctuation\">(</span>String note<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>note <span class=\"token operator\">=</span> note<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<p>main.java</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSpring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//spring配置</span>\n        ApplicationContext applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//获取redis</span>\n        RedisTemplate redisTemplate <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>RedisTemplate<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//角色实体</span>\n        Role role <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span>1L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setRoleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_name_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"note_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//redsi操作</span>\n        redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_1\"</span><span class=\"token punctuation\">,</span> role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Role role1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>role1<span class=\"token punctuation\">.</span><span class=\"token function\">getRoleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"4-优化\"><a href=\"#4-优化\" class=\"headerlink\" title=\"4. 优化\"></a>4. 优化</h3><p>SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testSessionCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        ApplicationContext applicationContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassPathXmlApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"applicationContext.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        RedisTemplate redisTemplate <span class=\"token operator\">=</span> applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span>RedisTemplate<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Role role <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setRoleName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_name_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        role<span class=\"token punctuation\">.</span><span class=\"token function\">setNote</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_note_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行</span>\n        SessionCallback callBack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SessionCallback</span><span class=\"token operator\">&lt;</span>Role<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token annotation punctuation\">@Override</span>\n            <span class=\"token keyword\">public</span> Role <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>RedisOperations ops<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> DataAccessException <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                ops<span class=\"token punctuation\">.</span><span class=\"token function\">boundValueOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">)</span> ops<span class=\"token punctuation\">.</span><span class=\"token function\">boundValueOps</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"role_1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        Role savedRole <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Role<span class=\"token punctuation\">)</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>callBack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>savedRole<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span></code></pre>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"开启远程连接\"><a href=\"#开启远程连接\" class=\"headerlink\" title=\"开启远程连接\"></a>开启远程连接</h2><h3 id=\"开放端口6379\"><a href=\"#开放端口6379\" class=\"headerlink\" title=\"开放端口6379\"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口\nfirewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口\nfirewall-cmd --reload   # 配置立即生效\nfirewall-cmd --zone=public --list-ports</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141553131.png\" alt=\"image-20200723141553131\"></p>\n<p>Redis默认不支持远程连接，需要手动开启</p>\n<h3 id=\"修改redis-conf文件\"><a href=\"#修改redis-conf文件\" class=\"headerlink\" title=\"修改redis.conf文件\"></a>修改redis.conf文件</h3><ol>\n<li><p>注释bind 127.0.0.1</p>\n</li>\n<li><p>开启密码校验 </p>\n<pre><code>requirepass kujin</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723140632512.png\" alt=\"image-20200723140632512\"></p>\n</li>\n<li><p>保存退出，重启redis </p>\n<pre><code class=\"shell\">redis-server redis.conf</code></pre>\n</li>\n</ol>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141850375.png\" alt=\"image-20200723141850375\"></p>\n<h2 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h2><p>maven仓库：<a href=\"https://mvnrepository.com/artifact/redis.clients/jedis\">https://mvnrepository.com/artifact/redis.clients/jedis</a></p>\n<h3 id=\"1-添加依赖\"><a href=\"#1-添加依赖\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h3><pre><code class=\"groovy\">compile group: &#39;redis.clients&#39;, name: &#39;jedis&#39;, version: &#39;3.3.0&#39;</code></pre>\n<h3 id=\"2-java代码测试\"><a href=\"#2-java代码测试\" class=\"headerlink\" title=\"2. java代码测试\"></a>2. java代码测试</h3><pre><code class=\"java\">package com.kujin.springredis;\n\nimport redis.clients.jedis.Jedis;\n\n/**\n * 类：在java中使用Redis\n * 编写人：kujin\n * 创建时间：2020/7/23\n * 修改时间：2020/7/23\n */\npublic class Java_Redis_Text &amp;#123;\n    public static void main(String[] args) &amp;#123;\n        Jedis jedis=new Jedis(&quot;192.168.2.168&quot;,6379);//连接redis\n        jedis.auth(&quot;kujin&quot;);//输入密码\n\n        int i=0;//记录操作次数\n        try &amp;#123;\n            long start = System.currentTimeMillis();//开始时间\n            while (true)&amp;#123;\n                long end = System.currentTimeMillis();//结束时间\n                if (end-start&gt;=1000)&amp;#123;//时间大于1秒，退出\n                    break;\n                &amp;#125;\n                i++;\n                jedis.set(&quot;test&quot;+i,i+&quot;&quot;);\n            &amp;#125;\n        &amp;#125;finally &amp;#123;//关闭连接\n            jedis.close();\n        &amp;#125;\n        System.out.println(&quot;redis每秒操作 &quot;+ i+ &quot;次&quot;);\n\n    &amp;#125;\n&amp;#125;\n</code></pre>\n<p><img src=\"images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723143421382.png\" alt=\"image-20200723143421382\"></p>\n<h3 id=\"3-连接池\"><a href=\"#3-连接池\" class=\"headerlink\" title=\"3. 连接池\"></a>3. 连接池</h3><h4 id=\"1-定义接口约束\"><a href=\"#1-定义接口约束\" class=\"headerlink\" title=\"1. 定义接口约束\"></a>1. 定义接口约束</h4><pre><code class=\"java\">public interface CllWithJedis &amp;#123;\n    void call(Jedis jedis);\n&amp;#125;</code></pre>\n<h4 id=\"2-规范redis连接创建\"><a href=\"#2-规范redis连接创建\" class=\"headerlink\" title=\"2. 规范redis连接创建\"></a>2. 规范redis连接创建</h4><pre><code class=\"java\">public class Redis &amp;#123;\n    //定义redis连接池\n    private JedisPool pool;\n    public Redis() &amp;#123;\n        //配置连接参数\n        GenericObjectPoolConfig config=new GenericObjectPoolConfig();\n        config.setMaxIdle(50);//最大空闲数\n        config.setMaxTotal(100);//最大连接数\n        config.setTestOnBorrow(true);//在空闲时检查有效性\n        //配置参数，地址，端口，超时时间，密码\n        pool=new JedisPool(config,&quot;192.168.2.168&quot;,6379,20000,&quot;kujin&quot;);\n    &amp;#125;\n    public void execute(CllWithJedis cllWithJedis)&amp;#123;\n        //在try里获取单个连接\n        try (Jedis jedis=pool.getResource())&amp;#123;\n            cllWithJedis.call(jedis);\n        &amp;#125;\n    &amp;#125;\n&amp;#125;</code></pre>\n<h4 id=\"3-使用redis\"><a href=\"#3-使用redis\" class=\"headerlink\" title=\"3. 使用redis\"></a>3. 使用redis</h4><pre><code class=\"java\">public static void main(String[] args) &amp;#123;\n        Redis redis=new Redis();\n        redis.execute(jedis1 -&gt; &amp;#123;\n            System.out.println(jedis1.ping());\n        &amp;#125;);\n    &amp;#125;</code></pre>\n<h2 id=\"Lettuce（简单了解）\"><a href=\"#Lettuce（简单了解）\" class=\"headerlink\" title=\"Lettuce（简单了解）\"></a>Lettuce（简单了解）</h2><p>Github<a href=\"https://github.com/lettuce-io/lettuce-core\">官方地址</a></p>\n<h3 id=\"1-添加依赖-1\"><a href=\"#1-添加依赖-1\" class=\"headerlink\" title=\"1. 添加依赖\"></a>1. 添加依赖</h3><pre><code class=\"groovy\">compile group: &#39;io.lettuce&#39;, name: &#39;lettuce-core&#39;, version: &#39;6.0.0.M1&#39;</code></pre>\n<h3 id=\"2-简单测试案例\"><a href=\"#2-简单测试案例\" class=\"headerlink\" title=\"2. 简单测试案例\"></a>2. 简单测试案例</h3><pre><code class=\"java\">public class LettuceTest &amp;#123;\n    static RedisClient client = RedisClient.create(&quot;redis://kujin@192.168.2.168&quot;);//获取redis实例\n    public static void main(String[] args) &amp;#123;\n        baseUsage();//基本用法\n    &amp;#125;\n\n    private static void baseUsage() &amp;#123;\n        StatefulRedisConnection&lt;String, String&gt; connection = client.connect();\n        RedisStringCommands sync = connection.sync();//同步对象\n        sync.set(&quot;ku&quot;,&quot;jin&quot;);//设置值\n        String ku = (String) sync.get(&quot;ku&quot;);//获取值\n        System.out.println(ku);\n    &amp;#125;\n&amp;#125;</code></pre>\n<h2 id=\"Jedis和Lettuce比较\"><a href=\"#Jedis和Lettuce比较\" class=\"headerlink\" title=\"Jedis和Lettuce比较\"></a>Jedis和Lettuce比较</h2><ol>\n<li>Jedis在实现过程中是直接连接Redis的，在多个线程之间共享一个Jedis实例，这是线程不安全的，如果在多线程创建下使用需要创建连接池，这样每个jedis都有redis实例</li>\n<li>Lettuce基于Netty NIO框架构建，所以克服了jedis中线程不安全的问题，Lettuce支持同步，异步，以及响应调用，多个线程可以共享一个实例</li>\n</ol>\n<h2 id=\"Spring中使用Redis\"><a href=\"#Spring中使用Redis\" class=\"headerlink\" title=\"Spring中使用Redis\"></a>Spring中使用Redis</h2><h3 id=\"1-添加依赖-2\"><a href=\"#1-添加依赖-2\" class=\"headerlink\" title=\"1.添加依赖\"></a>1.添加依赖</h3><pre><code class=\"groovy\">compile group: &#39;org.springframework.data&#39;, name: &#39;spring-data-redis&#39;, version: &#39;2.3.2.RELEASE&#39;</code></pre>\n<h3 id=\"2-配置文件\"><a href=\"#2-配置文件\" class=\"headerlink\" title=\"2.配置文件\"></a>2.配置文件</h3><p>appcationContext.xml</p>\n<pre><code class=\"xml\">&lt;!--    Spring配置JedisPoolConfig对象--&gt;\n    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;\n        &lt;!--最大空闲数 --&gt;\n        &lt;property name=&quot;maxIdle&quot; value=&quot;50&quot; /&gt;\n        &lt;!--最大连接数 --&gt;\n        &lt;property name=&quot;maxTotal&quot; value=&quot;100&quot; /&gt;\n        &lt;!--最大等待时间 --&gt;\n        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;20000&quot; /&gt;\n    &lt;/bean&gt;\n\n&lt;!--spring配置JedisConnectionFactory--&gt;\n    &lt;bean id=&quot;connectionFactory&quot;\n        class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;&gt;\n        &lt;property name=&quot;hostName&quot; value=&quot;192.168.2.168&quot; /&gt;\n        &lt;property name=&quot;port&quot; value=&quot;6379&quot; /&gt;\n        &lt;property name=&quot;password&quot; value=&quot;kujin&quot;/&gt;\n        &lt;property name=&quot;poolConfig&quot; ref=&quot;poolConfig&quot; /&gt;\n    &lt;/bean&gt;\n\n&lt;!--Spring配置RedisTemplate--&gt;\n    &lt;bean id=&quot;jdkSerializationRedisSerializer&quot;\n        class=&quot;org.springframework.data.redis.serializer.JdkSerializationRedisSerializer&quot; /&gt;\n\n    &lt;bean id=&quot;stringRedisSerializer&quot;\n        class=&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot; /&gt;\n\n    &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;\n        &lt;property name=&quot;connectionFactory&quot; ref=&quot;connectionFactory&quot; /&gt;\n        &lt;property name=&quot;keySerializer&quot; ref=&quot;stringRedisSerializer&quot; /&gt;\n        &lt;property name=&quot;valueSerializer&quot; ref=&quot;jdkSerializationRedisSerializer&quot; /&gt;\n    &lt;/bean&gt;</code></pre>\n<h3 id=\"3-关键代码\"><a href=\"#3-关键代码\" class=\"headerlink\" title=\"3.关键代码\"></a>3.关键代码</h3><p>pojo</p>\n<pre><code class=\"java\">public class Role implements Serializable &amp;#123;\n\n    private static final long serialVersionUID = 6977402643848374753L;\n\n    private long id;\n    private String roleName;\n    private String note;\n\n    public long getId() &amp;#123;\n        return id;\n    &amp;#125;\n\n    public void setId(long id) &amp;#123;\n        this.id = id;\n    &amp;#125;\n\n    public String getRoleName() &amp;#123;\n        return roleName;\n    &amp;#125;\n\n    public void setRoleName(String roleName) &amp;#123;\n        this.roleName = roleName;\n    &amp;#125;\n\n    public String getNote() &amp;#123;\n        return note;\n    &amp;#125;\n\n    public void setNote(String note) &amp;#123;\n        this.note = note;\n    &amp;#125;\n\n&amp;#125;</code></pre>\n<p>main.java</p>\n<pre><code class=\"java\">private static void testSpring() &amp;#123;\n        //spring配置\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        //获取redis\n        RedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n        //角色实体\n        Role role = new Role();\n        role.setId(1L);\n        role.setRoleName(&quot;role_name_1&quot;);\n        role.setNote(&quot;note_1&quot;);\n        //redsi操作\n        redisTemplate.opsForValue().set(&quot;role_1&quot;, role);\n        Role role1 = (Role) redisTemplate.opsForValue().get(&quot;role_1&quot;);\n\n        System.out.println(role1.getRoleName());\n    &amp;#125;</code></pre>\n<h3 id=\"4-优化\"><a href=\"#4-优化\" class=\"headerlink\" title=\"4. 优化\"></a>4. 优化</h3><p>SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行</p>\n<pre><code class=\"java\">private static void testSessionCallback() &amp;#123;\n        ApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);\n        RedisTemplate redisTemplate = applicationContext.getBean(RedisTemplate.class);\n        Role role = new Role();\n        role.setId(1);\n        role.setRoleName(&quot;role_name_1&quot;);\n        role.setNote(&quot;role_note_1&quot;);\n        //SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行\n        SessionCallback callBack = new SessionCallback&lt;Role&gt;() &amp;#123;\n            @Override\n            public Role execute(RedisOperations ops) throws DataAccessException &amp;#123;\n                ops.boundValueOps(&quot;role_1&quot;).set(role);\n                return (Role) ops.boundValueOps(&quot;role_1&quot;).get();\n            &amp;#125;\n        &amp;#125;;\n        Role savedRole = (Role) redisTemplate.execute(callBack);\n        System.out.println(savedRole.getId());\n    &amp;#125;</code></pre>\n"},{"title":"简介","auther":"ku jin","_content":"Redis（Remote Dictionary Service）是一个NoSql数据库，基于c开发，键值对存储数据，运行在缓存内存中，高速缓存数据\n\n特点：\n\n- 支持数据持久化\n- 支持多种不同的数据结构\n- 支持从模式的数据备份\n- 自带发布订阅系统\n- 定时器，计数器\n\n![image-20200723112107089](images/%E7%AE%80%E4%BB%8B/image-20200723112107089.png)","source":"_posts/随心记/Redis学习/简介.md","raw":"---\ntitle: 简介 # 标题=文件名\nauther: ku jin # 作者\ncategories: # 分类=根文件夹名\n - Redis学习\ntags: # 标签=目标文件夹\n - 简介 \n---\nRedis（Remote Dictionary Service）是一个NoSql数据库，基于c开发，键值对存储数据，运行在缓存内存中，高速缓存数据\n\n特点：\n\n- 支持数据持久化\n- 支持多种不同的数据结构\n- 支持从模式的数据备份\n- 自带发布订阅系统\n- 定时器，计数器\n\n![image-20200723112107089](images/%E7%AE%80%E4%BB%8B/image-20200723112107089.png)","slug":"随心记/Redis学习/简介","published":1,"date":"2020-08-02T23:42:43.899Z","updated":"2020-08-02T23:42:59.792Z","_id":"ckdcza4qc00byrkam5n984n5j","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Redis（Remote Dictionary Service）是一个NoSql数据库，基于c开发，键值对存储数据，运行在缓存内存中，高速缓存数据</p>\n<p>特点：</p>\n<ul>\n<li>支持数据持久化</li>\n<li>支持多种不同的数据结构</li>\n<li>支持从模式的数据备份</li>\n<li>自带发布订阅系统</li>\n<li>定时器，计数器</li>\n</ul>\n<p><img src=\"images/%E7%AE%80%E4%BB%8B/image-20200723112107089.png\" alt=\"image-20200723112107089\"></p>\n<script>\n        document.querySelectorAll('.github-emoji')\n          .forEach(el => {\n            if (!el.dataset.src) { return; }\n            const img = document.createElement('img');\n            img.style = 'display:none !important;';\n            img.src = el.dataset.src;\n            img.addEventListener('error', () => {\n              img.remove();\n              el.style.color = 'inherit';\n              el.style.backgroundImage = 'none';\n              el.style.background = 'none';\n            });\n            img.addEventListener('load', () => {\n              img.remove();\n            });\n            document.body.appendChild(img);\n          });\n      </script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>Redis（Remote Dictionary Service）是一个NoSql数据库，基于c开发，键值对存储数据，运行在缓存内存中，高速缓存数据</p>\n<p>特点：</p>\n<ul>\n<li>支持数据持久化</li>\n<li>支持多种不同的数据结构</li>\n<li>支持从模式的数据备份</li>\n<li>自带发布订阅系统</li>\n<li>定时器，计数器</li>\n</ul>\n<p><img src=\"images/%E7%AE%80%E4%BB%8B/image-20200723112107089.png\" alt=\"image-20200723112107089\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckdcz9hu70009rkam1fvk8mhn","category_id":"ckdd06ylu000a2cam0irh7vcb","_id":"ckddqczm70000r8am0yzq8sdp"},{"post_id":"ckdcza4mb003trkamc7etfji8","category_id":"ckdd06ylu000a2cam0irh7vcb","_id":"ckddqczm90001r8amay2pbhwj"},{"post_id":"ckdcza4ma003qrkam9ib0b7nn","category_id":"ckdd06ylu000a2cam0irh7vcb","_id":"ckddqczmc0002r8am4syphc3p"},{"post_id":"ckdcza4mc003urkamg6x74ky5","category_id":"ckdd06ylu000a2cam0irh7vcb","_id":"ckddqczme0003r8am0ka719fw"},{"post_id":"ckdcza4md003vrkam2lip2ff1","category_id":"ckdd06ylu000a2cam0irh7vcb","_id":"ckddqczmg0004r8am7pw2272s"},{"post_id":"ckdcza4g7001zrkam9ve52h2u","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczmj0005r8amc7acdjm5"},{"post_id":"ckdcza4gk0024rkam1fyn0oxl","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczml0006r8am3kxnay6u"},{"post_id":"ckdcza4gx0029rkam1y6i24dq","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczmo0007r8am98qq3x74"},{"post_id":"ckdcza4h0002arkamh4srelyg","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczms0008r8am4ul73ib5"},{"post_id":"ckdcza4h1002drkam8kj670yb","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczmu0009r8ame7s5dmsl"},{"post_id":"ckdcza4h2002erkamf0stde74","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczmx000ar8amgg17byh9"},{"post_id":"ckdcza4hk002trkamb7ppa0mb","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczn0000br8am29lf8tgw"},{"post_id":"ckdcza4im002zrkambd6zd40p","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczn1000cr8am5p80d7x1"},{"post_id":"ckdcza4jg0038rkamet5g03tn","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczn3000dr8am6igkegap"},{"post_id":"ckdcz9hz5000arkam49907qmw","category_id":"ckdd06ym6000g2camhqhg7iy5","_id":"ckddqczn4000er8amac0l1zhb"},{"post_id":"ckdcz9i4g000crkamasa380ur","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczn6000fr8am9ler7l1w"},{"post_id":"ckdcza4mg003zrkam41qmbx8q","category_id":"ckdd06ym6000g2camhqhg7iy5","_id":"ckddqczn8000gr8amcnvn2v67"},{"post_id":"ckdcz9i3x000brkam5jc04frv","category_id":"ckdd06ymc000l2cam2sx0frhp","_id":"ckddqczn9000hr8ame9sn7fju"},{"post_id":"ckdcz9i6n000irkamdd2k99sj","category_id":"ckdd06ymk000r2cam482x1gq2","_id":"ckddqcznc000ir8am0lan09st"},{"post_id":"ckdcza4mx004nrkam9p1j47wh","category_id":"ckdd06ymc000l2cam2sx0frhp","_id":"ckddqcznd000jr8am3d79e4h9"},{"post_id":"ckdcz9i6o000jrkam93c66tc1","category_id":"ckdd06ymk000r2cam482x1gq2","_id":"ckddqczni000kr8amd9xrgdf1"},{"post_id":"ckdcz9i6p000krkam93sz0h5c","category_id":"ckdd06ymk000r2cam482x1gq2","_id":"ckddqcznk000lr8amfs01c8iq"},{"post_id":"ckdcz9i6v000lrkam9qck4k7b","category_id":"ckdd06ymk000r2cam482x1gq2","_id":"ckddqcznl000mr8amb8ouaqc2"},{"post_id":"ckdcz9i72000mrkamah4v2439","category_id":"ckdd06ymk000r2cam482x1gq2","_id":"ckddqcznn000nr8amd1gebypg"},{"post_id":"ckdcz9i7x000prkamd3jvhe0g","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqczno000or8am1cnx7eup"},{"post_id":"ckdcz9i7u000nrkam10rjal0e","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqcznq000pr8amgekmdifk"},{"post_id":"ckdcz9i7y000qrkamhq3thhpg","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqcznr000qr8am9llz3drc"},{"post_id":"ckdcz9i7z000rrkam09wwg5fe","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqczns000rr8amf3vsawhb"},{"post_id":"ckdcz9i80000srkamgi5bbmml","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqcznu000sr8am03wf64z2"},{"post_id":"ckdcz9i7v000orkam655u4n5i","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqczny000tr8am1ql2g52m"},{"post_id":"ckdcz9i81000trkam1vqce1fm","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqcznz000ur8amay5e8wuj"},{"post_id":"ckdcza4nu0065rkam1sgbfiyt","category_id":"ckdd06ymw00112cam2rn5hwgc","_id":"ckddqczo1000vr8amhtdec2on"},{"post_id":"ckdcz9i83000urkamcv2749fy","category_id":"ckdd06ymz00132cam56xj91k0","_id":"ckddqczo4000wr8ambd177gta"},{"post_id":"ckdcz9iqc000xrkam4w7v4iqd","category_id":"ckdd06ynl001k2cam8nbw9l4j","_id":"ckddqczo5000xr8am5c340go9"},{"post_id":"ckdcza4oz008brkamdbt4dalq","category_id":"ckdd06ynl001k2cam8nbw9l4j","_id":"ckddqczo7000yr8amewfs7kjv"},{"post_id":"ckdcz9iqx000yrkamhtjzem0k","category_id":"ckdd06ynl001k2cam8nbw9l4j","_id":"ckddqczo8000zr8ama02y1gtt"},{"post_id":"ckdcza4p1008frkamfx35963t","category_id":"ckdd06ynl001k2cam8nbw9l4j","_id":"ckddqczo90010r8amgyy27od2"},{"post_id":"ckdcz9irq000zrkam3nxh8cl5","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczob0011r8am2sts6tf9"},{"post_id":"ckdcz9irt0010rkam3wqaheem","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczod0012r8amb8cf1nd2"},{"post_id":"ckdcz9irv0011rkamguh5ft1p","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczof0013r8am6ml160eu"},{"post_id":"ckdcz9ise0014rkam8ez8g949","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczog0014r8amhd3gdpu5"},{"post_id":"ckdcz9isb0013rkam7k443chw","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczoi0015r8am6pm2009k"},{"post_id":"ckdcz9itn0015rkam26zn1avg","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczoj0016r8am07qm05jp"},{"post_id":"ckdcza4pc0092rkamdt4y5rtu","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczok0017r8amersq8rxm"},{"post_id":"ckdcza4pd0096rkam8vdy924h","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczom0018r8am6szc2l8w"},{"post_id":"ckdcz9iua0016rkam7ut51ahm","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczoo0019r8amghlo7qzc"},{"post_id":"ckdcz9is50012rkam9bmv42tg","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczoo001ar8amen4j60mu"},{"post_id":"ckdcz9iue0017rkamfjnncq9a","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczoq001br8am3fs11mk2"},{"post_id":"ckdcza4pa008xrkam37je28z2","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczor001cr8am8uvh2zyz"},{"post_id":"ckdcz9ium0018rkam2sdi60zw","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczot001dr8am092q52y8"},{"post_id":"ckdcz9iup0019rkam19j1051h","category_id":"ckdd06ynv001r2cam61qx2zva","_id":"ckddqczp3001fr8am8fx8gvl5"},{"post_id":"ckdcz9iuy001arkam94tvd4hi","category_id":"ckdd06yom002j2cam73znfekg","_id":"ckddqczp4001gr8am7tqd25z9"},{"post_id":"ckdcza4q200berkam9ji1ef3b","category_id":"ckdd06yom002m2cam4wy87y1e","_id":"ckddqczp8001ir8amhqrfczld"},{"post_id":"ckdcz9jfk001drkam1m6t9vem","category_id":"ckdd06yot00382camaup3d5rm","_id":"ckddqczpa001kr8am1ts41z21"},{"post_id":"ckdcza4ou0083rkam0xi868sj","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001lr8ame3axhezo"},{"post_id":"ckdcza4q300bhrkam6pws7rcw","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001mr8am4fsl52in"},{"post_id":"ckdcza4q400birkam5z692gao","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001nr8am5hawhay9"},{"post_id":"ckdcza4q500bjrkamcqve8pyq","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001or8amebktga1f"},{"post_id":"ckdcza4q700bnrkamekw3d9z8","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001pr8ambwylf2dh"},{"post_id":"ckdcza4q700borkamdcmccr0u","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpc001qr8am9qte97ea"},{"post_id":"ckdcza4q900bsrkambso90ev4","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpd001rr8amf3xdfyu3"},{"post_id":"ckdcza4qa00burkamgi9n8pw2","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpd001sr8am5fqf2ml3"},{"post_id":"ckdcz9jel001brkamduopdtx7","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpd001tr8am14vheio1"},{"post_id":"ckdcza4qc00byrkam5n984n5j","category_id":"ckdd06yom002o2cam5weq337a","_id":"ckddqczpd001ur8am97kpg7jr"},{"post_id":"ckdcz9iij000vrkamexgk3gu2","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd001vr8am8yf9dqkm"},{"post_id":"ckdcz9ij4000wrkamg1vy1m4r","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd001wr8am977zcs58"},{"post_id":"ckdcza4o8006orkamf10uel9v","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd001xr8amd46teaq8"},{"post_id":"ckdcza4oa006qrkam0le4bi82","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd001yr8am96lybyrw"},{"post_id":"ckdcza4o6006mrkambzhge5hj","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd001zr8am4o3i5r5n"},{"post_id":"ckdcza4ob006urkam9mw15xub","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd0020r8am35zxe2bn"},{"post_id":"ckdcza4oc006vrkamcpeoedde","category_id":"ckdd06yot003a2camdk4ketsk","_id":"ckddqczpd0021r8am62mt2dc0"},{"post_id":"ckdcz9jfu001hrkam7wc59z0i","category_id":"ckdd06yox003o2camh5q06hp4","_id":"ckddqczpd0022r8am5demdi2i"},{"post_id":"ckdcz9jfm001frkam6zcvb91f","category_id":"ckdd06yox003q2cam096nc1vw","_id":"ckddqczpd0023r8am3x20c7uv"},{"post_id":"ckdcz9jfl001erkam2qbv2on8","category_id":"ckdd06yox003q2cam096nc1vw","_id":"ckddqczpe0024r8ama403he5c"},{"post_id":"ckdcz9jfg001crkamept4gt49","category_id":"ckdd06yox003q2cam096nc1vw","_id":"ckddqczpe0025r8am3dhee63s"},{"post_id":"ckdcz9jfm001grkam81ljbe7w","category_id":"ckdd06yox003q2cam096nc1vw","_id":"ckddqczpe0026r8am3jfb8vf9"},{"post_id":"ckdcz9i4t000drkambglfaxia","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczpe0027r8am8vgb4dd1"},{"post_id":"ckdcz9jiz001irkamdt0kdfmk","category_id":"ckdd06yot00382camaup3d5rm","_id":"ckddqczpe0028r8am8w441wzi"},{"post_id":"ckdcz9i6e000hrkam455kar7k","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczpe0029r8amb4zb5gqj"},{"post_id":"ckdcz9jj0001jrkam4ni21hkz","category_id":"ckdd06yot00382camaup3d5rm","_id":"ckddqczpe002ar8amh1gl51o4"},{"post_id":"ckdcz9jj1001krkamhh4a1s6n","category_id":"ckdd06yot00382camaup3d5rm","_id":"ckddqczpe002br8am5o486lzb"},{"post_id":"ckdcz9jj1001lrkam133qf6q8","category_id":"ckdd06yot00382camaup3d5rm","_id":"ckddqczpe002cr8am7qjd84ws"},{"post_id":"ckdcz9jml001mrkam5p1m8h9v","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpe002dr8ama5mj05zr"},{"post_id":"ckdcz9jmo001rrkam2gdmalvi","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpe002er8amb7w75zwa"},{"post_id":"ckdcz9jml001nrkam5tne54ib","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpe002fr8am8gfa9rdm"},{"post_id":"ckdcz9jmo001srkam08jdd95d","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpf002gr8amfniw6gmx"},{"post_id":"ckdcz9jmn001prkamhyao5zqx","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpf002hr8amelug98pn"},{"post_id":"ckdcz9jmp001trkamaqybfasd","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpf002ir8ame2oa36u9"},{"post_id":"ckdcz9jmn001qrkam0rjq07f7","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpf002jr8am3qlca5ks"},{"post_id":"ckdcz9jmq001urkamfyyi6xs8","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpp002kr8am7tjh50h5"},{"post_id":"ckdcz9jmm001orkamfwjo1fta","category_id":"ckddqczou001er8amcdnmebux","_id":"ckddqczpq002lr8amabqibwh4"},{"post_id":"ckdcz9i5n000frkam30q9hrbu","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczpu002mr8am62xi493q"},{"post_id":"ckdcza4nc0058rkamfxw0elpi","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczpz002nr8ambwot8bzv"},{"post_id":"ckdcz9i5o000grkamg54lb78g","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczpz002or8am3lcq4h27"},{"post_id":"ckdcz9i4x000erkam0p01bgtd","category_id":"ckdd06ymi000p2camgf6c3yq3","_id":"ckddqczq0002pr8amas5k0vel"},{"post_id":"ckdcza4ij002yrkamb7qy2a93","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczq0002qr8am7c949svo"},{"post_id":"ckdcza4l3003drkam9rcj62k8","category_id":"ckdd06yle00012camadnz0mg0","_id":"ckddqczq0002rr8am0jj0feuc"},{"post_id":"ckdcza4q100bdrkameh7i65be","category_id":"ckdd06yom002m2cam4wy87y1e","_id":"ckddqczq0002sr8am4tfkhyeh"}],"PostTag":[{"post_id":"ckdcza4g7001zrkam9ve52h2u","tag_id":"ckdcza4g90021rkam0o0jfzmz","_id":"ckdcza4g90022rkama54r5rav"},{"post_id":"ckdcza4gk0024rkam1fyn0oxl","tag_id":"ckdcza4gm0026rkam3vm84eda","_id":"ckdcza4gm0027rkamcdgd9p63"},{"post_id":"ckdcza4h0002arkamh4srelyg","tag_id":"ckdcza4h4002grkameblf8dsf","_id":"ckdcza4h5002lrkam641m0ozb"},{"post_id":"ckdcza4h1002drkam8kj670yb","tag_id":"ckdcza4h5002krkametq3596i","_id":"ckdcza4h6002prkame74xapy3"},{"post_id":"ckdcza4h2002erkamf0stde74","tag_id":"ckdcza4h6002orkamhr785u6y","_id":"ckdcza4h7002rrkam781u24d2"},{"post_id":"ckdcza4hk002trkamb7ppa0mb","tag_id":"ckdcza4ho002vrkamd4bs2oqk","_id":"ckdcza4ho002wrkamajp5bwy1"},{"post_id":"ckdcza4ij002yrkamb7qy2a93","tag_id":"ckdcza4in0031rkam6mej8soh","_id":"ckdcza4ip0034rkamhxon03tf"},{"post_id":"ckdcza4im002zrkambd6zd40p","tag_id":"ckdcza4io0033rkamdp3o7wa0","_id":"ckdcza4ip0036rkam37yo33bu"},{"post_id":"ckdcza4jg0038rkamet5g03tn","tag_id":"ckdcza4jm003arkam6f2d31jf","_id":"ckdcza4jn003brkam1jqg76zl"},{"post_id":"ckdcza4l3003drkam9rcj62k8","tag_id":"ckdcza4ld003frkam6h296843","_id":"ckdcza4lf003irkamav199l69"},{"post_id":"ckdcz9hu70009rkam1fvk8mhn","tag_id":"ckdcza4lf003hrkam4xn65grb","_id":"ckdcza4lg003mrkamdifx8qoo"},{"post_id":"ckdcz9hz5000arkam49907qmw","tag_id":"ckdcza4lg003lrkamerd1f9c2","_id":"ckdcza4lg003orkamcksibphc"},{"post_id":"ckdcz9i3x000brkam5jc04frv","tag_id":"ckdcza4mb003srkam28l2hluh","_id":"ckdcza4mg003yrkam46qphjid"},{"post_id":"ckdcza4ma003qrkam9ib0b7nn","tag_id":"ckdcza4me003xrkamcni14fpo","_id":"ckdcza4mk0043rkam935p7r9q"},{"post_id":"ckdcza4mb003trkamc7etfji8","tag_id":"ckdcza4mj0042rkamc8oyhl34","_id":"ckdcza4ml0047rkam0exlgkx3"},{"post_id":"ckdcza4mc003urkamg6x74ky5","tag_id":"ckdcza4mk0046rkam5stu3yn9","_id":"ckdcza4mm004brkamcd7b3b1k"},{"post_id":"ckdcza4md003vrkam2lip2ff1","tag_id":"ckdcza4ml004arkam8goadfyf","_id":"ckdcza4mm004frkamcoil4h3o"},{"post_id":"ckdcza4mg003zrkam41qmbx8q","tag_id":"ckdcza4mm004erkamfpxaga2f","_id":"ckdcza4mn004jrkam53v96y1t"},{"post_id":"ckdcz9i4g000crkamasa380ur","tag_id":"ckdcza4mn004irkame7ds0tmn","_id":"ckdcza4mn004lrkam6p9k99at"},{"post_id":"ckdcz9i4x000erkam0p01bgtd","tag_id":"ckdcza4mb003srkam28l2hluh","_id":"ckdcza4n2004qrkameyngab6a"},{"post_id":"ckdcz9i5n000frkam30q9hrbu","tag_id":"ckdcza4mb003srkam28l2hluh","_id":"ckdcza4n3004trkam6g6c0j9v"},{"post_id":"ckdcza4mx004nrkam9p1j47wh","tag_id":"ckdcza4mz004prkama8dd0b3h","_id":"ckdcza4n4004vrkam3qdxgm8k"},{"post_id":"ckdcz9i4t000drkambglfaxia","tag_id":"ckdcza4n3004srkamgsfif1cb","_id":"ckdcza4n50050rkam4i8bfmqv"},{"post_id":"ckdcz9i6e000hrkam455kar7k","tag_id":"ckdcza4n4004yrkam5y9s25kv","_id":"ckdcza4n60054rkamehzk3tqp"},{"post_id":"ckdcz9i6n000irkamdd2k99sj","tag_id":"ckdcza4n50053rkamdl7q15qf","_id":"ckdcza4n60056rkam61sfdz2z"},{"post_id":"ckdcz9i7x000prkamd3jvhe0g","tag_id":"ckdcza4ne005arkam6eln7qcr","_id":"ckdcza4nh005drkamdwjuafsp"},{"post_id":"ckdcza4nc0058rkamfxw0elpi","tag_id":"ckdcza4ng005crkameabagl0l","_id":"ckdcza4nk005hrkam9j34bpr8"},{"post_id":"ckdcz9i5o000grkamg54lb78g","tag_id":"ckdcza4nj005grkama3liejbm","_id":"ckdcza4nl005lrkam693t9uqw"},{"post_id":"ckdcz9iij000vrkamexgk3gu2","tag_id":"ckdcza4nl005krkamhfuof4cr","_id":"ckdcza4nm005prkam88fi70tn"},{"post_id":"ckdcz9i6o000jrkam93c66tc1","tag_id":"ckdcza4nl005orkamboq88mzx","_id":"ckdcza4nm005trkam6nh40erw"},{"post_id":"ckdcz9i6p000krkam93sz0h5c","tag_id":"ckdcza4nm005srkam6lcogti1","_id":"ckdcza4nn005xrkam763580mz"},{"post_id":"ckdcz9i6v000lrkam9qck4k7b","tag_id":"ckdcza4nn005wrkam87u19ktk","_id":"ckdcza4nn0061rkam6jio92v3"},{"post_id":"ckdcz9i72000mrkamah4v2439","tag_id":"ckdcza4nn0060rkam9q0bdv7b","_id":"ckdcza4no0063rkamh0djb7hn"},{"post_id":"ckdcza4nu0065rkam1sgbfiyt","tag_id":"ckdcza4nw0067rkamftuhf1na","_id":"ckdcza4nz006arkam5rkzcl6r"},{"post_id":"ckdcz9i7u000nrkam10rjal0e","tag_id":"ckdcza4ny0069rkam46je3wmq","_id":"ckdcza4o2006erkame2hk8jqt"},{"post_id":"ckdcz9i7y000qrkamhq3thhpg","tag_id":"ckdcza4o1006drkam9tyl62yt","_id":"ckdcza4o4006irkam4f7n0tke"},{"post_id":"ckdcz9i7z000rrkam09wwg5fe","tag_id":"ckdcza4o3006hrkamcbh665d0","_id":"ckdcza4o8006nrkam2rbz3eqw"},{"post_id":"ckdcz9i80000srkamgi5bbmml","tag_id":"ckdcza4o5006lrkam5jis8pu1","_id":"ckdcza4ob006trkam911lc5um"},{"post_id":"ckdcz9i7v000orkam655u4n5i","tag_id":"ckdcza4ob006srkamh2b59km2","_id":"ckdcza4oe006zrkam910m72xr"},{"post_id":"ckdcz9i81000trkam1vqce1fm","tag_id":"ckdcza4oe006yrkam17szf2tq","_id":"ckdcza4of0073rkam9cuk3nd3"},{"post_id":"ckdcz9i83000urkamcv2749fy","tag_id":"ckdcza4of0072rkam80l05fib","_id":"ckdcza4of0077rkam3uhleyes"},{"post_id":"ckdcz9iqc000xrkam4w7v4iqd","tag_id":"ckdcza4of0076rkam9s5w3d3k","_id":"ckdcza4og007brkamhmpt5hru"},{"post_id":"ckdcz9irq000zrkam3nxh8cl5","tag_id":"ckdcza4og007arkam7gzs4anq","_id":"ckdcza4oh007frkam2fpp96iv"},{"post_id":"ckdcz9ij4000wrkamg1vy1m4r","tag_id":"ckdcza4og007erkam5w1chvwn","_id":"ckdcza4oi007jrkam9uod6don"},{"post_id":"ckdcza4o6006mrkambzhge5hj","tag_id":"ckdcza4oh007irkamgztc0pdq","_id":"ckdcza4oj007nrkamd86l2zuf"},{"post_id":"ckdcza4o8006orkamf10uel9v","tag_id":"ckdcza4oi007mrkam4x85bwfc","_id":"ckdcza4oj007rrkam8obhfiug"},{"post_id":"ckdcza4oa006qrkam0le4bi82","tag_id":"ckdcza4oj007qrkam51v5dhh7","_id":"ckdcza4ok007vrkamf9uj9vkx"},{"post_id":"ckdcza4ob006urkam9mw15xub","tag_id":"ckdcza4ok007urkamabq4ewip","_id":"ckdcza4ol007zrkamfco01rif"},{"post_id":"ckdcza4oc006vrkamcpeoedde","tag_id":"ckdcza4ok007yrkamfr2gay52","_id":"ckdcza4ol0081rkam7vdyfhmn"},{"post_id":"ckdcza4ou0083rkam0xi868sj","tag_id":"ckdcza4lg003lrkamerd1f9c2","_id":"ckdcza4ow0086rkambrp19pkt"},{"post_id":"ckdcz9iuy001arkam94tvd4hi","tag_id":"ckdcza4ov0085rkamh7iq3p1f","_id":"ckdcza4oy008arkambktubhh9"},{"post_id":"ckdcz9jfk001drkam1m6t9vem","tag_id":"ckdcza4oy0089rkam5vzvfxjf","_id":"ckdcza4p1008grkamdo2t8hll"},{"post_id":"ckdcz9jj1001krkamhh4a1s6n","tag_id":"ckdcza4p0008erkambjp48mg2","_id":"ckdcza4p3008krkamhsgk06ti"},{"post_id":"ckdcz9jj1001lrkam133qf6q8","tag_id":"ckdcza4p2008jrkam8aap8nrs","_id":"ckdcza4p5008orkam46pxaq89"},{"post_id":"ckdcz9jiz001irkamdt0kdfmk","tag_id":"ckdcza4p4008nrkam0p38eya9","_id":"ckdcza4p7008srkam1j4ugn09"},{"post_id":"ckdcza4oz008brkamdbt4dalq","tag_id":"ckdcza4p7008rrkam3bwp2e81","_id":"ckdcza4pa008wrkam2nubh1g5"},{"post_id":"ckdcza4p1008frkamfx35963t","tag_id":"ckdcza4p9008vrkam6t5j21or","_id":"ckdcza4pc0091rkamejd41w0r"},{"post_id":"ckdcz9iqx000yrkamhtjzem0k","tag_id":"ckdcza4pb0090rkam52zgg6wx","_id":"ckdcza4pf0097rkamchrih62q"},{"post_id":"ckdcz9iua0016rkam7ut51ahm","tag_id":"ckdcza4mn004irkame7ds0tmn","_id":"ckdcza4pi009brkam3q9t71o6"},{"post_id":"ckdcz9jfu001hrkam7wc59z0i","tag_id":"ckdcza4pd0095rkam3ikae9yk","_id":"ckdcza4pi009crkam1adlff35"},{"post_id":"ckdcz9jfl001erkam2qbv2on8","tag_id":"ckdcza4ph009arkamfgmh9hy7","_id":"ckdcza4pk009hrkam4p4t3z4n"},{"post_id":"ckdcz9jmo001rrkam2gdmalvi","tag_id":"ckdcza4pj009frkam81n71a6w","_id":"ckdcza4pm009lrkam905g666z"},{"post_id":"ckdcz9irt0010rkam3wqaheem","tag_id":"ckdcza4pl009krkam6k5rcca7","_id":"ckdcza4po009prkam0zxggl3g"},{"post_id":"ckdcz9irv0011rkamguh5ft1p","tag_id":"ckdcza4pn009orkamh3cu3mi5","_id":"ckdcza4pp009trkam9y4rd6dx"},{"post_id":"ckdcz9is50012rkam9bmv42tg","tag_id":"ckdcza4ph009arkamfgmh9hy7","_id":"ckdcza4pq009xrkam1fzm20bk"},{"post_id":"ckdcz9isb0013rkam7k443chw","tag_id":"ckdcza4pq009wrkamdy9s70q0","_id":"ckdcza4pr00a1rkam822k40vy"},{"post_id":"ckdcz9ise0014rkam8ez8g949","tag_id":"ckdcza4pq00a0rkam4do1a0hg","_id":"ckdcza4pr00a5rkambj249rw9"},{"post_id":"ckdcza4pa008xrkam37je28z2","tag_id":"ckdcza4pr00a4rkam0sz38kzv","_id":"ckdcza4ps00a9rkam5nm49nby"},{"post_id":"ckdcz9itn0015rkam26zn1avg","tag_id":"ckdcza4pr00a8rkam4zbb34eu","_id":"ckdcza4ps00adrkamhwfwhydf"},{"post_id":"ckdcza4pc0092rkamdt4y5rtu","tag_id":"ckdcza4ps00acrkambr2rhzzx","_id":"ckdcza4pt00ahrkamakxv030n"},{"post_id":"ckdcza4pd0096rkam8vdy924h","tag_id":"ckdcza4pt00agrkamfga653mw","_id":"ckdcza4pt00alrkam8who2v0w"},{"post_id":"ckdcz9iue0017rkamfjnncq9a","tag_id":"ckdcza4pt00akrkam84vr8g80","_id":"ckdcza4pu00aprkam8cggbblc"},{"post_id":"ckdcz9ium0018rkam2sdi60zw","tag_id":"ckdcza4pu00aorkam48p7f1yi","_id":"ckdcza4pv00atrkamg85j24y0"},{"post_id":"ckdcz9iup0019rkam19j1051h","tag_id":"ckdcza4pu00asrkamff5jgu75","_id":"ckdcza4pv00axrkam5cjja3zk"},{"post_id":"ckdcz9jmn001prkamhyao5zqx","tag_id":"ckdcza4pv00awrkamdp5obd4m","_id":"ckdcza4pw00b1rkamhxzecqfi"},{"post_id":"ckdcz9jml001mrkam5p1m8h9v","tag_id":"ckdcza4pw00b0rkameop0g1ek","_id":"ckdcza4pw00b5rkam4hvy6ngo"},{"post_id":"ckdcz9jmp001trkamaqybfasd","tag_id":"ckdcza4pw00b4rkam8wjzh28j","_id":"ckdcza4px00b9rkamf09s34e5"},{"post_id":"ckdcz9jmm001orkamfwjo1fta","tag_id":"ckdcza4px00b8rkam9f7ect19","_id":"ckdcza4px00bbrkam8d659fpq"},{"post_id":"ckdcza4q100bdrkameh7i65be","tag_id":"ckdcza4q300bgrkamfva6cjkr","_id":"ckdcza4q700bmrkamd8kc899l"},{"post_id":"ckdcza4q200berkam9ji1ef3b","tag_id":"ckdcza4q600blrkam920q3a5e","_id":"ckdcza4q900btrkamcto3g545"},{"post_id":"ckdcza4q300bhrkam6pws7rcw","tag_id":"ckdcza4q800brrkam9ptuba7k","_id":"ckdcza4qe00bzrkame2jibbjq"},{"post_id":"ckdcza4qc00byrkam5n984n5j","tag_id":"ckdcza4ml004arkam8goadfyf","_id":"ckdcza4qf00c1rkam8xey2435"},{"post_id":"ckdcza4q400birkam5z692gao","tag_id":"ckdcza4qc00bxrkamcxc75bnl","_id":"ckdcza4qg00c4rkambmz16hwr"},{"post_id":"ckdcz9jfm001frkam6zcvb91f","tag_id":"ckdcza4pq00a0rkam4do1a0hg","_id":"ckdcza4qi00c9rkambc2t4uo7"},{"post_id":"ckdcza4q500bjrkamcqve8pyq","tag_id":"ckdcza4qf00c3rkamgrkj5vei","_id":"ckdcza4qj00carkamayai47fz"},{"post_id":"ckdcza4q700bnrkamekw3d9z8","tag_id":"ckdcza4qi00c8rkamcrjz306t","_id":"ckdcza4qo00cfrkam0t0q5e04"},{"post_id":"ckdcza4q700borkamdcmccr0u","tag_id":"ckdcza4qn00cdrkam1228b169","_id":"ckdcza4qq00cjrkam4p21atzo"},{"post_id":"ckdcza4q900bsrkambso90ev4","tag_id":"ckdcza4qp00cirkam6wzn6i9b","_id":"ckdcza4qs00cnrkam5lfs6opn"},{"post_id":"ckdcza4qa00burkamgi9n8pw2","tag_id":"ckdcza4qs00cmrkam394v83qk","_id":"ckdcza4qt00crrkam93bi2gi6"},{"post_id":"ckdcz9jel001brkamduopdtx7","tag_id":"ckdcza4qt00cqrkam8eaj1tey","_id":"ckdcza4qu00cvrkam0wqw1hj4"},{"post_id":"ckdcz9jj0001jrkam4ni21hkz","tag_id":"ckdcza4qu00curkam484va5pf","_id":"ckdcza4qv00czrkam57gd231m"},{"post_id":"ckdcz9jfg001crkamept4gt49","tag_id":"ckdcza4qu00cyrkam5i6oep4n","_id":"ckdcza4qv00d3rkamc82k7bpb"},{"post_id":"ckdcz9jfm001grkam81ljbe7w","tag_id":"ckdcza4qv00d2rkam69kb7hep","_id":"ckdcza4qw00d7rkambpfyakgc"},{"post_id":"ckdcz9jmn001qrkam0rjq07f7","tag_id":"ckdcza4qw00d6rkam8kr5dctd","_id":"ckdcza4qx00dbrkam9fy5g9ev"},{"post_id":"ckdcz9jml001nrkam5tne54ib","tag_id":"ckdcza4qw00darkamhiuzanyv","_id":"ckdcza4qy00dfrkam5qn27vpy"},{"post_id":"ckdcz9jmo001srkam08jdd95d","tag_id":"ckdcza4qx00derkamhvvjeetp","_id":"ckdcza4qy00djrkam1p454hp9"},{"post_id":"ckdcz9jmq001urkamfyyi6xs8","tag_id":"ckdcza4qy00dirkamde9lhwcn","_id":"ckdcza4qz00dlrkam4wjn03bl"},{"post_id":"ckdcza4gx0029rkam1y6i24dq","tag_id":"ckdcza4h1002crkam49jbcfj0","_id":"ckddq2ksq0000vkam6hk973vb"}],"Tag":[{"name":"hexo","_id":"ckdclsrd3000004am3heb39aw"},{"name":"Typora","_id":"ckdcmq6630001kgam3fgq506v"},{"name":"Markdown","_id":"ckdcmq6640002kgam6fx66gzg"},{"name":"测试","_id":"ckdcnepg20000qwam0zsc2z59"},{"name":"测试文章","_id":"ckdcz47la0002rkam0ym29vt5"},{"name":"替换","_id":"ckdcza4ff001wrkam3ww3bzff"},{"name":"3-1网络访问","_id":"ckdcza4g90021rkam0o0jfzmz"},{"name":"3-2-1安装Apache服务器","_id":"ckdcza4gm0026rkam3vm84eda"},{"name":"3-2网络访问-数据格式","_id":"ckdcza4h1002crkam49jbcfj0"},{"name":"3-3 封装网络请求","_id":"ckdcza4h4002grkameblf8dsf"},{"name":"3-4 开源网络封装库Retofit","_id":"ckdcza4h5002krkametq3596i"},{"name":"Android Studio使用技巧","_id":"ckdcza4h6002orkamhr785u6y"},{"name":"BottomNavigationView控件学习md","_id":"ckdcza4ho002vrkamd4bs2oqk"},{"name":"Jetpack","_id":"ckdcza4in0031rkam6mej8soh"},{"name":"使用 ViewModel 处理配置更改","_id":"ckdcza4io0033rkamdp3o7wa0"},{"name":"视图导航","_id":"ckdcza4jm003arkam6f2d31jf"},{"name":"基础学习","_id":"ckdcza4ld003frkam6h296843"},{"name":"1-1 安装bitnami虚拟机","_id":"ckdcza4lf003hrkam4xn65grb"},{"name":"1-1-安装","_id":"ckdcza4lg003lrkamerd1f9c2"},{"name":"1-1 简介","_id":"ckdcza4mb003srkam28l2hluh"},{"name":"1-2 连接SSH","_id":"ckdcza4me003xrkamcni14fpo"},{"name":"1-3 安装桌面","_id":"ckdcza4mj0042rkamc8oyhl34"},{"name":"2-1文档学习","_id":"ckdcza4mk0046rkam5stu3yn9"},{"name":"简介","_id":"ckdcza4ml004arkam8goadfyf"},{"name":"1-2-常用操作","_id":"ckdcza4mm004erkamfpxaga2f"},{"name":"Untitled","_id":"ckdcza4mn004irkame7ds0tmn"},{"name":"1-2 使用教程","_id":"ckdcza4mz004prkama8dd0b3h"},{"name":"1-1简介","_id":"ckdcza4n3004srkamgsfif1cb"},{"name":"1-1 简单使用","_id":"ckdcza4n4004yrkam5y9s25kv"},{"name":"1-1 Git 设置和配置","_id":"ckdcza4n50053rkamdl7q15qf"},{"name":"IDEA中Tomcat日志乱码","_id":"ckdcza4ne005arkam6eln7qcr"},{"name":"2-1 配置主题","_id":"ckdcza4ng005crkameabagl0l"},{"name":"3-1 hexo与md文件格式的冲突","_id":"ckdcza4nj005grkama3liejbm"},{"name":"Filter","_id":"ckdcza4nl005krkamhfuof4cr"},{"name":"2-1 Git忽略文件","_id":"ckdcza4nl005orkamboq88mzx"},{"name":"2-2 Git获取和创建项目","_id":"ckdcza4nm005srkam6lcogti1"},{"name":"3-1 关键命令","_id":"ckdcza4nn005wrkam87u19ktk"},{"name":"3-2 添加","_id":"ckdcza4nn0060rkam9q0bdv7b"},{"name":"junit简介","_id":"ckdcza4nw0067rkamftuhf1na"},{"name":"idea工具的使用","_id":"ckdcza4ny0069rkam46je3wmq"},{"name":"idea报java版本错误解决方法","_id":"ckdcza4o1006drkam9tyl62yt"},{"name":"创建代码块模板","_id":"ckdcza4o3006hrkamcbh665d0"},{"name":"利用IDEA学习编程语言","_id":"ckdcza4o5006lrkam5jis8pu1"},{"name":"利用IDEA明明导入了包却显示缺少保留相关类","_id":"ckdcza4ob006srkamh2b59km2"},{"name":"快捷键","_id":"ckdcza4oe006yrkam17szf2tq"},{"name":"插件使用","_id":"ckdcza4of0072rkam80l05fib"},{"name":"1.学习网址","_id":"ckdcza4of0076rkam9s5w3d3k"},{"name":"1-2 CentOS镜像使用帮助","_id":"ckdcza4og007arkam7gzs4anq"},{"name":"Linux","_id":"ckdcza4og007erkam5w1chvwn"},{"name":"linux常用命令","_id":"ckdcza4oh007irkamgztc0pdq"},{"name":"MyBatis框架","_id":"ckdcza4oi007mrkam4x85bwfc"},{"name":"Spring入门","_id":"ckdcza4oj007qrkam51v5dhh7"},{"name":"多线程编程","_id":"ckdcza4ok007urkamabq4ewip"},{"name":"字节流与字符流","_id":"ckdcza4ok007yrkamfr2gay52"},{"name":"index","_id":"ckdcza4ov0085rkamh7iq3p1f"},{"name":"spring注解","_id":"ckdcza4oy0089rkam5vzvfxjf"},{"name":"1-1 入门学习","_id":"ckdcza4p0008erkambjp48mg2"},{"name":"学习记录（一）","_id":"ckdcza4p2008jrkam8aap8nrs"},{"name":"Spring Framework简介","_id":"ckdcza4p4008nrkam0p38eya9"},{"name":"入门基础学习","_id":"ckdcza4p7008rrkam3bwp2e81"},{"name":"入门简介","_id":"ckdcza4p9008vrkam6t5j21or"},{"name":"数据类型","_id":"ckdcza4pb0090rkam52zgg6wx"},{"name":"框架搭建","_id":"ckdcza4pd0095rkam3ikae9yk"},{"name":"iptables的学习","_id":"ckdcza4ph009arkamfgmh9hy7"},{"name":"2-1android moudle与libery切换","_id":"ckdcza4pj009frkam81n71a6w"},{"name":"2-1阿里云服务器远程登录密码","_id":"ckdcza4pl009krkam6k5rcca7"},{"name":"Centos虚拟机网络连接问题","_id":"ckdcza4pn009orkamh3cu3mi5"},{"name":"Linux准备工作","_id":"ckdcza4pq009wrkamdy9s70q0"},{"name":"LINUX设置防火墙","_id":"ckdcza4pq00a0rkam4do1a0hg"},{"name":"mysql安装","_id":"ckdcza4pr00a4rkam0sz38kzv"},{"name":"Nat连接网络","_id":"ckdcza4pr00a8rkam4zbb34eu"},{"name":"Nginx简介","_id":"ckdcza4ps00acrkambr2rhzzx"},{"name":"Readis安装及配置","_id":"ckdcza4pt00agrkamfga653mw"},{"name":"文件命令操作md","_id":"ckdcza4pt00akrkam84vr8g80"},{"name":"用户操作","_id":"ckdcza4pu00aorkam48p7f1yi"},{"name":"防火墙的设置","_id":"ckdcza4pu00asrkamff5jgu75"},{"name":"前期准备","_id":"ckdcza4pv00awrkamdp5obd4m"},{"name":"01 Spring Boot入门","_id":"ckdcza4pw00b0rkameop0g1ek"},{"name":"1-1-安装环境","_id":"ckdcza4pw00b4rkam8wjzh28j"},{"name":"PermissionX权限管理库","_id":"ckdcza4px00b8rkam9f7ect19"},{"name":"从安装到卸载","_id":"ckdcza4q300bgrkamfva6cjkr"},{"name":"初始化密码","_id":"ckdcza4q600blrkam920q3a5e"},{"name":"1-2-Redis启动","_id":"ckdcza4q800brrkam9ptuba7k"},{"name":"2-1-数据结构","_id":"ckdcza4qc00bxrkamcxc75bnl"},{"name":"2-2 数据结构的常用命令","_id":"ckdcza4qf00c3rkamgrkj5vei"},{"name":"3-1分布式锁","_id":"ckdcza4qi00c8rkamcrjz306t"},{"name":"3-2 Lua脚本","_id":"ckdcza4qn00cdrkam1228b169"},{"name":"3-3 消息队列","_id":"ckdcza4qp00cirkam6wzn6i9b"},{"name":"Java客户端","_id":"ckdcza4qs00cmrkam394v83qk"},{"name":"错误问题","_id":"ckdcza4qt00cqrkam8eaj1tey"},{"name":"问题总结","_id":"ckdcza4qu00curkam484va5pf"},{"name":"mysql数据库的安装与配置","_id":"ckdcza4qu00cyrkam5i6oep4n"},{"name":"vsftpd","_id":"ckdcza4qv00d2rkam69kb7hep"},{"name":"功能需求与技术可行性分析","_id":"ckdcza4qw00d6rkam8kr5dctd"},{"name":"需求文档","_id":"ckdcza4qw00darkamhiuzanyv"},{"name":"项目知识点","_id":"ckdcza4qx00derkamhvvjeetp"},{"name":"项目前期构建","_id":"ckdcza4qy00dirkamde9lhwcn"}]}}