<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PermissionX权限管理库</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/bian-xie-kai-yuan-ku/permissionx-quan-xian-guan-li-ku/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/bian-xie-kai-yuan-ku/permissionx-quan-xian-guan-li-ku/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PermissionX权限管理库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目前期构建</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/xiang-mu-qian-qi-gou-jian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/xiang-mu-qian-qi-gou-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="人员配置"><a href="#人员配置" class="headerlink" title="人员配置"></a>人员配置</h1><p>产品经理：3人，确定需求及给出产品原型</p><p>项目经理：1人，项目管理</p><p>前端团队：5人，根据产品经理给出原型制作静态页面</p><p>后端团队：20人，实现产品功能</p><p>测试团队：5人，测试所有功能</p><p>运维团队：3人，项目的发布和维护</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目前期构建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1-安装环境</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/1-1-an-zhuang-huan-jing/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tao-tao-shang-cheng-xiang-mu-shi-zhan/1-1-an-zhuang-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="开发工具和环境"><a href="#开发工具和环境" class="headerlink" title="开发工具和环境"></a>开发工具和环境</h1><table><thead><tr><th>工具</th><th align="left">版本</th></tr></thead><tbody><tr><td>idea（ide）</td><td align="left">2020.1</td></tr><tr><td>git（版本控制）github</td><td align="left">2.26</td></tr><tr><td>maven（项目构建）</td><td align="left">3.6</td></tr><tr><td>tomcat（web容器）</td><td align="left">9</td></tr><tr><td>Java jdk</td><td align="left">1.8</td></tr><tr><td>mysql</td><td align="left">8</td></tr><tr><td>本地系统</td><td align="left">win10</td></tr><tr><td>服务器</td><td align="left">Centos7</td></tr><tr><td></td><td align="left"></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1-安装环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目知识点</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xiang-mu-zhi-shi-dian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xiang-mu-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h4 id="后端技术"><a href="#后端技术" class="headerlink" title="后端技术"></a>后端技术</h4><ol><li><p>Spring boot (SSM)</p></li><li><p>spring Secunity</p></li><li><p>Redis</p></li><li><p>POI/邮件发送/消息中间件</p></li><li><p>Mysql</p><h4 id="前端技术"><a href="#前端技术" class="headerlink" title="前端技术"></a>前端技术</h4></li><li><p>Vue</p></li><li><p>axios</p></li><li><p>ElemnetUI</p></li><li><p>Vuex</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>需求文档</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xu-qiu-wen-dang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/xu-qiu-wen-dang/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 需求文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 Spring Boot入门</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/01-spring-boot-ru-men/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/wei-ren-shi-xiang-mu-guan-li/01-spring-boot-ru-men/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 01 Spring Boot入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功能需求与技术可行性分析</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/gong-neng-xu-qiu-yu-ji-zhu-ke-xing-xing-fen-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/gong-neng-xu-qiu-yu-ji-zhu-ke-xing-xing-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><ul><li>可以搜索各个国家的城市数据</li><li>可以查看全球大多数城市的天气信息</li><li>可以自由的切换城市，查看其他城市的天气信息</li><li>可以手动刷新实时的天气</li></ul><h2 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h2><ul><li>UI</li><li>网络</li><li>数据存储</li><li>异步处理</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能需求与技术可行性分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前期准备</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/qian-qi-zhun-bei/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/tian-qi-yu-bao-app/qian-qi-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="天气数据API-接口获取"><a href="#天气数据API-接口获取" class="headerlink" title="天气数据API 接口获取"></a>天气数据API 接口获取</h2><p>彩云天气 <a href="https://dashboard.caiyunapp.com/">https://dashboard.caiyunapp.com/</a></p><p>api文档阅读 <a href="https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8">https://open.caiyunapp.com/%E5%BD%A9%E4%BA%91%E5%A4%A9%E6%B0%94_API_%E4%B8%80%E8%A7%88%E8%A1%A8</a></p><p><img src="images/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/image-20200714172407951.png" alt="image-20200714172407951"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前期准备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1android moudle与libery切换</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/kotlin-kai-fa-dian-shang-app/2-1android-moudle-yu-libery-qie-huan/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/xiang-mu-shi-zhan/kotlin-kai-fa-dian-shang-app/2-1android-moudle-yu-libery-qie-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="Application与Library切换"><a href="#Application与Library切换" class="headerlink" title="Application与Library切换"></a>Application与Library切换</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1android moudle与libery切换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsftpd</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/vsftpd/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/vsftpd/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><pre><code>vsftpd是“very secure FTP daemon”的缩写是一个完全免费，开放源代码的ftp服务器软件</code></pre><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><pre><code>vsftpd是一款Linux发行版中最受推崇的ftp服务器程序，小巧轻快，安全易用，支持带宽限制等功能</code></pre><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>1. 执行 yum -y install vsftpd    1. 默认配置文件在/etc/vsftpd/vsftpd.conf2. 创建虚拟用户    1. 选择根或者用户目录下创建ftp文件夹：mkdir ftpfile,如：/ftpfile    2. 添加匿名用户：useradd ftpuser -d /ftpfile -s /sbin/nologin    3. 修改ftpfile权限：chown -R ftpuser.ftpuser /ftpfie    4. 重设ftpuser密码：password ftpuser(12346)3. 配置    1. cd /etc/vsftpd    2. sudo vim chroot_list    3. 把刚才新增的虚拟用户添加到此配置文件中，后续要引用    4. :wq 保存退出    5. sudo vim /etc/selinux/config,修改SELINUX=disabled    6. :wq 保存退出        如果遇到550拒绝访问执行sudo setsebool -P ftp_home_dir 1        然后重启linux服务区，执行reboot命令    7. sudo vim /etc/vsftpd/vsftpd.conf    8. 添加配置或更新配置4. 防火墙配置    1. sudo vim /etc/sysconfig/iptables    2.1. -A INPUT -p TCP --dport 61001:62000 -j ACCEPT    2.2. -A OUTPUT -p TCP --sport 61001:62000 -j ACCEPT    2.1. -A INPUT -p TCP --dport 20 -j ACCEPT    2.2. -A OUTPUT -p TCP --sport 20 -j ACCEPT        2.1. -A INPUT -p TCP --dport 21 -j ACCEPT    2.2. -A OUTPUT -p TCP --sport 21 -j ACCEPT        3. :wq 保存退出    4. sudo service iptables restart 执行命令重启防火墙</code></pre><h1 id="vsftpd验证"><a href="#vsftpd验证" class="headerlink" title="vsftpd验证"></a>vsftpd验证</h1><pre><code>1. 执行 sodo service vsftpd restart2. 执行ifconfig 查看运行vsftpd服务器的ip地址3. 打开浏览器访问：ftp://10.211.55.64. 输入之前创建的ftp匿名用户账号和密码5. 通过ftp客户端软件</code></pre><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><pre><code>启动 sudo service vsftpd start关闭 sudo service vsftpd stop重启 sudo service vsftpd restart</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 企业级电商项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsftpd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库的安装与配置</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/mysql-shu-ju-ku-de-an-zhuang-yu-pei-zhi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/mysql-shu-ju-ku-de-an-zhuang-yu-pei-zhi/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 企业级电商项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql数据库的安装与配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINUX设置防火墙</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/linux-she-zhi-fang-huo-qiang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/linux-she-zhi-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<section class="ouvJEz"><h1 class="_1RuRku">Linux设置防火墙</h1><div class="rEsl9f"><div class="s-dsoj"><time datetime="2019-02-25T03:01:08.000Z">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class="_2rhmJa"><p>Centos 7之前的防火墙基本都是修改iptables</p><pre class="line-numbers  language-undefined"><code class="  language-undefined">service  iptables  status        查看防火墙状态<p>service  iptables  start          开启防火墙</p><p>service  iptables  stop          关闭防火墙</p><p>service  iptables  restart        重启防火墙</p></code><p><code class="  language-undefined"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></p></pre><p></p><p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p><p>其常用命令为：</p><pre class="line-numbers  language-csharp"><code class="  language-csharp">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>state                          ##查看防火墙运行状态，是否是running<p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">get</span><span class="token operator">-</span>zones                  ##列出支持的zone</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">get</span><span class="token operator">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>list<span class="token operator">-</span>ports                    ##列出开放的端口</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>query<span class="token operator">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp                            ##临时开放ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp <span class="token operator">–</span>permanent        ##永久开放ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">remove</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp <span class="token operator">–</span>permanent  ##永久移除ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">–</span>permanent      ##永久添加<span class="token number">80</span>端口</p><p>iptables <span class="token operator">-</span>L <span class="token operator">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p><p>man firewall<span class="token operator">-</span>cmd                            ##查看帮助</p><p>systemctl stop firewalld                  ##关闭防火墙</p><p>systemctl start firewalld                  ##开启防火墙</p><p>systemctl status firewalld              ##查看防火墙状态</p><p>systemctl restart firewalld              ##重启防火墙</p><p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p></code></pre></article></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 企业级电商项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX设置防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables的学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/iptables-de-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-dian-shang-xiang-mu/iptables-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="什么是iptables"><a href="#什么是iptables" class="headerlink" title="什么是iptables"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre><h2 id="什么是Netfilter"><a href="#什么是Netfilter" class="headerlink" title="什么是Netfilter?"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块什么是Hook point&gt;    数据包在Netfilter中的挂载点    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre><h2 id="iptables规则组成"><a href="#iptables规则组成" class="headerlink" title="iptables规则组成"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则四张表：    filter表:访问控制，规则匹配    nat表：地址转发    mangle表，    raw表五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING数据包访问控制：ACCEPT,DROP,REJECT数据包改写:SNAT,DNAT信息记录：LOG</code></pre><h2 id="iptables-配置-场景一"><a href="#iptables-配置-场景一" class="headerlink" title="iptables 配置 场景一"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问》允许对所有的地址开放本机的基于ICMP协议的数据包访问》其他未被允许的端口则禁止访问</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 企业级电商项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables的学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>框架搭建</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-quan-xian-guan-li/kuang-jia-da-jian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/qi-ye-ji-quan-xian-guan-li/kuang-jia-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Boot-Spring-Security"><a href="#Spring-Boot-Spring-Security" class="headerlink" title="Spring Boot +Spring Security"></a>Spring Boot +Spring Security</h2><ol><li><a href="https://start.spring.io/">快速搭建spring项目官方网址</a></li><li>通过idea快速创建springboot<br><ul><li>file-&gt;new Project-&gt;Spring Intializr<h2 id="常见注解"><a href="#常见注解" class="headerlink" title="常见注解"></a>常见注解</h2>@SpringBootApplication：<br>@RestController:相当于@ResponseBody</li></ul></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 企业级权限管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>问题总结</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/wen-ti-zong-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/wen-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="idea下载spring源码编译不通过"><a href="#idea下载spring源码编译不通过" class="headerlink" title="idea下载spring源码编译不通过"></a>idea下载spring源码编译不通过</h1><h2 id="找不到xx-xx-jar"><a href="#找不到xx-xx-jar" class="headerlink" title="找不到xx.xx.jar"></a>找不到xx.xx.jar</h2><blockquote><p>解决方式：查看连接，发现确实没有这个jar，由于sping使用的是最新版本的依赖，尝试使用旧版本，发现旧版本有相应的jar，但版本不一致，缺少很多包。</p><p>怀疑是网络问题，分别加上阿里云maven和使用源代码，分别编译，科学上网，结论：不行！</p><p>怀疑是第三方还没有公开最新jar，果断放弃，果然第二天，再次编译，成功下载jar，查看昨天的网址发现有了jar，<strong>编译通过</strong>！！</p><p><a href="http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/">http://nexus.bsdn.org/content/groups/public/io/projectreactor/reactor-core/3.4.0-M1/</a></p><p><img src="D:\OneDrive\随心记\Spring\images\image-20200709140540967.png" alt="image-20200709140540967"></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Framework简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/spring-framework-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-yuan-ma-xue-xi/spring-framework-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>官方网址：<a href="https://spring.io/projects">https://spring.io/projects</a></p><p>参考网址：<a href="https://spring.io/projects/spring-framework">https://spring.io/projects/spring-framework</a></p><p>clone 地址：<a href="https://github.com/kujin521/spring">https://github.com/kujin521/spring</a></p><h1 id="Spring-Framework"><a href="#Spring-Framework" class="headerlink" title="Spring Framework"></a>Spring Framework</h1><blockquote><p>The Spring Framework provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.</p><p>Spring 框架为现代基于 java 的企业应用程序提供了一个全面的编程和配置模型，适用于任何类型的部署平台。</p><p>A key element of Spring is infrastructural support at the application level: Spring focuses on the “plumbing” of enterprise applications so that teams can focus on application-level business logic, without unnecessary ties to specific deployment environments.</p><p>Spring 的一个关键元素是应用程序级别的基础设施支持: Spring 关注企业应用程序的”管道”，这样团队就可以专注于应用程序级别的业务逻辑，而不必与特定的部署环境建立不必要的联系。</p></blockquote><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ul><li><p>核心技术: 依赖注入、事件、资源、 i18n、验证、数据绑定、类型转换、 SpEL、 AOP。</p></li><li><p>测试: 模拟对象，TestContext 框架，Spring MVC Test，WebTestClient。</p></li><li><p>数据访问: 事务，DAO 支持，JDBC，ORM，封送 XML。</p></li><li><p>集成: 远程处理、 JMS、 JCA、 JMX、电子邮件、任务、调度、缓存。</p></li><li><p>语言: Kotlin，Groovy，动态语言。</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Framework简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习记录（一）</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/spring/springtest/xue-xi-ji-lu-yi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/spring/springtest/xue-xi-ji-lu-yi/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>测试是企业软件开发不可或缺的一部分。本章重点介绍IoC原则对单元<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#unit-testing">测试的价值，</a>以及春框架支持集成测试<a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/testing.html#integration-testing">的好处</a>。（对企业中的测试进行彻底处理超出了本参考手册的范围。</p><h1 id="1-单元测试"><a href="#1-单元测试" class="headerlink" title="1.单元测试"></a>1.单元测试</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习记录（一） </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 入门学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-mybatis-xiang-mu/1-1-ru-men-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-mybatis-xiang-mu/1-1-ru-men-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="配置Mybatis-Spring项目"><a href="#配置Mybatis-Spring项目" class="headerlink" title="配置Mybatis-Spring项目"></a>配置Mybatis-Spring项目</h1><p><a href="http://mybatis.org/spring/zh/index.html">官方文档</a></p><p>官方实例代码：<a href="https://github.com/mybatis/jpetstore-6.git">https://github.com/mybatis/jpetstore-6.git</a></p><h2 id="1-配置数据源（简单版）"><a href="#1-配置数据源（简单版）" class="headerlink" title="1.配置数据源（简单版）"></a>1.配置数据源（简单版）</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.SimpleDriverDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/chapter12<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h2 id="2-配置SqlSessionFactory"><a href="#2-配置SqlSessionFactory" class="headerlink" title="2.配置SqlSessionFactory"></a>2.配置SqlSessionFactory</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 入门学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-zhu-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/spring/spring-zhu-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="spring注解"><a href="#spring注解" class="headerlink" title="spring注解"></a>spring注解</h2><h3 id="定义配置"><a href="#定义配置" class="headerlink" title="定义配置"></a>定义配置</h3><pre><code>1. @Configuration2. @ComoinentScan</code></pre><h3 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h3><pre><code>1. @Component2. @AutiWired3. @Autowired(required=false)</code></pre><h3 id="自动装配歧义性"><a href="#自动装配歧义性" class="headerlink" title="自动装配歧义性"></a>自动装配歧义性</h3><pre><code>1. @Primary2. @Qualifier3. @Resource</code></pre><h3 id="分层架构中定义组件"><a href="#分层架构中定义组件" class="headerlink" title="分层架构中定义组件"></a>分层架构中定义组件</h3><pre><code>1. @Controller2. @Service3. @Repository4. @Repository</code></pre><h3 id="Spring测试环境"><a href="#Spring测试环境" class="headerlink" title="Spring测试环境"></a>Spring测试环境</h3><pre><code>1. @RunWith2. @ContextConfiguration</code></pre><h3 id="使用xml启用组件扫描"><a href="#使用xml启用组件扫描" class="headerlink" title="使用xml启用组件扫描"></a>使用xml启用组件扫描</h3><pre><code>&lt;comtext:component-scan base-package="com...."/&gt;</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错误问题</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/cuo-wu-wen-ti/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/cuo-wu-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-error-NOAUTH-Authentication-required-解决方法"><a href="#Redis-error-NOAUTH-Authentication-required-解决方法" class="headerlink" title="Redis (error) NOAUTH Authentication required.解决方法"></a>Redis (error) NOAUTH Authentication required.解决方法</h1><p>认证错误，没有设置密码</p><pre><code>auth "密码"</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/jian-jie/</url>
      
        <content type="html"><![CDATA[<p>Redis（Remote Dictionary Service）是一个NoSql数据库，基于c开发，键值对存储数据，运行在缓存内存中，高速缓存数据</p><p>特点：</p><ul><li>支持数据持久化</li><li>支持多种不同的数据结构</li><li>支持从模式的数据备份</li><li>自带发布订阅系统</li><li>定时器，计数器</li></ul><p><img src="images/%E7%AE%80%E4%BB%8B/image-20200723112107089.png" alt="image-20200723112107089"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java客户端</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/java-ke-hu-duan/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/java-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><h3 id="开放端口6379"><a href="#开放端口6379" class="headerlink" title="开放端口6379"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口firewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口firewall-cmd --reload   # 配置立即生效firewall-cmd --zone=public --list-ports</code></pre><p><img src="images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141553131.png" alt="image-20200723141553131"></p><p>Redis默认不支持远程连接，需要手动开启</p><h3 id="修改redis-conf文件"><a href="#修改redis-conf文件" class="headerlink" title="修改redis.conf文件"></a>修改redis.conf文件</h3><ol><li><p>注释bind 127.0.0.1</p></li><li><p>开启密码校验 </p><pre><code>requirepass kujin</code></pre><p><img src="images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723140632512.png" alt="image-20200723140632512"></p></li><li><p>保存退出，重启redis </p><pre class=" language-shell"><code class="language-shell">redis-server redis.conf</code></pre></li></ol><p><img src="images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723141850375.png" alt="image-20200723141850375"></p><h2 id="Jedis"><a href="#Jedis" class="headerlink" title="Jedis"></a>Jedis</h2><p>maven仓库：<a href="https://mvnrepository.com/artifact/redis.clients/jedis">https://mvnrepository.com/artifact/redis.clients/jedis</a></p><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><pre class=" language-groovy"><code class="language-groovy">compile group<span class="token punctuation">:</span> <span class="token string">'redis.clients'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'jedis'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'3.3.0'</span></code></pre><h3 id="2-java代码测试"><a href="#2-java代码测试" class="headerlink" title="2. java代码测试"></a>2. java代码测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kujin<span class="token punctuation">.</span>springredis<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 类：在java中使用Redis * 编写人：kujin * 创建时间：2020/7/23 * 修改时间：2020/7/23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Java_Redis_Text</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Jedis jedis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.2.168"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接redis</span>        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"kujin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输入密码</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录操作次数</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开始时间</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结束时间</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token operator">>=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//时间大于1秒，退出</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token operator">+</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"redis每秒操作 "</span><span class="token operator">+</span> i<span class="token operator">+</span> <span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="images/Java%E5%AE%A2%E6%88%B7%E7%AB%AF/image-20200723143421382.png" alt="image-20200723143421382"></p><h3 id="3-连接池"><a href="#3-连接池" class="headerlink" title="3. 连接池"></a>3. 连接池</h3><h4 id="1-定义接口约束"><a href="#1-定义接口约束" class="headerlink" title="1. 定义接口约束"></a>1. 定义接口约束</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CllWithJedis</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span>Jedis jedis<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="2-规范redis连接创建"><a href="#2-规范redis连接创建" class="headerlink" title="2. 规范redis连接创建"></a>2. 规范redis连接创建</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Redis</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义redis连接池</span>    <span class="token keyword">private</span> JedisPool pool<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置连接参数</span>        GenericObjectPoolConfig config<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">GenericObjectPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        config<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大空闲数</span>        config<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最大连接数</span>        config<span class="token punctuation">.</span><span class="token function">setTestOnBorrow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在空闲时检查有效性</span>        <span class="token comment" spellcheck="true">//配置参数，地址，端口，超时时间，密码</span>        pool<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span><span class="token string">"192.168.2.168"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">,</span><span class="token number">20000</span><span class="token punctuation">,</span><span class="token string">"kujin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>CllWithJedis cllWithJedis<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在try里获取单个连接</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>Jedis jedis<span class="token operator">=</span>pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            cllWithJedis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="3-使用redis"><a href="#3-使用redis" class="headerlink" title="3. 使用redis"></a>3. 使用redis</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Redis redis<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redis<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jedis1 <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis1<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Lettuce（简单了解）"><a href="#Lettuce（简单了解）" class="headerlink" title="Lettuce（简单了解）"></a>Lettuce（简单了解）</h2><p>Github<a href="https://github.com/lettuce-io/lettuce-core">官方地址</a></p><h3 id="1-添加依赖-1"><a href="#1-添加依赖-1" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h3><pre class=" language-groovy"><code class="language-groovy">compile group<span class="token punctuation">:</span> <span class="token string">'io.lettuce'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'lettuce-core'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'6.0.0.M1'</span></code></pre><h3 id="2-简单测试案例"><a href="#2-简单测试案例" class="headerlink" title="2. 简单测试案例"></a>2. 简单测试案例</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LettuceTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> RedisClient client <span class="token operator">=</span> RedisClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"redis://kujin@192.168.2.168"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取redis实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">baseUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本用法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">baseUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        StatefulRedisConnection<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> connection <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisStringCommands sync <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//同步对象</span>        sync<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"ku"</span><span class="token punctuation">,</span><span class="token string">"jin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置值</span>        String ku <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> sync<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"ku"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取值</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ku<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="Jedis和Lettuce比较"><a href="#Jedis和Lettuce比较" class="headerlink" title="Jedis和Lettuce比较"></a>Jedis和Lettuce比较</h2><ol><li>Jedis在实现过程中是直接连接Redis的，在多个线程之间共享一个Jedis实例，这是线程不安全的，如果在多线程创建下使用需要创建连接池，这样每个jedis都有redis实例</li><li>Lettuce基于Netty NIO框架构建，所以克服了jedis中线程不安全的问题，Lettuce支持同步，异步，以及响应调用，多个线程可以共享一个实例</li></ol><h2 id="Spring中使用Redis"><a href="#Spring中使用Redis" class="headerlink" title="Spring中使用Redis"></a>Spring中使用Redis</h2><h3 id="1-添加依赖-2"><a href="#1-添加依赖-2" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><pre class=" language-groovy"><code class="language-groovy">compile group<span class="token punctuation">:</span> <span class="token string">'org.springframework.data'</span><span class="token punctuation">,</span> name<span class="token punctuation">:</span> <span class="token string">'spring-data-redis'</span><span class="token punctuation">,</span> version<span class="token punctuation">:</span> <span class="token string">'2.3.2.RELEASE'</span></code></pre><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><p>appcationContext.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    Spring配置JedisPoolConfig对象--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--最大空闲数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--最大连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxTotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--最大等待时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWaitMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--spring配置JedisConnectionFactory--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.connection.jedis.JedisConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>192.168.2.168<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>port<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6379<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>kujin<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Spring配置RedisTemplate--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdkSerializationRedisSerializer<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.JdkSerializationRedisSerializer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stringRedisSerializer<span class="token punctuation">"</span></span>        <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redisTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.core.RedisTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keySerializer<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stringRedisSerializer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valueSerializer<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdkSerializationRedisSerializer<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="3-关键代码"><a href="#3-关键代码" class="headerlink" title="3.关键代码"></a>3.关键代码</h3><p>pojo</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Role</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6977402643848374753L<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String note<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> roleName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRoleName</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getNote</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> note<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNote</span><span class="token punctuation">(</span>String note<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>note <span class="token operator">=</span> note<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>main.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testSpring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//spring配置</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取redis</span>        RedisTemplate redisTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RedisTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//角色实体</span>        Role role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role_name_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"note_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//redsi操作</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"role_1"</span><span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>        Role role1 <span class="token operator">=</span> <span class="token punctuation">(</span>Role<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"role_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>role1<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="4-优化"><a href="#4-优化" class="headerlink" title="4. 优化"></a>4. 优化</h3><p>SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testSessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ApplicationContext applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        RedisTemplate redisTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RedisTemplate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Role role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role_name_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"role_note_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SessionCallback接口对redis连接进行了封装，可以把多个命令放入到同一个Redis连接中执行</span>        SessionCallback callBack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token operator">&lt;</span>Role<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Role <span class="token function">execute</span><span class="token punctuation">(</span>RedisOperations ops<span class="token punctuation">)</span> <span class="token keyword">throws</span> DataAccessException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ops<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"role_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span>Role<span class="token punctuation">)</span> ops<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"role_1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        Role savedRole <span class="token operator">=</span> <span class="token punctuation">(</span>Role<span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>callBack<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>savedRole<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java客户端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-3 消息队列</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-3-xiao-xi-dui-lie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-3-xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>平时说的消息队列，一般是指RbbitMQ, RocketMQ,ActiveMQ 以及大数据里边的Kafka，这些都是一些比较专业的消息中间件</p><p>Redis中也有自己的消息队列</p><h2 id="1-消息队列"><a href="#1-消息队列" class="headerlink" title="1.消息队列"></a>1.消息队列</h2><p>Redis中做消息队列，使用他里边的List数据结构可以实现，我们可以 </p><ul><li>lpush/rpush 操作来实现入队</li><li>lpop/rpop 实现出列</li></ul><p>详细操作</p><p><img src="images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200727184633610.png" alt="image-20200727184633610"></p><h3 id="java端"><a href="#java端" class="headerlink" title="java端"></a>java端</h3><p>在客户端（java端）我们会维护一个死循环不停地从队列中读取数据，并处理，如果队列中有消息，则直接获取，如果没有消息，就会陷入死循环，直到下一次有消息进入，这种死循环会造成大量资源浪费，使用blpop/brpopo</p><h2 id="2-延迟消息队列"><a href="#2-延迟消息队列" class="headerlink" title="2.延迟消息队列"></a>2.延迟消息队列</h2><blockquote><p>延迟队列可以通过zset来实现，因为zset中有一个score，我们可以把时间作为score，将value存到redis中，然后通过循环的方式不断地通过轮询的方式，去不断的读取出来</p></blockquote><ul><li><strong>如果消息是一个字符串，直接发送即可，如果是一个对象，则需要进行对象序列化，这里我们使用JSON来实现序列化与反序列化</strong></li></ul><ol><li>首先在项目中吗，添加Json依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 类：消息实体 * 编写人：kujin * 创建时间：2020/7/28 * 修改时间：2020/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Message&amp;#123;"</span> <span class="token operator">+</span>                <span class="token string">"id='"</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", data="</span> <span class="token operator">+</span> data <span class="token operator">+</span>                <span class="token string">'&amp;#125;'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>String id<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> data<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kujin<span class="token punctuation">.</span>springredistest<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>redis_queue<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 类：延迟消息队列 * 编写人：kujin * 创建时间：2020/7/28 * 修改时间：2020/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMsgQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Jedis jedis<span class="token punctuation">;</span>    <span class="token keyword">private</span> String queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayMsgQueue</span><span class="token punctuation">(</span>Jedis jedis<span class="token punctuation">,</span> String queue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> jedis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息入列     * @param data 要发送的消息     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queue</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个消息</span>        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//消息发送,延迟5秒</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg publish: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50000</span><span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息发送     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取score 到当前时间戳的消息</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> zrange <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrangeByScore</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果消息为空,则休息500毫秒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>zrange<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果读取到消息,则将消息读取出来</span>            String next <span class="token operator">=</span> zrange<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">zrem</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息取到,处理业务</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> Message<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"receive msg: "</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kujin<span class="token punctuation">.</span>springredistest<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>redis_queue<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>JsonProcessingException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>ObjectMapper<span class="token punctuation">;</span><span class="token keyword">import</span> redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span>Jedis<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 类：延迟消息队列 * 编写人：kujin * 创建时间：2020/7/28 * 修改时间：2020/7/28 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMsgQueue</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Jedis jedis<span class="token punctuation">;</span>    <span class="token keyword">private</span> String queue<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayMsgQueue</span><span class="token punctuation">(</span>Jedis jedis<span class="token punctuation">,</span> String queue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jedis <span class="token operator">=</span> jedis<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> queue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息入列     * @param data 要发送的消息     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queue</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造一个消息</span>        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        message<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//序列化</span>        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            String json <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//消息发送,延迟5秒</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg publish: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">zadd</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">5000</span><span class="token punctuation">,</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 消息发送     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//读取score 到当前时间戳的消息</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> zrange <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">zrangeByScore</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果消息为空,则休息500毫秒</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>zrange<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果读取到消息,则将消息读取出来</span>            String next <span class="token operator">=</span> zrange<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">zrem</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//消息取到,处理业务</span>                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> Message<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"receive msg: "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">">>>>>"</span><span class="token operator">+</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="images/3-3%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/image-20200728194536819.png" alt="image-20200728194536819"></p><p><a href="https://github.com/kujin521/SpringRedisTest/tree/master/src/main/java/com/kujin/springredistest/redis/redis_queue">github</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-3 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-2 Lua脚本</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-2-lua-jiao-ben/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-2-lua-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="Lua脚本"><a href="#Lua脚本" class="headerlink" title="Lua脚本"></a>Lua脚本</h1><blockquote><p>在Redis的2.6以上版本中，可以使用Lua语言操作Redis</p><p>Redis语言具有原子性，操作过程不会中断，有助于Redis对并发操作数据的一致性</p></blockquote><h2 id="1-Redis支持两种方法运行脚本"><a href="#1-Redis支持两种方法运行脚本" class="headerlink" title="1.Redis支持两种方法运行脚本"></a>1.Redis支持两种方法运行脚本</h2><ol><li>直接输入Lua语言程序代码</li><li>将Lua语言编写成文件</li></ol><blockquote><p>Redis支持缓存脚本，它会使用SHA-1算法对脚本进行签名，然后通过把SHA-1标识返回回来，通过标识运行</p></blockquote><p><strong>命令格式</strong></p><pre class=" language-shell"><code class="language-shell">eval Lua-script key-num [key1 key2 ...][value1 value2 ...]</code></pre><ul><li>eval 代表Lua语言命令</li><li>Lua-script 代表Lua语言脚本</li><li>key-num 代表有多少的key ，Redis中的key是从1开始的，如果key没有参数 那么写0</li><li>[key1 key2 …]作为参数传递给Lua语言 需要和key-num对应起来</li><li>[value1 value2 …]参数传递给Lua语言</li></ul><h2 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2.举个栗子"></a>2.举个栗子</h2><p>这个脚本只是返回一个字符串，不需要任何参数</p><pre class=" language-shell"><code class="language-shell">eval "return 'hello Lua'" 0</code></pre><p><img src="images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725105545715.png" alt="image-20200725105545715"></p><p>设置一个键值对，可以在Lua语言中采用redis.call(command,key[parm1,parm2 …])</p><ul><li>command是命令 set get del 等</li><li>Key是被操作的键</li><li>parm1，parm2 代表key的参数</li></ul><pre class=" language-shell"><code class="language-shell">eval "redis.call('set',KEYS[1],ARGV[1])" 1 lua-key lua-value</code></pre><p><img src="images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725110256564.png" alt="image-20200725110256564"></p><blockquote><p>脚本中的KEY[1]代表读取传递给Lua脚本的第一个key参数，</p><p>而ARGV[1]代表第一个非key参数。</p></blockquote><h2 id="3-使用加密算法"><a href="#3-使用加密算法" class="headerlink" title="3.使用加密算法"></a>3.使用加密算法</h2><p><strong>有时候需要多次执行同样一段代码脚本，这时候可以使用Redis缓存脚本的功能，在Redis中脚本会通过SHA-1签名算法加密脚本，然后返回一个标识字符串</strong></p><p><strong>通过这个字符串执行加密脚本，好处是如果脚本很长，客户端传输需要很长时间，使用标识符，则需要传递32位字符即可，从而提高传输效率，提高性能</strong></p><pre class=" language-shell"><code class="language-shell">script load script</code></pre><pre><code>evalsha shastring keynum [key1 key2 ..] [parm1 parm2 ...]</code></pre><h3 id="1-举个栗子"><a href="#1-举个栗子" class="headerlink" title="1.举个栗子"></a>1.举个栗子</h3><pre class=" language-shell"><code class="language-shell">script load "redis.call('set',KEYS[1],ARGV[1])"evalsha 7cfb4342127e7ab3d63ac05e0d3615fd50b45b06 1 sha-key valget sha-key</code></pre><p><img src="images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200725113303421.png" alt="image-20200725113303421"></p><h2 id="4-java代码使用Lua脚本"><a href="#4-java代码使用Lua脚本" class="headerlink" title="4.java代码使用Lua脚本"></a>4.java代码使用Lua脚本</h2><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">//执行简单的脚本</span>        String helloJava <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"return 'hello java'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloJava<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行带参数的脚本</span>        jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"redis.call('set',KEYS[1],ARGV[1])"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"lua-key"</span><span class="token punctuation">,</span><span class="token string">"lua-value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String luaKey <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"lua-key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>luaKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓存脚本，返回sha1签名标识</span>        String sha1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">scriptLoad</span><span class="token punctuation">(</span><span class="token string">"redis.call('set',KEYS[1],ARGV[1])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过标识执行脚本</span>        jedis<span class="token punctuation">.</span><span class="token function">evalsha</span><span class="token punctuation">(</span>sha1<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"sha-key"</span><span class="token punctuation">,</span><span class="token string">"sha-val"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取执行脚本后的数据</span>        String shaVal <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sha-key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shaVal<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="5-使用RedisScript接口对象通过Lua脚本操作对象"><a href="#5-使用RedisScript接口对象通过Lua脚本操作对象" class="headerlink" title="5.使用RedisScript接口对象通过Lua脚本操作对象"></a>5.使用RedisScript接口对象通过Lua脚本操作对象</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 使用RedisScript接口对象通过Lua脚本操作对象     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">redisScript_Lua</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.定义默认脚本封装类</span>        DefaultRedisScript<span class="token operator">&lt;</span>Role<span class="token operator">></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2. 设置脚本</span>        redisScript<span class="token punctuation">.</span><span class="token function">setScriptText</span><span class="token punctuation">(</span><span class="token string">"redis.call('set',KEYS[1],ARGV[1]) return redis.call('get',KEYS[1])"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3. 定义操作key的列表</span>        ArrayList<span class="token operator">&lt;</span>String<span class="token operator">></span> keyList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"role1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4. 需要序列化保存和读取的对象</span>        Role role <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>1L<span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setRoleName</span><span class="token punctuation">(</span><span class="token string">"role_name_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        role<span class="token punctuation">.</span><span class="token function">setNote</span><span class="token punctuation">(</span><span class="token string">"note_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5. 获取标识字符串</span>        String sha1 <span class="token operator">=</span> redisScript<span class="token punctuation">.</span><span class="token function">getSha1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sha1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6. 设置返回结果类型，如果没有这句话，返回结果为空</span>        redisScript<span class="token punctuation">.</span><span class="token function">setResultType</span><span class="token punctuation">(</span>Role<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7. 定义序列化器</span>        JdkSerializationRedisSerializer serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdkSerializationRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//8. 执行脚本</span>        RedisTemplate jedisTemlate <span class="token operator">=</span> Utils<span class="token punctuation">.</span><span class="token function">getJedisTemlate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个是redisScript接口对象，第二个是参数序列化器</span>        <span class="token comment" spellcheck="true">//第三个是结果序列化器，第四个是Redis的key列表，最后是参数列表</span>        Role obj <span class="token operator">=</span> <span class="token punctuation">(</span>Role<span class="token punctuation">)</span> jedisTemlate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> serializer<span class="token punctuation">,</span> serializer<span class="token punctuation">,</span> keyList<span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="6-执行Lua文件"><a href="#6-执行Lua文件" class="headerlink" title="6.执行Lua文件"></a>6.执行Lua文件</h2><h3 id="6-1-在服务端编写Lua文件代码"><a href="#6-1-在服务端编写Lua文件代码" class="headerlink" title="6.1 在服务端编写Lua文件代码"></a>6.1 在服务端编写Lua文件代码</h3><p><img src="images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727174113640.png" alt="image-20200727174113640"></p><p>test.lua</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">==</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">then</span>    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span>KEY<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">end</span></code></pre><p>执行如下命令</p><pre class=" language-shell"><code class="language-shell">cat lua/test.lua | redis-cli -a kujin script load --pipe</code></pre><blockquote><p>script load 这个命令会在redis服务器缓存lua脚本，并返回脚本内容的SHA1校验和</p><p>java端调用时，传入CHA1校验和作为参数，redis服务端会知道调用哪个lua脚本</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * 执行Lua文件     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">excuLuaFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Redis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            redis<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jedis <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1.获取一个随机字符串</span>                String value <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2. 获取锁</span>                String k1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SetParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//3. 判断是否成功拿到锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token string">"ok"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>k1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//4具体的业务操作</span>                    jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">,</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"site"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//5 释放锁</span>                    jedis<span class="token punctuation">.</span><span class="token function">evalsha</span><span class="token punctuation">(</span><span class="token string">"b8059ba43af6ffe8bed3db65bac35d452f8115d8"</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没拿到锁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><img src="images/3-2%20Lua%E8%84%9A%E6%9C%AC/image-20200727181837205.png" alt="image-20200727181837205"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-2 Lua脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-1分布式锁</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-1-fen-bu-shi-suo/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/3-1-fen-bu-shi-suo/</url>
      
        <content type="html"><![CDATA[<h1 id="分布式锁场景"><a href="#分布式锁场景" class="headerlink" title="分布式锁场景"></a>分布式锁场景</h1><h2 id="1-问题场景"><a href="#1-问题场景" class="headerlink" title="1. 问题场景"></a><strong>1. 问题场景</strong></h2><blockquote><p>例如一个简单的用户操作，</p><p>一个线程去修改用户状态，首先从数据库读出用户状态，然后再内存中修改，修改完成后再存储</p><p>在多线程中，由于读取，修改，存储，是三个操作，不是原子操作，可能会线程操作冲突</p></blockquote><p>可以使用分布式锁限制程序的并发操作</p><p><strong>原理</strong></p><blockquote><p>分布式锁，通过进入线程占位，当别的线程操作时，发现已经有人占位了，就会放弃或稍后再试</p></blockquote><p>在Redis中，占位一般用setnx 指令，先进来的线程先占位，线程的操作执行完成后，再del指令释放位子</p><pre class=" language-java"><code class="language-java">Redis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redis<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jedis <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Long setnx <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>setnx<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//没人占位</span>                jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"kujin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除k1，释放位置</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//有人占位,停止</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>上述代码存在问题，如果jedis在set get中出现异常导致del 指令没有运行，这样key1无法释放，后面的请求全部阻塞，形成死锁</strong></p><blockquote><p>解决方法，给锁一个过期时间，确保一定时间之后，能够得到释放</p></blockquote><pre class=" language-java"><code class="language-java">Redis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redis<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jedis <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            Long setnx <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>setnx<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                jedis<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题</span>                <span class="token comment" spellcheck="true">//没人占位</span>                jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"kujin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除k1，释放位置</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//有人占位,停止</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>这样改造之后还存在一个问题，就是在获取锁和设置过期时间服务器挂掉了，这个时候形成死锁</strong></p><blockquote><p>为了解决这个问题，Redis2.8开始，setnx和expire可以通过一个命令一起执行</p></blockquote><pre class=" language-java"><code class="language-java">Redis redis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redis<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>jedis <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     Long setnx = jedis.setnx("k1", "v1");    jedis.expire("k1",5);//设置5秒的过期时间，防止执行过程中异常导致锁无法释放的问题     */</span>    <span class="token comment" spellcheck="true">//两个指令合成一个</span>    String set <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SetParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ex</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//没人占位</span>        jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"kujin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"k1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除k1，释放位置</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有人占位,停止</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-解决超时时间"><a href="#2-解决超时时间" class="headerlink" title="2.解决超时时间"></a>2.解决超时时间</h2><blockquote><p>为了防止业务代码，在执行的过程中抛出异常，我们给每一个锁添加一个超时时间，超时过后自动释放，</p><p>新的问题，如果执行业务非常耗时，可能会导致紊乱</p></blockquote><p><strong>举个栗子</strong></p><blockquote><p>第一个线程获取到锁，开始执行业务，业务执行8秒，这样会在第一个线程的任务还未执行成功，锁5秒以过期， 导致第二个线程会获取到锁执行，在第二了线程执行了3秒，第一个线程执行完成释放资源，第三个线程进来</p></blockquote><blockquote><p>对于这个问题解决方式</p><ol><li>避免执行耗时操作</li><li>将锁的value设置为一个随机字符串，每次释放时检查字符串是否一致，一致释放，否则 不释放</li></ol></blockquote><p><strong>第二种方式不具有原子性，为了解决这个问题，引入Lua脚本</strong></p><p>[Lua脚本](3-2 Lua脚本.md)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-1分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-2 数据结构的常用命令</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/2-2-shu-ju-jie-gou-de-chang-yong-ming-ling/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/2-2-shu-ju-jie-gou-de-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Redis清空命令—flushdb</p><h1 id="1-字符串数据结构命令"><a href="#1-字符串数据结构命令" class="headerlink" title="1.字符串数据结构命令"></a>1.字符串数据结构命令</h1><h1 id="2-链表数据结构命令"><a href="#2-链表数据结构命令" class="headerlink" title="2.链表数据结构命令"></a>2.链表数据结构命令</h1><h1 id="3-哈希数据结构命令"><a href="#3-哈希数据结构命令" class="headerlink" title="3.哈希数据结构命令"></a>3.哈希数据结构命令</h1><h1 id="4-集合数据结构命令"><a href="#4-集合数据结构命令" class="headerlink" title="4.集合数据结构命令"></a>4.集合数据结构命令</h1><h1 id="5-有序集合串数据结构命令"><a href="#5-有序集合串数据结构命令" class="headerlink" title="5.有序集合串数据结构命令"></a>5.有序集合串数据结构命令</h1><h1 id="6-基数的含义和命令"><a href="#6-基数的含义和命令" class="headerlink" title="6.基数的含义和命令"></a>6.基数的含义和命令</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-2 数据结构的常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1-数据结构</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/2-1-shu-ju-jie-gou/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/2-1-shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="六种基本类型"><a href="#六种基本类型" class="headerlink" title="六种基本类型"></a>六种基本类型</h1><table><thead><tr><th>数据类型</th><th>数据类型存储的值</th><th>说明</th></tr></thead><tbody><tr><td>String 字符串</td><td>保存字符串.整数, 浮点数</td><td>可以对字符串进行操作,增加字符串或求子串,如果时整数或者浮点数,可以计算,比如自增</td></tr><tr><td>List 列表</td><td>它是一个链表,每一个节点都包含字符串</td><td>Redis支持从链表的两端插入</td></tr><tr><td>set 集合</td><td>它是一个收集器, 但是是无序的,它里面每一个元素都是字符串,而且是独一无二的,各不相同</td><td>可以新增,读取,删除删除单个元素,检测一个元素是否在集合中,计算和其他集合的交集,并集,和差集等;随机从集合中读取元素</td></tr><tr><td>Hash 哈希散列表</td><td>它类似于java语言中map 是一个键值对应的无序列表</td><td>可以增删改查单个键值对,也可以获取所有的键值对</td></tr><tr><td>Zset 有序集合</td><td>可以包含字符串,整数,浮点数,分值(score),元素的排列是依据分值的大小决定的</td><td>可以增删改查元素,根据分值的范围或成员来获取键值对</td></tr><tr><td>HyperLogLog 基数</td><td>计算重复的值,以确定存储的数量</td><td>只提供基数的运算,不提供返回的功能</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1-数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2-Redis启动</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/1-2-redis-qi-dong/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/1-2-redis-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Redis启动配置"><a href="#Redis启动配置" class="headerlink" title="Redis启动配置"></a>Redis启动配置</h1><h2 id="修改redis-conf-配置文件"><a href="#修改redis-conf-配置文件" class="headerlink" title="修改redis.conf 配置文件"></a>修改redis.conf 配置文件</h2><pre><code># linux 命令vi redis.conf/dae 找到目标字符i:修改wq:保存退出</code></pre><p>daemonize  yes ：表示以守护进程的方式启动，后台启动</p><h2 id="开启远程连接"><a href="#开启远程连接" class="headerlink" title="开启远程连接"></a>开启远程连接</h2><h3 id="开放端口6379"><a href="#开放端口6379" class="headerlink" title="开放端口6379"></a>开放端口6379</h3><pre><code>firewall-cmd --zone=public --list-ports #查看防火墙开放的端口firewall-cmd --zone=public --add-port=6379/tcp --permanent   # 开放6379端口firewall-cmd --reload   # 配置立即生效firewall-cmd --zone=public --list-ports</code></pre><p><img src="images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141553131.png" alt="image-20200723141553131"></p><p>Redis默认不支持远程连接，需要手动开启</p><h3 id="修改redis-conf文件"><a href="#修改redis-conf文件" class="headerlink" title="修改redis.conf文件"></a>修改redis.conf文件</h3><ol><li><p>注释bind 127.0.0.1</p></li><li><p>开启密码校验 </p><pre><code>requirepass kujin</code></pre><p><img src="images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723140632512.png" alt="image-20200723140632512"></p></li><li><p>保存退出，重启redis </p><pre class=" language-shell"><code class="language-shell">redis-server redis.conf</code></pre></li></ol><p><img src="images/1-2-Redis%E5%90%AF%E5%8A%A8/image-20200723141850375.png" alt="image-20200723141850375"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-2-Redis启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1-安装</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/1-1-an-zhuang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/redis-xue-xi/1-1-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis安装方式"><a href="#Redis安装方式" class="headerlink" title="Redis安装方式"></a>Redis安装方式</h1><p>官网：<a href="https://redis.io/">https://redis.io/</a></p><p>官方文档：<a href="https://redis.io/documentation">https://redis.io/documentation</a></p><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>(直接，不过gcc环境太麻烦，还容易出错)</p><h3 id="准备好gcc环境"><a href="#准备好gcc环境" class="headerlink" title="准备好gcc环境"></a>准备好gcc环境</h3><pre><code>yum install -y cppyum install -y binutilsyum install -y glibcyum install -y glibc-kernheadersyum install -y glibc-commonyum install -y glibc-develyum install -y gccyum install -y make# 升级gccyum -y install centos-release-sclyum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutilsscl enable devtoolset-9 bash</code></pre><h3 id="下载，-解压，编译，安装"><a href="#下载，-解压，编译，安装" class="headerlink" title="下载， 解压，编译，安装"></a>下载， 解压，编译，安装</h3><img src="D:\OneDrive\随心记\Docker学习\image\image-20200708114704238.png" alt="image-20200708114704238" style="zoom:50%;"><pre class=" language-shell"><code class="language-shell">wget http://download.redis.io/releases/redis-6.0.5.tar.gztar xzf redis-6.0.5.tar.gzcd redis-6.0.5make# 注意 如果提示错误 In file included from adlist.c:34:0: zmalloc.h:50:31: fatal error: jemalloc/# 执行 make MALLOC=libcmake install</code></pre><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class=" language-shell"><code class="language-shell">redis-server redis.conf</code></pre><p><img src="D:\OneDrive\随心记\Docker学习\image\image-20200708121651755.png" alt="image-20200708121651755"></p><h2 id="使用Docker安装"><a href="#使用Docker安装" class="headerlink" title="使用Docker安装"></a>使用Docker安装</h2><p>（提前安装运行docker）</p><pre class=" language-shell"><code class="language-shell">docker pull redis</code></pre><p><img src="D:\OneDrive\随心记\Docker学习\image\image-20200708113748295.png" alt="image-20200708113748295"></p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>当前目录下创建redis文件夹,redis目录下创建 redis.conf </p><p> redis.conf 设置配置信息</p><pre class=" language-groovy"><code class="language-groovy">#修改为守护模式daemonize yes#设置进程锁文件pidfile redis<span class="token operator">/</span>redis<span class="token operator">.</span>pid#端口port <span class="token number">6379</span>#客户端超时时间timeout <span class="token number">300</span>#日志级别loglevel debug#日志文件位置logfile redis<span class="token operator">/</span>log<span class="token operator">-</span>redis<span class="token operator">.</span>log#设置数据库的数量，默认数据库为<span class="token number">0</span>，可以使用SELECT <span class="token operator">&lt;</span>dbid<span class="token operator">></span>命令在连接上指定数据库iddatabases <span class="token number">8</span>##指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合#save <span class="token operator">&lt;</span>seconds<span class="token operator">></span> <span class="token operator">&lt;</span>changes<span class="token operator">></span>#Redis默认配置文件中提供了三个条件：save <span class="token number">900</span> <span class="token number">1</span>save <span class="token number">300</span> <span class="token number">10</span>save <span class="token number">60</span> <span class="token number">10000</span>#指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，#可以关闭该#选项，但会导致数据库文件变的巨大rdbcompression yes#指定本地数据库文件名dbfilename dump<span class="token operator">.</span>rdb#指定本地数据库路径dir redis<span class="token string">/db/</span>#指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能#会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有#的数据会在一段时间内只存在于内存中appendonly no#指定更新日志条件，共有<span class="token number">3</span>个可选值：#no：表示等操作系统进行数据缓存同步到磁盘（快）#always：表示每次更新操作后手动调用<span class="token function">fsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>将数据写到磁盘（慢，安全）#everysec：表示每秒同步一次（折衷，默认值）appendfsync everysec#redis配置外网访问：<span class="token keyword">protected</span><span class="token operator">-</span>mode no#配置密码requirepass root</code></pre><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><pre class=" language-shell"><code class="language-shell">docker run -p 6379:6379 --name redis -v $PWD/redis.conf:/root/redis/redis.conf -v $PWD/data:/root/redis/data -d redis redis-server</code></pre><h2 id="进入容器并开启客户端查看redis信息"><a href="#进入容器并开启客户端查看redis信息" class="headerlink" title="进入容器并开启客户端查看redis信息"></a>进入容器并开启客户端查看redis信息</h2><pre class=" language-shell"><code class="language-shell">docker exec -it myredis redis-cli</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1-安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初始化密码</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/mysql8.0/chu-shi-hua-mi-ma/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/mysql8.0/chu-shi-hua-mi-ma/</url>
      
        <content type="html"><![CDATA[<div id="cnblogs_post_body" class="blogpost-body ">    <p><br>一、问题描述</p><p>1、在安装MySQL8.0时，修改临时密码，因密码过于简单（如：123456），不符合MySQL密码规范，会触发一个报错信息：</p><p> ERROR 1819 (HY000): Your password does not satisfy the current policy requirements。 </p><p><br>二、遇到问题</p><p>1、解决办法调整MySQL密码验证规则，修改 policy 和 length 的值。</p><p>2、MySQL 5.7 进行如下设置，即可解决问题：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p>mysql&gt;  set global validate_password_policy=0;<br>mysql&gt; set global validate_password_length=1;<br>3、MySQL 8.0 执行代码：&nbsp;&nbsp;&nbsp;&nbsp;</p><p>mysql&gt;  set global validate_password_policy=0;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'<br> <br>mysql&gt; set global validate_password_length=1;<br>ERROR 1193 (HY000): Unknown system variable 'validate_password_length'<br>&nbsp;</p><p>三、问题解决</p><p>1、分析： 可以看到，修改 policy 和 length 的值，在MySQL5.7中好使，在MySQL8.0中无效。'validate_password_policy' 变量不存在。</p><p>2、解决： 先修改一个满足的密码 （如：Root_12root）</p><p>3、密码修改后，可用命令查看 validate_password 密码验证插件是否安装。</p><p>mysql&gt; SHOW VARIABLES LIKE 'validate_password%';</p><p><img src="https://img2018.cnblogs.com/blog/1119010/201904/1119010-20190414231708837-350259959.png" alt=""></p><p>&nbsp;</p><p>4、MySQL 8.0 调整密码验证规则：</p><p>mysql&gt; set global validate_password.policy=0;</p><p><em id="__mceDel">mysql&gt; set global validate_password.length=1;</em></p><p>&nbsp;</p><p>5、重新设置密码：&nbsp;ALTER USER 'root'@'localhost' IDENTIFIED BY '你的密码';</p><p>&nbsp;</p><p>四、问题总结</p><p>1、 通过查看 MySQL5.7 和 MySQL8.0 密码验证插件对比，可知两个版本中，变量名不一样。（*_password_policy 和 *_password.policy ） --- 问题原因所在。</p><p><br><br></p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL8.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 初始化密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从安装到卸载</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/mysql8.0/cong-an-zhuang-dao-xie-zai/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/mysql8.0/cong-an-zhuang-dao-xie-zai/</url>
      
        <content type="html"><![CDATA[<div class="htmledit_views" id="content_views">                                            <p>根据搜集的资料安装测试并在安装测试过程中整理的文档，部分参考文档在相应位置有标记。如有不足希望不吝赐教。</p><hr><p><strong>目录</strong></p><p id="%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90-toc" style="margin-left:0px;"><a href="#%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90" rel="nofollow" data-token="d05dd36135c8110a3915b2b41de20705" target="_self">一、配置yum源</a></p><p id="1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85-toc" style="margin-left:40px;"><a href="#1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85" rel="nofollow" data-token="417284a06befa9cee1452bdec45f4c0a" target="_self">1.下载mysql源安装包</a></p><p id="2.%E5%AE%89%E8%A3%85mysql%E6%BA%90-toc" style="margin-left:40px;"><a href="#2.%E5%AE%89%E8%A3%85mysql%E6%BA%90" rel="nofollow" data-token="e9d32b2830496abafa4296f459aa7f3d" target="_self">2.安装mysql源</a></p><p id="3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F-toc" style="margin-left:40px;"><a href="#3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F" rel="nofollow" data-token="1c1ae194bac23d13cc942f2d0d77dae3" target="_self">3.检查是否安装成功</a></p><p id="4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89-toc" style="margin-left:40px;"><a href="#4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89" rel="nofollow" data-token="4570ea7ce1108877c41a7f05927bec9d" target="_self">4.修改安装版本（非必须）</a></p><p id="%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql-toc" style="margin-left:0px;"><a href="#%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql" rel="nofollow" data-token="c25db65e3c6ac36e7385821f60267da4" target="_self">二、安装mysql</a></p><p id="%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1-toc" style="margin-left:0px;"><a href="#%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1" rel="nofollow" data-token="75e4e89348d079d41a14d494629e49b3" target="_self">三、启动mysql服务</a></p><p id="1.%E5%90%AF%E5%8A%A8-toc" style="margin-left:40px;"><a href="#1.%E5%90%AF%E5%8A%A8" rel="nofollow" data-token="2906b6ab2ecf17d76553fa1eba572110" target="_self">1.启动</a></p><p id="2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81-toc" style="margin-left:40px;"><a href="#2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81" rel="nofollow" data-token="1b0021eceb6545bf8afc494304fa610a" target="_self">2.查看启动状态</a></p><p id="3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8-toc" style="margin-left:40px;"><a href="#3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8" rel="nofollow" data-token="a7d4243e46d226b4b81da270f0b9baa0" target="_self">3.设置开机启动</a></p><p id="%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4-toc" style="margin-left:0px;"><a href="#%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4" rel="nofollow" data-token="e24e079f3438547c7c27b31ee6cbe027" target="_self">四、配置及部分命令</a></p><p id="1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81-toc" style="margin-left:40px;"><a href="#1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81" rel="nofollow" data-token="c0049e3ef8e6b619a30b66e715f98485" target="_self">1.修改登录密码</a></p><p id="2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7-toc" style="margin-left:40px;"><a href="#2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7" rel="nofollow" data-token="ab63e91dfe71542d4083e1df7f7209f6" target="_self">2.添加远程登录用户</a></p><p id="3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8-toc" style="margin-left:40px;"><a href="#3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8" rel="nofollow" data-token="096dee9405675b85ad261d9c2f1ca8e4" target="_self">3.sqlyog链接时出现2058异常</a></p><p id="4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-toc" style="margin-left:40px;"><a href="#4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F" rel="nofollow" data-token="9c4db988b874d3a1e837ba0840a750ea" target="_self">4.修改默认编码方式</a></p><p id="5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4-toc" style="margin-left:40px;"><a href="#5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4" rel="nofollow" data-token="1a9e85638177f3bd4a6535c5531819bb" target="_self">5.部分参数配置查询命令</a></p><p id="%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql-toc" style="margin-left:0px;"><a href="#%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql" rel="nofollow" data-token="f8ea7589ce89f80e362642038fd5d95c" target="_self">五、彻底卸载mysql</a></p><p id="1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6-toc" style="margin-left:40px;"><a href="#1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6" rel="nofollow" data-token="6d14d118678bee6ab8250f781c543b72" target="_self">1.卸载软件</a></p><p id="2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6-toc" style="margin-left:40px;"><a href="#2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6" rel="nofollow" data-token="85f671d566679a24113ce779a10ae758" target="_self">2.删除文件</a></p><hr id="hr-toc"><h1 id="%E4%B8%80%E3%80%81%E9%85%8D%E7%BD%AEyum%E6%BA%90"><a name="t0"></a>一、配置yum源</h1><h2 id="1.%E4%B8%8B%E8%BD%BDmysql%E6%BA%90%E5%AE%89%E8%A3%85%E5%8C%85"><a name="t1"></a>1.下载mysql源安装包</h2><p style="margin-left:0cm;">在MySQL官网中下载YUM源rpm安装包：<a href="http://dev.mysql.com/downloads/repo/yum/" rel="nofollow" data-token="db341c165501c5ffff8e6ed32f64bbbe">http://dev.mysql.com/downloads/repo/yum/</a></p><p style="text-align:center;"><img alt="" class="has" height="238" src="https://img-blog.csdn.net/20181007150611140?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p style="text-align:center;"><img alt="" class="has" height="196" src="https://img-blog.csdn.net/20181007150615107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p style="margin-left:0cm;">复制下载链接：<a href="https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm" rel="nofollow" data-token="3a11cfb38f198a03eef9b7f7a069db2e">https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</a></p><p style="margin-left:0cm;">本次下载目录为：/home/目录，因此进入：<span style="color:#ff0000;">cd /home</span></p><p style="margin-left:0cm;">执行下载命令：</p><pre class="has" name="code"><code class="hljs java">wget https:<span class="hljs-comment">//dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm</span></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p>&nbsp;</p><h2 id="2.%E5%AE%89%E8%A3%85mysql%E6%BA%90"><a name="t2"></a>2.安装mysql源</h2><p style="margin-left:0cm;">下载完成后使用下面命令安装源：</p><pre class="has" name="code"><code class="hljs css"><span class="hljs-selector-tag">yum</span> <span class="hljs-selector-tag">localinstall</span> <span class="hljs-selector-tag">mysql80-community-release-el7-1</span><span class="hljs-selector-class">.noarch</span><span class="hljs-selector-class">.rpm</span></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p>&nbsp;</p><h2 id="3.%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F"><a name="t3"></a>3.检查是否安装成功</h2><pre class="has" name="code"><code class="hljs perl">yum repolist enabled | <span class="hljs-keyword">grep</span> <span class="hljs-string">"mysql.*-community.*"</span></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="65" src="https://img-blog.csdn.net/20181007150748219?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p>&nbsp;</p><h2 id="4.%E4%BF%AE%E6%94%B9%E5%AE%89%E8%A3%85%E7%89%88%E6%9C%AC%EF%BC%88%E9%9D%9E%E5%BF%85%E9%A1%BB%EF%BC%89"><a name="t4"></a>4.修改安装版本（非必须）</h2><p style="margin-left:0cm;">如果需要安装指定版本的mysql，可以修改/etc/yum.repos.d/mysql-community.repo源，改变默认安装的mysql版本。</p><p style="margin-left:0cm;">例如要安装5.7版本，将5.7源的enabled=0改成enabled=1，将8.0的enabled=1改成enabled=0即可，如下（本次未做修改，直接安装最新版8.0.12）：</p><p style="text-align:center;"><img alt="" class="has" height="202" src="https://img-blog.csdn.net/2018100715082168?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="507"></p><p>&nbsp;</p><h1 id="%E4%BA%8C%E3%80%81%E5%AE%89%E8%A3%85mysql"><a name="t5"></a>二、安装mysql</h1><p>直接使用命令：<span style="color:#ff0000;">yum install mysql-community-server</span>即可。</p><p>&nbsp;</p><h1 id="%E4%B8%89%E3%80%81%E5%90%AF%E5%8A%A8mysql%E6%9C%8D%E5%8A%A1"><a name="t6"></a>三、启动mysql服务</h1><h2 id="1.%E5%90%AF%E5%8A%A8"><a name="t7"></a>1.启动</h2><pre class="has" name="code"><code class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl <span class="hljs-keyword">start</span> mysqld</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">或者</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">service mysqld <span class="hljs-keyword">start</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p>&nbsp;</p><h2 id="2.%E6%9F%A5%E7%9C%8B%E5%90%AF%E5%8A%A8%E7%8A%B6%E6%80%81"><a name="t8"></a>2.查看启动状态</h2><pre class="has" name="code"><code class="hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl status mysqld</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">或者</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">service mysqld status</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="218" src="https://img-blog.csdn.net/20181007150954915?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p>&nbsp;</p><h2 id="3.%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8"><a name="t9"></a>3.设置开机启动</h2><pre class="has" name="code"><code class="hljs bash"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl <span class="hljs-built_in">enable</span> mysqld</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl daemon-reload</div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p>&nbsp;</p><h1 id="%E5%9B%9B%E3%80%81%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%83%A8%E5%88%86%E5%91%BD%E4%BB%A4"><a name="t10"></a>四、配置及部分命令</h1><h2 id="1.%E4%BF%AE%E6%94%B9%E7%99%BB%E5%BD%95%E5%AF%86%E7%A0%81"><a name="t11"></a>1.修改登录密码</h2><p style="margin-left:0cm;">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql进行修改：</p><pre class="has" name="code"><code class="hljs perl"><span class="hljs-keyword">grep</span> <span class="hljs-string">'temporary password'</span> /var/<span class="hljs-keyword">log</span>/mysqld.log</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="26" src="https://img-blog.csdn.net/2018100715105966?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p style="margin-left:0cm;">本地MySQL客户端登录</p><pre class="has" name="code"><code class="hljs">mysql -uroot -p</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">密码是上一步查询出来的。输入后回车。</p><p style="margin-left:0cm;">然后修改密码：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">BY</span> <span class="hljs-string">'TestBicon@123'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">或者</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">'TestBicon@123'</span>);</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><blockquote><p><strong>注意</strong>：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误，如下图所示：</p><p style="text-align:center;"><img alt="" class="has" height="34" src="https://img-blog.csdn.net/20181007151159829?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p></blockquote><p style="margin-left:0cm;">通过msyql环境变量可以查看密码策略的相关信息（执行这一步需要先修改默认密码，即执行完上一步修改才可以，否则会报错：ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.）：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">variables</span> <span class="hljs-keyword">like</span> <span class="hljs-string">'%password%'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="406" src="https://img-blog.csdn.net/20181007151229820?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="488"></p><blockquote><p style="margin-left:0cm;">validate_password_policy：密码策略，默认为MEDIUM策略</p><p style="margin-left:0cm;">validate_password_dictionary_file：密码策略文件，策略为STRONG才需要</p><p style="margin-left:0cm;">validate_password_length：密码最少长度</p><p style="margin-left:0cm;">validate_password_mixed_case_count：大小写字符长度，至少1个</p><p style="margin-left:0cm;">validate_password_number_count ：数字至少1个</p><p style="margin-left:0cm;">validate_password_special_char_count：特殊字符至少1个</p><p style="margin-left:0cm;"><em>上述参数是默认策略</em><em>MEDIUM</em><em>的密码检查规则。</em></p></blockquote><p style="margin-left:0cm;">修改密码策略：</p><p style="margin-left:0cm;">在/etc/my.cnf文件添加validate_password_policy配置，指定密码策略：</p><p style="margin-left:0cm;">选择0（LOW），1（MEDIUM），2（STRONG）其中一种，选择2需要提供密码字典文件。</p><p style="margin-left:0cm;"><span style="color:#4472c4;">validate_password_policy=0</span></p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;">如果不需要密码策略，添加my.cnf文件中添加如下配置禁用即可：</p><p style="margin-left:0cm;"><span style="color:#4472c4;">validate_password = off</span></p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;">重新启动mysql服务使配置生效：<span style="color:#ff0000;">systemctl restart mysqld</span></p><p>&nbsp;</p><h2 id="2.%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E7%94%A8%E6%88%B7"><a name="t12"></a>2.添加远程登录用户</h2><p style="margin-left:0cm;">默认只允许root帐户在本地登录，如果要在其它机器上连接mysql，必须修改root允许远程连接，或者添加一个允许远程连接的帐户。</p><p style="margin-left:0cm;">修改root用户远程访问权限：</p><p style="margin-left:0cm;">选择 mysql 数据库：<span style="color:#ff0000;">use mysql;</span></p><p style="margin-left:0cm;">在 mysql 数据库的 user 表中查看当前 root 用户的相关信息：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">select</span> host, <span class="hljs-keyword">user</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="160" src="https://img-blog.csdn.net/20181007151435699?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="269"></p><p style="margin-left:0cm;">查看表格中 root 用户的 host，默认应该显示的 localhost，只支持本地访问，不允许远程访问。</p><p style="margin-left:0cm;">授权 root 用户的所有权限并设置远程访问</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">GRANT</span> ALL <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">如果报错：ERROR 1410 (42000): You are not allowed to create a user with GRANT</p><p style="text-align:center;"><img alt="" class="has" height="41" src="https://img-blog.csdn.net/2018100715151769?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="490"></p><p style="margin-left:0cm;">则使用：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> host=<span class="hljs-string">'%'</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> =<span class="hljs-string">'root'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">然后使用下面命令使修改生效：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">flush</span> <span class="hljs-keyword">privileges</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><blockquote><p style="margin-left:0cm;"><em>如有需要再执行之前授权报错的命令即可成功，最后同样使用</em><em><span style="color:#ff0000;">flush privileges;</span></em><em>命令刷新。</em></p></blockquote><p>&nbsp;</p><h2 id="3.sqlyog%E9%93%BE%E6%8E%A5%E6%97%B6%E5%87%BA%E7%8E%B02058%E5%BC%82%E5%B8%B8"><a name="t13"></a>3.sqlyog链接时出现2058异常</h2><p style="margin-left:0cm;">完成上面的配置使用sqlyog链接时会出现2058的异常，此时我们需要修改mysql，命令行登录mysql（与修改密码中登录相同，使用修改后的密码），然后执行下面的命令：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'localhost'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">'password'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">其中password为自己修改的密码。然后SQLyog中重新连接，则可连接成功，OK。</p><blockquote><p style="margin-left:0cm;">如果报错：ERROR 1396 (HY000): Operation ALTER USER failed for 'root'@'localhost'则使用下面命令：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">'root'</span>@<span class="hljs-string">'%'</span> <span class="hljs-keyword">IDENTIFIED</span> <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">'password'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre></blockquote><p>&nbsp;</p><h2 id="4.%E4%BF%AE%E6%94%B9%E9%BB%98%E8%AE%A4%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F"><a name="t14"></a>4.修改默认编码方式</h2><p style="margin-left:0cm;">mysql8.0默认编码方式为utf8mb4，因此使用时不需要修改，可使用如下命令查看：</p><pre class="has" name="code"><code class="hljs sql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">VARIABLES</span> <span class="hljs-keyword">WHERE</span> Variable_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'character_set_%'</span> <span class="hljs-keyword">OR</span> Variable_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">'collation%'</span>;</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="text-align:center;"><img alt="" class="has" height="207" src="https://img-blog.csdn.net/20181007151723711?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p>&nbsp;</p><p style="margin-left:0cm;">如果需要修改其他编码方式，方法有很多，以下仅为举例。</p><p style="margin-left:0cm;">比如需要修改为utf8mb4，可以使用如下方式：</p><p style="margin-left:0cm;">修改mysql配置文件my.cnf（windows为my.ini）</p><p style="margin-left:0cm;">my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：</p><blockquote><p style="margin-left:0cm;"><span style="color:#4472c4;">[client] </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">default-character-set = utf8mb4 </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">[mysql] </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">default-character-set = utf8mb4 </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">[mysqld] </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">character-set-client-handshake = FALSE </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">character-set-server = utf8mb4 </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">collation-server = utf8mb4_unicode_ci </span></p><p style="margin-left:0cm;"><span style="color:#4472c4;">init_connect='SET NAMES utf8mb4'</span></p></blockquote><p style="margin-left:0cm;">重启mysql即可。</p><p style="margin-left:0cm;">collation_connection 、collation_database 、collation_server是什么没关系。但必须保证以下这几个变量必须是utf8mb4。：</p><blockquote><ul><li>character_set_client&nbsp; (客户端来源数据使用的字符集)</li>    <li>character_set_connection&nbsp;&nbsp;&nbsp;&nbsp; (连接层字符集)</li>    <li>character_set_database&nbsp;&nbsp; (当前选中数据库的默认字符集)</li>    <li>character_set_results (查询结果字符集)</li>    <li>character_set_server (默认的内部操作字符集)</li></ul></blockquote><p>&nbsp;</p><p style="margin-left:0cm;">数据库连接参数中:</p><p style="margin-left:0cm;">characterEncoding=utf8会被自动识别为utf8mb4，也可以不加这个参数，会自动检测。</p><p style="margin-left:0cm;">而autoReconnect=true是必须加上的。</p><p>&nbsp;</p><h2 id="5.%E9%83%A8%E5%88%86%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE%E6%9F%A5%E8%AF%A2%E5%91%BD%E4%BB%A4"><a name="t15"></a>5.部分参数配置查询命令</h2><blockquote><p style="margin-left:0cm;">#查询mysql最大连接数设置</p><p style="margin-left:0cm;">show global variables like 'max_conn%';</p><p style="margin-left:0cm;">SELECT @@MAX_CONNECTIONS AS 'Max Connections';</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看最大链接数</p><p style="margin-left:0cm;">show global status like 'Max_used_connections';</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看慢查询日志是否开启以及日志位置</p><p style="margin-left:0cm;">show variables like 'slow_query%';</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看慢查询日志超时记录时间</p><p style="margin-left:0cm;">show variables like 'long_query_time';</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看链接创建以及现在正在链接数</p><p style="margin-left:0cm;">show status like 'Threads%';</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看数据库当前链接</p><p style="margin-left:0cm;">show processlist;</p><p style="margin-left:0cm;">&nbsp;</p><p style="margin-left:0cm;"># 查看数据库配置</p><p style="margin-left:0cm;">show variables like '%quer%';</p></blockquote><p>&nbsp;</p><h1 id="%E4%BA%94%E3%80%81%E5%BD%BB%E5%BA%95%E5%8D%B8%E8%BD%BDmysql"><a name="t16"></a>五、彻底卸载mysql</h1><h2 id="1.%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6"><a name="t17"></a>1.卸载软件</h2><pre class="has" name="code"><code class="hljs vbscript">yum remove mysql-community-<span class="hljs-built_in">server</span></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">完成后使用<span style="color:#ff0000;">rpm -qa|grep mysql</span>命令查看，如果有查询结果，则使用<span style="color:#ff0000;">yum remove </span><span style="color:#ff0000;">名称</span>清理掉。如图：</p><p style="text-align:center;"><img alt="" class="has" height="119" src="https://img-blog.csdn.net/20181007152057292?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p>&nbsp;</p><p style="margin-left:0cm;">再使用命令<span style="color:#ff0000;">rpm -qa | grep -i mysql</span>查看，如果有结果使用<span style="color:#ff0000;">rpm -e </span><span style="color:#ff0000;">名称</span>卸载。例如：</p><p style="text-align:center;"><img alt="" class="has" height="66" src="https://img-blog.csdn.net/20181007152108839?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4NTkxNzU2/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="554"></p><p>&nbsp;</p><h2 id="2.%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6"><a name="t18"></a>2.删除文件</h2><pre class="has" name="code"><code class="hljs go"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">rm -rf /<span class="hljs-keyword">var</span>/lib/mysql</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">rm /etc/my.cnf</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">rm -rf /usr/share/mysql<span class="hljs-number">-8.0</span></div></div></li></ol></code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><p style="margin-left:0cm;">如果需要重新安装，在安装完成启动之前可以先对mysql目录赋予权限防止异常发生：</p><pre class="has" name="code"><code class="hljs go">chmod -R <span class="hljs-number">777</span> /<span class="hljs-keyword">var</span>/lib/mysql</code><div class="hljs-button signin" data-title="登录后复制" onclick="hljs.signin(event)"></div></pre><hr><p>END</p>                                    </div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL8.0 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 从安装到卸载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>index</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/maven-he-gradle/index/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/maven-he-gradle/index/</url>
      
        <content type="html"><![CDATA[<h1 id="idea对项目创建创建的两种方式maven和gradle"><a href="#idea对项目创建创建的两种方式maven和gradle" class="headerlink" title="idea对项目创建创建的两种方式maven和gradle"></a>idea对项目创建创建的两种方式maven和gradle</h1><p>注意：idea对gradle的支持还不是很智能，对maven的依赖的好</p><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><h2 id="gradle"><a href="#gradle" class="headerlink" title="gradle"></a>gradle</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Maven和Gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> index </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防火墙的设置</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/fang-huo-qiang-de-she-zhi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/fang-huo-qiang-de-she-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="防火墙的设置"><a href="#防火墙的设置" class="headerlink" title="防火墙的设置"></a>防火墙的设置</h1><pre><code>保护服务器的安全设置防火墙规则开放80 22端口关闭防火墙</code></pre><h1 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h1><pre><code>1. 安装 yum install firewalld2. 启动 service firewalld start3. 检查状态 service firewalld status4. 关闭或禁用防火墙 service firewalld stop/disable</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 防火墙的设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用户操作</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/yong-hu-cao-zuo/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/yong-hu-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="系统用户操作命令"><a href="#系统用户操作命令" class="headerlink" title="系统用户操作命令"></a>系统用户操作命令</h1><ol><li>useradd 选项 用户名<ol><li>参数说明：<br>选项:</li><li>-c comment 指定一段注释性描述.</li></ol>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。<br>-g 用户组 指定用户所属的用户组。<br>-G 用户组，用户组 指定用户所属的附加组。<br>-s Shell文件 指定用户的登录Shell。<br>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 用户操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/untitled/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/untitled/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Untitled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件命令操作md</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/wen-jian-ming-ling-cao-zuo-md/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/wen-jian-ming-ling-cao-zuo-md/</url>
      
        <content type="html"><![CDATA[<h1 id="文件命令操作"><a href="#文件命令操作" class="headerlink" title="文件命令操作"></a>文件命令操作</h1><div id="navCategory" style="color:#152e97;"><p style="font-size:18px;"><b>目录</b></p><ul><li><a href="#_label0">1、Linux命令的普遍语法格式</a></li><li><a href="#_label1">2、目录处理命令</a><ul><li><a href="#_label1_0">　一、显示目录文件命令：ls</a></li><li><a href="#_label1_1">　二、创建目录命令：mkdir</a></li><li><a href="#_label1_2">　三、切换目录命令：cd</a></li><li><a href="#_label1_3">　四、shell内置命令和外部命令的区别</a></li><li><a href="#_label1_4">　五、显示当前目录命令：pwd</a></li><li><a href="#_label1_5">　六、删除空目录命令：rmdir</a></li><li><a href="#_label1_6">　七、复制文件或目录命令：cp</a></li><li><a href="#_label1_7">　八、剪切文件或目录命令：mv</a></li><li><a href="#_label1_8">　九、删除文件或目录命令：rm</a></li></ul></li><li><a href="#_label2">3、文件处理命令</a><ul><li><a href="#_label2_0">　一、创建空文件命令：touch</a></li><li><a href="#_label2_1">　二、显示文件内容命令（适合内容较少的文件）：cat</a></li><li><a href="#_label2_2">　三、反向显示文件内容命令（适合内容较少的文件）：tac</a></li><li><a href="#_label2_3">　四、分页显示文件内容命令（不能向前翻页）：more</a></li><li><a href="#_label2_4">　五、分页显示文件内容命令（可以前后翻页）：less</a></li><li><a href="#_label2_5">　六、显示文件内容命令（指定行数）：head</a></li><li><a href="#_label2_6">　七、反向文件内容命令（文件即时更新后也能动态显示，多用于日志文件显示）：tail</a></li></ul></li><li><a href="#_label3">4、总结</a></li></ul></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件命令操作md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Readis安装及配置</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/readis-an-zhuang-ji-pei-zhi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/readis-an-zhuang-ji-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="Readis安装"><a href="#Readis安装" class="headerlink" title="Readis安装"></a>Readis安装</h2><p><a href="https://redis.io/">官方网址</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Readis安装及配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/nginx-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/nginx-jian-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="http://nginx.org/en/linux_packages.html#RHEL-CentOS">官方安装教程（网速会很慢）</a> </p><p><a href="http://nginx.org/en/docs/beginners_guide.html">官方入门指南</a></p><h2 id="Nginx简介"><a href="#Nginx简介" class="headerlink" title="Nginx简介"></a>Nginx简介</h2><pre><code>Nginx是什么？能干什么？有什么特点？</code></pre><ol><li>轻量级web服务器，也是一款反向代理服务器</li><li>可直接支持Rails和PHP的程序</li><li>可作为http反向代理服务器</li><li>负债均衡服务器</li><li>邮件代理服务器</li><li>帮助前端动静分离<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><ol><li>启动systemctl start nginx</li><li>停止systemctl stop nginx</li><li>状态systemctl status nginx</li><li>重启systemctl reload nginx<h2 id="nginx文件目录"><a href="#nginx文件目录" class="headerlink" title="nginx文件目录"></a>nginx文件目录</h2></li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nat连接网络</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/nat-lian-jie-wang-luo/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/nat-lian-jie-wang-luo/</url>
      
        <content type="html"><![CDATA[<h1 id="虚拟机NAT模式连接SSH"><a href="#虚拟机NAT模式连接SSH" class="headerlink" title="虚拟机NAT模式连接SSH"></a>虚拟机NAT模式连接SSH</h1><img src="nat.png"><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nat连接网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql安装</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/mysql-an-zhuang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/mysql-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Centos7安装mysql8-0"><a href="#Centos7安装mysql8-0" class="headerlink" title="Centos7安装mysql8.0"></a>Centos7安装mysql8.0</h2><p><a href="https://dev.mysql.com/doc/refman/8.0/en/linux-installation.html">官方安装教程地址</a></p><div class="htmledit_views" id="content_views">                                            <div id="cnblogs_post_body" class="blogpost-body">    <h2><a name="t0"></a>CentOS 7 安装 MySQL</h2><h3><a name="t1"></a>首先检查 MySQL 是否已安装</h3><p>yum list installed | <span class="hljs-keyword">grep mysql</span></p><p><span class="hljs-keyword">如果有的话 就全部卸载</span></p><p><span class="hljs-keyword"><span class="hljs-selector-tag">yum <span class="hljs-selector-tag">-y <span class="hljs-selector-tag">remove +数据库名称<span class="hljs-selector-tag"><br></span></span></span></span></span></p><p><span class="hljs-keyword"><span class="hljs-selector-tag"><span class="hljs-selector-tag"><span class="hljs-selector-tag"><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182138628-598984235.png" alt=""></span></span></span></span></p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182146284-309574833.png" alt=""></p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182150753-216803501.png" alt=""></p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182156316-2043422646.png" alt=""></p><h3><a name="t2"></a>MySQL 依赖 libaio，所以先要安装 libaio</h3><p><span class="hljs-attribute">yum search libaio <span class="hljs-comment"># 检索相关信息</span></span></p><p><span class="hljs-attribute"><span class="hljs-comment"> yum install libaio <span class="hljs-comment"># 安装依赖包</span></span></span></p><p><span class="hljs-attribute"><span class="hljs-comment"><span class="hljs-comment"><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182309284-812797022.png" alt=""></span></span></span></p><p>&nbsp;</p><h3><a name="t3"></a>下载 MySQL Yum Repository</h3><p>地址为&nbsp;<a href="http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm" rel="nofollow" data-token="24f8cc217d01a7b0b936d5447908644e">http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</a></p><p>&nbsp;</p><p><span class="hljs-attribute">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span></p><p><span class="hljs-attribute">然后</span></p><h3><a name="t4"></a>添加 MySQL Yum Repository</h3><p>添加 MySQL Yum Repository 到你的系统 repository 列表中，执行</p><p>&nbsp;</p><p><span class="hljs-selector-tag">yum&nbsp;<span class="hljs-selector-tag">localinstall&nbsp;<span class="hljs-selector-tag">mysql-community-release-el7-5<span class="hljs-selector-class">.noarch<span class="hljs-selector-class">.rpm</span></span></span></span></span></p><p><span class="hljs-attribute"><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182521706-940146849.png" alt=""></span></p><p>如果提示<code>-bash: wget: 未找到命令</code>，请先执行&nbsp;<code>yum install wget</code>&nbsp;安装 wget</p><p>&nbsp;</p><h3><a name="t5"></a>验证下是否添加成功</h3><pre><code class="hljs perl">yum repolist enabled | <span class="hljs-keyword"><span class="hljs-keyword">grep</span> <span class="hljs-string"><span class="hljs-string">"mysql.*-community.*"</span></span></span></code><br><br><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><h3><a name="t6"></a>选择要启用 MySQL 版本</h3><p>查看 MySQL 版本，执行</p><pre><code class="hljs perl"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">yum repolist all | <span class="hljs-keyword"><span class="hljs-keyword">grep</span> mysql</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>可以看到 5.5， 5.7 版本是默认禁用的，因为现在最新的稳定版是 5.6</p><pre><code class="hljs perl"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">yum repolist enabled | <span class="hljs-keyword"><span class="hljs-keyword">grep</span> mysql</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>查看当前的启动的 MySQL 版本</p><h3><a name="t7"></a>通过 Yum 来安装 MySQL</h3><p>执行</p><pre><code class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">yum <span class="hljs-keyword"><span class="hljs-keyword">install</span> mysql-community-<span class="hljs-keyword"><span class="hljs-keyword">server</span> </span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>Yum 会自动处理 MySQL 与其他组件的依赖关系：</p><pre><br><br></pre><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105182927534-1130688424.png" alt=""></p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183118300-438733573.png" alt=""></p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183423206-1086888071.png" alt=""></p><p>&nbsp;</p><p>遇到上述提示，输入 y 继续，执行完成会提示“完毕！”。此时MySQL 安装完成，它包含了 mysql-community-server、mysql-community-client、mysql-community-common、mysql-community-libs 四个包。</p><p>执行</p><pre><code class="hljs css"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-selector-tag"><span class="hljs-selector-tag">rpm</span> <span class="hljs-selector-tag"><span class="hljs-selector-tag">-qi</span> <span class="hljs-selector-tag"><span class="hljs-selector-tag">mysql-community-server</span><span class="hljs-selector-class"><span class="hljs-selector-class">.x86_64</span> 0<span class="hljs-selector-pseudo"><span class="hljs-selector-pseudo">:5</span><span class="hljs-selector-class"><span class="hljs-selector-pseudo">.6</span><span class="hljs-selector-class"><span class="hljs-selector-pseudo">.24-3</span><span class="hljs-selector-class"><span class="hljs-selector-pseudo">.el7</span></span></span></span></span></span></span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>执行</p><pre><code class="hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-attribute">whereis mysql</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>可以看到 MySQL 的安装目录是 /usr/bin/</p><p>&nbsp;</p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183533222-843570707.png" alt=""></p><p>&nbsp;</p><h2><a name="t8"></a>启动和关闭 MySQL Server</h2><h3><a name="t9"></a>启动 MySQL Server</h3><pre><code class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl <span class="hljs-keyword"><span class="hljs-keyword">start</span>  mysqld</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><h3><a name="t10"></a>查看 MySQL Server 状态</h3><pre><code class="hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-attribute">systemctl status  mysqld</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><h3><a name="t11"></a>关闭 MySQL Server</h3><pre><code class="hljs vbscript"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">systemctl <span class="hljs-keyword"><span class="hljs-keyword">stop</span> mysqld</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><h2><a name="t12"></a>测试是否安装成功</h2><pre><code class="hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-attribute">mysql</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>可以进入 mysql 命令行界面</p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183644956-232259366.png" alt=""></p><p>&nbsp;</p><h2><a name="t13"></a>防火墙设置</h2><p>远程访问 MySQL， 需开放默认端口号 3306.</p><p>执行</p><pre><code class="hljs cs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">firewall-cmd <span class="hljs-comment"><span class="hljs-comment">--permanent --zone=<span class="hljs-keyword">public</span> --<span class="hljs-keyword">add</span>-port=<span class="hljs-number">3306</span>/tcp</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">firewall-cmd <span class="hljs-comment">--permanent --zone=<span class="hljs-keyword">public</span> --<span class="hljs-keyword">add</span>-port=<span class="hljs-number">3306</span>/udp</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment"></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p>这样就开放了相应的端口。</p><p>执行</p><pre><code class="hljs sql">firewall-cmd <span class="hljs-comment"><span class="hljs-comment">--reload </span><br></span></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><h2><a name="t14"></a>MySQL 安全设置</h2><p>服务器启动后，可以执行</p><pre><code class="hljs">mysql_secure_installation;</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><pre><code class="hljs"></code><br><br><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183851300-789943277.png" alt=""></p><pre></pre><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105183854019-1241643422.png" alt=""></p><p>此时输入 root 原始密码（初始化安装的话为空），接下来，为了安全，MySQL 会提示你重置 root 密码，移除其他用户账号，禁用 root 远程登录，移除 test 数据库，重新加载 privilege 表格等，你只需输入 y 继续执行即可。</p><p>至此，整个 MySQL 安装完成。</p><pre></pre><p>下面可以看到都只能本机访问mysql，如果要外部可以访问mysql，那么host这里应该是显示%，所以这里我们可以选择重新创建一个用户并授予最高的权限，语句如下：</p><pre>grant all privileges on *.* to 'root'@'%' &nbsp;identified by 'lam7' with grant option;</pre><p>&nbsp;//这句话就是给root账户设置密码为lam7且host为%，即外部任何主机均可访问。*.*这个本意是数据库名.表名，我们这里没有写任何表名也没有写数据库名，就是意思所有的数据库都可以用这个root账户访问</p><p>flush privileges;//让刚刚修改的权限生效</p><p>然后接下来就是重启mysql服务，再次进入到mysql，用查询语句查看user表，如下所示：</p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184028753-388403540.png" alt=""></p><p>如果需要使用外部工具链接mysql</p><p>则需要关闭防火墙</p><p>systemctl stop firewalld</p><p>然后查看状态</p><p>systemctl status firewalld</p><p><img src="https://images2015.cnblogs.com/blog/911086/201701/911086-20170105184421206-1095288281.png" alt=""></p><pre><span style="font-family:'宋体';font-size:18pt;"><strong>参考<br></strong></span></pre><h2><a name="t15"></a><a href="http://www.centoscn.com/mysql/2016/0315/6844.html" rel="nofollow" data-token="14a059e7ea802d5e5b2ee92fe0f7a36f">CentOS 7 安装 MySQL</a></h2><pre><span style="font-family:'宋体';font-size:18pt;"><strong>&nbsp;</strong></span></pre></div><p>转载于:https://www.cnblogs.com/Lam7/p/6253564.html</p>                                    </div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LINUX设置防火墙</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/linux-she-zhi-fang-huo-qiang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/linux-she-zhi-fang-huo-qiang/</url>
      
        <content type="html"><![CDATA[<section class="ouvJEz"><h1 class="_1RuRku">Linux设置防火墙</h1><div class="rEsl9f"><div class="s-dsoj"><time datetime="2019-02-25T03:01:08.000Z">2019.02.25 11:01:08</time><span>字数 42</span><span>阅读 189</span></div></div><article class="_2rhmJa"><p>Centos 7之前的防火墙基本都是修改iptables</p><pre class="line-numbers  language-undefined"><code class="  language-undefined">service  iptables  status        查看防火墙状态<p>service  iptables  start          开启防火墙</p><p>service  iptables  stop          关闭防火墙</p><p>service  iptables  restart        重启防火墙</p></code><p><code class="  language-undefined"><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></p></pre><p></p><p>Centos 7之后的防火墙升级为Firewall，取代了之前的iptables</p><p>其常用命令为：</p><pre class="line-numbers  language-csharp"><code class="  language-csharp">firewall<span class="token operator">-</span>cmd <span class="token operator">--</span>state                          ##查看防火墙运行状态，是否是running<p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>reload                        ##重新载入配置，比如添加规则之后，需要执行此命令</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">get</span><span class="token operator">-</span>zones                  ##列出支持的zone</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">get</span><span class="token operator">-</span>services              ##列出支持的服务，在列表中的服务是放行的</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>list<span class="token operator">-</span>ports                    ##列出开放的端口</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span>query<span class="token operator">-</span>service ftp                          ##查看ftp服务是否支持，返回yes或者no</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp                            ##临时开放ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp <span class="token operator">–</span>permanent        ##永久开放ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">remove</span><span class="token operator">-</span>service<span class="token operator">=</span>ftp <span class="token operator">–</span>permanent  ##永久移除ftp服务</p><p>firewall<span class="token operator">-</span>cmd <span class="token operator">–</span><span class="token keyword">add</span><span class="token operator">-</span>port<span class="token operator">=</span><span class="token number">80</span><span class="token operator">/</span>tcp <span class="token operator">–</span>permanent      ##永久添加<span class="token number">80</span>端口</p><p>iptables <span class="token operator">-</span>L <span class="token operator">-</span>n                                  ##查看规则，这个命令是和iptables的相同的</p><p>man firewall<span class="token operator">-</span>cmd                            ##查看帮助</p><p>systemctl stop firewalld                  ##关闭防火墙</p><p>systemctl start firewalld                  ##开启防火墙</p><p>systemctl status firewalld              ##查看防火墙状态</p><p>systemctl restart firewalld              ##重启防火墙</p><p>systemctl disable firewalld              ##开机关闭防火墙，即永久关闭</p></code></pre></article></section><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LINUX设置防火墙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux准备工作</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/linux-zhun-bei-gong-zuo/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/linux-zhun-bei-gong-zuo/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h1><h3 id="虚拟机里的CentOS网络配置"><a href="#虚拟机里的CentOS网络配置" class="headerlink" title="虚拟机里的CentOS网络配置"></a>虚拟机里的CentOS网络配置</h3><pre><code>1.首先你要检查vm的网关ip是否和Centos 的IP一致</code></pre><p><img src="ip.png" alt="img"><br>    2. </p><h3 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h3><pre><code> 一.查看ip    1. ifconfig    2. ip addr    3. vi/ect/sysconfig/network-scripts/ifcfg-xx    4. yun install net-tool</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux准备工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptables的学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/iptables-de-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/iptables-de-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h1><h2 id="什么是iptables"><a href="#什么是iptables" class="headerlink" title="什么是iptables"></a>什么是iptables</h2><pre><code>常见与linux系统的应用层防火墙工具</code></pre><h2 id="什么是Netfilter"><a href="#什么是Netfilter" class="headerlink" title="什么是Netfilter?"></a>什么是Netfilter?</h2><pre><code>Netfilter是Linux操作系统核心层内部的一个数据包处理模块什么是Hook point&gt;    数据包在Netfilter中的挂载点    （PRE_POUTING,INPUT,OUTPUT,FORWARD,POST_ROUTING）</code></pre><h2 id="iptables规则组成"><a href="#iptables规则组成" class="headerlink" title="iptables规则组成"></a>iptables规则组成</h2><pre><code>组成部分：四张表+五条链（Hook point）+规则四张表：    filter表:访问控制，规则匹配    nat表：地址转发    mangle表，    raw表五条链：INPUT,OUTPUT,FORWARD,PREROUTING,POSTROUTING数据包访问控制：ACCEPT,DROP,REJECT数据包改写:SNAT,DNAT信息记录：LOG</code></pre><h2 id="iptables-配置-场景一"><a href="#iptables-配置-场景一" class="headerlink" title="iptables 配置 场景一"></a>iptables 配置 场景一</h2><pre><code>》对所有的地址开放本机的tcp（80，22，10-21）端口的访问》允许对所有的地址开放本机的基于ICMP协议的数据包访问》其他未被允许的端口则禁止访问</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iptables的学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos虚拟机网络连接问题</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/centos-xu-ni-ji-wang-luo-lian-jie-wen-ti/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/centos-xu-ni-ji-wang-luo-lian-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>装好CentOS7后，我们一开始是上不了网的 <br><img src="https://img-blog.csdn.net/20180804201654166?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>这时候，可以输入命令dhclient，可以自动获取一个IP地址，再用命令ip addr查看IP <br><img src="https://img-blog.csdn.net/20180804201723248?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>不过这时候获取的IP是动态的，下次重启系统后，IP地址也会变化，这时候我们可以把系统的IP设置为静态的，设置步骤如下： <br>（1）点击VMware虚拟机左上角的“编辑”，选择“虚拟网络编译器”。 <br>（2）选中VMnet8（NAT模式），再点击右侧的“NAT设置”此时会看到如下界面 <br><img src="https://img-blog.csdn.net/20180804201749749?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>（3）在命令行中输入：vim /etc/sysconfig/network-scripts/ifcfg-ens33 <br><img src="https://img-blog.csdn.net/20180804201953160?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>（4）此时会进入如下图所示界面 <br><img src="https://img-blog.csdn.net/20180804202037986?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>（5）将ONBOOT=no改为yes，将BOOTPROTO=dhcp改为BOOTPROTO=static,并在后面增加几行内容： <br>IPADDR=192.168.127.128 <br>NETMASK=255.255.255.0 <br>GATEWAY=192.168.127.2 <br>DNS1=119.29.29.29 <br><img src="https://img-blog.csdn.net/20180804202050977?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>（6）保存后退出，然后输入命令：systemctl restart network.service来重启网络服务。 <br><img src="https://img-blog.csdn.net/20180804202124183?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>（7）再用ip addr查看IP,并用命令ping测试网络的连通性。 <br><img src="https://img-blog.csdn.net/20180804202204447?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FraXBhMTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述" title=""> <br>至此，IP即设置完毕。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos虚拟机网络连接问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1阿里云服务器远程登录密码</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/2-1-a-li-yun-fu-wu-qi-yuan-cheng-deng-lu-mi-ma/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/2-1-a-li-yun-fu-wu-qi-yuan-cheng-deng-lu-mi-ma/</url>
      
        <content type="html"><![CDATA[<h1 id="远程登录密码-660593"><a href="#远程登录密码-660593" class="headerlink" title="远程登录密码 660593"></a>远程登录密码 660593</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1阿里云服务器远程登录密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2 CentOS镜像使用帮助</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/1-2-centos-jing-xiang-shi-yong-bang-zhu/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/linux-ru-men/1-2-centos-jing-xiang-shi-yong-bang-zhu/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS镜像使用帮助"><a href="#CentOS镜像使用帮助" class="headerlink" title="CentOS镜像使用帮助"></a>CentOS镜像使用帮助</h1><p><a href="http://mirrors.163.com/.help/centos.html">http://mirrors.163.com/.help/centos.html</a><br>    1. 首先下载 wget<br>        yum install wget<br>    2. 其次进行备份<br>         mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br>    3. 进入 /etc/yum.repos.d/ 目录，下载下载对应版本repo文件<br>        cd /etc/yum.repos.d/<br>        wget <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a><br>    4. 运行以下命令生成缓存<br>        yum clean all<br>        yum makecache</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux入门 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-2 CentOS镜像使用帮助 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据类型</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/shu-ju-lei-xing/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/shu-ju-lei-xing/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kotlin学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>[Toc]</p><p>官方网站：<a href="https://kotlinlang.org/https://kotlinlang.org/">https://kotlinlang.org/https://kotlinlang.org/</a></p><p>标语：*<strong>一种让开发人员***<br>*</strong>更快乐的现代编程语言。***<br><strong><em>永远开源<a href="https://github.com/JetBrains/kotlin">github</a></em></strong></p><blockquote><p>Kotlin的由来，就是因为java语言的缺点null 空指针，在学习android时经常发生空指针异常的情况，这是编译器无法在编写代码时给出提示，而Kotlin解决了这一问题。</p><p>我之前一直以为kotlin是Android团队开发的，不过现在才知道JetBrains公司才是大佬！</p></blockquote><blockquote><p>编程语言大致分为<strong>编译语言</strong>和<strong>解释型语言</strong></p><p>编译语言：将编写的源代码一次性编译成二进制文件，然后由系统直接执行，如C语言</p><p>解释性语言：需要一个解释器，在程序执行时解释器会一行行的读取我们的源代码，然后实时地将其解释为二进制数据再执行，如JAVAY</p></blockquote><blockquote><p>官方推荐的 学习方式：使用idea 的插件 Edu Tools，不过里边都是英文的教程，可以用翻译插件</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kotlin学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门基础学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-ji-chu-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/ru-men-ji-chu-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-编程的基础知识"><a href="#1-编程的基础知识" class="headerlink" title="1. 编程的基础知识"></a>1. 编程的基础知识</h1><h2 id="1-1-Hello-World"><a href="#1-1-Hello-World" class="headerlink" title="1.1 Hello World"></a>1.1 Hello World</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, world!"</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p><code>println()</code>需要单个参数，即 。通过将字符放在引号内来定义 。显示光标的参数后，将光标移动到新行，因此后续输出将显示在下一行</p><h2 id="1-2-常量值定义var-amp-val"><a href="#1-2-常量值定义var-amp-val" class="headerlink" title="1.2 常量值定义var &amp; val"></a>1.2 常量值定义var &amp; val</h2><p>var: 可变的值</p><p>val:只能初始化，不能被重新分配</p><h2 id="1-3-函数-fun"><a href="#1-3-函数-fun" class="headerlink" title="1.3 函数 fun"></a>1.3 函数 fun</h2><p>函数结合了一组活动，是组织程序和重新使用代码的最基本方法。</p><p>将信息传递到函数中，该函数使用该信息来计算和生成结果。函数的基本形式是：</p><p>fun 方法名（参数：类型，参数：类型）：返回类型{</p><p>​    代码</p><p>​    retrun 结果</p><p>}</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">functionName</span><span class="token punctuation">(</span>p1<span class="token operator">:</span> Type1<span class="token punctuation">,</span> p2<span class="token operator">:</span> Type2<span class="token punctuation">,</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token operator">:</span> ReturnType &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  lines of code  <span class="token keyword">return</span> result&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-4-if表达式"><a href="#1-4-if表达式" class="headerlink" title="1.4 if表达式"></a>1.4 if表达式</h2><p>关键字测试表达式以查看它是否是 或 以及根据结果执行操作。真假的表达叫做布尔</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It's true!"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">&lt;</span> <span class="token number">11</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10 &lt; 11"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ten is less than eleven"</span><span class="token punctuation">)</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:It's true!10 &lt; 11ten is less than eleven*/</span></code></pre><h2 id="1-5-字符串模板"><a href="#1-5-字符串模板" class="headerlink" title="1.5 字符串模板"></a>1.5 字符串模板</h2><p>模板会将该标识符的内容插入到 ：<code>$``String``String</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> answer <span class="token operator">=</span> <span class="token number">42</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Found <span class="token interpolation variable">$answer</span>!"</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// [1]</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"printing a <span class="token interpolation variable">$1</span>"</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// [2]</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:Found 42!printing a $1*/</span></code></pre><p>将表达式放在内部将对其进行计算。返回值转换为 ，并插入到生成的 ：<code>${}``String``String</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> condition <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token function">println</span><span class="token punctuation">(</span>    <span class="token string">"$&amp;#123;if (condition) 'a' else 'b'&amp;#125;"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [1]</span>  <span class="token keyword">val</span> x <span class="token operator">=</span> <span class="token number">11</span>  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$x</span> + 4 = $&amp;#123;x + 4&amp;#125;"</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:a11 + 4 = 15*/</span></code></pre><p>1.6 数字类型</p><p>数字的基本数学运算符是大多数编程语言中可用的运算符：加法（）、减法（）、除法（）、乘法（）和模量（），它们从整数除法生成剩余数：<code>+``-``/``*``%</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> numerator<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">19</span>  <span class="token keyword">val</span> denominator<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span>  <span class="token function">println</span><span class="token punctuation">(</span>numerator <span class="token operator">%</span> denominator<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:9*/</span></code></pre><p>计算<em>身体质量指数</em>（BMI），即重量（以公斤为单位）除以高度的平方（米）。如果你的体重指数低于 ，你体重不足。和 之间是正常的权重。体重指数越高，体重超标</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">bmiMetric</span><span class="token punctuation">(</span>  weight<span class="token operator">:</span> Double<span class="token punctuation">,</span>  height<span class="token operator">:</span> Double<span class="token punctuation">)</span><span class="token operator">:</span> String &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> bmi <span class="token operator">=</span> weight <span class="token operator">/</span> <span class="token punctuation">(</span>height <span class="token operator">*</span> height<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// [1]</span>  <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">18.5</span><span class="token punctuation">)</span> <span class="token string">"体重不足"</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bmi <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">)</span> <span class="token string">"体重正常"</span>    <span class="token keyword">else</span> <span class="token string">"体重超重"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> weight <span class="token operator">=</span> <span class="token number">72.57</span> <span class="token comment" spellcheck="true">// 160 lbs</span>  <span class="token keyword">val</span> height <span class="token operator">=</span> <span class="token number">1.727</span> <span class="token comment" spellcheck="true">// 68 inches</span>  <span class="token keyword">val</span> status <span class="token operator">=</span> <span class="token function">bmiMetric</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> height<span class="token punctuation">)</span>  <span class="token function">println</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-6-boolean"><a href="#1-6-boolean" class="headerlink" title="1.6 boolean"></a>1.6 boolean</h2><ul><li><code>&amp;&amp;</code>（和）： 仅在运算符左侧的表达式和右侧的表达式都是 时生成 。<code>true``Boolean``true</code></li><li><code>||</code>（或）： 如果运算符的左侧或右侧的表达式为 ，或者两者都是 ，则生成 。<code>true``true``true</code></li></ul><h2 id="1-7-while"><a href="#1-7-while" class="headerlink" title="1.7 while"></a>1.7 while</h2><p>最基本的重复形式使用关键字。只要控制布尔表达式为 ： <code>while``true</code></p><pre><code>while (Boolean-expression) &amp;#123;  // Code to be repeated&amp;#125;</code></pre><p>还有一种方法使用 ，与 关键字一起使用：<code>while``do</code></p><pre><code>do &amp;#123;  // Code to be repeated&amp;#125; while (Boolean-expression)</code></pre><h2 id="1-8-循环和范围"><a href="#1-8-循环和范围" class="headerlink" title="1.8 循环和范围"></a>1.8 循环和范围</h2><p>值集可以是整数的范围,关键字指示您正在单步执行值：<code>String``in</code></p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">for</span><span class="token punctuation">(</span>v <span class="token keyword">in</span> values<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* ... */</span> &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hey <span class="token interpolation variable">$i</span>!"</span><span class="token punctuation">)</span>  &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:Hey 1!Hey 2!Hey 3!*/</span></code></pre><h2 id="1-9-关键字in"><a href="#1-9-关键字in" class="headerlink" title="1.9 关键字in"></a>1.9 关键字<code>in</code></h2><p>关键字测试值是否在一个范围内。<code>in</code></p><pre class=" language-kotlin"><code class="language-kotlin">un <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> percent <span class="token operator">=</span> <span class="token number">35</span>  <span class="token function">println</span><span class="token punctuation">(</span>percent <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:true*/</span></code></pre><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><blockquote><p>三引号字符串不仅对多行字符串有用，而且对于创建正则表达式模式也很有用，因为您不需要用反斜杠转义反斜杠。</p><p>以下模式匹配的日期格式为<u>13.06.1992</u>(两个数字，一个点，两个数字，一个点，四个数字):</p><p>fun getPattern() = “””\d{2}.\d{2}.\d{4}”””</p><p>使用month变量重写此模式，使其匹配1992年6月13日格式的日期(两个数字、一个空格、一个月的缩写、一个空格、四个数字)。</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> month <span class="token operator">=</span> <span class="token string">"(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)"</span><span class="token keyword">fun</span> <span class="token function">getPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token raw-string string">"""\d&amp;#123;2&amp;#125; <span class="token interpolation variable">$month</span> \d&amp;#123;4&amp;#125;"""</span></code></pre><h2 id="1-10-可空类型"><a href="#1-10-可空类型" class="headerlink" title="1.10 可空类型?"></a>1.10 可空类型?</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><blockquote><p>学习零安全和安全调用的Kotlin和重写以下Java代码，使它只有一个if表达式:</p></blockquote><h3 id="java写法"><a href="#java写法" class="headerlink" title="java写法"></a>java写法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessageToClient</span><span class="token punctuation">(</span>    <span class="token annotation punctuation">@Nullable</span> Client client<span class="token punctuation">,</span>    <span class="token annotation punctuation">@Nullable</span> String message<span class="token punctuation">,</span>    <span class="token annotation punctuation">@NotNull</span> Mailer mailer<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>client <span class="token operator">==</span> null <span class="token operator">||</span> message <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    PersonalInfo personalInfo <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">getPersonalInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>personalInfo <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    String email <span class="token operator">=</span> personalInfo<span class="token punctuation">.</span><span class="token function">getEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>email <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    mailer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Kotlin写法"><a href="#Kotlin写法" class="headerlink" title="Kotlin写法"></a>Kotlin写法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sendMessageToClient</span><span class="token punctuation">(</span>        client<span class="token operator">:</span> Client<span class="token operator">?</span><span class="token punctuation">,</span> message<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span> mailer<span class="token operator">:</span> Mailer<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> email<span class="token operator">=</span>client<span class="token operator">?</span><span class="token punctuation">.</span>personalInfo<span class="token operator">?</span><span class="token punctuation">.</span>email    <span class="token keyword">if</span> <span class="token punctuation">(</span>email<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>message<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>        mailer<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span>message<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="1-11-类对象-class"><a href="#1-11-类对象-class" class="headerlink" title="1.11 类对象(class)"></a>1.11 类对象(class)</h2><p><em>对象使用属性(val 和 var)存储数据，并使用函数对此数据执行操作。</em></p><ul><li>类: 为本质上是新数据类型的东西定义属性和函数。类也称为用户定义类型。</li><li>成员: 类的属性或函数。</li><li>成员函数: 仅用于特定对象类的函数。</li><li>创建对象: 创建类的 val 或 var。也称为创建该类的实例。</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">val</span> r1 <span class="token operator">=</span> <span class="token function">IntRange</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">val</span> r2 <span class="token operator">=</span> <span class="token function">IntRange</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token function">println</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span>  <span class="token function">println</span><span class="token punctuation">(</span>r2<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* Output:0..105..7*/</span></code></pre><h3 id="面向对象-class"><a href="#面向对象-class" class="headerlink" title="面向对象(class)"></a>面向对象(class)</h3><h4 id="1-11-1-函数可见性"><a href="#1-11-1-函数可见性" class="headerlink" title="1.11.1 函数可见性"></a>1.11.1 函数可见性</h4><table><thead><tr><th>修饰符</th><th>kotlin</th><th>java</th></tr></thead><tbody><tr><td>private</td><td>当前类内部可见</td><td>当前类内部可见</td></tr><tr><td>public</td><td>(默认值)，所有类可见</td><td>所有类可见</td></tr><tr><td>protected</td><td>只对当前类,子类可见</td><td>只对当前类,子类可见，同一包下可见</td></tr><tr><td>internal</td><td>对同一模块的类可见</td><td>无</td></tr></tbody></table><h4 id="1-11-2-创建类"><a href="#1-11-2-创建类" class="headerlink" title="1.11.2 创建类"></a>1.11.2 创建类</h4><p>面向对象便需要创建类对象，类就是对事物的一种封装，类名通常是名词，类中可以拥有自己的字段和函数，字段是名称，函数是行为动词，面向对象还有继承，多态，等</p><ol><li><p>创建类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person&amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>加入字段及函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span>age<span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>类实例化</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> p<span class="token operator">=</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>类实例化操作</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> man&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">val</span> p<span class="token operator">=</span><span class="token function">person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"kotlin"</span>    p<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">19</span>    p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="（1）继承"><a href="#（1）继承" class="headerlink" title="（1）继承"></a>（1）继承</h5><ol><li><p>kotlin默认所有非抽象类都是不可以被继承的，想要被继承需要 open 关键字</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">..</span><span class="token punctuation">.</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><p>Kotlin继承用 ：替代extends，（）表示构造函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Student<span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> name<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">var</span> grade<span class="token operator">=</span><span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><h5 id="（2）接口（interface）"><a href="#（2）接口（interface）" class="headerlink" title="（2）接口（interface）"></a>（2）接口（interface）</h5><p>基本和java一样 interface</p><p>接口是”独立和往往不相关的系统相遇和操作或相互通信的地方。因此，接口是系统不同部分之间的通信手段。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Study&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">fun</span> <span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//默认自动实现逻辑</span>    <span class="token keyword">fun</span> <span class="token function">doHomeworks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do homework default implementation."</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="（3）构造函数"><a href="#（3）构造函数" class="headerlink" title="（3）构造函数"></a>（3）构造函数</h5><p>构造函数是创建新对象的特殊函数，默认都会有一个空的构造函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">val</span> sno<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token keyword">val</span> grade<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">val</span> student<span class="token operator">=</span><span class="token function">Student</span><span class="token punctuation">(</span><span class="token string">"a123"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><h6 id="主构造函数"><a href="#主构造函数" class="headerlink" title="主构造函数"></a>主构造函数</h6><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">init</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h6 id="次构造函数"><a href="#次构造函数" class="headerlink" title="次构造函数"></a>次构造函数</h6><p>当没有主构造函数时，this 改为 super</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token operator">:</span>String<span class="token punctuation">,</span>age<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="特定的class"><a href="#特定的class" class="headerlink" title="特定的class"></a>特定的class</h4><h5 id="Data-class-数据类"><a href="#Data-class-数据类" class="headerlink" title="Data class 数据类"></a>Data class 数据类</h5><h5 id="object-单例类"><a href="#object-单例类" class="headerlink" title="object 单例类"></a>object 单例类</h5><p>java写法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//禁用外部创建实例</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//单例模式</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            instance<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singletonTest is called."</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>main<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Singleton singleton<span class="token operator">=</span>Singleton<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    singleton<span class="token punctuation">.</span><span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>kotlin写法</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> Singleton&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">fun</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singletonTest is called."</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>main&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    Singleton<span class="token punctuation">.</span><span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h5 id="sealed类-密封类（只有同一文件内才可使用）"><a href="#sealed类-密封类（只有同一文件内才可使用）" class="headerlink" title="sealed类 密封类（只有同一文件内才可使用）"></a>sealed类 密封类（只有同一文件内才可使用）</h5><h5 id="嵌套类-内部类-匿名类"><a href="#嵌套类-内部类-匿名类" class="headerlink" title="嵌套类 内部类 匿名类"></a>嵌套类 内部类 匿名类</h5><p>类可以嵌套在其他类中：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Outer &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> bar<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">class</span> Nested &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">fun</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">val</span> demo <span class="token operator">=</span> Outer<span class="token punctuation">.</span><span class="token function">Nested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// == 2</span></code></pre><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>标记为内部的嵌套<em>类</em>可以访问其外部类的成员。内部类包含对外部类对象的引用：</p><pre class=" language-kot"><code class="language-kot">class Outer &#123;    private val bar: Int = 1    inner class Inner &#123;        fun foo() = bar    &#125;&#125;val demo = Outer().Inner().foo() // == 1</code></pre><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>使用对象表达式创建匿名内部<a href="https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions">类实例</a>：</p><pre class=" language-kotlin"><code class="language-kotlin">window<span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">MouseAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">..</span><span class="token punctuation">.</span> &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span>e<span class="token operator">:</span> MouseEvent<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">..</span><span class="token punctuation">.</span> &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h2 id="1-12-Lambda-编程"><a href="#1-12-Lambda-编程" class="headerlink" title="1.12 Lambda 编程"></a>1.12 Lambda 编程</h2><p>核心思想（简化编程）,集合的函数式API是学习Lambda编程的绝佳示例</p><p>接口 List  实现类  ArraList    </p><p>​        Set                HasSet</p><p>​        Map            HasMap</p><ol><li>集合创建与遍历</li></ol><ol start="2"><li><p>集合函数式API </p></li><li><p>Java </p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kotlin学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.学习网址</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/1.xue-xi-wang-zhi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/kotlin-xue-xi/1.xue-xi-wang-zhi/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="官方网址"><a href="#官方网址" class="headerlink" title="官方网址"></a>官方网址</h1><h2 id="关键字查看"><a href="#关键字查看" class="headerlink" title="关键字查看"></a><a href="https://kotlinlang.org/docs/reference/keyword-reference.html#soft-keywords">关键字查看</a></h2><p><img src="images/1.%E5%AD%A6%E4%B9%A0%E7%BD%91%E5%9D%80/image-20200729173322076.png" alt="image-20200729173322076"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Kotlin学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1.学习网址 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>junit简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/junit/junit-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/junit/junit-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-JUnit？"><a href="#什么是-JUnit？" class="headerlink" title="什么是 JUnit？"></a>什么是 JUnit？</h1><p>JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。</p><p>JUnit 促进了“先测试后编码”的理念，强调建立测试数据的一段代码，可以先测试，然后再应用。这个方法就好比“测试一点，编码一点，测试一点，编码一点……”，增加了程序员的产量和程序的稳定性，可以减少程序员的压力和花费在排错上的时间。</p><h2 id="什么是Junit5"><a href="#什么是Junit5" class="headerlink" title="什么是Junit5?"></a>什么是Junit5?</h2><p>与以前的JUnit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。</p><p>JUnit 5 = JUnit平台 + JUnit Jupiter + JUnit Vintage</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>JUnit 是一个开放的资源框架，用于编写和运行测试。<br>提供注释来识别测试方法。<br>提供断言来测试预期结果。<br>提供测试运行来运行测试。<br>JUnit 测试允许你编写代码更快，并能提高质量。<br>JUnit 优雅简洁。没那么复杂，花费时间较少。<br>JUnit 测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。<br>JUnit 测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。<br>JUnit 在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。</p><h3 id="测试工具"><a href="#测试工具" class="headerlink" title="测试工具"></a>测试工具</h3><p>测试工具是一整套固定的工具用于基线测试。测试工具的目的是为了确保测试能够在共享且固定的环境中运行，因此保证测试结果的可重复性。它包括：</p><p>在所有测试调用指令发起前的 setUp() 方法。<br>在测试方法运行后的 tearDown() 方法。</p><h3 id="测试套件"><a href="#测试套件" class="headerlink" title="测试套件"></a>测试套件</h3><p>测试套件意味捆绑几个测试案例并且同时运行。在 JUnit 中，@RunWith 和 @Suite 都被用作运行测试套件。</p><h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Test</td><td>表示方法是测试方法。与JUnit 4的@Test注释不同，此注释不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注释进行操作。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@ParameterizedTest</td><td>表示方法是参数化测试。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@RepeatedTest</td><td>表示方法是重复测试的测试模板。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@TestFactory</td><td>表示方法是动态测试的测试工厂。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@TestTemplate</td><td>表示方法是测试用例的模板，测试用例设计为根据已注册提供程序返回的调用上下文的数量被多次调用。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@TestMethodOrder</td><td>用于为带注释的测试类配置测试方法的执行顺序；类似于JUnit 4的@FixMethodOrder。这样的注释是继承的。</td></tr><tr><td>@TestInstance</td><td>用于为带注释的测试类配置测试实例生命周期。这样的注释是继承的。</td></tr><tr><td>@DisplayName</td><td>声明测试类或测试方法的自定义显示名称。这样的注释不是继承的。</td></tr><tr><td>@DisplayNameGeneration</td><td>声明测试类的自定义显示名称生成器。这样的注释是继承的。</td></tr><tr><td>@BeforeEach</td><td>表示该注释的方法应该被执行之前 的每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@Before。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@AfterEach</td><td>表示该注释的方法应该被执行之后 每个 @Test，@RepeatedTest，@ParameterizedTest，或@TestFactory方法在当前类; 类似于JUnit 4的@After。除非重写这些方法，否则它们将被继承。</td></tr><tr><td>@BeforeAll</td><td>表示该注释的方法应该被执行之前 所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@BeforeClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td></tr><tr><td>@AfterAll</td><td>表示该注释的方法应该被执行之后 的所有 @Test，@RepeatedTest，@ParameterizedTest，和@TestFactory方法在当前类; 类似于JUnit 4的@AfterClass。此类方法是继承的（除非它们被隐藏或覆盖），并且必须被继承（除非static使用“每类” 测试实例生命周期）。</td></tr><tr><td>@Nested</td><td>表示带注释的类是一个非静态的嵌套测试类。@BeforeAll和@AfterAll方法不能直接在使用@Nested测试类除非“每级” 测试实例的生命周期被使用。这样的注释不是继承的。</td></tr><tr><td>@Tag</td><td>用于在类或方法级别声明用于过滤测试的标签；类似于TestNG中的测试组或JUnit 4中的类别。此类注释在类级别继承，而不在方法级别继承。</td></tr><tr><td>@Disabled</td><td>用于禁用测试类或测试方法；类似于JUnit 4的@Ignore。这样的注释不是继承的。</td></tr><tr><td>@Timeout</td><td>如果执行超过给定的持续时间，则使测试，测试工厂，测试模板或生命周期方法失败。这样的注释是继承的。</td></tr><tr><td>@ExtendWith</td><td>用于声明性地注册扩展。这样的注释是继承的。</td></tr><tr><td>@RegisterExtension</td><td>用于通过字段以编程方式注册扩展。除非被遮盖，否则这些字段将被继承。</td></tr><tr><td>@TempDir</td><td>用于通过生命周期方法或测试方法中的字段注入或参数注入来提供临时目录；位于org.junit.jupiter.api.io包装中。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Junit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> junit简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节流与字符流</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/zi-jie-liu-yu-zi-fu-liu/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/zi-jie-liu-yu-zi-fu-liu/</url>
      
        <content type="html"><![CDATA[<h1 id="字节流与字符流"><a href="#字节流与字符流" class="headerlink" title="字节流与字符流"></a>字节流与字符流</h1><p>字节流与字符流区别</p><h2 id="OutputStream字节输出流"><a href="#OutputStream字节输出流" class="headerlink" title="OutputStream字节输出流"></a>OutputStream字节输出流</h2><h3 id="字节-byte-是进行i-o操作的基本数据单位"><a href="#字节-byte-是进行i-o操作的基本数据单位" class="headerlink" title="字节(byte)是进行i/o操作的基本数据单位"></a>字节(byte)是进行i/o操作的基本数据单位</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Writer字符输出流"><a href="#Writer字符输出流" class="headerlink" title="Writer字符输出流"></a>Writer字符输出流</h2><h2 id="Reader字符输入流"><a href="#Reader字符输入流" class="headerlink" title="Reader字符输入流"></a>Reader字符输入流</h2><h2 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h2><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字节流与字符流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程编程</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/duo-xian-cheng-bian-cheng/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/duo-xian-cheng-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="多线程的两种实现方式"><a href="#多线程的两种实现方式" class="headerlink" title="多线程的两种实现方式"></a>多线程的两种实现方式</h2><h2 id="线程的基本操作"><a href="#线程的基本操作" class="headerlink" title="线程的基本操作"></a>线程的基本操作</h2><h2 id="多线程同步与死锁"><a href="#多线程同步与死锁" class="headerlink" title="多线程同步与死锁"></a>多线程同步与死锁</h2><h2 id="synchronized同步实现操作"><a href="#synchronized同步实现操作" class="headerlink" title="synchronized同步实现操作"></a>synchronized同步实现操作</h2><h2 id="Object类对多线程的支持"><a href="#Object类对多线程的支持" class="headerlink" title="Object类对多线程的支持"></a>Object类对多线程的支持</h2><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/spring-ru-men/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/spring-ru-men/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring入门"><a href="#Spring入门" class="headerlink" title="Spring入门"></a>Spring入门</h1><h2 id="课程概述"><a href="#课程概述" class="headerlink" title="课程概述"></a>课程概述</h2><h2 id="IOC介绍"><a href="#IOC介绍" class="headerlink" title="IOC介绍"></a>IOC介绍</h2><h3 id="ioc概念介绍"><a href="#ioc概念介绍" class="headerlink" title="ioc概念介绍"></a>ioc概念介绍</h3><ul><li><p>控制反转</p><ul><li>控制对象的创建及销毁（生命周期）</li><li>将对象的控制权交给ioc容器</li></ul></li></ul><h2 id="Springioc入门"><a href="#Springioc入门" class="headerlink" title="Springioc入门"></a>Springioc入门</h2><h2 id="Bean实例化和注入"><a href="#Bean实例化和注入" class="headerlink" title="Bean实例化和注入"></a>Bean实例化和注入</h2><h3 id="实例化Bean的方式介绍"><a href="#实例化Bean的方式介绍" class="headerlink" title="实例化Bean的方式介绍"></a>实例化Bean的方式介绍</h3><h3 id="注入Bean的方式介绍"><a href="#注入Bean的方式介绍" class="headerlink" title="注入Bean的方式介绍"></a>注入Bean的方式介绍</h3><h2 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h2><h3 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h3><h3 id="web相关作用域"><a href="#web相关作用域" class="headerlink" title="web相关作用域"></a>web相关作用域</h3><h3 id="自定义作用域"><a href="#自定义作用域" class="headerlink" title="自定义作用域"></a>自定义作用域</h3><h2 id="Bean的懒加载"><a href="#Bean的懒加载" class="headerlink" title="Bean的懒加载"></a>Bean的懒加载</h2><h2 id="Bean的初始和销毁逻辑处理"><a href="#Bean的初始和销毁逻辑处理" class="headerlink" title="Bean的初始和销毁逻辑处理"></a>Bean的初始和销毁逻辑处理</h2><h2 id="Bean属性继承"><a href="#Bean属性继承" class="headerlink" title="Bean属性继承"></a>Bean属性继承</h2><h2 id="SpringIoc注解"><a href="#SpringIoc注解" class="headerlink" title="SpringIoc注解"></a>SpringIoc注解</h2><h3 id="注解的基本介绍使用"><a href="#注解的基本介绍使用" class="headerlink" title="注解的基本介绍使用"></a>注解的基本介绍使用</h3><h3 id="通过注解注入Bean"><a href="#通过注解注入Bean" class="headerlink" title="通过注解注入Bean"></a>通过注解注入Bean</h3><h3 id="通过注解设定Bean的作用域"><a href="#通过注解设定Bean的作用域" class="headerlink" title="通过注解设定Bean的作用域"></a>通过注解设定Bean的作用域</h3><h3 id="通过注解开启Bean的懒加载"><a href="#通过注解开启Bean的懒加载" class="headerlink" title="通过注解开启Bean的懒加载"></a>通过注解开启Bean的懒加载</h3><h3 id="通过注解编写Bean初始化及销毁逻辑处理"><a href="#通过注解编写Bean初始化及销毁逻辑处理" class="headerlink" title="通过注解编写Bean初始化及销毁逻辑处理"></a>通过注解编写Bean初始化及销毁逻辑处理</h3><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/mybatis-kuang-jia/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/mybatis-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="mybatis入门"><a href="#mybatis入门" class="headerlink" title="mybatis入门"></a>mybatis入门</h2><h3 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h3><ul><li>java持久层框架 封装了jdbc 等复杂的数据库操作</li><li>通过xml或注解的方式将要执行的statement配置</li><li>通过java对象和statement中的sql动态参数进行映射生成sql语句，并将结果映射为java对象并返回</li><li>采用ORM（Object Relational Mapping 对象关系映射）思想 实体–数据库–映射</li></ul><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><p>第一步：创建maven工程并导入依赖pom.xml</p><dependency>    <groupid>org.mybatis</groupid>    <artifactid>mybatis</artifactid>    <version>3.4.5</version></dependency><dependency>    <groupid>mysql</groupid>    <artifactid>mysql-connector-java</artifactid>    <version>8.0.12</version></dependency><dependency>    <groupid>log4j</groupid>    <artifactid>log4j</artifactid>    <version>1.2.17</version></dependency></li><li><p>第二步：创建实体类和dao接口</p></li><li><p>第三步：创建mybatis的主配置文件SqlMapConfig.xml</p></li><li><p>第四步：创建映射配置文件IUserDao.xml</p></li><li></li></ul><h3 id="环境搭建注意事项"><a href="#环境搭建注意事项" class="headerlink" title="环境搭建注意事项"></a>环境搭建注意事项</h3><ul><li>第一个：创建IUserDao.xml和IUserDao.java时名称保持一致</li><li>第二个：xml文件目录要逐个创建，进行分层</li><li>第三个：mybatis的配置文件必须包接口一致</li><li>第四个：映射文件的mapper标签namsespace属性值必须是dao接口的全类名</li><li>第五个：映射配置文件的配置操作。id属性取值必须是dao接口的方法名</li></ul><h3 id="入门案例"><a href="#入门案例" class="headerlink" title="入门案例"></a>入门案例</h3><p>//1.读取配置文件<br>String resource = “mybatis-config.xml”;<br>InputStream inputStream = Resources.getResourceAsStream(resource);</p><p>//2.创建SqlSessionFactory工厂<br>SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</p><p>//3.使用工厂生产SqlSession对象<br>SqlSession sqlSession=sqlSessionFactory.openSession();<br>//4.使用SqlSession创建Dao接口代理对象<br>IUserDao userDao=sqlSession.getMapper(IUserDao.class);<br>//5.使用代理对象执行方法<br>List<user> all = userDao.findAll();<br>for (User user : all) {<br>    System.out.println(user.toString());<br>}<br>//6.释放资源<br>sqlSession.close();<br>inputStream.close();</user></p><h3 id="mybatis基于注解的入门案例"><a href="#mybatis基于注解的入门案例" class="headerlink" title="mybatis基于注解的入门案例"></a>mybatis基于注解的入门案例</h3><ul><li>把IUserDao.xml移除，在dao接口上使用@Select注解，并指向SQL语句</li><li>SqlMapperConfig.xml中mapper配置时，使用class属性指定dao接口全类名 </li></ul><h3 id="自定义mybatis框架分析"><a href="#自定义mybatis框架分析" class="headerlink" title="自定义mybatis框架分析"></a>自定义mybatis框架分析</h3><ul><li><p>Mybatis 在使用代理dao的方式实现增删改查时做什么事呢</p><ul><li>第一：创建代理对象</li><li>第二：在代理对象中调用selectList</li></ul></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="mybatis基本使用"><a href="#mybatis基本使用" class="headerlink" title="mybatis基本使用"></a>mybatis基本使用</h2><h3 id="mybatis的单表crud操作"><a href="#mybatis的单表crud操作" class="headerlink" title="mybatis的单表crud操作"></a>mybatis的单表crud操作</h3><h3 id="mybatis的参数和返回值"><a href="#mybatis的参数和返回值" class="headerlink" title="mybatis的参数和返回值"></a>mybatis的参数和返回值</h3><h3 id="mybatis的dao编写"><a href="#mybatis的dao编写" class="headerlink" title="mybatis的dao编写"></a>mybatis的dao编写</h3><h3 id="mybatis配置的细节-几个标签的使用"><a href="#mybatis配置的细节-几个标签的使用" class="headerlink" title="mybatis配置的细节 几个标签的使用"></a>mybatis配置的细节 几个标签的使用</h3><h2 id="mybatis深入和多表"><a href="#mybatis深入和多表" class="headerlink" title="mybatis深入和多表"></a>mybatis深入和多表</h2><h3 id="mybatis的连接池"><a href="#mybatis的连接池" class="headerlink" title="mybatis的连接池"></a>mybatis的连接池</h3><h3 id="mybatis的事务控制及设计的方法"><a href="#mybatis的事务控制及设计的方法" class="headerlink" title="mybatis的事务控制及设计的方法"></a>mybatis的事务控制及设计的方法</h3><h3 id="mybatis的多表查询"><a href="#mybatis的多表查询" class="headerlink" title="mybatis的多表查询"></a>mybatis的多表查询</h3><ul><li>一对多</li><li>多</li><li>对多</li></ul><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/linux-chang-yong-ming-ling/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/linux-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h1 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h1><h2 id="软件操作命令"><a href="#软件操作命令" class="headerlink" title="软件操作命令"></a>软件操作命令</h2><h3 id="软件包管理-yum"><a href="#软件包管理-yum" class="headerlink" title="软件包管理 yum"></a>软件包管理 yum</h3><h3 id="安装软件-yum-install-xxx"><a href="#安装软件-yum-install-xxx" class="headerlink" title="安装软件 yum install xxx"></a>安装软件 yum install xxx</h3><h3 id="卸载软件-yum-remove-xxx"><a href="#卸载软件-yum-remove-xxx" class="headerlink" title="卸载软件 yum remove xxx"></a>卸载软件 yum remove xxx</h3><h3 id="搜索软件-yum-serach-xxx"><a href="#搜索软件-yum-serach-xxx" class="headerlink" title="搜索软件 yum serach xxx"></a>搜索软件 yum serach xxx</h3><h3 id="清理缓存-yum-clean-packages"><a href="#清理缓存-yum-clean-packages" class="headerlink" title="清理缓存 yum clean packages"></a>清理缓存 yum clean packages</h3><h3 id="列出已安装-yum-list"><a href="#列出已安装-yum-list" class="headerlink" title="列出已安装 yum list"></a>列出已安装 yum list</h3><h3 id="软件包信息-yum-info-xxx"><a href="#软件包信息-yum-info-xxx" class="headerlink" title="软件包信息 yum info xxx"></a>软件包信息 yum info xxx</h3><h2 id="服务器硬件资源和磁盘操作"><a href="#服务器硬件资源和磁盘操作" class="headerlink" title="服务器硬件资源和磁盘操作"></a>服务器硬件资源和磁盘操作</h2><h3 id="内存：free-m"><a href="#内存：free-m" class="headerlink" title="内存：free -m"></a>内存：free -m</h3><h3 id="硬盘：df-h"><a href="#硬盘：df-h" class="headerlink" title="硬盘：df -h"></a>硬盘：df -h</h3><h3 id="负载：w-top"><a href="#负载：w-top" class="headerlink" title="负载：w/top"></a>负载：w/top</h3><h2 id="文件和文件夹操作命令"><a href="#文件和文件夹操作命令" class="headerlink" title="文件和文件夹操作命令"></a>文件和文件夹操作命令</h2><h3 id="linux文件的目录结构"><a href="#linux文件的目录结构" class="headerlink" title="linux文件的目录结构"></a>linux文件的目录结构</h3><ul><li>根目录 /</li><li>家目录 /home</li><li>临时目录 /tmp</li><li>配置目录 /etc</li><li>用户程序目录 /usr </li></ul><h3 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h3><ul><li>ls 查看目录下文件</li><li>touch 新建文件</li><li>mkdir 新建文件夹</li><li>cd 进入目录 </li><li>rm 删除文件或目录</li><li>cp 复制</li><li>mv 移动</li><li>pwd 显示路径</li></ul><h3 id="文本编辑神器Vim"><a href="#文本编辑神器Vim" class="headerlink" title="文本编辑神器Vim"></a>文本编辑神器Vim</h3><ul><li>Vim安装 yum install vim</li></ul><h3 id="文件权限-421"><a href="#文件权限-421" class="headerlink" title="文件权限 421"></a>文件权限 421</h3><ul><li>r=4 w=2 x=1  </li></ul><h3 id="文件搜索-查找-读取"><a href="#文件搜索-查找-读取" class="headerlink" title="文件搜索 查找 读取"></a>文件搜索 查找 读取</h3><ul><li><p>tail 尾部读取</p></li><li><p>head 头部读取</p></li><li><p>cat 读取整个文件</p></li><li><p>more 分页读取</p></li><li><p>less 可控分页</p></li><li><p>grep 搜索关键字</p></li><li><p>find 查找</p><ul><li>可以去菜鸟教程学习</li></ul></li><li><p>wc 统计个数</p></li></ul><h3 id="文件解压"><a href="#文件解压" class="headerlink" title="文件解压"></a>文件解压</h3><ul><li><p>压缩</p><ul><li>tar –cvf jpg.tar *.jpg       // 将目录里所有jpg文件打包成 tar.jpg </li><li>tar –czf jpg.tar.gz *.jpg    // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 gzip 压缩，生成一个 gzip 压缩过的包，命名为 jpg.tar.gz </li><li>tar –cjf jpg.tar.bz2 *.jpg   // 将目录里所有jpg文件打包成 jpg.tar 后，并且将其用 bzip2 压缩，生成一个 bzip2 压缩过的包，命名为jpg.tar.bz2 </li><li>tar –cZf jpg.tar.Z *.jpg     // 将目录里所有 jpg 文件打包成 jpg.tar 后，并且将其用 compress 压缩，生成一个 umcompress 压缩过的包，命名为jpg.tar.Z </li><li>rar a jpg.rar *.jpg          // rar格式的压缩，需要先下载 rar for linux </li><li>zip jpg.zip *.jpg            // zip格式的压缩，需要先下载 zip for linux</li></ul></li><li><p>解压</p><ul><li>tar –xvf file.tar         // 解压 tar 包 </li><li>tar -xzvf file.tar.gz     // 解压 tar.gz </li><li>tar -xjvf file.tar.bz2    // 解压 tar.bz2 </li><li>tar –xZvf file.tar.Z      // 解压 tar.Z </li><li>unrar e file.rar          // 解压 rar </li><li>unzip file.zip            // 解压 zip </li></ul></li><li><p>总结</p><ul><li>1、*.tar 用 tar –xvf 解压 </li><li>2、*.gz 用 gzip -d或者gunzip 解压 </li><li>3、*.tar.gz和*.tgz 用 tar –xzf 解压 </li><li>4、*.bz2 用 bzip2 -d或者用bunzip2 解压 </li><li>5、*.tar.bz2用tar –xjf 解压 </li><li>6、*.Z 用 uncompress 解压 </li><li>7、*.tar.Z 用tar –xZf 解压 </li><li>8、*.rar 用 unrar e解压 </li><li>9、*.zip 用 unzip 解压</li></ul></li></ul><h2 id="系统用户操作命令"><a href="#系统用户操作命令" class="headerlink" title="系统用户操作命令"></a>系统用户操作命令</h2><h3 id="useradd-添加用户"><a href="#useradd-添加用户" class="headerlink" title="useradd 添加用户"></a>useradd 添加用户</h3><h3 id="adduser-添加用户"><a href="#adduser-添加用户" class="headerlink" title="adduser 添加用户"></a>adduser 添加用户</h3><h3 id="userdel-删除用户"><a href="#userdel-删除用户" class="headerlink" title="userdel 删除用户"></a>userdel 删除用户</h3><h3 id="passwd-设置密码"><a href="#passwd-设置密码" class="headerlink" title="passwd 设置密码"></a>passwd 设置密码</h3><h2 id="防火墙相关设置"><a href="#防火墙相关设置" class="headerlink" title="防火墙相关设置"></a>防火墙相关设置</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>作用：保护服务器安全</p></li><li><p>设置防火墙</p><ul><li>开放80，22端口</li></ul></li><li><p>关闭防火墙</p></li><li></li></ul><h3 id="设置防火墙命令"><a href="#设置防火墙命令" class="headerlink" title="设置防火墙命令"></a>设置防火墙命令</h3><ul><li>安装：yum install firewalld</li><li>启动：service firewalld start</li><li>状态：service firewalld status</li><li>关闭或禁用：service firewalld stop/disable</li></ul><h2 id="提权操作sudo-和文件传输操作"><a href="#提权操作sudo-和文件传输操作" class="headerlink" title="提权操作sudo 和文件传输操作"></a>提权操作sudo 和文件传输操作</h2><h3 id="提权：sudo"><a href="#提权：sudo" class="headerlink" title="提权：sudo"></a>提权：sudo</h3><ul><li>visudo：将普通用户添加到root信任列表中</li></ul><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><ul><li>wget ，curl</li></ul><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><ul><li>scp</li></ul><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/linux/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="linux版本"><a href="#linux版本" class="headerlink" title="linux版本"></a>linux版本</h2><h3 id="ubuntu-界面友好"><a href="#ubuntu-界面友好" class="headerlink" title="ubuntu:界面友好"></a>ubuntu:界面友好</h3><h3 id="Red-Hat：商业级-红帽认证工程师"><a href="#Red-Hat：商业级-红帽认证工程师" class="headerlink" title="Red Hat：商业级-红帽认证工程师"></a>Red Hat：商业级-红帽认证工程师</h3><h3 id="Centos：企业级-使用yum管理软件包"><a href="#Centos：企业级-使用yum管理软件包" class="headerlink" title="Centos：企业级-使用yum管理软件包"></a>Centos：企业级-使用yum管理软件包</h3><h2 id="linux组成部分"><a href="#linux组成部分" class="headerlink" title="linux组成部分"></a>linux组成部分</h2><h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><ul><li>作用：运行程序管理硬件</li><li>进程管理，内存管理，硬件设备驱动，文件系统驱动</li></ul><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><ul><li>作用：提供用户与内核进行交互操作接口（命令解释器）</li><li></li></ul><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><ul><li>文件存放磁盘的组织方法</li></ul><h3 id="实用工具"><a href="#实用工具" class="headerlink" title="实用工具"></a>实用工具</h3><ul><li>编辑器：用于编辑文件</li><li>过滤器：用于接收并过滤数据</li><li>交互程序：容许用户发送信息或接收来自其他用户的信息</li></ul><h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><h3 id="终端与工作区"><a href="#终端与工作区" class="headerlink" title="终端与工作区"></a>终端与工作区</h3><ul><li>alt+fx</li></ul><h3 id="用户和用户组管理"><a href="#用户和用户组管理" class="headerlink" title="用户和用户组管理"></a>用户和用户组管理</h3><ul><li><p>用户：user</p><ul><li><p>切换用户：su 用户名</p></li><li><p>添加用户：useradd 选项 用户名</p><ul><li>-c：描述</li><li>-d：目录</li><li>-g：用户组</li><li>-G：附加用户组</li><li>-s：用户登录shell</li><li>-u：用户号</li></ul></li><li><p>删除用户：userdel -r 用户名</p></li><li><p>修改账号：usermod 选项 用户名</p></li><li><p>设置密码：passwd 选项 用户名</p><ul><li>强制设置简单密码：echo 123456 |passwd –stdin kujin</li><li>-l 禁用账号</li><li>-u 解锁</li><li>-d 无口令</li><li>-f 下次登录修改口令</li></ul></li></ul></li><li><p>用户组：group</p><ul><li><p>groupadd 选项 用户组</p><ul><li>-g：指定用户组标识GID</li><li>-o：和-g差不多</li></ul></li><li><p>groupdel 删除用户组</p></li><li><p>groupmod 选项 用户组</p><ul><li>-g：GID</li><li>-n：新用户组（新名字）</li></ul></li></ul></li></ul><h3 id="文件，目录操作命令"><a href="#文件，目录操作命令" class="headerlink" title="文件，目录操作命令"></a>文件，目录操作命令</h3><ul><li><p>什么是路径？</p><ul><li>绝对路径</li><li>相对路径：cd ../</li></ul></li><li><p>处理目录的常用命令</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul></li><li><p>linux文件内容查看</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示</li><li>nl 显示行号</li><li>more 一页一页的显示</li><li>less 可以往前翻页</li><li>head 头部几行</li><li>tail 尾巴几行</li></ul></li></ul><h3 id="文件信息显示"><a href="#文件信息显示" class="headerlink" title="文件信息显示"></a>文件信息显示</h3><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><em>XMind - Trial Version</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/java-web/filter/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/java-web/filter/</url>
      
        <content type="html"><![CDATA[<h1 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h1><h2 id="Filter是什么？"><a href="#Filter是什么？" class="headerlink" title="Filter是什么？"></a>Filter是什么？</h2><pre><code>1. javaweb的一个重要组件，可以对发送到servlet的请求进行拦截，并对响应也进行拦截2. Filter 是实现Filter 接口的java类3. Filter 需要在web.xml中进行配置和映射</code></pre><h2 id="如何创建一个Filter，并把它跑起来"><a href="#如何创建一个Filter，并把它跑起来" class="headerlink" title="如何创建一个Filter，并把它跑起来"></a>如何创建一个Filter，并把它跑起来</h2><pre><code>`public class MyFilter implements Filter {`web.xml`&lt;filter&gt;    &lt;filter-name&gt;别名&lt;/filter-name&gt;    &lt;filter-class&gt;全类名&lt;/filter-class&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;别名&lt;/filter-name&gt;    &lt;url-pattern&gt;拦截url&lt;/url-pattern&gt;&lt;/filter-mapping&gt;`</code></pre><h2 id="Filter-相关API"><a href="#Filter-相关API" class="headerlink" title="Filter 相关API"></a>Filter 相关API</h2><pre><code>1. init(FilterConfig filterConfig) 单例初始化2. doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) 相关逻辑的处理    /放行，传给下一个filter 如果是最后一个Filter 则传给servler（jsp）    filterChain.doFilter(servletRequest,servletResponse);    多个Filter 的拦截顺序与&lt;filter-mapping&gt;的配置顺序有关 靠前的先被调用3. destroy()销毁</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java_web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插件使用</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/cha-jian-shi-yong/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/cha-jian-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="codota-代码提示插件"><a href="#codota-代码提示插件" class="headerlink" title="codota(代码提示插件)"></a>codota(代码提示插件)</h1><p>  智能提示（ctrl + shift + o）和寻找案例（ctrl + shift + Y）：</p><h2 id="代码完成"><a href="#代码完成" class="headerlink" title="代码完成"></a>代码完成</h2><p>当您编写代码时，Codota 会通过来自其 AI 的代码建议增强您的 IDE 自动完成。这些完成反映了从开放源代码中学到的常见编码模式，并省去主动搜索示例的需要。</p><h3 id="触发代码完成"><a href="#触发代码完成" class="headerlink" title="触发代码完成"></a>触发代码完成</h3><p>Codota 添加的建议可以通过左侧的 codota 图标识别 （<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/favicon-32x32.705c05b3cbd38dbfabd1e0f93344b8a4.png" alt="img">）</p><p>Codota 建议以两种方式显示：</p><p><strong>自动：</strong>当您编写代码时，它基于您键入的前缀显示。</p><p><strong>按需：</strong>它使用键盘快捷方式（Cmd+空格/Ctrl+空格）显示</p><p>查看操作中的代码完成：</p><h3 id="分配完成"><a href="#分配完成" class="headerlink" title="分配完成"></a>分配完成</h3><p>无论何时从特定类型分配变量，Codota 都会建议基于上下文和从开放源代码中学到的模型分配变量的方法。”等号 （”= “ ） 之后，您点击空格键后，Codota 建议将自动显示<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_01.5629eb0f24b9659b29e92fdfae9ec90f.png" alt="img"></p><p>建议可能包括正式参数类型和名称（文件、字符串文件名）：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_02.4c76662ebc91b3ce3aea6f3e3d317a02.png" alt="img"></p><p>如果选择了具有非基元参数的代码建议，这些参数将预加在上一行中（在选择”=新 FileReader（文件文件）”后添加文件）;<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_03.51eb314d580dde5b41b4623dfe39825f.png" alt="img"></p><p>但是，如果 Codota 找到一个本地变量，该变量是一个很好的候选变量，它将将其绑定到建议（输入文件显示在建议中，并且未预报）：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/assignment-completions_04.8fc1eebbb0f265dc10c5d4d05af9321d.png" alt="img"></p><p>在某些情况下，代码建议依赖于另一个对象。如果上下文中不存在此类对象，则建议以”…”开头，并在选择时预报此对象（注意：要创建需要连接的准备状态）。选择后，将在上一行中添加新的连接：<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/assignment-completions_05.7573b25f8368e9f3ed1169cc05743b23.png" alt="img"></p><h3 id="新线路完成"><a href="#新线路完成" class="headerlink" title="新线路完成"></a>新线路完成</h3><p>新代码行通常以声明新的局部变量开头。在某些情况下，Codota 可以根据当前上下文预测要使用的下一个变量的类型。</p><p>在键入时，使用基本完成显示，按已键入的前缀进行筛选：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/new-line-completions_01.6c83e7c1961c42fb93d07e0295496c9a.png" alt="img"></p><p>或者，按需使用 Ctrl+空间：<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/new-line-completions_02.07cf8ed9ebb7decf97535ea1ea521474.png" alt="img"></p><h3 id="方法完成"><a href="#方法完成" class="headerlink" title="方法完成"></a>方法完成</h3><p>Codota 还可以帮助您预测给定对象中的下一个调用方法。最有可能的方法将由科多塔放在建议列表的顶部：<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_01.f5aa338015bb98c3af362343487a086a.png" alt="img"></p><p>在某些情况下，Codota 预测在调用方法时将使用给定的局部变量。在这种情况下，将出现具有局部变量的方法建议，选择 Codota 的建议后，将用此方法粘贴参数。建议将突出显示一个黄色星形：<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/method-completions_02.6f43bfe1f52d9147a6388a569cab2313.png" alt="img"></p><h2 id="在-IDE-Java-搜索中"><a href="#在-IDE-Java-搜索中" class="headerlink" title="在 IDE Java 搜索中"></a>在 IDE Java 搜索中</h2><p>只需单击一下，您就会从 github 获得排名最高的代码段，这是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p><p>编写良好的软件需要不断学习新的 API 或使用编程语言的不同元素。使用 Codota 在 IDE 中编写代码时搜索相关代码示例。只需单击一下，即可从 github 获得排名最高的代码段，该代码段是堆栈流，并在编辑器旁边的 IDE 中查看它们。此过程使代码搜索更加方便。</p><h3 id="如何搜索"><a href="#如何搜索" class="headerlink" title="如何搜索"></a>如何搜索</h3><p><strong>对于给定的类或方法：</strong>要获取代码中使用的任何开源类或方法的相关示例，只需选择类或方法，然后右键单击**- 获取**相关示例或使用键快捷方式（默认值：Ctrl+Shift+O））<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_01.744aa29f671017172e3c9d39263911a6.png" alt="img"><img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_03.c7f445650ae9ee8c6afa9b78ec56df0c.png" alt="img"></p><p>代码片段将显示在 Codota 窗格中：<img src="https://d3ftmdkezac6rp.cloudfront.net/plugins/assets/search_04.ae928872ebf259913520f3ba8e543e62.png" alt="img"></p><p>您还可以在使用键快捷方式 （Ctrl=Shift+O） 导航给定类的方法时触发搜索，并获取所选方法的最佳代码段：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_05.efa49d39678c3f178d2f2f81b514a90d.png" alt="img"></p><p><strong>使用 Codota 的自动完成从零开始搜索</strong>，您可以搜索任何开源类或方法的代码示例，即使它尚未在当前类中或当前类路径中不是事件。你可以去**”工具 + 科多塔搜索…”**或使用 Ctrl=Shift=Y 快捷方式：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_06.7c4f84689dc6759e6ec19403b18a73d6.png" alt="img"></p><p>将打开一个带搜索框的弹出窗口：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_07.1617b0baceaa44778ff1d527ded0fd0d.png" alt="img"></p><p>使用库多塔的自动完成机制键入搜索词：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_08.cc3816166c730ecb6f6e8a27ccc94365.png" alt="img"></p><p>选择术语时，相关示例将显示在侧面：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_09.93af76e45e1601443df91ae031ae19fb.png" alt="img"></p><h3 id="查看代码段"><a href="#查看代码段" class="headerlink" title="查看代码段"></a>查看代码段</h3><p>相关的代码片段显示在 codota 窗格中的”代码段”选项卡中。对于每个代码段，您可以查看它来自堆栈流后、github 存储库还是 maven 项目。单击源标题，了解有关代码段源的信息：<img src="images/%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/search_10.80466706a44b4b8ae23706269ad9d3c5.png" alt="img"></p><p>或者查看帖子/源（如果您想要查看完整的源代码）。目前，每个搜索仅显示 20 个代码段，但在不久的将来，您将能够查看更多代码段或使用其他字词优化搜索。</p><h1 id="下一个插件"><a href="#下一个插件" class="headerlink" title="下一个插件"></a>下一个插件</h1><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快捷键</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/kuai-jie-jian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h1><pre><code>Ctrl+Alt+L</code></pre><h1 id="查看方法参数"><a href="#查看方法参数" class="headerlink" title="查看方法参数"></a>查看方法参数</h1><pre><code>Ctrl+P</code></pre><h1 id="查看类、方法、属性注释"><a href="#查看类、方法、属性注释" class="headerlink" title="查看类、方法、属性注释"></a>查看类、方法、属性注释</h1><pre><code>Ctrl+Q</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用IDEA明明导入了包却显示缺少保留相关类</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/li-yong-idea-ming-ming-dao-ru-liao-bao-que-xian-shi-que-shao-bao-liu-xiang-guan-lei/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/li-yong-idea-ming-ming-dao-ru-liao-bao-que-xian-shi-que-shao-bao-liu-xiang-guan-lei/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利用IDEA明明导入了包却显示缺少保留相关类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用IDEA学习编程语言</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/li-yong-idea-xue-xi-bian-cheng-yu-yan/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/li-yong-idea-xue-xi-bian-cheng-yu-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="安装学习插件EduTools"><a href="#安装学习插件EduTools" class="headerlink" title="安装学习插件EduTools"></a>安装学习插件EduTools</h1><blockquote><p>借助 EduTools 插件，您可以学习和教授编程语言，如 Kotlin、Java、Python、JavaScript、Rust、C/C++ 和 Scala，其形式是编码任务和自定义验证测试，直接位于基于 JetBrains IntelliJ 平台的 IDU 内部。</p></blockquote><p><strong>工作原理</strong></p><p>安装 EduTools 插件：转到首选项 + 插件（或从欢迎屏幕配置 + 插件）并搜索 EduTools 插件。</p><blockquote><p><strong>作为一名教育家</strong>：</p><ul><li>使用自定义任务、检查、测试、提示等创建您自己的交互式课程。</li><li>在<a href="https://stepik.org/">Stepik、</a>学习管理和 MOOC 平台上公开或私下与学生或同事分享您的课程。或者，您可以将课程保存为存档文件。</li><li>让学员在集成测试的协助下独立完成作业。</li></ul><p><a href="https://www.jetbrains.com/help/education/educator-start-guide.html">阅读本教程了解更多详情</a></p><p><strong>作为学习者 ：</strong></p><ul><li>从列表中加入公共交互式编程课程，或从<a href="https://stepik.org/">Stepik 选择课程</a>，为 Java 开发人员<a href="https://www.coursera.org/learn/kotlin-for-java-developers/">解决 Kotlin</a>的编程作业和算法工具<a href="https://www.coursera.org/learn/algorithmic-toolbox">箱课程，</a>完成<a href="https://hyperskill.org/">JetBrains 学院项目</a>，解决<a href="https://checkio.org/">CheckiO 的挑战</a>。</li><li>根据任务描述在练习代码中填写占位符开始学习。</li><li>使用智能开发工具验证任务、获得即时反馈和快速结果。</li></ul><p><a href="https://www.jetbrains.com/help/education/learner-start-guide.html">阅读本教程了解更多详情</a></p></blockquote><p><strong>安装了这个插件相当于慕课网的网址编程作业一样</strong>，非常牛逼，可以自定义课程，我这里用来学习kotlin语言</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利用IDEA学习编程语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建代码块模板</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/chuang-jian-dai-ma-kuai-mo-ban/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/chuang-jian-dai-ma-kuai-mo-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="创建代码块模板"><a href="#创建代码块模板" class="headerlink" title="创建代码块模板"></a>创建代码块模板</h1><p><img src="imgs/pv.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建代码块模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea报java版本错误解决方法</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-bao-java-ban-ben-cuo-wu-jie-jue-fang-fa/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-bao-java-ban-ben-cuo-wu-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<div class="htmledit_views" id="content_views">                                            <p>&nbsp; &nbsp; &nbsp; &nbsp;在Intellij idea中新建了一个Maven项目，运行时报错如下：<span style="color:#f33b45;">Error : java 不支持发行版本5</span></p><p><img alt="" class="has" height="153" src="https://img-blog.csdn.net/20180904232438840?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="832"></p><p>&nbsp; &nbsp; &nbsp; &nbsp;本地运行用的是JDK9，测试Java的Stream操作，报错应该是项目编译配置使用的Java版本不对，需要检查一下项目及环境使用的Java编译版本配置。</p><p>&nbsp; &nbsp; &nbsp; &nbsp;《1》在Intellij中点击“<span style="color:#3399ea;">File</span>” --&gt;“<span style="color:#3399ea;">Project Structure</span>”，看一下“Project”和“Module”栏目中Java版本是否与本地一致：</p><p><img alt="" class="has" height="387" src="https://img-blog.csdn.net/20180904233036107?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="709"></p><p>&nbsp;</p><p><img alt="" class="has" height="494" src="https://img-blog.csdn.net/20180904233152909?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="970"></p><p>如果不一致，改成本地使用的Java版本。</p><p>&nbsp; &nbsp; &nbsp; 《2》点击“<span style="color:#3399ea;">Settings</span>”--&gt;“<span style="color:#3399ea;">Bulid, Execution,Deployment</span>”--&gt;“<span style="color:#3399ea;">Java Compiler</span>”，<strong>Target bytecode version</strong>设为本地Java版本。（可以在<span style="color:#3399ea;">Default Settings</span>中把<strong>Project bytecode version </strong>一劳永逸地配置成本地Java版本）</p><p><img alt="" class="has" height="709" src="https://img-blog.csdn.net/201809042343056?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="1043"></p><p><span style="color:#3399ea;">Default Settings</span>：</p><p><img alt="" class="has" height="465" src="https://img-blog.csdn.net/20180904234401401?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIyMDc2MzQ1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" width="1017"></p><p>&nbsp; &nbsp; &nbsp; &nbsp;以上两步都配置好之后，重新运行应该就不会报上述错误了。</p>                                    </div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea报java版本错误解决方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea工具的使用</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-gong-ju-de-shi-yong/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-gong-ju-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea工具的使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA中Tomcat日志乱码</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-zhong-tomcat-ri-zhi-luan-ma/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/idea/idea-zhong-tomcat-ri-zhi-luan-ma/</url>
      
        <content type="html"><![CDATA[<div id="cnblogs_post_body" class="blogpost-body ">    <p>&nbsp;</p><p>问题，在idea中出现乱码问题，以前没有的，好像在设置系统代码为utf8之后就出现了，于是尝试了一系列办法，希望这些办法对您有帮助。</p><p>先看一下乱码的样式。</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093506839-714069128.png" alt=""></p><p>设置办法</p><p>1、在tomcat Server中设置 VM options , 值为&nbsp;-Dfile.encoding=UTF-8 ，可惜没生效</p><p>1<img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124093658943-1191924990.png" alt=""></p><p>&nbsp;</p><p>2、在setting中的 File encodings 中设置编码格式，后来发现这是设置页面编码格式的，所以也没生效，不过遇到相关问题的朋友也不防照此设置下。</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094119079-1885159073.png" alt=""></p><p>3、在java Complier中设置Additional command line parameters的值，-encoding=UTF-8，很可惜还没生效</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094405855-2002294699.png" alt=""></p><p>4、在bin中设置idea.exe.vmoptions和idea64.exe.vmoptions中的参数，同时增加-Dfile.encoding=UTF-8，据说有些人保存后重启就可以了，但到我这边还是没生效。</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094613937-68757272.png" alt=""></p><p>5、在tomcat \bin目录下的catalina.bat文件中加入&nbsp;-Dfile.encoding=UTF-8，可是还不生效，有些抓狂了...</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094827745-504540766.png" alt=""></p><p>6、在 tomcat / conf 目录下，设置&nbsp;logging.properties ，增加参数&nbsp;&nbsp;java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了，总算松了口气。</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124094951059-25415614.png" alt=""></p><p>终于，正常显示了......</p><p><img src="https://img2018.cnblogs.com/blog/717943/201901/717943-20190124095057327-1632560035.png" alt=""></p><p>7、另外在服务器上tomcat还需要设置&nbsp;server.xml中的参数，以防页面出现乱码</p><p>&lt;Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000"&nbsp; redirectPort="8443"&nbsp; URIEncoding="UTF-8" /&gt;</p><p>&lt;Connector port="8009" protocol="AJP/1.3" redirectPort="8443" URIEncoding="UTF-8" /&gt;</p></div><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> IDEA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA中Tomcat日志乱码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-2 添加</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/3-2-tian-jia/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/3-2-tian-jia/</url>
      
        <content type="html"><![CDATA[<h1 id="git-add-将文件内容添加到索引"><a href="#git-add-将文件内容添加到索引" class="headerlink" title="git-add - 将文件内容添加到索引"></a>git-add - 将文件内容添加到索引</h1><pre><code>git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]      [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]      [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]      [--chmod=(+|-)x] [--pathspec-from-file=&lt;file&gt; [--pathspec-file-nul]]      [--] [&lt;pathspec&gt;…]</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-2 添加 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-1 关键命令</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/3-1-guan-jian-ming-ling/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/3-1-guan-jian-ming-ling/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>git init</td><td>进入一个空的目录，命令行 git init 进行初始化！</td></tr><tr><td>git clone ***.git</td><td>克隆一个git地址 后面添加一个git地址，git会自动下载到本地</td></tr><tr><td>git add .</td><td>添加需要提交的代码 可以是具体的文件名  . 代表全部</td></tr><tr><td>git commit -m “提交描述”</td><td>提交文件，但没有上传到服务器 添加  -m “提交描述”</td></tr><tr><td>git push</td><td>上传到服务器</td></tr><tr><td>git pull</td><td>下载到本地</td></tr><tr><td>git branch testing</td><td>创建分支testing</td></tr><tr><td>git checkout testing</td><td>切换到新创建的 <code>testing</code> 分支</td></tr><tr><td></td><td></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-1 关键命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-2 Git获取和创建项目</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/2-2-git-huo-qu-he-chuang-jian-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h1><blockquote><p>创建一个空的 Git 存储库或重新初始化现有存储库</p></blockquote><pre class=" language-git"><code class="language-git">git init [-q | --quiet] [--bare] [--template=&lt;template_directory>]      [--separate-git-dir &lt;git dir>] [--object-format=&lt;format>]      [-b &lt;branch-name> | --initial-branch=&lt;branch-name>]      [--shared[=&lt;permissions>]] [directory]</code></pre><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>-q</td><td>只打印错误和警告消息; 所有其他输出将被禁止</td></tr><tr><td><strong>-bare</strong></td><td>创建一个裸库。如果没有设置环境，则将其设置为当前的工作目录</td></tr><tr><td><strong>-b</strong></td><td>新创建的存储库中为初始分支使用指定的名称。如果没有指定，则退回到默认名称: master</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h1 id="Git-Clone"><a href="#Git-Clone" class="headerlink" title="Git Clone"></a>Git Clone</h1><blockquote><p>将存储库克隆到一个新目录中</p></blockquote><pre><code>git clone [--template=&lt;template_directory&gt;]      [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]      [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]      [--dissociate] [--separate-git-dir &lt;git dir&gt;]      [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]      [--recurse-submodules[=&lt;pathspec&gt;]] [--[no-]shallow-submodules]      [--[no-]remote-submodules] [--jobs &lt;n&gt;] [--sparse]      [--filter=&lt;filter&gt;] [--] &lt;repository&gt;      [&lt;directory&gt;]</code></pre><p>克隆一个存储库到一个新创建的目录中，为克隆的存储库中的每个分支创建远程跟踪分支(使用 git branch – remotes 可见) ，并创建和检出从克隆的存储库的当前活动分支中分支出来的初始分支。</p><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><strong>-b <name></name></strong> - b &lt; 姓名 &gt;</td><td>不要将新创建的 HEAD 指向克隆存储库的 HEAD 所指向的分支，而是指向 &lt; name &gt; branch。在非裸存储库中，这是要签出的分支。– branch 还可以获取标记，并在结果存储库中的那个提交处分离 HEAD。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-2 Git获取和创建项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1 Git忽略文件</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/2-1-git-hu-lue-wen-jian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/2-1-git-hu-lue-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-忽略文件"><a href="#1-忽略文件" class="headerlink" title="1.忽略文件"></a>1.忽略文件</h1><p>git会一行行读取文件内容,被忽略的文件不会被上传</p><h2 id="固定文件名-gitignore"><a href="#固定文件名-gitignore" class="headerlink" title="固定文件名: .gitignore"></a>固定文件名: .gitignore</h2><pre><code>*.iml.gradle/locak.properties/build</code></pre><h1 id="2-查看修改内容"><a href="#2-查看修改内容" class="headerlink" title="2.查看修改内容"></a>2.查看修改内容</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> status</code></pre><h1 id="3-查看提交记录"><a href="#3-查看提交记录" class="headerlink" title="3.查看提交记录"></a>3.查看提交记录</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> log</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1 Git忽略文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 Git 设置和配置</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/git-xue-xi/1-1-git-she-zhi-he-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>官方文档：<a href="https://git-scm.com/docs">https://git-scm.com/docs</a></p><pre class=" language-shell"><code class="language-shell">git [--version] [--help] [-C <path>] [-c <name>=<value>]    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]    [-p|--paginate|-P|--no-pager] [--no-replace-objects] [--bare]    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]    [--super-prefix=<path>]    <command> [<args>]</code></pre><blockquote><p>Git 是一个快速的、可扩展的、具有异常丰富的命令集的分散式版本控制，它既提供了高级操作，也提供了对内部的完全访问。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code># linux系统sudo apt-get install gityum install git# windos 去官网下载安装包</code></pre><h1 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h1><ul><li>打开git终端,配置用户名和邮箱,必须</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"kujin"</span><span class="token function">git</span> config --global user.email <span class="token string">"kujin@qq.com"</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 Git 设置和配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 简单使用</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-tu-pian-di-zhi-chuang-ku/1-1-jian-dan-shi-yong/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-tu-pian-di-zhi-chuang-ku/1-1-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><blockquote><p>免费的图片服务器,用存放图片,方便引用地址</p></blockquote><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><ul><li>GitHub创建一个仓库</li><li>在设置里GitHub获取token</li><li>下载PicGo 设置图床</li></ul><p><img src="https://raw.githubusercontent.com/kujin521/Typora_images/master/img/image-%E5%9B%BE%E5%BA%8A%E6%88%AA%E5%9B%BE.png" alt="image-20200802180441861"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 简单使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-1 hexo与md文件格式的冲突</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/3-1-hexo-yu-md-wen-jian-ge-shi-de-chong-tu/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/3-1-hexo-yu-md-wen-jian-ge-shi-de-chong-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式"><a href="#将图片地址改为github引用-不然md原生格式无法预览需要标准编写格式" class="headerlink" title="将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式"></a>将图片地址改为github引用,不然md原生格式无法预览需要标准编写格式</h1><pre><code></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-1 hexo与md文件格式的冲突 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1 配置主题</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/2-1-pei-zhi-zhu-ti/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/2-1-pei-zhi-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-theme-matery"><a href="#hexo-theme-matery" class="headerlink" title="hexo-theme-matery"></a>hexo-theme-matery</h1><blockquote><p>这是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题。</p></blockquote><p><img src="images/2-1%20%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98/image-20200801181325409.png" alt="image-20200801181325409"></p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><pre><code>git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre class=" language-hexo"><code class="language-hexo">hexo new page "categories"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2018-09-30 17:25:30type: "categories"layout: "categories"---</code></pre><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "tags"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2018-09-30 18:23:38type: "tags"layout: "tags"---</code></pre><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "about"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><pre><code>---title: aboutdate: 2018-09-30 17:25:30type: "about"layout: "about"---</code></pre><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "contact"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><pre><code>---title: contactdate: 2018-09-30 17:25:30type: "contact"layout: "contact"---</code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><pre><code>hexo new page "friends"</code></pre><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2018-12-12 21:25:30type: "friends"layout: "friends"---</code></pre><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><p>编辑你刚刚新建的页面文件 <code>/source/404.md</code>，至少需要以下内容：</p><pre><code>---title: 404date: 2018-09-30 17:25:30type: "404"layout: "404"description: "Oops～，我崩溃了！找不到你想要的页面 :("---</code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>) 2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找</p><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle  Friends:    url: /friends    icon: fas fa-address-book</code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作<br>1.在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)<br>2.在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.<br>3.注意每个二级菜单模块前要加 <code>-</code>.<br>4.注意缩进格式</p><pre><code>menu:  Index:    url: /    icon: fas fa-home  Tags:    url: /tags    icon: fas fa-tags  Categories:    url: /categories    icon: fas fa-bookmark  Archives:    url: /archives    icon: fas fa-archive  About:    url: /about    icon: fas fa-user-circle-o  Friends:    url: /friends    icon: fas fa-address-book  Medias:    icon: fas fa-list    children:      - name: Musics        url: /musics        icon: fas fa-music      - name: Movies        url: /movies        icon: fas fa-film      - name: Books        url: /books        icon: fas fa-book      - name: Galleries        url: /galleries        icon: fas fa-image</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><pre><code>highlight:  enable: falseprism_plugin:  mode: 'preprocess'    # realtime/preprocess  theme: 'tomorrow'  line_number: false    # default false  custom_css:</code></pre><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><pre><code>npm i hexo-permalink-pinyin --save</code></pre><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>permalink_pinyin:  enable: true  separator: '-' # default: '-'</code></pre><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><pre><code>postInfo:  date: true  update: false  wordCount: false # 设置文章字数统计为 true.  totalCount: false # 设置站点文章总字数统计为 true.  min2read: false # 阅读时长.  readCount: false # 阅读次数.</code></pre><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><pre><code>&lt;% if (theme.socialLink.github) &amp;#123; %&gt;    &lt;a href="&lt;%= theme.socialLink.github %&gt;" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;        &lt;i class="fab fa-github"&gt;&lt;/i&gt;    &lt;/a&gt;&lt;% &amp;#125; %&gt;</code></pre><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><pre><code># 是否在首页显示音乐music:  enable: true  title:             # 非吸底模式有效    enable: true    show: 听听音乐  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    # require song, playlist, album, search, artist  id: 503838841     # require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: '#42b983'  loop: 'all'       # 音频循环播放, 可选值: 'all', 'one', 'none'  order: 'random'   # 音频循环顺序, 可选值: 'list', 'random'  preload: 'auto'   # 预加载，可选值: 'none', 'metadata', 'auto'  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><pre><code>id`获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，`playlist`的`id</code></pre><p>即为这串数字。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1 配置主题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/1-1-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/hexo/1-1-jian-jie/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p><a href="https://hexo.io/zh-cn/docs/">中文文档</a></p><h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h1 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h1><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h1 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h1><pre><code> npm install -g hexo-cli</code></pre><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre><code>$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h3 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h3><p>网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/github-pages/1-1-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/github-pages/1-1-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>地址:<a href="https://pages.github.com/">https://pages.github.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/1-1-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/chuang-jian-ge-ren-bo-ke/1-1-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="github-pages-Hexo-创建个人博客"><a href="#github-pages-Hexo-创建个人博客" class="headerlink" title="github pages + Hexo 创建个人博客"></a>github pages + Hexo 创建个人博客</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Untitled</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/untitled/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/github-xue-xi/untitled/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitHub学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Untitled </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2 使用教程</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-2-shi-yong-jiao-cheng/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-2-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="GitBook-简介"><a href="#GitBook-简介" class="headerlink" title="GitBook 简介"></a>GitBook 简介</h2><p><a href="https://www.gitbook.com/">GitBook 官网</a></p><p><a href="https://github.com/GitbookIO/gitbook">GitBook 文档</a></p><h2 id="GitBook-准备工作"><a href="#GitBook-准备工作" class="headerlink" title="GitBook 准备工作"></a>GitBook 准备工作</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>GitBook 是一个基于 Node.js 的命令行工具，下载安装 <a href="https://nodejs.org/en">Node.js</a>，安装完成之后，你可以使用下面的命令来检验是否安装成功。</p><pre><code>$ node -vv7.7.1</code></pre><h3 id="安装-GitBook"><a href="#安装-GitBook" class="headerlink" title="安装 GitBook"></a>安装 GitBook</h3><p>输入下面的命令来安装 GitBook。</p><pre><code>$ npm install gitbook-cli -g</code></pre><p>安装完成之后，你可以使用下面的命令来检验是否安装成功。</p><pre><code>$ gitbook -VCLI version: 2.3.2GitBook version: 3.2.3</code></pre><p>更多详情请参照 <a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md">GitBook 安装文档</a> 来安装 GitBook。</p><h3 id="安装-GitBook-编辑器"><a href="#安装-GitBook-编辑器" class="headerlink" title="安装 GitBook 编辑器"></a>安装 GitBook 编辑器</h3><p>去 <a href="https://www.gitbook.com/">GitBook 官网</a> 下载 GitBook 编辑器；如果是 Mac 用户且安装过 <code>brew cask</code> 的话可以使用 <code>brew cask install gitbook-editor</code> 命令行来安装 GitBook 编辑器。</p><h2 id="先睹为快"><a href="#先睹为快" class="headerlink" title="先睹为快"></a>先睹为快</h2><p>GitBook 准备工作做好之后，我们进入一个你要写书的目录，输入如下命令。</p><pre><code>$ gitbook initwarn: no summary file in this bookinfo: create README.mdinfo: create SUMMARY.mdinfo: initialization is finished</code></pre><p>可以看到他会创建 README.md 和 SUMMARY.md 这两个文件，README.md 应该不陌生，就是说明文档，而 SUMMARY.md 其实就是书的章节目录，其默认内容如下所示：</p><pre><code># Summary* [Introduction](README.md)</code></pre><p>接下来，我们输入 <code>$ gitbook serve</code> 命令，然后在浏览器地址栏中输入 <code>http://localhost:4000</code> 便可预览书籍。</p><p>效果如下所示：</p><p><img src="https://blankj.com/gitbook/gitbook/README/default_book.png" alt="img"></p><p>运行该命令后会在书籍的文件夹中生成一个 <code>_book</code> 文件夹, 里面的内容即为生成的 html 文件，我们可以使用下面命令来生成网页而不开启服务器。</p><pre><code>gitbook build</code></pre><p>下面我们来详细介绍下 GitBook 目录结构及相关文件。</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>GitBook 基本的目录结构如下所示：</p><pre><code>.├── book.json├── README.md├── SUMMARY.md├── chapter-1/|   ├── README.md|   └── something.md└── chapter-2/    ├── README.md    └── something.md</code></pre><p>下面我们主要来讲讲 book.json 和 SUMMARY.md 文件。</p><h3 id="book-json"><a href="#book-json" class="headerlink" title="book.json"></a>book.json</h3><p>该文件主要用来存放配置信息，我先放出我的配置文件。</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Blankj's Glory"</span><span class="token punctuation">,</span>    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Blankj"</span><span class="token punctuation">,</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"select * from learn"</span><span class="token punctuation">,</span>    <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"zh-hans"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook"</span><span class="token operator">:</span> <span class="token string">"3.2.3"</span><span class="token punctuation">,</span>    <span class="token property">"styles"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"website"</span><span class="token operator">:</span> <span class="token string">"/styles/website.css"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"structure"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"readme"</span><span class="token operator">:</span> <span class="token string">"README.md"</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"links"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"sidebar"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"我的狗窝"</span><span class="token operator">:</span> <span class="token string">"https://blankj.com"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"-sharing"</span><span class="token punctuation">,</span>        <span class="token string">"splitter"</span><span class="token punctuation">,</span>        <span class="token string">"expandable-chapters-small"</span><span class="token punctuation">,</span>        <span class="token string">"anchors"</span><span class="token punctuation">,</span>        <span class="token string">"github"</span><span class="token punctuation">,</span>        <span class="token string">"github-buttons"</span><span class="token punctuation">,</span>        <span class="token string">"donate"</span><span class="token punctuation">,</span>        <span class="token string">"sharing-plus"</span><span class="token punctuation">,</span>        <span class="token string">"anchor-navigation-ex"</span><span class="token punctuation">,</span>        <span class="token string">"favicon"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"pluginsConfig"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token property">"github"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/Blankj"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"github-buttons"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"buttons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"Blankj"</span><span class="token punctuation">,</span>                <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"glory"</span><span class="token punctuation">,</span>                <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"star"</span><span class="token punctuation">,</span>                <span class="token property">"size"</span><span class="token operator">:</span> <span class="token string">"small"</span><span class="token punctuation">,</span>                <span class="token property">"count"</span><span class="token operator">:</span> <span class="token boolean">true</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token punctuation">]</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"donate"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"alipay"</span><span class="token operator">:</span> <span class="token string">"https://blankj.com/gitbook/source/images/donate.png"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>            <span class="token property">"button"</span><span class="token operator">:</span> <span class="token string">"赞赏"</span><span class="token punctuation">,</span>            <span class="token property">"alipayText"</span><span class="token operator">:</span> <span class="token string">" "</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"sharing"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"douban"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"facebook"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"google"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"hatenaBookmark"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"instapaper"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"line"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"linkedin"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"messenger"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"pocket"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"qzone"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"stumbleupon"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"twitter"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"viber"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"vk"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"weibo"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"whatsapp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"all"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"facebook"</span><span class="token punctuation">,</span> <span class="token string">"weibo"</span><span class="token punctuation">,</span> <span class="token string">"twitter"</span><span class="token punctuation">,</span>                <span class="token string">"qq"</span><span class="token punctuation">,</span> <span class="token string">"qzone"</span><span class="token punctuation">,</span> <span class="token string">"linkedin"</span><span class="token punctuation">,</span> <span class="token string">"pocket"</span>            <span class="token punctuation">]</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"anchor-navigation-ex"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"showLevel"</span><span class="token operator">:</span> <span class="token boolean">false</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token property">"favicon"</span><span class="token operator">:</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token property">"shortcut"</span><span class="token operator">:</span> <span class="token string">"./source/images/favicon-32x32.webp"</span><span class="token punctuation">,</span>            <span class="token property">"bookmark"</span><span class="token operator">:</span> <span class="token string">"./source/images/favicon-32x32.webp"</span><span class="token punctuation">,</span>            <span class="token property">"appleTouch"</span><span class="token operator">:</span> <span class="token string">"./source/images/apple-touch-icon.webp"</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>相信很多节点自己也能猜到是什么意思，我还是简单介绍下吧。</p><h4 id="title"><a href="#title" class="headerlink" title="title"></a>title</h4><p>本书标题</p><h4 id="author"><a href="#author" class="headerlink" title="author"></a>author</h4><p>本书作者</p><h4 id="description"><a href="#description" class="headerlink" title="description"></a>description</h4><p>本书描述</p><h4 id="language"><a href="#language" class="headerlink" title="language"></a>language</h4><p>本书语言，中文设置 “zh-hans” 即可</p><h4 id="gitbook"><a href="#gitbook" class="headerlink" title="gitbook"></a>gitbook</h4><p>指定使用的 GitBook 版本</p><h4 id="styles"><a href="#styles" class="headerlink" title="styles"></a>styles</h4><p>自定义页面样式</p><h4 id="structure"><a href="#structure" class="headerlink" title="structure"></a>structure</h4><p>指定 Readme、Summary、Glossary 和 Languages 对应的文件名</p><h4 id="links"><a href="#links" class="headerlink" title="links"></a>links</h4><p>在左侧导航栏添加链接信息</p><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h4><p>配置使用的插件</p><h4 id="pluginsConfig"><a href="#pluginsConfig" class="headerlink" title="pluginsConfig"></a>pluginsConfig</h4><p>配置插件的属性</p><h3 id="SUMMARY-md"><a href="#SUMMARY-md" class="headerlink" title="SUMMARY.md"></a>SUMMARY.md</h3><p>这个文件主要决定 GitBook 的章节目录，它通过 Markdown 中的列表语法来表示文件的父子关系，下面是一个简单的示例：</p><pre><code># Summary* [Introduction](README.md)* [Part I](part1/README.md)    * [Writing is nice](part1/writing.md)    * [GitBook is nice](part1/gitbook.md)* [Part II](part2/README.md)    * [We love feedback](part2/feedback_please.md)    * [Better tools for authors](part2/better_tools.md)</code></pre><p>这个配置对应的目录结构如下所示:</p><p><img src="https://blankj.com/gitbook/gitbook/README/summary.png" alt="img"></p><p>我们通过使用 <code>标题</code> 或者 <code>水平分割线</code> 将 GitBook 分为几个不同的部分，如下所示：</p><pre><code># Summary### Part I* [Introduction](README.md)* [Writing is nice](part1/writing.md)* [GitBook is nice](part1/gitbook.md)### Part II* [We love feedback](part2/feedback_please.md)* [Better tools for authors](part2/better_tools.md)---* [Last part without title](part3/title.md)</code></pre><p>这个配置对应的目录结构如下所示:</p><p><img src="https://blankj.com/gitbook/gitbook/README/summary_part.png" alt="img"></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>GitBook 有 <a href="https://plugins.gitbook.com/">插件官网</a>，默认带有 5 个插件，highlight、search、sharing、font-settings、livereload，如果要去除自带的插件， 可以在插件名称前面加 <code>-</code>，比如：</p><pre><code>"plugins": [    "-search"]</code></pre><p>如果要配置使用的插件可以在 book.json 文件中加入即可，比如我们添加 <a href="https://plugins.gitbook.com/plugin/github">plugin-github</a>，我们在 book.json 中加入配置如下即可：</p><pre><code>&amp;#123;    "plugins": [ "github" ],    "pluginsConfig": &amp;#123;        "github": &amp;#123;            "url": "https://github.com/your/repo"        &amp;#125;    &amp;#125;&amp;#125;</code></pre><p>然后在终端输入 <code>gitbook install ./</code> 即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitBook学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-2 使用教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-1-jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/gitbook-xue-xi/1-1-jian-jie/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> GitBook学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2-常用操作</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/docker-xue-xi/1-2-chang-yong-cao-zuo/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/docker-xue-xi/1-2-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><h2 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h2><h6 id="查看当前运行的容器"><a href="#查看当前运行的容器" class="headerlink" title="查看当前运行的容器"></a>查看当前运行的容器</h6><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><h6 id="查看所有容器"><a href="#查看所有容器" class="headerlink" title="查看所有容器"></a>查看所有容器</h6><pre class=" language-dockerfile"><code class="language-dockerfile">docker ps -a</code></pre><p>在查看容器时，涉及到几个查看参数，含义分别如下：</p><ul><li>CONTAINER ID:CONTAINER ID是指容器的id，是一个唯一标识符,这是一个64位的十六进制整数，在不会混淆的情况下可以只采用id的前几位进行标识一个容器。</li><li>IMAGE:IMAGE表示创建容器时使用的镜像。</li><li>COMMAND:COMMAND表示容器最后运行的命令。</li><li>CREATED:创建容器的时间。</li><li>STATUS:容器的状态，这里可能显示一个容器启动时间，也能显示容器关闭时间。具体显示哪个要看容器当前的状态。</li><li>PORTS:容器对外开放的端口。</li><li>NAMES:容器的名字，如果不设置，会有一个默认的名字。</li></ul><h6 id="查看最新创建的容器"><a href="#查看最新创建的容器" class="headerlink" title="查看最新创建的容器"></a>查看最新创建的容器</h6><pre class=" language-shell"><code class="language-shell">docker ps -l</code></pre><p>查看最新创建的n个容器</p><pre class=" language-docer"><code class="language-docer">docker ps -n=xxx</code></pre><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>容器创建</p><pre class=" language-shell"><code class="language-shell">docker create nginx</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-2-常用操作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1-安装</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/docker-xue-xi/1-1-an-zhuang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/docker-xue-xi/1-1-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker入门安装"><a href="#Docker入门安装" class="headerlink" title="Docker入门安装"></a>Docker入门安装</h1><p>简介：作用和虚拟机相似，可以一键部署linux mysql nginx。。。</p><table><thead><tr><th align="left">docker</th><th align="left">虚拟机</th><th></th></tr></thead><tbody><tr><td align="left">相同点</td><td align="left">1. 都可在不同的主机之间迁移 2. 都具备 root 权限 3. 都可以远程控制 4. 都有备份、回滚操作</td><td></td></tr><tr><td align="left">操作系统</td><td align="left">在性能上有优势，可以轻易的运行多个操作系统</td><td>可以安装任何系统，但是性能不及容器</td></tr><tr><td align="left">原理</td><td align="left">和宿主机共享内核，所有容器运行在容器引擎之上，容器并非一个完整的操作系统，所有容器共享操作系统，在进程级进行隔离</td><td>每一个虚拟机都建立在虚拟的硬件之上，提供指令级的虚拟，具备一个完整的操作系统</td></tr><tr><td align="left">优点</td><td align="left">高效、集中。一个硬件节点可以运行数以百计的的容器，非常节省资源，QoS 会尽量满足，但不保证一定满足。内核由提供者升级，服务由服务提供者管理</td><td>对操作系统具有绝对权限，对系统版本和系统升级具有完全的管理权限。具有一整套的的资源：CPU、RAM 和磁盘。QoS 是有保证的，每一个虚拟机就像一个真实的物理机一样，可以实现不同的操作系统运行在同一物理节点上。</td></tr><tr><td align="left">资源管理</td><td align="left">弹性资源分配：资源可以在没有关闭容器的情况下添加，数据卷也无需重新分配大小</td><td>虚拟机需要重启，虚拟机里边的操作系统需要处理新加入的资源，如磁盘等，都需要重新分区。</td></tr><tr><td align="left">远程管理</td><td align="left">根据操作系统的不同，可以通过 shell 或者远程桌面进行</td><td>远程控制由虚拟化平台提供，可以在虚拟机启动之前连接</td></tr><tr><td align="left">缺点</td><td align="left">对内核没有控制权限，只有容器的提供者具备升级权限。只有一个内核运行在物理节点上，几乎不能实现不同的操作系统混合。容器提供者一般仅提供少数的几个操作系统</td><td>每一台虚拟机都具有更大的负载，耗费更多的资源，用户需要全权维护和管理。一台物理机上能够运行的虚拟机非常有限</td></tr><tr><td align="left">配置</td><td align="left">快速，基本上是一键配置</td><td>配置时间长</td></tr><tr><td align="left">启动时间</td><td align="left">秒级</td><td>分钟级</td></tr><tr><td align="left">硬盘使用</td><td align="left">MB</td><td>GB</td></tr><tr><td align="left">性能</td><td align="left">接近原生态</td><td>弱于原生态</td></tr><tr><td align="left">系统支持数量</td><td align="left">单机支持上千个</td><td>一般不多于几十个</td></tr></tbody></table><h2 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h2><ul><li><p>镜像 images</p><p>静态模板，保存保存容器需要的环境，和应用执行代码，可以将镜像看作容器的代码，当代码运行起来就成了容器</p></li><li><p>容器 </p><p>一个运行的环境，镜像的运行状态，</p></li><li><p>库</p><p>特定用户存储镜像的目录，一个用户可以建立多个用户来保存自己的镜像</p></li></ul><h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><pre class=" language-shell"><code class="language-shell"># 首先安装 Dockeryum -y install docker# 然后启动 Docker 服务service docker start# 测试安装是否成功docker -v</code></pre><p><img src="D:\OneDrive\随心记\Docker学习\image\image-20200707220336806.png" alt="image-20200707220336806"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1-安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简介</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/jian-jie/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/jian-jie/</url>
      
        <content type="html"><![CDATA[<blockquote><p>BitNami 提供wordpress、joomla、drupal、bbpress等开源程序的傻瓜式安装包下载，所有的安装包内置了服务器环境，就是说，不需要在本地电脑上另外搭建服务器，就可以一次性傻瓜式安装完毕。BitNami开源PHP程序傻瓜集成安装包可选环境，包括WAMP，LAMP，MAMP和SAMP。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Bitnami虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 简介 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-1文档学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/2-1-wen-dang-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/2-1-wen-dang-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><p>官方文档地址:<a href="https://docs.bitnami.com/virtual-machine/get-started-virtualbox/">https://docs.bitnami.com/virtual-machine/get-started-virtualbox/</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>如果您曾经尝试过安装服务器应用程序（如 WordPress）或开发环境（如 Apache/PHP/MySQL 环境），您已经知道它比乍看起来要困难得多。有文件要下载和复制，配置设置要调整，和各种其他箍跳转之前，你可以真正得到一些富有成效的工作。</p></blockquote><p><strong>Bitnami 虚拟机</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Bitnami虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-1文档学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-3 安装桌面</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-3-an-zhuang-zhuo-mian/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-3-an-zhuang-zhuo-mian/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="启用桌面访问"><a href="#启用桌面访问" class="headerlink" title="启用桌面访问"></a>启用桌面访问</h1><p>文件下载很慢,(不推荐)</p><p>若要允许位纳米用户的<em>桌面访问，</em>请按照以下步骤操作：</p><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><ul><li><p>安装<em>侏儒核心</em>包：</p><pre><code>sudo apt-get updatesudo apt-get install gnome-core</code></pre></li><li><p>重新启动计算机。</p></li><li><p>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</p></li></ul><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><ul><li><p>安装<em>ubuntu 桌面</em>包：</p><pre><code>sudo apt-get updatesudo apt-get install ubuntu-desktop</code></pre></li><li><p>创建一个名为*/usr/共享/光德姆/光德姆.conf.d/60-bitnami.conf 的新文件*，并添加如下行：</p><pre><code>[SeatDefaults]default-user=bitnamigreeter-show-manual-login=true</code></pre></li></ul><p>您可以通过执行以下命令来创建该文件：</p><pre><code>sudo sh -c 'echo "[SeatDefaults]\ndefault-user=bitnami\ngreeter-show-manual-login=true" &gt; /usr/share/lightdm/lightdm.conf.d/50-bitnami.conf'</code></pre><ul><li>重新启动虚拟机。</li><li>现在，您应该能够以<em>bitnami 用户位登录到桌面</em>。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Bitnami虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-3 安装桌面 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-2 连接SSH</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-2-lian-jie-ssh/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-2-lian-jie-ssh/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-首先修改密码"><a href="#1-首先修改密码" class="headerlink" title="1.首先修改密码"></a>1.首先修改密码</h1><p><strong>修改虚拟机的默认登录密码</strong></p><p>虚拟机控制台的默认登录密码在启动时显示，如下所示：</p><p><a href="https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png"><img src="https://docs.bitnami.com/images/img/platforms/virtual-machine/server-credentials.png" alt="Server credentials"></a></p><p>首次登录时，系统会自动提示您更改此更改。若要以后更改它，请执行下面的命令在控制台：</p><pre><code>passwd</code></pre><h1 id="2-启用-SSH-服务器"><a href="#2-启用-SSH-服务器" class="headerlink" title="2.启用 SSH 服务器"></a>2.启用 SSH 服务器</h1><blockquote><p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。但是，某些应用程序（如 GitLab）需要 SSH 访问导入代码存储库。</p></blockquote><h4 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h4><pre><code>sudo rm -f /etc/ssh/sshd_not_to_be_runsudo systemctl enable sshsudo systemctl start ssh</code></pre><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><pre><code>sudo mv /etc/init/ssh.conf.back /etc/init/ssh.confsudo start ssh</code></pre><h3 id="禁用-SSH-服务器"><a href="#禁用-SSH-服务器" class="headerlink" title="禁用 SSH 服务器"></a>禁用 SSH 服务器</h3><p>默认情况下，在 Bitnami 虚拟机中禁用 SSH 服务器。如果已<a href="https://docs.bitnami.com/virtual-machine/faq/get-started/enable-ssh/">按照此处所述启用它</a>，则可以按照相反的步骤禁用它：</p><h4 id="Debian-1"><a href="#Debian-1" class="headerlink" title="Debian"></a>Debian</h4><pre><code>sudo systemctl stop sshsudo systemctl disable ssh</code></pre><h4 id="Ubuntu-1"><a href="#Ubuntu-1" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><pre><code>sudo stop sshsudo mv /etc/init/ssh.conf /etc/init/ssh.conf.back</code></pre><h1 id="3-连接成功"><a href="#3-连接成功" class="headerlink" title="3.连接成功"></a>3.连接成功</h1><p><img src="images/1-2%20%E8%BF%9E%E6%8E%A5SSH/image-20200731114408221.png" alt="image-20200731114408221"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Bitnami虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-2 连接SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-1 安装bitnami虚拟机</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-1-an-zhuang-bitnami-xu-ni-ji/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/bitnami-xu-ni-ji/1-1-an-zhuang-bitnami-xu-ni-ji/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="第-1-步：启动-Bitnami-WordPress-虚拟机"><a href="#第-1-步：启动-Bitnami-WordPress-虚拟机" class="headerlink" title="第 1 步：启动 Bitnami WordPress 虚拟机"></a>第 1 步：启动 Bitnami WordPress 虚拟机</h1><ul><li><p>下载连接:<a href="https://bitnami.com/stack/wordpress/virtual-machine">https://bitnami.com/stack/wordpress/virtual-machine</a></p></li><li><p>使用虚拟机打开连接</p></li></ul><p><img src="images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114146505.png" alt="image-20200730114146505"></p><p>现在，您可以通过启动 Web 浏览器并浏览虚拟机的 IP 地址来访问 WordPress。您应该会看到博客的头版，并包含一个示例帖子，如下所示：</p><p><a href="http://192.168.2.139/">http://192.168.2.139/</a></p><p><img src="images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730114615539.png" alt="image-20200730114615539"></p><h1 id="第-2-步：登录并使用-WordPress-开始"><a href="#第-2-步：登录并使用-WordPress-开始" class="headerlink" title="第 2 步：登录并使用 WordPress 开始"></a>第 2 步：登录并使用 WordPress 开始</h1><p>要登录到 WordPress 仪表板，请按照以下步骤操作：</p><ul><li><p>浏览到 WordPress 仪表板，通常在 URL <em><a href="http://192.168.2.139/wp-admin%E3%80%82">http://192.168.2.139/wp-admin。</a></em></p></li><li><p>查看用户名和密码</p></li><li><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cat</span> /home/bitnami/bitnami_credentials</code></pre><p><img src="images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120745221.png" alt="image-20200730120745221"></p></li></ul><h2 id="设置中文显示"><a href="#设置中文显示" class="headerlink" title="设置中文显示"></a>设置中文显示</h2><p><img src="images/1-1%20%E5%AE%89%E8%A3%85bitnami%E8%99%9A%E6%8B%9F%E6%9C%BA/image-20200730120842595.png" alt="image-20200730120842595"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Bitnami虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 1-1 安装bitnami虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视图导航</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/shi-tu-dao-hang/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/shi-tu-dao-hang/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h1><p>官方文档：<a href="https://developer.android.com/guide/navigation/">https://developer.android.com/guide/navigation/</a></p><p>youtube教程视频：<a href="https://developer.android.com/guide/navigation/">https://developer.android.com/guide/navigation/</a></p><p>关键三部分</p><table><thead><tr><th>Navigation graph</th><th align="left">: 一个 XML 资源，其中包含一个集中位置中的所有与导航相关的信息。这包括应用内的所有单个内容区域（<em>称为目标</em>）以及用户可以通过应用可走的路径。</th></tr></thead><tbody><tr><td>NavHost Fragment</td><td align="left">显示导航图中的目的地的空容器。导航组件包含一个默认实现，<a href="https://developer.android.com/reference/androidx/navigation/fragment/NavHostFragment"><code>即导航帧，</code></a>显示片段目标。</td></tr><tr><td>NavController</td><td align="left">管理中应用导航的对象。当用户在整个应用中移动时，协调中的目标内容的交换</td></tr></tbody></table><h2 id="开始使用Navigation"><a href="#开始使用Navigation" class="headerlink" title="开始使用Navigation"></a>开始使用Navigation</h2><ol><li><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> nav_version <span class="token operator">=</span> <span class="token string">"2.3.0"</span><span class="token comment" spellcheck="true">// Kotlin</span>  implementation <span class="token string">"androidx.navigation:navigation-fragment-ktx:$nav_version"</span>  implementation <span class="token string">"androidx.navigation:navigation-ui-ktx:$nav_version"</span></code></pre><p>创建几个BlankFragment 用于页面跳转</p></li><li><h3 id="创建导航图-activity-main-xml"><a href="#创建导航图-activity-main-xml" class="headerlink" title="创建导航图 activity_main.xml"></a>创建导航图 activity_main.xml</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>androidx.constraintlayout.widget.ConstraintLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;fragment        android:id="@+id/nav_host_fragment"              <span class="token comment" spellcheck="true">&lt;!-- 关键代码 start--></span>        android:name="androidx.navigation.fragment.NavHostFragment"        app:defaultNavHost="true"        app:navGraph="@navigation/nav_graph"     <span class="token comment" spellcheck="true">&lt;!-- 关键代码 end--></span>        android:layout_width="0dp"        android:layout_height="0dp"        app:layout_constraintLeft_toLeftOf="parent"        app:layout_constraintRight_toRightOf="parent"        app:layout_constraintTop_toTopOf="parent"        app:layout_constraintBottom_toBottomOf="parent" /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>androidx.constraintlayout.widget.ConstraintLayout</span><span class="token punctuation">></span></span></code></pre></li><li><h3 id="导航编辑器"><a href="#导航编辑器" class="headerlink" title="导航编辑器"></a>导航编辑器</h3><p><img src="images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082952691.png" alt="image-20200721082952691"></p><p><img src="images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721082851327.png" alt="image-20200721082851327"></p><p><img src="images/%E8%A7%86%E5%9B%BE%E5%AF%BC%E8%88%AA/image-20200721083022645.png" alt="image-20200721083022645"></p></li><li></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视图导航 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础学习</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/ji-chu-xue-xi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/ji-chu-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>安卓科特林基础知识包括以下课程：</p><h2 id="第-1-课：构建第一个应用"><a href="#第-1-课：构建第一个应用" class="headerlink" title="第 1 课：构建第一个应用"></a>第 1 课：构建第一个应用</h2><ul><li>官方Android开发者文档<a href="http://developer.android.com/index.html">developer.android.com。</a></li><li><em>材料设计</em>是一种概念设计理念，它概述了应用在移动设备上的外观和功能。材料设计不仅仅适用于 Android 应用程序。材料设计指南<a href="https://material.io/">material.io。</a></li><li>Android Studio 为常见和推荐的应用程序和活动设计提供模板。这些模板为常见用例提供工作代码。</li><li>创建项目时，可以为第一个活动选择模板。</li><li>在开发应用时，可以从内置模板创建活动和其他应用组件。</li><li><a href="https://github.com/googlesamples">Google 示例</a>包含您可以学习、复制和合并到项目中的代码示例。</li></ul><h3 id="活动"><a href="#活动" class="headerlink" title="活动"></a><strong>活动</strong></h3><ul><li><code>MainActivity</code>是 的子类，而子类又是 。是负责绘制 Android 应用 UI 和接收输入事件的核心 Android 类。<code>AppCompatActivity``Activity``Activity</code></li><li>所有活动都有一个关联的布局文件，该文件是应用资源中的 XML 文件。布局文件为活动命名，例如 。<code>activity_main.xml</code></li><li>中的 方法将布局与活动关联，并在创建活动时膨胀该布局。<code>setContentView()``MainActivity</code></li><li>布局膨胀是将 XML 布局文件中定义的视图转换为（或”膨胀”成）Kotlin 在内存中的视图的过程。一旦布局膨胀发生，可以绘制这些对象到屏幕上，并动态修改它们。<code>Activity</code></li></ul><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a><strong>视图</strong></h3><ul><li>应用布局中的所有 UI 元素都是 View 类的子<a href="http://developer.android.com/reference/android/view/View.html"><code>类</code></a>，称为<em>视图</em>。 和意见的例子。<code>TextView``Button</code></li><li><code>View</code>元素可以分组在视图<a href="https://developer.android.com/reference/android/view/ViewGroup.html"><code>组中</code></a>。视图组充当视图或其他视图组的容器。 是线性排列其视图的视图组的示例。<code>LinearLayout</code></li></ul><h3 id="查看属性"><a href="#查看属性" class="headerlink" title="查看属性"></a><strong>查看属性</strong></h3><ul><li>和 属性指示视图的宽度和高度。该值将视图拉伸到其父视图的宽度或高度。该值将缩小视图以适合视图的内容。<code>android:layout_width``android:layout_height``match_parent``wrap_content</code></li><li>属性指示视图应显示的文本（如果该视图显示文本）。对于按钮，是按钮标签。<code>android:text``android:text</code></li><li>视图组中的属性排列它包含的视图元素。从左到右排列视图的值。从上到下排列视图的值。<code>android:orientation``LinearLayout``horizontal``vertical</code></li><li>属性确定视图的位置以及该视图的所有子元素。<code>android:layout_gravity</code></li><li>该属性定义文本视图中文本的大小。文本大小以 sp 单位（可伸<em>缩像素）指定</em>。通过使用 sp 单位，您可以独立于设备的显示质量调整文本的大小。<code>android:textSize</code></li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a><strong>字符串</strong></h3><ul><li>在布局中硬编码字符串，最好使用字符串资源。</li><li>文件中包含字符串资源。<code>values/res/string.xml</code></li><li>要提取字符串，请使用 （在 Mac 上）。选择<strong>从弹出式菜单</strong>中提取字符串资源。<code>Alt+Enter``Option+Enter</code></li></ul><h3 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a><strong>使用视图</strong></h3><ul><li>若要将 Kotlin 代码连接到布局中定义的视图，需要在视图膨胀后获取对视图对象的引用。将 ID （） 分配给布局中的视图，然后使用<a href="https://developer.android.com/reference/android/view/View#findViewById(int)"><code>findViewById（）</code></a>方法获取关联的视图对象。<code>android:id</code></li><li>当您在 XML 布局文件中为视图创建 ID 时，Android Studio 会在生成的类中使用该 ID 的名称创建整数常量。然后可以在 方法中使用该引用。<code>R``R.id``findViewById()</code></li><li>您可以直接按属性名称在 Kotlin 代码中设置视图对象的属性。例如，文本视图中的文本由 XML 中的属性定义，并且由 Kotlin 中的属性定义。<code>android:text``text</code></li><li><em>单击处理程序</em>是当用户单击或点击 UI 元素时调用的方法。若要将单击处理程序方法附加到视图（如按钮），请使用 方法。<code>setOnClickListener()</code></li></ul><h3 id="使用烤面包"><a href="#使用烤面包" class="headerlink" title="使用烤面包"></a><strong>使用烤面包</strong></h3><p>Toast 是一种视图，在一个小的弹出窗口中向用户显示一条简单的消息。</p><p>若要创建 Toast，请使用[<code>三个参数在</code>](<a href="https://developer.android.com/reference/android/widget/Toast.html#makeText">https://developer.android.com/reference/android/widget/Toast.html#makeText</a>(android.content.Context, int, int))Toast 类上调用<a href="https://developer.android.com/reference/android/widget/Toast.html"><code>makeText（）</code></a>工厂方法：</p><ul><li><a href="https://developer.android.com/reference/android/content/Context.html">应用</a>的上下文<code>Activity</code></li><li>要显示的消息，例如字符串资源</li><li>持续时间，例如<a href="https://developer.android.com/reference/android/widget/Toast.html#LENGTH_SHORT"><code>Toast.LENGTH_SHORT</code></a></li></ul><p>要显示 Toast，请调用 。<code>show()</code></p><h2 id="第-2-课：布局"><a href="#第-2-课：布局" class="headerlink" title="第 2 课：布局"></a>第 2 课：布局</h2><p>Android 开发人员文档：</p><ul><li><a href="https://developer.android.com/guide/topics/ui/declaring-layout">布局</a></li><li><a href="https://developer.android.com/reference/android/view/ViewGroup"><code>ViewGroup</code></a></li><li><a href="https://developer.android.com/reference/android/view/View"><code>View</code></a></li><li><a href="https://developer.android.com/guide/topics/ui/layout/linear">线性布局</a></li><li><a href="https://developer.android.com/reference/android/widget/ScrollView"><code>ScrollView</code></a></li><li><a href="https://developer.android.com/training/multiscreen/screendensities">支持不同的像素密度</a>（dp）</li><li><a href="https://developer.android.com/studio/write/layout-editor.html">使用布局编辑器构建 UI</a></li><li><a href="http://developer.android.com/tools/studio/index.html">安卓工作室文档</a></li><li><a href="https://developer.android.com/guide/topics/ui/look-and-feel/themes">样式和主题</a></li></ul><h3 id="1-输入框及事件监听"><a href="#1-输入框及事件监听" class="headerlink" title="1. 输入框及事件监听"></a>1. 输入框及事件监听</h3><ul><li>Android<a href="https://developer.android.com/studio/write/layout-editor">工作室中的</a>布局编辑器工具是一个可视化设计编辑器。您可以使用布局编辑器通过将 UI 元素拖动到布局中来构建应用的布局。</li><li><a href="https://developer.android.com/reference/android/widget/EditText"><code>EditText</code></a>是允许用户输入和修改文本的 UI 元素。</li><li><a href="https://developer.android.com/reference/android/widget/Button"><code>按钮</code></a>是用户可以点击执行操作的 UI 元素。按钮可以由文本、图标或文本和图标组成。</li></ul><p>单击侦听器</p><ul><li>您可以通过向点击侦听器添加单击侦听器来对被点击做出任何响应。<code>View</code></li><li>定义单击侦听器的函数接收被单击的 。<code>View</code></li></ul><p>可以通过两种方式之一将单击侦听器函数附加到 ：<code>View</code></p><ul><li>在 XML 布局中，将<a href="https://developer.android.com/reference/android/R.attr.html#onClick"><code>android：onClick</code></a>属性添加到*<code>View</code>*元素。<code>&lt;``&gt;</code></li><li>以编程方式，在相应的 中使用<a href="https://developer.android.com/reference/android/view/View.html#setOnClickListener(android.view.View.OnClickListener)"><code>setOnClickListener（View.OnClickListener）</code></a>函数。<code>Activity</code></li></ul><h3 id="2-使用布局编辑器约束布局-ConstraintLayout"><a href="#2-使用布局编辑器约束布局-ConstraintLayout" class="headerlink" title="2. 使用布局编辑器约束布局 ConstraintLayout"></a>2. 使用布局编辑器约束布局 ConstraintLayout</h3><p>官方教程：<a href="https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3">https://codelabs.developers.google.com/codelabs/kotlin-android-training-constraint-layout/index.html#3</a></p><h3 id="3-数据绑定基础知识"><a href="#3-数据绑定基础知识" class="headerlink" title="3. 数据绑定基础知识"></a>3. 数据绑定基础知识</h3><h3 id="Android-studio-4-0实现了自动绑定-id-可以直接使用id"><a href="#Android-studio-4-0实现了自动绑定-id-可以直接使用id" class="headerlink" title="Android studio 4.0实现了自动绑定 id 可以直接使用id"></a>Android studio 4.0实现了自动绑定 id 可以直接使用id</h3><pre><code>apply plugin: 'kotlin-android-extensions'</code></pre><p>使用数据绑定替换对 的调用的步骤：<code>findViewById()</code></p><ol><li><p>在文件的 Android 部分启用数据绑定：<code>build.gradle</code><br><code>dataBinding { enabled = true }</code></p></li><li><p>用作 XML 布局中的根视图。<code>&lt;layout&gt;</code></p></li><li><p>定义绑定变量：<br><code>private lateinit var binding: ActivityMainBinding</code></p></li><li><p>在 中创建绑定对象，替换 ：<code>MainActivity``setContentView</code><br><code>binding = DataBindingUtil.setContentView(this, R.layout.activity_main)</code></p></li><li><h1 id="将-的调用替换为对绑定对象中视图的引用。例如："><a href="#将-的调用替换为对绑定对象中视图的引用。例如：" class="headerlink" title="将 的调用替换为对绑定对象中视图的引用。例如："></a>将 的调用替换为对绑定对象中视图的引用。例如：</h1><p>（在示例中，视图的名称从 XML 中的视图生成骆驼大小写。<code>findViewById()``findViewById&lt;Button&gt;(R.id.done_button)``binding.doneButton``id</code></p></li></ol><p>将视图绑定到数据的步骤：</p><ol><li>为数据创建数据类。</li><li>在标记内添加块。<code>&lt;data&gt;``&lt;layout&gt;</code></li><li>定义 具有名称的类型，以及作为数据类的类型。<code>&lt;variable&gt;</code></li></ol><pre><code>&lt;data&gt;   &lt;variable       name="myName"       type="com.example.android.aboutme.MyName" /&gt;&lt;/data&gt;</code></pre><ol><li><p>在 中，使用数据类的实例创建一个变量。例如：<code>MainActivity</code><br><code>private val myName: MyName = MyName("Aleks Haecky")</code></p></li><li><p>在绑定对象中，将变量设置为刚刚创建的变量：<br><code>binding.myName = myName</code></p></li><li><p>在 XML 中，将视图的内容设置为在块中定义的变量。使用点符号访问数据类内的数据。<code>&lt;data&gt;</code><br><code>android:text="@={myName.name}"</code></p></li></ol><h2 id="第-3-课：导航"><a href="#第-3-课：导航" class="headerlink" title="第 3 课：导航"></a>第 3 课：导航</h2><h3 id="1-创建片段-Fragment"><a href="#1-创建片段-Fragment" class="headerlink" title="1. 创建片段(Fragment)"></a>1. 创建片段(Fragment)</h3><p><img src="https://developer.android.com/images/fragment_lifecycle.png" alt="img">fragment生命周期</p><h3 id="2-定义导航路径"><a href="#2-定义导航路径" class="headerlink" title="2. 定义导航路径"></a>2. 定义导航路径</h3><h3 id="3-启动外部活动"><a href="#3-启动外部活动" class="headerlink" title="3. 启动外部活动"></a>3. 启动外部活动</h3><h2 id="第-4-课：活动和片段生命周期"><a href="#第-4-课：活动和片段生命周期" class="headerlink" title="第 4 课：活动和片段生命周期"></a>第 4 课：活动和片段生命周期</h2><h3 id="4-1生命周期和日志记录"><a href="#4-1生命周期和日志记录" class="headerlink" title="4.1生命周期和日志记录"></a>4.1生命周期和日志记录</h3><p><img src="images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131037492.png" alt="image-20200721131037492"></p><p><img src="images/%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/image-20200721131000138.png" alt="image-20200721130945421"></p><p>AS快捷键ctrl+o（选择方法，重写）</p><table><thead><tr><th>生命周期函数</th><th>说明</th><th>注意</th></tr></thead><tbody><tr><td>onCreate()</td><td>活动执行任何一次初始化</td><td>该方法是重写，因此在它里面，必须立即调用 。其他生命周期方法也是如此。<code>onCreate()``super.onCreate()</code></td></tr><tr><td>onStart（）</td><td>生命周期方法在 刚刚调用。运行后，您的活动在屏幕上可见。与 不同，在活动的生命周期中，可以多次调用（仅调用一次以初始化活动）</td><td>注意，它与相应的生命周期方法配对。如果用户启动应用，然后返回到设备主屏幕，则活动将停止，并且不再在屏幕上可见。<code>onStart()``onStop()</code></td></tr><tr><td>onResume()</td><td>为活动提供焦点，并准备好让用户与其进行交互。</td><td></td></tr><tr><td>onPause()</td><td>应用不再在屏幕上可见</td><td></td></tr><tr><td>onRestart()</td><td>活动返回到前台</td><td></td></tr><tr><td>onStop()</td><td>停止活动</td><td></td></tr><tr><td>onDestroy()</td><td>应用销毁</td><td></td></tr></tbody></table><h4 id="片段的整个启动生命周期，包括这些回调："><a href="#片段的整个启动生命周期，包括这些回调：" class="headerlink" title="片段的整个启动生命周期，包括这些回调："></a>片段的整个启动生命周期，包括这些回调：</h4><ul><li><code>onAttach()</code>：当片段与其所有者活动关联时调用。</li><li><code>onCreate()</code>：与活动类似，对于片段，调用执行初始片段创建（布局除外）。<code>onCreate()``onCreate()</code></li><li><code>onCreateView()</code>：调用以膨胀片段的布局。</li><li><code>onActivityCreated()</code>：当所有者活动完成时调用。在调用此方法之前，您的片段将无法访问该活动。<code>onCreate()</code></li><li><code>onStart()</code>：当片段变为可见时调用;与活动的平行。<code>onStart()</code></li><li><code>onResume()</code>：当片段获得用户焦点时调用;与活动的平行。<code>onResume()</code></li></ul><h4 id="Log-类将消息写入日志猫。"><a href="#Log-类将消息写入日志猫。" class="headerlink" title="Log 类将消息写入日志猫。"></a><a href="https://developer.android.com/reference/kotlin/android/util/Log"><code>Log 类</code></a>将消息写入日志猫。</h4><p>此命令有三个部分：</p><ul><li><em>日志消息</em>的严重性，即消息的重要程度。在这种情况下[<code>，Log.i（） 方法</code>](<a href="https://developer.android.com/reference/kotlin/android/util/Log#i">https://developer.android.com/reference/kotlin/android/util/Log#i</a>(kotlin.String, kotlin.String))写入信息消息。类中的其他方法包括[<code>用于错误的 Log.e（）</code>](<a href="https://developer.android.com/reference/kotlin/android/util/Log#e">https://developer.android.com/reference/kotlin/android/util/Log#e</a>(kotlin.String, kotlin.String))或用于[<code>警告的 Log.w（）。</code> ](<a href="https://developer.android.com/reference/kotlin/android/util/Log#w">https://developer.android.com/reference/kotlin/android/util/Log#w</a>(kotlin.String, kotlin.String))<code>Log</code></li><li>日志<em>标记</em>，在这种情况下。标记是一个字符串，可让您更轻松地在 Logcat 中查找日志消息。标记通常是类的名称。<code>"MainActivity"</code></li><li>实际日志<em>消息，</em>一个短字符串，在这种情况下是 。<code>"onCreate called"</code></li></ul><ol><li><p>编译并运行甜品点击器应用程序。点击甜点时，不会看到应用程序中的任何行为差异。在 Android 工作室中， 在屏幕底部， 单击<strong>Logcat</strong>选项卡</p><p><img src="https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/ff9c50376701877f.png" alt="img"></p><p>。日志猫是记录消息的控制台。此处将显示来自 Android 的有关应用的消息，包括您用方法或其他类方法显式发送到日志的消息。<code>Log.i()``Log</code></p></li><li><p>在**”日志猫**”窗格中，键入搜索字段。</p><p><img src="https://codelabs.developers.google.com/codelabs/kotlin-android-training-lifecycles-logging/img/f5c091e2b480edf8.png" alt="img">Logcat<br>可以包含许多消息，其中大多数对您没有用。</p><p>您可以通过多种方式筛选 Logcat 条目，但搜索是最容易的。由于您将用作代码中的日志标记，因此可以使用该标记筛选日志。在开始添加意味着这是一个信息性消息，由 创建。<br>日志消息包括日期和时间、包 （）、日志标记（在开始时使用）和实际<br>消息。由于此消息出现在日志中，因此您知道已执行。<code>I/MainActivity``MainActivity``I/``Log.i()``com.example.android.dessertclicker``I/``onCreate()</code></p><h4 id="使用第三方库，显示时间日志"><a href="#使用第三方库，显示时间日志" class="headerlink" title="使用第三方库，显示时间日志"></a>使用第三方库，显示时间日志</h4><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.jakewharton.timber:timber:4.7.1'</span></code></pre><p>简介：Timber<code>使用 类，因为整个应用将使用此日志记录库，并且在设置其他所有内容之前，需要先初始化一次库。在这种情况下，您可以对类进行子类，并使用您自己的自定义实现重写默认值。</code>Application``Application</p><h5 id="在全局类里初始化"><a href="#在全局类里初始化" class="headerlink" title="在全局类里初始化"></a>在全局类里初始化</h5><pre class=" language-kotlin"><code class="language-kotlin">Timber<span class="token punctuation">.</span><span class="token function">plant</span><span class="token punctuation">(</span>Timber<span class="token punctuation">.</span><span class="token function">DebugTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre class=" language-kotlin"><code class="language-kotlin">Timber<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token string">"onCreate called"</span><span class="token punctuation">)</span></code></pre></li></ol><h3 id="4-2复杂的生命周期情况"><a href="#4-2复杂的生命周期情况" class="headerlink" title="4.2复杂的生命周期情况"></a>4.2复杂的生命周期情况</h3><h4 id="生命周期提示"><a href="#生命周期提示" class="headerlink" title="生命周期提示"></a><strong>生命周期提示</strong></h4><ul><li>如果在生命周期回调中设置或启动某项内容，请停止或删除相应回调中的东西。通过停止它，你确保它不会继续运行时，它不再需要。例如，如果在 中设置计时器，则需要在 中暂停或停止计时器。<code>onStart()``onStop()</code></li><li>仅用于初始化应用首次启动时运行一次的应用部分。用于启动应用在应用启动时和每次应用返回前台时运行的应用部分。<code>onCreate()``onStart()</code></li></ul><h4 id="生命周期库"><a href="#生命周期库" class="headerlink" title="生命周期库"></a><strong>生命周期库</strong></h4><ul><li>使用 Android 生命周期库将生命周期控制从活动或片段转移到需要生命周期感知的实际组件。</li><li>生命周期<em>所有者</em>是具有（因此具有”拥有”）生命周期（包括 和 ）的组件。生命周期所有者实现接口。<code>Activity``Fragment``LifecycleOwner</code></li><li>生命周期<em>观察者</em>会关注当前生命周期状态，并在生命周期更改时执行任务。生命周期观察者实现接口。<code>LifecycleObserver</code></li><li><code>Lifecycle</code>对象包含实际的生命周期状态，并在生命周期更改时触发事件。</li></ul><p>要创建生命周期感知类，请：</p><ul><li><p>在需要生命周期感知的类中实现接口。<code>LifecycleObserver</code></p></li><li><p>使用活动或片段中的生命周期对象初始化生命周期观察者类。</p></li><li><p>在生命周期观察者类中，注释生命周期感知方法，并注明它们感兴趣的生命周期状态更改。</p><p>例如，注释指示该方法正在监视生命周期事件。<code>@OnLifecycleEvent(Lifecycle.Event.ON_START)``onStart</code></p></li></ul><h4 id="进程关闭和保存活动状态"><a href="#进程关闭和保存活动状态" class="headerlink" title="进程关闭和保存活动状态"></a><strong>进程关闭和保存活动状态</strong></h4><ul><li>Android 可调节在后台运行的应用，以便前台应用可以毫无问题地运行。此法规包括限制后台应用可以执行的处理量，有时甚至会关闭整个应用过程。</li><li>用户无法判断系统是否在后台关闭了应用。应用仍显示在”最近”屏幕中，并且应以用户离开时的状态重新启动。</li><li>Android 调试桥 （） 是一个命令行工具，允许您向连接到计算机的模拟器和设备发送指令。您可以使用 模拟应用中的进程关闭。<code>adb``adb</code></li><li>当 Android 关闭应用进程时，不会调用生命周期方法。应用程序刚刚停止。<code>onDestroy()</code></li></ul><h4 id="保留活动和片段状态"><a href="#保留活动和片段状态" class="headerlink" title="保留活动和片段状态"></a><strong>保留活动和片段状态</strong></h4><ul><li>当你的应用进入后台时，在调用后，应用数据将保存到捆绑包中。某些应用数据（如 的内容）会自动保存。<code>onStop()``EditText</code></li><li>捆绑包是 的实例，它是键和值的集合。键始终为字符串。<code>Bundle</code></li><li>使用回调将其他数据保存到要保留的捆绑包，即使应用已自动关闭。若要将数据放入捆绑包中，请使用 以 开始的捆绑方法，例如 。<code>onSaveInstanceState()``put``putInt()</code></li><li>可以从方法中的捆绑包中恢复数据，或者更常见地在 中获取数据。该方法具有保存捆绑包的参数。<code>onRestoreInstanceState()``onCreate()``onCreate()``savedInstanceState</code></li><li>如果变量包含 ，则活动在没有状态包的情况下启动，并且没有要检索的状态数据。<code>savedInstanceState``null</code></li><li>若要使用键从捆绑包中检索数据，请使用 以 开始的方法，如 。<code>Bundle``get``getInt()</code></li></ul><h4 id="配置更改"><a href="#配置更改" class="headerlink" title="配置更改"></a><strong>配置更改</strong></h4><ul><li><em>当设备</em>的状态发生如此急剧的变化，系统解决更改的最简单方法是关闭和重建活动时，就会发生配置更改。</li><li>配置更改的最常见示例是当用户将设备从纵向旋转到横向模式或从横向模式旋转到纵向模式时。当设备语言更改或插入硬件键盘时，也可能发生配置更改。</li><li>当发生配置更改时，Android 会调用所有活动生命周期的关闭回调。然后 Android 从头开始重新启动活动，运行所有生命周期启动回调。</li><li>当 Android 由于配置更改而关闭应用时，它将使用 可用的状态捆绑包重新启动活动。<code>onCreate()</code></li><li>与进程关闭一样，将应用的状态保存到 中的捆绑包。<code>onSaveInstanceState()</code></li></ul><h2 id="第-5-课：体系结构组件"><a href="#第-5-课：体系结构组件" class="headerlink" title="第 5 课：体系结构组件"></a>第 5 课：体系结构组件</h2><h2 id="第-6-课：房间数据库和密码"><a href="#第-6-课：房间数据库和密码" class="headerlink" title="第 6 课：房间数据库和密码"></a>第 6 课：房间数据库和密码</h2><h2 id="第-7-课：回收器视图"><a href="#第-7-课：回收器视图" class="headerlink" title="第 7 课：回收器视图"></a>第 7 课：回收器视图</h2><h2 id="第8课：连接到互联网"><a href="#第8课：连接到互联网" class="headerlink" title="第8课：连接到互联网"></a>第8课：连接到互联网</h2><h2 id="第-9-课：存储库"><a href="#第-9-课：存储库" class="headerlink" title="第 9 课：存储库"></a>第 9 课：存储库</h2><h2 id="第-10-课：为每个人设计"><a href="#第-10-课：为每个人设计" class="headerlink" title="第 10 课：为每个人设计"></a>第 10 课：为每个人设计</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 ViewModel 处理配置更改</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/shi-yong-viewmodel-chu-li-pei-zhi-geng-gai/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/shi-yong-viewmodel-chu-li-pei-zhi-geng-gai/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-ViewModel-处理配置更改"><a href="#使用-ViewModel-处理配置更改" class="headerlink" title="使用 ViewModel 处理配置更改"></a>使用 ViewModel 处理配置更改</h2><p>ViewModel 非常适合在用户积极使用应用程序时存储和管理与 UI 相关的数据。它允许快速访问 UI 数据，并帮助您避免通过旋转、窗口调整和其他常见发生的配置更改从网络或磁盘重新提取数据。若要了解如何实现视图模型，请参阅<a href="https://developer.android.com/topic/libraries/architecture/viewmodel.html">视图模型指南</a>。</p><p>ViewModel 将数据保留在内存中，这意味着检索比从磁盘或网络中检索数据更便宜。ViewModel 与活动（或其他一些生命周期所有者）关联 - 它在配置更改期间保留在内存中，系统会自动将 ViewModel 与配置更改导致的新活动实例关联。</p><p>当用户退出活动或片段时，或者当您调用 finish（）时，ViewModels 会自动被系统销毁，这意味着状态将按用户在这些方案中的期望进行清除。</p><p>与保存的实例状态不同，ViewModels 在系统启动的进程死亡期间被销毁。这就是为什么您应该将 ViewModel 对象与 onSaveInstanceState（或其他一些磁盘持久性）结合使用，将标识符隐藏到保存的 InstanceState 中，以帮助查看模型在系统死亡后重新加载数据。</p><p>如果您已经拥有用于跨配置更改存储 UI 状态的内存中解决方案，则可能不需要使用 ViewModel。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="https://medium.com/androiddevelopers/viewmodels-a-simple-example-ed5ac416317e">视图模型 ：一个简单的示例</a></li><li><a href="https://medium.com/androiddevelopers/viewmodels-persistence-onsaveinstancestate-restoring-ui-state-and-loaders-fc7cc4a6c090">视图模型：持久性、在保存状态（）、还原 UI 状态和加载器</a></li><li><a href="https://codelabs.developers.google.com/codelabs/android-lifecycles/">Android 生命周期感知组件代码实验室</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 使用 ViewModel 处理配置更改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetpack</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/jetpack/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/jetpack/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="Jetpack简介"><a href="#Jetpack简介" class="headerlink" title="Jetpack简介"></a>Jetpack简介</h1><p>Jetpack是一个开发组件工具集，官网：<a href="https://developer.android.google.cn/jetpack">https://developer.android.google.cn/jetpack</a></p><p>Jetpack 是一套库，可帮助开发人员遵循最佳实践，减少样板代码，并编写跨 Android 版本和设备一致工作的代码，以便开发人员可以专注于他们关心的代码。</p><p>Jetpack 库可以单独使用，也可以组合使用，以满足应用的不同需求。</p><ul><li><a href="https://developer.android.google.cn/topic/libraries/architecture/workmanager">WorkManager</a> - 满足您的后台调度需求。</li><li><a href="https://developer.android.google.cn/topic/libraries/architecture/room">Room</a> - 实现数据存储持久性。</li><li><a href="https://developer.android.google.cn/guide/navigation/navigation-getting-started">Navigation</a> - 管理应用导航流程。</li><li><a href="https://developer.android.google.cn/training/camerax">CameraX</a> - 满足相机应用需求。</li><li>请参阅所有 Jetpack 库的<a href="https://developer.android.google.cn/jetpack/androidx/versions#version-table">概览</a>。</li></ul><p><img src="images/Jetpack/image-20200721153616389.png" alt="image-20200721153616389"></p><p><img src="images/Jetpack/image-20200722131636968.png" alt="image-20200722131636968"></p><h2 id="ViewModel"><a href="#ViewModel" class="headerlink" title="ViewModel"></a>ViewModel</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>ViewModel是Jetpack组件之一，在传统Activity中需要负责逻辑处理，又要控制UI展示，甚至还得处理网络回调，现在ViewModel将负责Activity的数据部分</p><p>当手机旋转时Activity会被重新创建，但ViewModel生命周期是Activtity创建到销毁全过程，所以旋转不会导致数据丢失</p><p><img src="images/Jetpack/image-20200721154242410.png" alt="image-20200721154242410"></p><h3 id="简单的计时器"><a href="#简单的计时器" class="headerlink" title="简单的计时器"></a>简单的计时器</h3><ol><li><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> lifecycle_version <span class="token operator">=</span> <span class="token string">"2.2.0"</span>    implementation <span class="token string">"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"</span></code></pre><p>​    </p></li><li><h4 id="创建ViewModel"><a href="#创建ViewModel" class="headerlink" title="创建ViewModel"></a>创建ViewModel</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModel<span class="token keyword">class</span> MainModel<span class="token operator">:</span><span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> counter<span class="token operator">=</span><span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li><li><h4 id="编写Activity"><a href="#编写Activity" class="headerlink" title="编写Activity"></a>编写Activity</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre></li></ol><pre><code>   &lt;TextView       android:id="@+id/infoText"       android:layout_width="wrap_content"       android:layout_height="wrap_content"       android:layout_gravity="center_horizontal"       android:text="@string/jishi" /&gt;   &lt;Button       android:id="@+id/plusOnBtn"       android:layout_gravity="center_vertical"       android:layout_width="match_parent"       android:layout_height="wrap_content"       android:text="@string/pulus_one" /&gt;</code></pre>      ```<pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">package</span> com<span class="token punctuation">.</span>kj<span class="token punctuation">.</span>scoreviewmodel<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModelProviders<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>android<span class="token punctuation">.</span>synthetic<span class="token punctuation">.</span>main<span class="token punctuation">.</span>activity_main<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//定义viewmodel</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> viewModel<span class="token operator">:</span> MainModel    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//初始化viewmodel</span>        viewModel<span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//button点击事件</span>        plusOnBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            viewModel<span class="token punctuation">.</span>counter<span class="token operator">++</span>            <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新视图</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        infoText<span class="token punctuation">.</span>text<span class="token operator">=</span>viewModel<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="向ViewModel传递参数"><a href="#向ViewModel传递参数" class="headerlink" title="向ViewModel传递参数"></a>向ViewModel传递参数</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModel<span class="token comment" spellcheck="true">//添加构造参数</span><span class="token keyword">class</span> <span class="token function">MainModel2</span><span class="token punctuation">(</span>counter<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> counter<span class="token operator">=</span>counter&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModel<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModelProvider<span class="token comment" spellcheck="true">//利用ViewModelProvider.Factory 接口 实现构造函数</span><span class="token keyword">class</span> <span class="token function">MainViewModelFactory</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> counter<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> ViewModelProvider<span class="token punctuation">.</span>Factory &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T <span class="token operator">:</span> ViewModel<span class="token operator">?</span><span class="token operator">></span> <span class="token function">create</span><span class="token punctuation">(</span>modelClass<span class="token operator">:</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">MainModel2</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token keyword">as</span> T    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Context<span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>SharedPreferences<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModelProviders<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>android<span class="token punctuation">.</span>synthetic<span class="token punctuation">.</span>main<span class="token punctuation">.</span>activity_main<span class="token punctuation">.</span><span class="token operator">*</span><span class="token keyword">class</span> MainActivity2 <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> viewModel<span class="token operator">:</span>MainModel2    <span class="token keyword">lateinit</span> <span class="token keyword">var</span> sp<span class="token operator">:</span> SharedPreferences    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>        sp<span class="token operator">=</span><span class="token function">getPreferences</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>MODE_PRIVATE<span class="token punctuation">)</span>        <span class="token keyword">val</span> countReserved<span class="token operator">=</span>sp<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"count_reserved"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//初始化viewmodel（修改点）</span>        viewModel<span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">MainViewModelFactory</span><span class="token punctuation">(</span>countReserved<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MainModel2<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//button点击事件</span>        plusOnBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            viewModel<span class="token punctuation">.</span>counter<span class="token operator">++</span>            <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        sp<span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">"count_reserved"</span><span class="token punctuation">,</span>viewModel<span class="token punctuation">.</span>counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新视图</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">refreshCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        infoText<span class="token punctuation">.</span>text<span class="token operator">=</span>viewModel<span class="token punctuation">.</span>counter<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="更正由于ViewModel-设计理念是不依赖与Activity"><a href="#更正由于ViewModel-设计理念是不依赖与Activity" class="headerlink" title="更正由于ViewModel 设计理念是不依赖与Activity"></a>更正由于ViewModel 设计理念是不依赖与Activity</h3><h3 id="使用google推荐的写法"><a href="#使用google推荐的写法" class="headerlink" title="使用google推荐的写法"></a>使用google推荐的写法</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> UserProfileViewModel <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token keyword">val</span> userId <span class="token operator">:</span> String <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">val</span> user <span class="token operator">:</span> User <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> viewModel<span class="token operator">:</span> UserProfileViewModel <span class="token keyword">by</span> <span class="token function">viewModels</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="遇到的错误"><a href="#遇到的错误" class="headerlink" title="遇到的错误"></a>遇到的错误</h3><pre><code>Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target//解决android &amp;#123;    ...    compileOptions &amp;#123;        sourceCompatibility = 1.8        targetCompatibility = 1.8    &amp;#125;    kotlinOptions &amp;#123;        jvmTarget = "1.8"    &amp;#125;&amp;#125;</code></pre><p><img src="images/Jetpack/image-20200722134519104.png" alt="image-20200722134519104"></p><h2 id="Lifecycles"><a href="#Lifecycles" class="headerlink" title="Lifecycles"></a>Lifecycles</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>在网络请求中，由于网络响应延迟，页面关闭情况，我们要对activity生命周期进行逻辑处理</p><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><pre><code>import android.util.Logimport androidx.lifecycle.Lifecycleimport androidx.lifecycle.LifecycleObserverimport androidx.lifecycle.OnLifecycleEventclass MyObserver(val lifecycle: Lifecycle) : LifecycleObserver &amp;#123;    @OnLifecycleEvent(Lifecycle.Event.ON_START)    fun activityStart()&amp;#123;        Log.d("MyObserver", "activityStart: ")    &amp;#125;    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)    fun activityStop()&amp;#123;        Log.d("MyObserver", "activityStop: ")    &amp;#125;&amp;#125;</code></pre><pre><code>//activity监听生命周期        MyObserver(lifecycle)        val currentState = lifecycle.currentState        Toast.makeText(this, ""+currentState, Toast.LENGTH_SHORT).show()</code></pre><h2 id="LiveData"><a href="#LiveData" class="headerlink" title="LiveData"></a>LiveData</h2><p><a href="https://developer.android.google.cn/reference/androidx/lifecycle/LiveData"><code>LiveData</code></a> 是一种可观察的数据存储器类。与常规的可观察类不同，LiveData 具有生命周期感知能力，意指它遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。</p><p>您可以注册与实现 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner"><code>LifecycleOwner</code></a> 接口的对象配对的观察者。有了这种关系，当相应的 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle"><code>Lifecycle</code></a> 对象的状态变为 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Lifecycle.State#DESTROYED"><code>DESTROYED</code></a> 时，便可移除此观察者。 这对于 Activity 和 Fragment 特别有用，因为它们可以放心地观察 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/LiveData"><code>LiveData</code></a> 对象而不必担心泄露（当 Activity 和 Fragment 的生命周期被销毁时，系统会立即退订它们）。</p><ul><li>确保界面符合数据状态</li><li>不会发生内存泄漏</li><li>不会因Activity停止导致崩溃</li><li>不需要手动处理生命周期</li><li>数据保持最新状态</li><li>适当的配置更改</li><li>共享资源</li></ul><h3 id="1-使用LiveData对象"><a href="#1-使用LiveData对象" class="headerlink" title="1.使用LiveData对象"></a>1.使用LiveData对象</h3><ol><li><p>创建 <code>LiveData</code> 实例以存储某种类型的数据。这通常在 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/ViewModel"><code>ViewModel</code></a> 类中完成。</p></li><li><p>创建可定义 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Observer#onChanged(T)"><code>onChanged()</code></a> 方法的 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/Observer"><code>Observer</code></a> 对象，该方法可以控制当 <code>LiveData</code> 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 <code>Observer</code> 对象。</p></li><li><p>使用 [<code>observe()</code>](<a href="https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe">https://developer.android.google.cn/reference/androidx/lifecycle/LiveData#observe</a>(android.arch.lifecycle.LifecycleOwner, android.arch.lifecycle.Observer)) 方法将 <code>Observer</code> 对象附加到 <code>LiveData</code> 对象。<code>observe()</code> 方法会采用 <a href="https://developer.android.google.cn/reference/androidx/lifecycle/LifecycleOwner"><code>LifecycleOwner</code></a> 对象。这样会使 <code>Observer</code> 对象订阅 <code>LiveData</code> 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 <code>Observer</code> 对象。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>MutableLiveData<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>ViewModel<span class="token keyword">class</span> NameViewModel <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用字符串创建一个LiveData</span>    <span class="token keyword">val</span> currentName<span class="token operator">:</span> MutableLiveData<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token keyword">by</span> lazy &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        MutableLiveData<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ViewModel的其余部分…</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> NameActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用'by viewModels()' Kotlin属性委托</span>    <span class="token comment" spellcheck="true">// 来自activity-ktx工件</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> model<span class="token operator">:</span> NameViewModel <span class="token keyword">by</span> <span class="token function">viewModels</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_name<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建用于更新UI的观察者。</span>        <span class="token keyword">val</span> nameObserver <span class="token operator">=</span> Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span> newName <span class="token operator">-></span>            <span class="token comment" spellcheck="true">// 更新UI，这里是TextView。</span>            nameTextView<span class="token punctuation">.</span>text <span class="token operator">=</span> newName        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 观察LiveData，将此活动作为LifecycleOwner和observer传递进来。</span>        model<span class="token punctuation">.</span>currentName<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> nameObserver<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 修改参数</span>        button<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            model<span class="token punctuation">.</span>currentName<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>edText<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//model.currentName.postValue(edText.text.toString())</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="2-map和switchMap的使用"><a href="#2-map和switchMap的使用" class="headerlink" title="2.map和switchMap的使用"></a>2.map和switchMap的使用</h3><ol><li><p>定义一个User类</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">var</span> fistName<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token keyword">var</span> lastName<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token keyword">var</span> age<span class="token operator">:</span>Int<span class="token punctuation">)</span></code></pre></li></ol><ol start="2"><li><p>编写ViewModel</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">MainViewModel</span><span class="token punctuation">(</span>countReserved<span class="token operator">:</span>Int<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> userLiveData<span class="token operator">=</span>MytableLiveData<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> userName<span class="token operator">:</span>LiveData<span class="token operator">&lt;</span>String<span class="token operator">>=</span>Transformations<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>userLiveData<span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>user<span class="token operator">-></span>        <span class="token string">"$&amp;#123;user.firstName&amp;#125; $&amp;#123;user.lastName&amp;#125;"</span>                                                                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="3"><li><h2 id="Room"><a href="#Room" class="headerlink" title="Room"></a>Room</h2></li></ol><p><a href="https://developer.android.google.cn/training/data-storage/room">Room</a> 持久性库在 SQLite 的基础上提供了一个抽象层，让用户能够在充分利用 SQLite 的强大功能的同时，获享更强健的数据库访问机制。</p><p>Room 包含 3 个主要组件：</p><ul><li><p><a href="https://developer.android.google.cn/reference/androidx/room/Database"><strong>数据库</strong></a>：包含数据库持有者，并作为应用已保留的持久关系型数据的底层连接的主要接入点。</p><p>使用 <a href="https://developer.android.google.cn/reference/androidx/room/Database"><code>@Database</code></a> 注释的类应满足以下条件：</p><ul><li>是扩展 <a href="https://developer.android.google.cn/reference/androidx/room/RoomDatabase"><code>RoomDatabase</code></a> 的抽象类。</li><li>在注释中添加与数据库关联的实体列表。</li><li>包含具有 0 个参数且返回使用 <a href="https://developer.android.google.cn/reference/androidx/room/Dao"><code>@Dao</code></a> 注释的类的抽象方法。</li></ul><p>在运行时，您可以通过调用 [<code>Room.databaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#databaseBuilder</a>(android.content.Context, java.lang.Class, java.lang.String)) 或 [<code>Room.inMemoryDatabaseBuilder()</code>](<a href="https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder">https://developer.android.google.cn/reference/androidx/room/Room#inMemoryDatabaseBuilder</a>(android.content.Context, java.lang.Class)) 获取 <a href="https://developer.android.google.cn/reference/androidx/room/Database"><code>Database</code></a> 的实例。</p></li></ul><ul><li><p><a href="https://developer.android.google.cn/training/data-storage/room/defining-data"><strong>Entity</strong></a>：表示数据库中的表。</p></li><li><p><a href="https://developer.android.google.cn/training/data-storage/room/accessing-data"><strong>DAO</strong></a>：包含用于访问数据库的方法。</p></li></ul><p>应用使用 Room 数据库来获取与该数据库关联的数据访问对象 (DAO)。然后，应用使用每个 DAO 从数据库中获取实体，然后再将对这些实体的所有更改保存回数据库中。 最后，应用使用实体来获取和设置与数据库中的表列相对应的值。</p><p><img src="images/Jetpack/image-20200722181709403.png" alt="image-20200722181709403"></p><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>导入依赖</p><pre class=" language-kotlin"><code class="language-kotlin">def room_version <span class="token operator">=</span> <span class="token string">"2.2.5"</span>    implementation <span class="token string">"androidx.room:room-runtime:<span class="token interpolation variable">$room_version</span>"</span>    <span class="token comment" spellcheck="true">//annotationProcessor "androidx.room:room-compiler:$room_version" // 对于Kotlin来说，使用kapt而不是annotationProcessor</span>    kapt <span class="token string">"androidx.room:room-compiler:<span class="token interpolation variable">$room_version</span>"</span> <span class="token comment" spellcheck="true">// 对于Kotlin来说，使用kapt而不是annotationProcessor</span><span class="token comment" spellcheck="true">// 可选- Kotlin扩展和协同程序支持空间</span>implementation <span class="token string">"androidx.room:room-ktx:<span class="token interpolation variable">$room_version</span>"</span><span class="token comment" spellcheck="true">// 可选- RxJava支持房间</span>implementation <span class="token string">"androidx.room:room-rxjava2:<span class="token interpolation variable">$room_version</span>"</span><span class="token comment" spellcheck="true">// 可选-番石榴支持房间，包括可选和ListenableFuture</span>implementation <span class="token string">"androidx.room:room-guava:<span class="token interpolation variable">$room_version</span>"</span><span class="token comment" spellcheck="true">// 测试助手</span>testImplementation <span class="token string">"androidx.room:room-testing:<span class="token interpolation variable">$room_version</span>"</span></code></pre><p>User</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//数据库的表</span><span class="token annotation builtin">@Entity</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span>    <span class="token annotation builtin">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"first_name"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> firstName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token annotation builtin">@ColumnInfo</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"last_name"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> lastName<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation builtin">@PrimaryKey</span><span class="token punctuation">(</span>autoGenerate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> uid<span class="token operator">:</span> Long<span class="token operator">=</span><span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>   </code></pre><p>UserDao</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//数据访问对象</span><span class="token annotation builtin">@Dao</span><span class="token keyword">interface</span> UserDao &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE uid IN (:userIds)"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">loadAllByIds</span><span class="token punctuation">(</span>userIds<span class="token operator">:</span> IntArray<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span>    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE first_name LIKE :first AND "</span> <span class="token operator">+</span>            <span class="token string">"last_name LIKE :last LIMIT 1"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">findByName</span><span class="token punctuation">(</span>first<span class="token operator">:</span> String<span class="token punctuation">,</span> last<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> User    <span class="token annotation builtin">@Insert</span>    <span class="token keyword">fun</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span>Long    <span class="token annotation builtin">@Delete</span>    <span class="token keyword">fun</span> <span class="token function">delete</span><span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>AppDatabase</p><pre class=" language-kotlin"><code class="language-kotlin">    <span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token function">arrayOf</span><span class="token punctuation">(</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UserDao    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>创建上述文件后，您可以使用以下代码获取已创建的数据库的实例：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//定义数据库对象，数据库版本，包含的实体类</span><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>entities <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UserDao    <span class="token keyword">companion</span> <span class="token keyword">object</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> instance<span class="token operator">:</span> AppDatabase<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span>        <span class="token annotation builtin">@Synchronized</span>        <span class="token keyword">fun</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> AppDatabase &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            instance<span class="token operator">?</span><span class="token punctuation">.</span>let &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> it            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Room<span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span>                AppDatabase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span><span class="token string">"app_database"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowMainThreadQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    instance <span class="token operator">=</span><span class="token keyword">this</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.room.RoomActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EditText</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/edText<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>hint</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name 用空格隔开<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>autofillHints</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>姓名<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>inputType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/addBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/add<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/queryBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/query_data<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/updateBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/update<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/deleteBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/delete<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/textView<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>fontFamily</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/aldrich<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollView</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> RoomActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数据库实例</span>    <span class="token keyword">val</span> userDao<span class="token operator">=</span> AppDatabase<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_room<span class="token punctuation">)</span>        addBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            userDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span>edText<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>edText<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        updateBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            userDao<span class="token punctuation">.</span><span class="token function">upDateUser</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span>edText<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>edText<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        deleteBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            userDao<span class="token punctuation">.</span><span class="token function">deleteUserByLastName</span><span class="token punctuation">(</span>textView<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        queryBtn<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">""</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>user <span class="token keyword">in</span> userDao<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>                str<span class="token operator">+=</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            textView<span class="token punctuation">.</span>text<span class="token operator">=</span>str        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="Room的数据库升级"><a href="#Room的数据库升级" class="headerlink" title="Room的数据库升级"></a>Room的数据库升级</h3><p>添加数据库表Book</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Entity</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Book</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span><span class="token keyword">var</span> pages<span class="token operator">:</span> Int<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation builtin">@PrimaryKey</span><span class="token punctuation">(</span>autoGenerate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> id<span class="token operator">:</span>Long<span class="token operator">=</span><span class="token number">0</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>BookDao</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Dao</span><span class="token keyword">interface</span> BookDao &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation builtin">@Insert</span>    <span class="token keyword">fun</span> <span class="token function">insertBook</span><span class="token punctuation">(</span>book<span class="token operator">:</span> Book<span class="token punctuation">)</span><span class="token operator">:</span>Long    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"select * from Book"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">loadAllBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Book<span class="token operator">></span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//定义数据库对象，数据库版本，包含的实体类</span><span class="token comment" spellcheck="true">//版本变成2 添加Book class</span><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> entities <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>Book<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDatabase <span class="token operator">:</span> <span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">userDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> UserDao    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">bookDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BookDao    <span class="token keyword">companion</span> <span class="token keyword">object</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">var</span> instance<span class="token operator">:</span> AppDatabase<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span>        <span class="token keyword">val</span> MIGRATION_1_2<span class="token operator">=</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">Migration</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>&amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">migrate</span><span class="token punctuation">(</span>database<span class="token operator">:</span> SupportSQLiteDatabase<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                database<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"create table Book ("</span> <span class="token operator">+</span>                        <span class="token string">"id integer primary key autoincrement not null,"</span> <span class="token operator">+</span>                        <span class="token string">"name text not null,"</span> <span class="token operator">+</span>                        <span class="token string">"pages integer not null)"</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token annotation builtin">@Synchronized</span>        <span class="token keyword">fun</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span><span class="token operator">:</span> AppDatabase &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            instance<span class="token operator">?</span><span class="token punctuation">.</span>let &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> it            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Room<span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span>                AppDatabase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span><span class="token string">"app_database"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">allowMainThreadQueries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Room默认不容许在主线程中进行数据库操作，加入这个方法可以在主线程进行数据库操作</span>                <span class="token punctuation">.</span><span class="token function">addMigrations</span><span class="token punctuation">(</span>MIGRATION_1_2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//添加数据表</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>apply &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    instance <span class="token operator">=</span><span class="token keyword">this</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="WorkManager-调度任务"><a href="#WorkManager-调度任务" class="headerlink" title="WorkManager 调度任务"></a>WorkManager 调度任务</h2><p>使用 WorkManager API 可以轻松地调度即使在应用退出或设备重启时仍应运行的可延迟异步任务。</p><p><strong>主要功能</strong>：</p><ul><li>最高向后兼容到 API 14<ul><li>在运行 API 23 及以上级别的设备上使用 JobScheduler</li><li>在运行 API 14-22 的设备上结合使用 BroadcastReceiver 和 AlarmManager</li></ul></li><li>添加网络可用性或充电状态等工作约束</li><li>调度一次性或周期性异步任务</li><li>监控和管理计划任务</li><li>将任务链接起来</li><li>确保任务执行，即使应用或设备重启也同样执行任务</li><li>遵循低电耗模式等省电功能</li></ul><p>WorkManager 旨在用于<strong>可延迟</strong>运行（即不需要立即运行）并且在应用退出或设备重启时必须能够<strong>可靠运行</strong>的任务。例如：</p><ul><li>向后端服务发送日志或分析数据</li><li>定期将应用数据与服务器同步</li></ul><p>WorkManager 不适用于应用进程结束时能够安全终止的运行中后台工作，也不适用于需要立即执行的任务。请查看<a href="https://developer.android.google.cn/guide/background">后台处理指南</a>，了解哪种解决方案符合您的需求。</p><h3 id="WorkManger基本用法"><a href="#WorkManger基本用法" class="headerlink" title="WorkManger基本用法"></a>WorkManger基本用法</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><pre class=" language-groovy"><code class="language-groovy"><span class="token keyword">def</span> work_version <span class="token operator">=</span> <span class="token string">"2.3.4"</span>        <span class="token comment" spellcheck="true">// (Java only)</span>        implementation <span class="token string">"androidx.work:work-runtime:$work_version"</span>        <span class="token comment" spellcheck="true">// Kotlin + coroutines</span>        implementation <span class="token string">"androidx.work:work-runtime-ktx:$work_version"</span>        <span class="token comment" spellcheck="true">// optional - RxJava2 support</span>        implementation <span class="token string">"androidx.work:work-rxjava2:$work_version"</span>        <span class="token comment" spellcheck="true">// optional - GCMNetworkManager support</span>        implementation <span class="token string">"androidx.work:work-gcm:$work_version"</span>        <span class="token comment" spellcheck="true">// optional - Test helpers</span>        androidTestImplementation <span class="token string">"androidx.work:work-testing:$work_version"</span></code></pre><h4 id="创建后台任务"><a href="#创建后台任务" class="headerlink" title="创建后台任务"></a>创建后台任务</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">SimpleWorker</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span>params<span class="token operator">:</span> WorkerParameters<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Worker</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>params<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">doWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Result &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//耗时操作</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"SimpleWorker"</span><span class="token punctuation">,</span> <span class="token string">"doWork: do work in SimpleWorker"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin">button<span class="token punctuation">.</span>setOnClickListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">val</span> request<span class="token operator">=</span>OneTimeWorkRequest<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span>SimpleWorker<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setInitialDelay</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置5分钟后运行</span>                <span class="token punctuation">.</span><span class="token function">addTag</span><span class="token punctuation">(</span><span class="token string">"simple"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//添加请求标签，</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            WorkManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BottomNavigationView控件学习md</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/bottomnavigationview-kong-jian-xue-xi-md/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/bottomnavigationview-kong-jian-xue-xi-md/</url>
      
        <content type="html"><![CDATA[<h1 id="as可直接生成底部导航"><a href="#as可直接生成底部导航" class="headerlink" title="as可直接生成底部导航"></a>as可直接生成底部导航</h1><p><img src="/imgs/1.png"></p><h1 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h1><p><img src="/imgs/2.png"><br><img src="/imgs/2_1.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><pre><code>menu-&gt;item-&gt;id 要和 navigation-&gt;fragment-&gt;id 保持一致&lt;br&gt;startDestination:启动页面</code></pre><p><img src="/imgs/3.png"><br><img src="/imgs/4.png"></p><h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><pre><code> private void setNav() {    states = new int[][] {            new int[] { android.R.attr.state_selected}, // 选中状态            new int[] { android.R.attr.state_enabled}  // 未选中状态    };    colors = new int[] {            Color.BLUE,            Color.GRAY    };    ColorStateList myList = new ColorStateList(states, colors);    BottomNavigationView navView = findViewById(R.id.nav_view);    navView.setItemTextColor(myList);//设置item文字颜色    navView.setItemIconTintList(myList);//设置item图片颜色    NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment);    NavigationUI.setupWithNavController(navView, navController);}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BottomNavigationView控件学习md </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio使用技巧</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/android-studio-shi-yong-ji-qiao/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/android-studio-shi-yong-ji-qiao/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="IDE技巧"><a href="#IDE技巧" class="headerlink" title="IDE技巧"></a>IDE技巧</h1><h2 id="1-提取样式"><a href="#1-提取样式" class="headerlink" title="1. 提取样式"></a>1. 提取样式</h2><p><img src="images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112705738.png" alt="image-20200718112705738"></p><p><img src="images/Android%20Studio%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20200718112818773.png" alt="image-20200718112818773"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Studio使用技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-4 开源网络封装库Retofit</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-4-kai-yuan-wang-luo-feng-zhuang-ku-retofit/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-4-kai-yuan-wang-luo-feng-zhuang-ku-retofit/</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><h1 id="2-Retrofit基本用法"><a href="#2-Retrofit基本用法" class="headerlink" title="2.Retrofit基本用法"></a>2.Retrofit基本用法</h1><h3 id="2-1添加依赖"><a href="#2-1添加依赖" class="headerlink" title="2.1添加依赖"></a>2.1添加依赖</h3><pre class=" language-groovy"><code class="language-groovy">    implementation <span class="token string">'com.squareup.retrofit2:retrofit:2.6.1'</span>    implementation <span class="token string">'com.squareup.retrofit2:converter-gson:2.6.1'</span></code></pre><h2 id="2-2-编写gson实体类"><a href="#2-2-编写gson实体类" class="headerlink" title="2.2.编写gson实体类"></a>2.2.编写gson实体类</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> version<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><h2 id="2-3创建接口"><a href="#2-3创建接口" class="headerlink" title="2.3创建接口"></a>2.3创建接口</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> AppService &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 使用get请求,参数是请求相对地址     * 返回类型是 对应的实体类     */</span>    <span class="token annotation builtin">@GET</span><span class="token punctuation">(</span><span class="token string">"get_data.json"</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">getAppData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">></span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="2-4Activity界面编辑"><a href="#2-4Activity界面编辑" class="headerlink" title="2.4Activity界面编辑"></a>2.4Activity界面编辑</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/getAppDataBtn<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Get App Data<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-4 开源网络封装库Retofit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-3 封装网络请求</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-3-feng-zhuang-wang-luo-qing-qiu/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-3-feng-zhuang-wang-luo-qing-qiu/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HttpURLConnection网络封装"><a href="#1-HttpURLConnection网络封装" class="headerlink" title="1.HttpURLConnection网络封装"></a>1.HttpURLConnection网络封装</h1><ol><li><p>定义接口</p></li><li><p>编写工具类</p></li><li><p>测试应用</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/** * 创建http回调接口 */</span><span class="token keyword">interface</span> HttpCallbackListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//服务器成功响应</span>    <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span>response<span class="token operator">:</span> String<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//服务器响应失败</span>    <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> HttpUtil &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">fun</span> <span class="token function">sendHttpRequest</span><span class="token punctuation">(</span>address<span class="token operator">:</span> String<span class="token punctuation">,</span> listener<span class="token operator">:</span> HttpCallbackListener<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        thread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> connection<span class="token operator">:</span> HttpURLConnection<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>                connection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HttpURLConnection                connection<span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> <span class="token number">8000</span>                connection<span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> <span class="token number">8000</span>                <span class="token keyword">val</span> input <span class="token operator">=</span> connection<span class="token punctuation">.</span>inputStream                <span class="token keyword">val</span> reader <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>                reader<span class="token punctuation">.</span>use &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    reader<span class="token punctuation">.</span>forEachLine &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 回调onFinish()方法</span>                listener<span class="token punctuation">.</span><span class="token function">onFinish</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 回调onError()方法</span>                listener<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                connection<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建一个新的协程运行</span>    runBlocking &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">getBaiduResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>suspend <span class="token keyword">fun</span> <span class="token function">getBaiduResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 得到服务器返回的具体内容</span>        <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在这里对异常情况进行处理</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span>suspend <span class="token keyword">fun</span> <span class="token function">request</span><span class="token punctuation">(</span>address<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> suspendCoroutine &amp;#<span class="token number">123</span><span class="token punctuation">;</span> continuation <span class="token operator">-></span>        HttpUtil<span class="token punctuation">.</span><span class="token function">sendHttpRequest</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token keyword">object</span> <span class="token operator">:</span>            HttpCallbackListener &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFinish</span><span class="token punctuation">(</span>response<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                continuation<span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onError</span><span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                continuation<span class="token punctuation">.</span><span class="token function">resumeWithException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="2-Okhttp网络封装"><a href="#2-Okhttp网络封装" class="headerlink" title="2.Okhttp网络封装"></a>2.Okhttp网络封装</h1><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/**     * callback: okhttp3.Callback: okhttp自带的回调接口     */</span>    <span class="token keyword">fun</span> <span class="token function">sendOkHttpRequest</span><span class="token punctuation">(</span>address<span class="token operator">:</span> String<span class="token punctuation">,</span> callback<span class="token operator">:</span> okhttp3<span class="token punctuation">.</span>Callback<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin">HttpUtil<span class="token punctuation">.</span><span class="token function">sendOkHttpRequest</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span><span class="token keyword">object</span> <span class="token operator">:</span>Callback&amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFailure</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//处理异常数据</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResponse</span><span class="token punctuation">(</span>call<span class="token operator">:</span> Call<span class="token punctuation">,</span> response<span class="token operator">:</span> Response<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//得到服务器返回的具体内容</span>            <span class="token keyword">val</span> reponseData<span class="token operator">=</span>response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-3 封装网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-2网络访问-数据格式</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-2-wang-luo-fang-wen-shu-ju-ge-shi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-2-wang-luo-fang-wen-shu-ju-ge-shi/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-创建一个本地简单的服务器"><a href="#1-创建一个本地简单的服务器" class="headerlink" title="1.创建一个本地简单的服务器"></a>1.创建一个本地简单的服务器</h1><p>apache服务器: <a href="https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14">https://www.apachehaus.com/cgi-bin/download.plx#APACHELEVC14</a></p><h1 id="2-解析XML格式数据"><a href="#2-解析XML格式数据" class="headerlink" title="2.解析XML格式数据"></a>2.解析XML格式数据</h1><ol><li>在桌面编写一个get_data.xml文件</li><li>请求网络代码</li><li>解析xml</li><li>由于android9开始不支持http请求,默认是https,需要配置,创建res/xml/network_config.xml</li><li>声明权限</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>apps</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Google Maps<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Chrom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>app</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Google Play<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>app</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>apps</span><span class="token punctuation">></span></span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">sendRequestWithOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        thread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1. 获取okhttp实例</span>                <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//2. 设置请求参数</span>                <span class="token comment" spellcheck="true">//post请求(可选)</span>                <span class="token keyword">val</span> requestBody<span class="token operator">=</span>FormBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//.url("https://www.baidu.com")</span>                        <span class="token comment" spellcheck="true">//读取本地服务器文件</span>                    <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"http://192.168.2.228/get_data.xml"</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//.post(requestBody)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//3. 获取服务器返回的数据</span>                <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> responseData <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>responseData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//showResponse(responseData)</span>                    <span class="token comment" spellcheck="true">//解析xml数据</span>                    <span class="token function">parseXMLWithPull</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/**     * 解析xml数据格式     * Pull方式     */</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">parseXMLWithPull</span><span class="token punctuation">(</span>xmlData<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1. 创建XmlPullParserFactory实例,获取XmlPullParser对象</span>            <span class="token keyword">val</span> factory <span class="token operator">=</span> XmlPullParserFactory<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">val</span> xmlPullParser <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newPullParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2. 将服务器返回的XML设置进去,开始解析</span>            xmlPullParser<span class="token punctuation">.</span><span class="token function">setInput</span><span class="token punctuation">(</span><span class="token function">StringReader</span><span class="token punctuation">(</span>xmlData<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//3. 得到当前解析事件</span>            <span class="token keyword">var</span> eventType <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span>eventType            <span class="token keyword">var</span> id <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">""</span>            <span class="token keyword">var</span> version <span class="token operator">=</span> <span class="token string">""</span>            <span class="token comment" spellcheck="true">//4. 遍历解析事件</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>eventType <span class="token operator">!=</span> XmlPullParser<span class="token punctuation">.</span>END_DOCUMENT<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">val</span> nodeName <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span>name                <span class="token keyword">when</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//4.1 开始解析某个节点</span>                    XmlPullParser<span class="token punctuation">.</span>START_TAG <span class="token operator">-></span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">when</span> <span class="token punctuation">(</span>nodeName<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//如果节点名等于id name version 就调用nextText()获取节点内容</span>                            <span class="token string">"id"</span> <span class="token operator">-></span> id <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span><span class="token function">nextText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token string">"name"</span> <span class="token operator">-></span> name <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span><span class="token function">nextText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token string">"version"</span> <span class="token operator">-></span> version <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span><span class="token function">nextText</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//4.2 完成解析某个节点,打印节点内容</span>                    XmlPullParser<span class="token punctuation">.</span>END_TAG <span class="token operator">-></span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"app"</span> <span class="token operator">==</span> nodeName<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"id is <span class="token interpolation variable">$id</span>"</span><span class="token punctuation">)</span>                            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"name is <span class="token interpolation variable">$name</span>"</span><span class="token punctuation">)</span>                            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"version is <span class="token interpolation variable">$version</span>"</span><span class="token punctuation">)</span>                        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                eventType <span class="token operator">=</span> xmlPullParser<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trust-anchors</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>certificates</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>system<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trust-anchors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.example.networktest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    声明网络权限--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span>        <span class="token attr-name"><span class="token namespace">android:</span>allowBackup</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>icon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/app_name<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>roundIcon</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/ic_launcher_round<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>supportsRtl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>theme</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@style/AppTheme<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>networkSecurityConfig</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@xml/network_config<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--        设置http请求--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activity</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.MainActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>intent-filter</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.action.MAIN<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>category</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.intent.category.LAUNCHER<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>intent-filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span></code></pre><p><img src="images/3-2%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE-%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F/image-20200729223542261.png" alt="image-20200729223542261"></p><h1 id="3-解析JSON格式数据"><a href="#3-解析JSON格式数据" class="headerlink" title="3.解析JSON格式数据"></a>3.解析JSON格式数据</h1><ol><li>在htdocs目录下创建一个get_data.json文件</li><li>编写解析代码</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"5.5"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Clash of Clans"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"7.0"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Boom Beach"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"3.5"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Clash Royale"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/**     * 使用官方提供的JsonObject     */</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">parseJSONWithJSONObject</span><span class="token punctuation">(</span>jsonData<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1. 获取jsonarray,进行循环解析</span>            <span class="token keyword">val</span> jsonArray <span class="token operator">=</span> <span class="token function">JSONArray</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//2. 如果循环中不要最后一个范围区间的值可以使用 until 函数:</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until jsonArray<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">val</span> jsonObject <span class="token operator">=</span> jsonArray<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                <span class="token keyword">val</span> id <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> name <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> version <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"id is <span class="token interpolation variable">$id</span>"</span><span class="token punctuation">)</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"name is <span class="token interpolation variable">$name</span>"</span><span class="token punctuation">)</span>                Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"version is <span class="token interpolation variable">$version</span>"</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h1 id="4-优化解析-使用GSON开源库"><a href="#4-优化解析-使用GSON开源库" class="headerlink" title="4.优化解析,使用GSON开源库"></a>4.优化解析,使用GSON开源库</h1><h2 id="1-导入gson依赖"><a href="#1-导入gson依赖" class="headerlink" title="1.导入gson依赖"></a>1.导入gson依赖</h2><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.google.code.gson:gson:2.8.5'</span></code></pre><p>一段json数据</p><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> gson<span class="token operator">=</span><span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">val</span> person<span class="token operator">=</span>gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>jsonData<span class="token punctuation">,</span>Person<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></code></pre><p>解析json数组</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"5.5"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Clash of Clans"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"7.0"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Boom Beach"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    &amp;#<span class="token number">123</span><span class="token punctuation">;</span><span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token property">"version"</span><span class="token operator">:</span><span class="token string">"3.5"</span><span class="token punctuation">,</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"Clash Royale"</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">]</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> typeOf <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeToken<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>type        <span class="token keyword">val</span> appList <span class="token operator">=</span> gson<span class="token punctuation">.</span>fromJson<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>jsonData<span class="token punctuation">,</span> typeOf<span class="token punctuation">)</span></code></pre><h2 id="2-根据gson格式-编写实体类"><a href="#2-根据gson格式-编写实体类" class="headerlink" title="2.根据gson格式,编写实体类,"></a>2.根据gson格式,编写实体类,</h2><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token keyword">val</span> id<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> version<span class="token operator">:</span> String<span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">/**     * 利用Gson解析json数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">parseJSONWithGSON</span><span class="token punctuation">(</span>jsonData<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1. 获取gson实例</span>        <span class="token keyword">val</span> gson <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//2. 设置gson数据格式</span>        <span class="token keyword">val</span> typeOf <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> TypeToken<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">.</span>type        <span class="token keyword">val</span> appList <span class="token operator">=</span> gson<span class="token punctuation">.</span>fromJson<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span>jsonData<span class="token punctuation">,</span> typeOf<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//3. 循环遍历jsonarray数据</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>app <span class="token keyword">in</span> appList<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"id is $&amp;#123;app.id&amp;#125;"</span><span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"name is $&amp;#123;app.name&amp;#125;"</span><span class="token punctuation">)</span>            Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">"MainActivity"</span><span class="token punctuation">,</span> <span class="token string">"version is $&amp;#123;app.version&amp;#125;"</span><span class="token punctuation">)</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-2网络访问-数据格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-2-1安装Apache服务器</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-2-1-an-zhuang-apache-fu-wu-qi/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-2-1-an-zhuang-apache-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="打开Apache文件夹："><a href="#打开Apache文件夹：" class="headerlink" title="打开Apache文件夹："></a>打开Apache文件夹：</h1><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116191738802-1520378758.png" alt="img"></p><h1 id="打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置："><a href="#打开conf文件夹下的：httpd-conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：" class="headerlink" title="打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置："></a>打开conf文件夹下的：httpd.conf文件，将Apache的目录位置修改为当前你Apache安装存放的位置：</h1><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192340009-252139911.png" alt="img"></p><h1 id="在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存"><a href="#在cmd命令下输入：netstat-a，查看80端口是否被占用，如果被占用，将：httpd-conf文件中的80端口改为其他端口后保存" class="headerlink" title="在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存"></a>在cmd命令下输入：netstat -a，查看80端口是否被占用，如果被占用，将：httpd.conf文件中的80端口改为其他端口后保存</h1><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116192853889-223879327.png" alt="img"></p><h1 id="配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了："><a href="#配置安装Apache的主服务，在cmd中输入：”E-Apache-2-4-37-Apache-bin-httpd-exe”-k-install-n-apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os-5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：" class="headerlink" title="配置安装Apache的主服务，在cmd中输入：”E:\Apache-2.4.37\Apache\bin\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了："></a>配置安装Apache的主服务，在cmd中输入：”E:\Apache-2.4.37\Apache\bin\httpd.exe” -k install -n apache，注意一定要加引号，然后回车，如果出现如下信息，说明配置成功了，如果出现：“os 5拒绝访问”的错误，说明是你的管理权限限制，这个时候关闭cmd，然后重新以管理员身份运行cmd，再进行上一步操作，问题就能解决了：</h1><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193655296-284734092.png" alt="img"></p><h1 id="启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。"><a href="#启动Apache服务：双击bin目录下的：ApacheMonitor-exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。" class="headerlink" title="启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。"></a>启动Apache服务：双击bin目录下的：ApacheMonitor.exe，然后会在电脑右下角出现它的显示符号，双击这个符号，在弹出的窗口中点击start就行了。</h1><p>　　注意：关闭Apache服务点击stop来关闭，当然也可以Windows系统来关闭</p><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116193905150-1782682408.png" alt="img"> </p><p> <img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194605315-1293110702.png" alt="img"></p><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116194636633-1358003770.png" alt="img"></p><h1 id="打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了"><a href="#打开浏览器，在网址栏输入：127-0-0-1-或者：http-localhost-，出现如下界面就表示配置成功了" class="headerlink" title="打开浏览器，在网址栏输入：127.0.0.1(或者：http://localhost)，出现如下界面就表示配置成功了"></a>打开浏览器，在网址栏输入：127.0.0.1(或者：<a href="http://localhost),出现如下界面就表示配置成功了/">http://localhost)，出现如下界面就表示配置成功了</a></h1><p><img src="https://img2018.cnblogs.com/blog/1505274/201901/1505274-20190116195213945-320211796.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-2-1安装Apache服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-1网络访问</title>
      <link href="/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-1-wang-luo-fang-wen/"/>
      <url>/hexo.github.io/2020/08/03/sui-xin-ji/android-xue-xi/3-1-wang-luo-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-WebView的用法"><a href="#1-WebView的用法" class="headerlink" title="1.WebView的用法"></a>1.WebView的用法</h1><blockquote><p>WevView是andorid控件,可以显示简单的网页</p></blockquote><ol><li>编写main.xml界面</li><li>关键代码</li><li>添加AndroidMainifest.xml权限</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WebView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/webView<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">//设置一些浏览器属性,支持JavaScript脚本</span>        webView<span class="token punctuation">.</span>settings<span class="token punctuation">.</span><span class="token function">setJavaScriptEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取实例,设置url</span>        webView<span class="token punctuation">.</span>webViewClient <span class="token operator">=</span> <span class="token function">WebViewClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        webView<span class="token punctuation">.</span><span class="token function">loadUrl</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img src="images/3-1%E7%BD%91%E7%BB%9C%E8%AE%BF%E9%97%AE/image-20200729175044618.png" alt="image-20200729175044618"></p><h1 id="2-使用HttpURLConnection"><a href="#2-使用HttpURLConnection" class="headerlink" title="2.使用HttpURLConnection"></a>2.使用HttpURLConnection</h1><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">sendRequestWithHttpURLConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启线程来发起网络请求</span>        thread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> connection<span class="token operator">:</span> HttpURLConnection<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//1. 创建url,获取HttpURLConnection实例</span>                <span class="token keyword">val</span> url <span class="token operator">=</span> <span class="token function">URL</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>                connection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HttpURLConnection                <span class="token comment" spellcheck="true">//2. 设置请求方式,连接超时,读取时间</span>                connection<span class="token punctuation">.</span>requestMethod<span class="token operator">=</span><span class="token string">"GET"</span>                connection<span class="token punctuation">.</span>connectTimeout <span class="token operator">=</span> <span class="token number">8000</span>                connection<span class="token punctuation">.</span>readTimeout <span class="token operator">=</span> <span class="token number">8000</span>                <span class="token comment" spellcheck="true">//3. 获取服务器返回的输入流</span>                <span class="token keyword">val</span> input <span class="token operator">=</span> connection<span class="token punctuation">.</span>inputStream                <span class="token comment" spellcheck="true">// 下面对获取到的输入流进行读取</span>                <span class="token keyword">val</span> reader <span class="token operator">=</span> <span class="token function">BufferedReader</span><span class="token punctuation">(</span><span class="token function">InputStreamReader</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span>                reader<span class="token punctuation">.</span>use &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    reader<span class="token punctuation">.</span>forEachLine &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                        response<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>                    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token function">showResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                connection<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>response<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        runOnUiThread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在这里进行UI操作，将结果显示到界面上</span>            responseText<span class="token punctuation">.</span>text <span class="token operator">=</span> response        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h2 id="post请求设置"><a href="#post请求设置" class="headerlink" title="post请求设置"></a>post请求设置</h2><pre class=" language-kotlin"><code class="language-kotlin">connection<span class="token punctuation">.</span>requestMethod<span class="token operator">=</span><span class="token string">"POST"</span>                <span class="token keyword">val</span> output<span class="token operator">=</span><span class="token function">DataOutputStream</span><span class="token punctuation">(</span>connection<span class="token punctuation">.</span>outputStream<span class="token punctuation">)</span>                output<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>                output<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"username=admin&amp;password=123456"</span><span class="token punctuation">)</span></code></pre><h1 id="3-使用OkHttp-推荐"><a href="#3-使用OkHttp-推荐" class="headerlink" title="3.使用OkHttp(推荐)"></a>3.使用OkHttp(推荐)</h1><p>首选的android开源网络通信库 github:<a href="https://square.github.io/okhttp/">https://square.github.io/okhttp/</a></p><ol><li>添加依赖</li><li>关键代码</li><li>添加权限</li></ol><pre class=" language-groovy"><code class="language-groovy"><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string">"com.squareup.okhttp3:okhttp:4.8.0"</span><span class="token punctuation">)</span></code></pre><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">sendRequestWithOkHttp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        thread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1. 获取okhttp实例</span>                <span class="token keyword">val</span> client <span class="token operator">=</span> <span class="token function">OkHttpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//2. 设置请求参数</span>                <span class="token comment" spellcheck="true">//post请求(可选)</span>                <span class="token keyword">val</span> requestBody<span class="token operator">=</span>FormBody<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//.post(requestBody)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//3. 获取服务器返回的数据</span>                <span class="token keyword">val</span> response <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">val</span> responseData <span class="token operator">=</span> response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>responseData <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token function">showResponse</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span>                &amp;#<span class="token number">125</span><span class="token punctuation">;</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            &amp;#<span class="token number">125</span><span class="token punctuation">;</span>        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">showResponse</span><span class="token punctuation">(</span>response<span class="token operator">:</span> String<span class="token punctuation">)</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>        runOnUiThread &amp;#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在这里进行UI操作，将结果显示到界面上</span>            responseText<span class="token punctuation">.</span>text <span class="token operator">=</span> response        &amp;#<span class="token number">125</span><span class="token punctuation">;</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>android.permission.INTERNET<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3-1网络访问 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
